
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ab0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b50  0802ace0  0802ace0  0003ace0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000005c  0802f830  0802f830  0003f830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802f88c  0802f88c  00103e7c  2**0
                  CONTENTS
  5 .ARM          00000008  0802f88c  0802f88c  0003f88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802f894  0802f894  00103e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802f894  0802f894  0003f894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802f8b0  0802f8b0  0003f8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  0802f8b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015390  20000124  0802f9dc  00040124  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  200154b4  0802f9dc  000454b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00103e7c  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00110000  2**2
                  ALLOC
 14 ExtFlashSection 000b3280  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00000b30  900b3280  900b3280  00103280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000cc  900b3db0  900b3db0  00103db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000eab7c  00000000  00000000  00103eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001a1ec  00000000  00000000  001eea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003470  00000000  00000000  00208c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005d68  00000000  00000000  0020c088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003a31d  00000000  00000000  00211df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00075621  00000000  00000000  0024c10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0012b801  00000000  00000000  002c172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  003ecf2f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a25c  00000000  00000000  003ed000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    000520f9  00000000  00000000  003f725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802acc4 	.word	0x0802acc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802acc4 	.word	0x0802acc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f008 b8c8 	b.w	8008f88 <vTaskSetApplicationTaskTag>
 8000df8:	08001ebd 	.word	0x08001ebd

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f006 fac2 	bl	8007388 <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <SystemClock_Config>:
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	a80a      	add	r0, sp, #40	; 0x28
 8000e14:	f028 fd56 	bl	80298c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f028 fd51 	bl	80298c4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SystemClock_Config+0x94>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e68:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f005 fa4a 	bl	8006304 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f004 fef6 	bl	8005c60 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e78:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e82:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	f005 fc25 	bl	80066dc <HAL_RCC_ClockConfig>
}
 8000e92:	b014      	add	sp, #80	; 0x50
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <main>:
{
 8000ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ea4:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eaa:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eac:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eae:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	f028 fd07 	bl	80298c4 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb6:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000eb8:	f003 fe26 	bl	8004b08 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ebc:	4bc7      	ldr	r3, [pc, #796]	; (80011dc <main+0x33c>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec4:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ec6:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	f003 fe3b 	bl	8004b44 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ece:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ed6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eda:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ede:	f003 fe31 	bl	8004b44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f003 fe1e 	bl	8004b24 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ef0:	4abb      	ldr	r2, [pc, #748]	; (80011e0 <main+0x340>)
 8000ef2:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f0e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f26:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f2c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f2e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f38:	d2f9      	bcs.n	8000f2e <main+0x8e>
    } while(sets-- != 0U);
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	f113 0f20 	cmn.w	r3, #32
 8000f40:	d1f2      	bne.n	8000f28 <main+0x88>
 8000f42:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f56:	f003 fd3b 	bl	80049d0 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f5c:	f7ff ff54 	bl	8000e08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a80d      	add	r0, sp, #52	; 0x34
 8000f66:	f028 fcad 	bl	80298c4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b9e      	ldr	r3, [pc, #632]	; (80011e4 <main+0x344>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	489e      	ldr	r0, [pc, #632]	; (80011e8 <main+0x348>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2701      	movs	r7, #1
 8000f74:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f80:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f84:	4d99      	ldr	r5, [pc, #612]	; (80011ec <main+0x34c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f86:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8e:	4e98      	ldr	r6, [pc, #608]	; (80011f0 <main+0x350>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	f002 0210 	and.w	r2, r2, #16
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f002 0202 	and.w	r2, r2, #2
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9204      	str	r2, [sp, #16]
 8000fba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fdc:	9206      	str	r2, [sp, #24]
 8000fde:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0208 	and.w	r2, r2, #8
 8000fee:	9207      	str	r2, [sp, #28]
 8000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001000:	9208      	str	r2, [sp, #32]
 8001002:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f002 0220 	and.w	r2, r2, #32
 8001012:	9209      	str	r2, [sp, #36]	; 0x24
 8001014:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001024:	920a      	str	r2, [sp, #40]	; 0x28
 8001026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	920b      	str	r2, [sp, #44]	; 0x2c
 8001038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	930c      	str	r3, [sp, #48]	; 0x30
 800104c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	f004 f8d3 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4867      	ldr	r0, [pc, #412]	; (80011f4 <main+0x354>)
 8001058:	f004 f8ce 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4865      	ldr	r0, [pc, #404]	; (80011f8 <main+0x358>)
 8001064:	f004 f8c8 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4863      	ldr	r0, [pc, #396]	; (80011fc <main+0x35c>)
 800106e:	f004 f8c3 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4862      	ldr	r0, [pc, #392]	; (8001200 <main+0x360>)
 8001078:	f004 f8be 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	a90d      	add	r1, sp, #52	; 0x34
 800107e:	485a      	ldr	r0, [pc, #360]	; (80011e8 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f003 ff2a 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800108c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90d      	add	r1, sp, #52	; 0x34
 8001090:	4858      	ldr	r0, [pc, #352]	; (80011f4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f003 ff21 	bl	8004ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	a90d      	add	r1, sp, #52	; 0x34
 80010a0:	4855      	ldr	r0, [pc, #340]	; (80011f8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f003 ff19 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010ae:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	a90d      	add	r1, sp, #52	; 0x34
 80010b2:	4852      	ldr	r0, [pc, #328]	; (80011fc <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f003 ff10 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010c0:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a90d      	add	r1, sp, #52	; 0x34
 80010c4:	484e      	ldr	r0, [pc, #312]	; (8001200 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f003 ff07 	bl	8004ee0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d2:	484c      	ldr	r0, [pc, #304]	; (8001204 <main+0x364>)
 80010d4:	494c      	ldr	r1, [pc, #304]	; (8001208 <main+0x368>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010d8:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010dc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	f003 fd5c 	bl	8004b9c <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010e4:	4949      	ldr	r1, [pc, #292]	; (800120c <main+0x36c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e6:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010e8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ec:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f0:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010f4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010f8:	f003 fdf2 	bl	8004ce0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010fc:	4639      	mov	r1, r7
 80010fe:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001100:	4d43      	ldr	r5, [pc, #268]	; (8001210 <main+0x370>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001102:	f003 fea5 	bl	8004e50 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4941      	ldr	r1, [pc, #260]	; (8001214 <main+0x374>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110e:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001110:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001114:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001116:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800111e:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001122:	f04f 0a02 	mov.w	sl, #2
 8001126:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001128:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800112c:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800112e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001132:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001136:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800113a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800113e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	f005 fe21 	bl	8006d88 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001146:	4629      	mov	r1, r5
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800114e:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001150:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001154:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001158:	f005 fe36 	bl	8006dc8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800115c:	4638      	mov	r0, r7
 800115e:	f003 fc5b 	bl	8004a18 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001162:	4629      	mov	r1, r5
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800116a:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800116e:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001172:	f005 fe29 	bl	8006dc8 <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 8001176:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001178:	4629      	mov	r1, r5
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001180:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001184:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001188:	f005 fe1e 	bl	8006dc8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001196:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001198:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800119a:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 800119c:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800119e:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a0:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f005 fe10 	bl	8006dc8 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80011ac:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011ae:	4d1a      	ldr	r5, [pc, #104]	; (8001218 <main+0x378>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011b0:	f005 fe29 	bl	8006e06 <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 80011bc:	2064      	movs	r0, #100	; 0x64
  hltdc.Init.AccumulatedActiveH = 283;
 80011be:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c2:	601a      	str	r2, [r3, #0]
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 80011c4:	f003 fc28 	bl	8004a18 <HAL_Delay>
  hi2c3.Init.Timing = 0x20404768;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <main+0x37c>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <main+0x380>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011cc:	4628      	mov	r0, r5
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011d0:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	e9c5 4702 	strd	r4, r7, [r5, #8]
 80011d8:	e024      	b.n	8001224 <main+0x384>
 80011da:	bf00      	nop
 80011dc:	0300001b 	.word	0x0300001b
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400
 80011ec:	2000017c 	.word	0x2000017c
 80011f0:	20000304 	.word	0x20000304
 80011f4:	40022800 	.word	0x40022800
 80011f8:	40022000 	.word	0x40022000
 80011fc:	40020800 	.word	0x40020800
 8001200:	40021800 	.word	0x40021800
 8001204:	20000158 	.word	0x20000158
 8001208:	40023000 	.word	0x40023000
 800120c:	4002b000 	.word	0x4002b000
 8001210:	20000140 	.word	0x20000140
 8001214:	a0000140 	.word	0xa0000140
 8001218:	200001bc 	.word	0x200001bc
 800121c:	20404768 	.word	0x20404768
 8001220:	40005c00 	.word	0x40005c00
  hi2c3.Init.OwnAddress2 = 0;
 8001224:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800122c:	f004 f90d 	bl	800544a <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
 8001234:	f004 fb2c 	bl	8005890 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001238:	4621      	mov	r1, r4
 800123a:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 800123c:	4d3e      	ldr	r5, [pc, #248]	; (8001338 <main+0x498>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800123e:	f004 fb4d 	bl	80058dc <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001242:	2234      	movs	r2, #52	; 0x34
 8001244:	4621      	mov	r1, r4
 8001246:	eb0d 0002 	add.w	r0, sp, r2
 800124a:	f028 fb3b 	bl	80298c4 <memset>
  hltdc.Instance = LTDC;
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <main+0x49c>)
  hltdc.Init.VerticalSync = 9;
 8001250:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8001252:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 8001254:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001258:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800125a:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 800125c:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001260:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8001264:	2309      	movs	r3, #9
 8001266:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 800126a:	230b      	movs	r3, #11
 800126c:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001270:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001274:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8001276:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 800127a:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800127e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8001282:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001286:	f004 fbd5 	bl	8005a34 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800128a:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800128c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8001290:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8001294:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001298:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 800129a:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 800129c:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800129e:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 80012a2:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 80012a6:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012aa:	2105      	movs	r1, #5
 80012ac:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012b4:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012b8:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012bc:	4622      	mov	r2, r4
 80012be:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012c0:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012c4:	f004 fc81 	bl	8005bca <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012c8:	481d      	ldr	r0, [pc, #116]	; (8001340 <main+0x4a0>)
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <main+0x4a4>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012cc:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012ce:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012d2:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012d6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012da:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012de:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012e2:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012e6:	f004 fdcb 	bl	8005e80 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012ea:	f003 f9ef 	bl	80046cc <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012ee:	f003 f933 	bl	8004558 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012f2:	205c      	movs	r0, #92	; 0x5c
 80012f4:	f003 fbf4 	bl	8004ae0 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012f8:	f000 fb5e 	bl	80019b8 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012fc:	f000 fb88 	bl	8001a10 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001300:	f000 fb85 	bl	8001a0e <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001304:	f005 ffb0 	bl	8007268 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <main+0x4a8>)
 800130a:	4621      	mov	r1, r4
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <main+0x4ac>)
 800130e:	f005 ffe5 	bl	80072dc <osThreadNew>
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <main+0x4b0>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <main+0x4b4>)
 8001316:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001318:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800131a:	480f      	ldr	r0, [pc, #60]	; (8001358 <main+0x4b8>)
 800131c:	f005 ffde 	bl	80072dc <osThreadNew>
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <main+0x4bc>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <main+0x4c0>)
 8001324:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001326:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <main+0x4c4>)
 800132a:	f005 ffd7 	bl	80072dc <osThreadNew>
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <main+0x4c8>)
 8001330:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001332:	f005 ffb3 	bl	800729c <osKernelStart>
  while (1)
 8001336:	e7fe      	b.n	8001336 <main+0x496>
 8001338:	20000210 	.word	0x20000210
 800133c:	40016800 	.word	0x40016800
 8001340:	200002b8 	.word	0x200002b8
 8001344:	a0001000 	.word	0xa0001000
 8001348:	0802ad68 	.word	0x0802ad68
 800134c:	08000dfd 	.word	0x08000dfd
 8001350:	20000154 	.word	0x20000154
 8001354:	0802ad44 	.word	0x0802ad44
 8001358:	08001a1f 	.word	0x08001a1f
 800135c:	20000150 	.word	0x20000150
 8001360:	0802ad8c 	.word	0x0802ad8c
 8001364:	080032a9 	.word	0x080032a9
 8001368:	20000338 	.word	0x20000338

0800136c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800136c:	6802      	ldr	r2, [r0, #0]
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001370:	429a      	cmp	r2, r3
 8001372:	d101      	bne.n	8001378 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001374:	f003 bb3e 	b.w	80049f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40001000 	.word	0x40001000

08001380 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001380:	4770      	bx	lr
	...

08001384 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_MspInit+0x38>)
{
 8001386:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001388:	210f      	movs	r1, #15
 800138a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001390:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
 8001396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001398:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a8:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b6:	f003 bb53 	b.w	8004a60 <HAL_NVIC_SetPriority>
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013c0:	6802      	ldr	r2, [r0, #0]
{
 80013c2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_CRC_MspInit+0x28>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d10b      	bne.n	80013e2 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ca:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013e2:	b002      	add	sp, #8
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023000 	.word	0x40023000

080013ec <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_DMA2D_MspInit+0x3c>)
{
 80013ee:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013f0:	6802      	ldr	r2, [r0, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d115      	bne.n	8001422 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f6:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fa:	2105      	movs	r1, #5
 80013fc:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001406:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001412:	f003 fb25 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001416:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001418:	b003      	add	sp, #12
 800141a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800141e:	f003 bb51 	b.w	8004ac4 <HAL_NVIC_EnableIRQ>
}
 8001422:	b003      	add	sp, #12
 8001424:	f85d fb04 	ldr.w	pc, [sp], #4
 8001428:	4002b000 	.word	0x4002b000

0800142c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b510      	push	{r4, lr}
 800142e:	b0a8      	sub	sp, #160	; 0xa0
 8001430:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	2214      	movs	r2, #20
 8001434:	2100      	movs	r1, #0
 8001436:	a802      	add	r0, sp, #8
 8001438:	f028 fa44 	bl	80298c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	2284      	movs	r2, #132	; 0x84
 800143e:	2100      	movs	r1, #0
 8001440:	a807      	add	r0, sp, #28
 8001442:	f028 fa3f 	bl	80298c4 <memset>
  if(hi2c->Instance==I2C3)
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_I2C_MspInit+0x7c>)
 800144a:	429a      	cmp	r2, r3
 800144c:	d12a      	bne.n	80014a4 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001454:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f005 fa0f 	bl	8006878 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	b108      	cbz	r0, 8001460 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 800145c:	f7ff ff90 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001460:	4c12      	ldr	r4, [pc, #72]	; (80014ac <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6323      	str	r3, [r4, #48]	; 0x30
 8001472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001488:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800148a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800148c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800148e:	f003 fd27 	bl	8004ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001494:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001498:	6423      	str	r3, [r4, #64]	; 0x40
 800149a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800149c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014a4:	b028      	add	sp, #160	; 0xa0
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	40005c00 	.word	0x40005c00
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021c00 	.word	0x40021c00

080014b4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014b4:	6802      	ldr	r2, [r0, #0]
{
 80014b6:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_I2C_MspDeInit+0x2c>)
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d10f      	bne.n	80014de <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014cc:	f003 fdec 	bl	80050a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014da:	f003 bde5 	b.w	80050a8 <HAL_GPIO_DeInit>
}
 80014de:	bd08      	pop	{r3, pc}
 80014e0:	40005c00 	.word	0x40005c00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021c00 	.word	0x40021c00

080014ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	b0ac      	sub	sp, #176	; 0xb0
 80014f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	2214      	movs	r2, #20
 80014f4:	2100      	movs	r1, #0
 80014f6:	a806      	add	r0, sp, #24
 80014f8:	f028 f9e4 	bl	80298c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014fc:	2284      	movs	r2, #132	; 0x84
 80014fe:	2100      	movs	r1, #0
 8001500:	a80b      	add	r0, sp, #44	; 0x2c
 8001502:	f028 f9df 	bl	80298c4 <memset>
  if(hltdc->Instance==LTDC)
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_LTDC_MspInit+0x140>)
 800150a:	429a      	cmp	r2, r3
 800150c:	f040 808c 	bne.w	8001628 <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001510:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001512:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001514:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001516:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001518:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800151c:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001528:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800152a:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f005 f9a3 	bl	8006878 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	b108      	cbz	r0, 8001538 <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff ff24 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800153e:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001542:	a906      	add	r1, sp, #24
 8001544:	483b      	ldr	r0, [pc, #236]	; (8001634 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001546:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
 800154c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800154e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f042 0210 	orr.w	r2, r2, #16
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
 800155e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001560:	f002 0210 	and.w	r2, r2, #16
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
 8001570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001572:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001576:	9202      	str	r2, [sp, #8]
 8001578:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001584:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001588:	9203      	str	r2, [sp, #12]
 800158a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
 8001594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001596:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800159a:	9204      	str	r2, [sp, #16]
 800159c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	9305      	str	r3, [sp, #20]
 80015ae:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2310      	movs	r3, #16
 80015b2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ba:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015bc:	f003 fc90 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015c0:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015c4:	a906      	add	r1, sp, #24
 80015c6:	481c      	ldr	r0, [pc, #112]	; (8001638 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015d2:	f003 fc85 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015d6:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015d8:	a906      	add	r1, sp, #24
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015dc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015e6:	f003 fc7b 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ee:	a906      	add	r1, sp, #24
 80015f0:	4813      	ldr	r0, [pc, #76]	; (8001640 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f6:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015fc:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	f003 fc6f 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001602:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001606:	a906      	add	r1, sp, #24
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800160a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001614:	f003 fc64 	bl	8004ee0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001618:	2058      	movs	r0, #88	; 0x58
 800161a:	4622      	mov	r2, r4
 800161c:	2105      	movs	r1, #5
 800161e:	f003 fa1f 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001622:	2058      	movs	r0, #88	; 0x58
 8001624:	f003 fa4e 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001628:	b02c      	add	sp, #176	; 0xb0
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	40016800 	.word	0x40016800
 8001630:	40023800 	.word	0x40023800
 8001634:	40021000 	.word	0x40021000
 8001638:	40022400 	.word	0x40022400
 800163c:	40022800 	.word	0x40022800
 8001640:	40021800 	.word	0x40021800
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	2214      	movs	r2, #20
 800164a:	2100      	movs	r1, #0
{
 800164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001650:	b08a      	sub	sp, #40	; 0x28
 8001652:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	eb0d 0002 	add.w	r0, sp, r2
 8001658:	f028 f934 	bl	80298c4 <memset>
  if(hqspi->Instance==QUADSPI)
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <HAL_QSPI_MspInit+0xc8>)
 8001660:	429a      	cmp	r2, r3
 8001662:	d151      	bne.n	8001708 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001668:	2403      	movs	r4, #3
 800166a:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001672:	a905      	add	r1, sp, #20
 8001674:	4828      	ldr	r0, [pc, #160]	; (8001718 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001676:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
 800167e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001680:	f002 0202 	and.w	r2, r2, #2
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168a:	f042 0210 	orr.w	r2, r2, #16
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
 8001690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001692:	f002 0210 	and.w	r2, r2, #16
 8001696:	9202      	str	r2, [sp, #8]
 8001698:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f042 0202 	orr.w	r2, r2, #2
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
 80016a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a4:	f002 0202 	and.w	r2, r2, #2
 80016a8:	9203      	str	r2, [sp, #12]
 80016aa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	9304      	str	r3, [sp, #16]
 80016bc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016c2:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c6:	f003 fc0b 	bl	8004ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ca:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	a905      	add	r1, sp, #20
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016d4:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016da:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f003 fc00 	bl	8004ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	a905      	add	r1, sp, #20
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016e4:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f003 fbf7 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f6:	a905      	add	r1, sp, #20
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016fa:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f003 fbec 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001708:	b00a      	add	sp, #40	; 0x28
 800170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800170e:	bf00      	nop
 8001710:	a0001000 	.word	0xa0001000
 8001714:	40023800 	.word	0x40023800
 8001718:	40021000 	.word	0x40021000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020c00 	.word	0x40020c00

08001724 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001724:	6802      	ldr	r2, [r0, #0]
{
 8001726:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_QSPI_MspDeInit+0x34>)
 800172a:	429a      	cmp	r2, r3
 800172c:	d113      	bne.n	8001756 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001730:	2104      	movs	r1, #4
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001734:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001736:	f023 0302 	bic.w	r3, r3, #2
 800173a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800173c:	f003 fcb4 	bl	80050a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001740:	2144      	movs	r1, #68	; 0x44
 8001742:	4808      	ldr	r0, [pc, #32]	; (8001764 <HAL_QSPI_MspDeInit+0x40>)
 8001744:	f003 fcb0 	bl	80050a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001748:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800174c:	4806      	ldr	r0, [pc, #24]	; (8001768 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800174e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001752:	f003 bca9 	b.w	80050a8 <HAL_GPIO_DeInit>
}
 8001756:	bd08      	pop	{r3, pc}
 8001758:	a0001000 	.word	0xa0001000
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020c00 	.word	0x40020c00

0800176c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800176e:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001770:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001772:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_SDRAM_MspInit+0xb0>)
 8001776:	681e      	ldr	r6, [r3, #0]
 8001778:	2e00      	cmp	r6, #0
 800177a:	d14d      	bne.n	8001818 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 800177c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001780:	2503      	movs	r5, #3
 8001782:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8001784:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001786:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178a:	4826      	ldr	r0, [pc, #152]	; (8001824 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800178c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017aa:	f003 fb99 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017ae:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b2:	a901      	add	r1, sp, #4
 80017b4:	481c      	ldr	r0, [pc, #112]	; (8001828 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c0:	f003 fb8e 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017c4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	a901      	add	r1, sp, #4
 80017ca:	4818      	ldr	r0, [pc, #96]	; (800182c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f003 fb83 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017da:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017de:	a901      	add	r1, sp, #4
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ec:	f003 fb78 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017f0:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f2:	a901      	add	r1, sp, #4
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001800:	f003 fb6e 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001804:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	a901      	add	r1, sp, #4
 8001808:	480b      	ldr	r0, [pc, #44]	; (8001838 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800180a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f003 fb64 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001818:	b007      	add	sp, #28
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2000033c 	.word	0x2000033c
 8001820:	40023800 	.word	0x40023800
 8001824:	40021000 	.word	0x40021000
 8001828:	40021800 	.word	0x40021800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40021400 	.word	0x40021400
 8001834:	40021c00 	.word	0x40021c00
 8001838:	40020800 	.word	0x40020800

0800183c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_InitTick+0x88>)
 800183e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001840:	f042 0210 	orr.w	r2, r2, #16
{
 8001844:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001848:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 800184c:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184e:	a901      	add	r1, sp, #4
 8001850:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185a:	f004 ffef 	bl	800683c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800185e:	9b06      	ldr	r3, [sp, #24]
 8001860:	bb4b      	cbnz	r3, 80018b6 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001862:	f004 ffdb 	bl	800681c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001866:	4e18      	ldr	r6, [pc, #96]	; (80018c8 <HAL_InitTick+0x8c>)
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_InitTick+0x90>)
 800186a:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800186c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001870:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_InitTick+0x94>)
 8001874:	fbb0 f3f3 	udiv	r3, r0, r3
 8001878:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 800187a:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 800187c:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8001886:	f005 fc2f 	bl	80070e8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800188a:	4604      	mov	r4, r0
 800188c:	b980      	cbnz	r0, 80018b0 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800188e:	4630      	mov	r0, r6
 8001890:	f005 fad2 	bl	8006e38 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001894:	4604      	mov	r4, r0
 8001896:	b958      	cbnz	r0, 80018b0 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001898:	2036      	movs	r0, #54	; 0x36
 800189a:	f003 f913 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	2d0f      	cmp	r5, #15
 80018a0:	d80d      	bhi.n	80018be <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018a2:	4622      	mov	r2, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	2036      	movs	r0, #54	; 0x36
 80018a8:	f003 f8da 	bl	8004a60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_InitTick+0x98>)
 80018ae:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80018b0:	4620      	mov	r0, r4
 80018b2:	b008      	add	sp, #32
 80018b4:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018b6:	f004 ffb1 	bl	800681c <HAL_RCC_GetPCLK1Freq>
 80018ba:	0040      	lsls	r0, r0, #1
 80018bc:	e7d3      	b.n	8001866 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80018be:	2401      	movs	r4, #1
 80018c0:	e7f6      	b.n	80018b0 <HAL_InitTick+0x74>
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	20000340 	.word	0x20000340
 80018cc:	40001000 	.word	0x40001000
 80018d0:	000f4240 	.word	0x000f4240
 80018d4:	2000003c 	.word	0x2000003c

080018d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d8:	4770      	bx	lr

080018da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler>

080018dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler>

080018de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler>

080018e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler>

080018e2 <DebugMon_Handler>:
 80018e2:	4770      	bx	lr

080018e4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e4:	4801      	ldr	r0, [pc, #4]	; (80018ec <TIM6_DAC_IRQHandler+0x8>)
 80018e6:	f005 bae9 	b.w	8006ebc <HAL_TIM_IRQHandler>
 80018ea:	bf00      	nop
 80018ec:	20000340 	.word	0x20000340

080018f0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018f0:	4801      	ldr	r0, [pc, #4]	; (80018f8 <LTDC_IRQHandler+0x8>)
 80018f2:	f004 b90d 	b.w	8005b10 <HAL_LTDC_IRQHandler>
 80018f6:	bf00      	nop
 80018f8:	20000210 	.word	0x20000210

080018fc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018fc:	4801      	ldr	r0, [pc, #4]	; (8001904 <DMA2D_IRQHandler+0x8>)
 80018fe:	f003 ba1d 	b.w	8004d3c <HAL_DMA2D_IRQHandler>
 8001902:	bf00      	nop
 8001904:	2000017c 	.word	0x2000017c

08001908 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001908:	2001      	movs	r0, #1
 800190a:	4770      	bx	lr

0800190c <_kill>:

int _kill(int pid, int sig)
{
 800190c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800190e:	f027 ff7b 	bl	8029808 <__errno>
 8001912:	2316      	movs	r3, #22
 8001914:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
 800191a:	bd08      	pop	{r3, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800191e:	f027 ff73 	bl	8029808 <__errno>
 8001922:	2316      	movs	r3, #22
 8001924:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001926:	e7fe      	b.n	8001926 <_exit+0xa>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	460d      	mov	r5, r1
 800192c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	460e      	mov	r6, r1
 8001930:	1b73      	subs	r3, r6, r5
 8001932:	429c      	cmp	r4, r3
 8001934:	dc01      	bgt.n	800193a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001936:	4620      	mov	r0, r4
 8001938:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	e7f5      	b.n	8001930 <_read+0x8>

08001944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	460d      	mov	r5, r1
 8001948:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	460e      	mov	r6, r1
 800194c:	1b73      	subs	r3, r6, r5
 800194e:	429c      	cmp	r4, r3
 8001950:	dc01      	bgt.n	8001956 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001952:	4620      	mov	r0, r4
 8001954:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001956:	f816 0b01 	ldrb.w	r0, [r6], #1
 800195a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	e7f5      	b.n	800194c <_write+0x8>

08001960 <_close>:

int _close(int file)
{
	return -1;
}
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	4770      	bx	lr

08001966 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800196a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800196c:	604b      	str	r3, [r1, #4]
}
 800196e:	4770      	bx	lr

08001970 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001970:	2001      	movs	r0, #1
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001974:	2000      	movs	r0, #0
 8001976:	4770      	bx	lr

08001978 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <_sbrk+0x30>)
{
 800197a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800197c:	6811      	ldr	r1, [r2, #0]
{
 800197e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001980:	b909      	cbnz	r1, 8001986 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <_sbrk+0x34>)
 8001984:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	6810      	ldr	r0, [r2, #0]
 8001988:	4909      	ldr	r1, [pc, #36]	; (80019b0 <_sbrk+0x38>)
 800198a:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <_sbrk+0x3c>)
 800198c:	4403      	add	r3, r0
 800198e:	1b09      	subs	r1, r1, r4
 8001990:	428b      	cmp	r3, r1
 8001992:	d906      	bls.n	80019a2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001994:	f027 ff38 	bl	8029808 <__errno>
 8001998:	230c      	movs	r3, #12
 800199a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800199c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80019a0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80019a2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80019a4:	e7fc      	b.n	80019a0 <_sbrk+0x28>
 80019a6:	bf00      	nop
 80019a8:	2000038c 	.word	0x2000038c
 80019ac:	200154b8 	.word	0x200154b8
 80019b0:	20050000 	.word	0x20050000
 80019b4:	00000a00 	.word	0x00000a00

080019b8 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80019b8:	4770      	bx	lr
	...

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr  r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e6:	f002 ff09 	bl	80047fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f027 ff25 	bl	8029838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fa57 	bl	8000ea0 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019f8:	0802f8b8 	.word	0x0802f8b8
  ldr  r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a00:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001a04:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001a08:	200154b4 	.word	0x200154b4

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>

08001a0e <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001a0e:	4770      	bx	lr

08001a10 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001a10:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001a12:	f001 f8f3 	bl	8002bfc <touchgfx_components_init>
  touchgfx_init();
}
 8001a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8001a1a:	f001 b87f 	b.w	8002b1c <touchgfx_init>

08001a1e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a1e:	f001 b8ef 	b.w	8002c00 <touchgfx_taskEntry>

08001a22 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001a22:	6840      	ldr	r0, [r0, #4]
    }
 8001a24:	4770      	bx	lr

08001a26 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001a26:	6041      	str	r1, [r0, #4]
    }
 8001a28:	4770      	bx	lr
	...

08001a2c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001a2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a30:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a38:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a40:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a44:	430a      	orrs	r2, r1
 8001a46:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	4770      	bx	lr
 8001a54:	e0001000 	.word	0xe0001000
 8001a58:	c5acce55 	.word	0xc5acce55

08001a5c <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a62:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a66:	4770      	bx	lr

08001a68 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a6a:	6858      	ldr	r0, [r3, #4]
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e0001000 	.word	0xe0001000

08001a74 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a74:	4770      	bx	lr

08001a76 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a76:	b510      	push	{r4, lr}
 8001a78:	4604      	mov	r4, r0
 8001a7a:	210c      	movs	r1, #12
 8001a7c:	f027 fe64 	bl	8029748 <_ZdlPvj>
 8001a80:	4620      	mov	r0, r4
 8001a82:	bd10      	pop	{r4, pc}

08001a84 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a84:	6803      	ldr	r3, [r0, #0]
{
 8001a86:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a88:	691b      	ldr	r3, [r3, #16]
{
 8001a8a:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a8c:	b131      	cbz	r1, 8001a9c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a8e:	4798      	blx	r3
 8001a90:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a92:	6863      	ldr	r3, [r4, #4]
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	4418      	add	r0, r3
 8001a98:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a9a:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a9c:	4798      	blx	r3
 8001a9e:	60a0      	str	r0, [r4, #8]
}
 8001aa0:	e7fb      	b.n	8001a9a <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001aa4 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001aa6:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001aa8:	4a02      	ldr	r2, [pc, #8]	; (8001ab4 <_ZN20STM32TouchController4initEv+0x10>)
 8001aaa:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4718      	bx	r3
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	20000390 	.word	0x20000390

08001ab8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001ab8:	4770      	bx	lr

08001aba <_ZN20STM32TouchControllerD0Ev>:
 8001aba:	b510      	push	{r4, lr}
 8001abc:	4604      	mov	r4, r0
 8001abe:	2104      	movs	r1, #4
 8001ac0:	f027 fe42 	bl	8029748 <_ZdlPvj>
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	bd10      	pop	{r4, pc}

08001ac8 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001aca:	4e0e      	ldr	r6, [pc, #56]	; (8001b04 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 8001acc:	460d      	mov	r5, r1
 8001ace:	4614      	mov	r4, r2
    if (tsDriver)
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	b913      	cbnz	r3, 8001ada <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 8001ad4:	2000      	movs	r0, #0
}
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2070      	movs	r0, #112	; 0x70
 8001ade:	4798      	blx	r3
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d0f7      	beq.n	8001ad4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 8001ae4:	6833      	ldr	r3, [r6, #0]
 8001ae6:	2070      	movs	r0, #112	; 0x70
 8001ae8:	aa01      	add	r2, sp, #4
 8001aea:	f10d 0106 	add.w	r1, sp, #6
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	4798      	blx	r3
            x = (int32_t)_x;
 8001af2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001af6:	2001      	movs	r0, #1
 8001af8:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 8001afa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001afe:	6023      	str	r3, [r4, #0]
            return true;
 8001b00:	e7e9      	b.n	8001ad6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001b02:	bf00      	nop
 8001b04:	20000390 	.word	0x20000390

08001b08 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b0a:	2301      	movs	r3, #1
{
 8001b0c:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b18:	f10d 0217 	add.w	r2, sp, #23
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	460a      	mov	r2, r1
 8001b20:	4601      	mov	r1, r0
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <TS_IO_Write+0x30>)
 8001b24:	f003 fcfc 	bl	8005520 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001b28:	b110      	cbz	r0, 8001b30 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001b2a:	4803      	ldr	r0, [pc, #12]	; (8001b38 <TS_IO_Write+0x30>)
 8001b2c:	f003 fcde 	bl	80054ec <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001b30:	b007      	add	sp, #28
 8001b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b36:	bf00      	nop
 8001b38:	200001bc 	.word	0x200001bc

08001b3c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001b3e:	2300      	movs	r3, #0
{
 8001b40:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001b46:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b50:	f10d 0117 	add.w	r1, sp, #23
 8001b54:	9100      	str	r1, [sp, #0]
 8001b56:	4601      	mov	r1, r0
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <TS_IO_Read+0x34>)
 8001b5a:	f003 fdbb 	bl	80056d4 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b5e:	b110      	cbz	r0, 8001b66 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <TS_IO_Read+0x34>)
 8001b62:	f003 fcc3 	bl	80054ec <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b66:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b6a:	b007      	add	sp, #28
 8001b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b70:	200001bc 	.word	0x200001bc

08001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b74:	2803      	cmp	r0, #3
 8001b76:	d823      	bhi.n	8001bc0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001b78:	e8df f000 	tbb	[pc, r0]
 8001b7c:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b82:	2110      	movs	r1, #16
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b8e:	f003 bb33 	b.w	80051f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001ba0:	e7f5      	b.n	8001b8e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	fab2 f282 	clz	r2, r2
 8001bac:	0952      	lsrs	r2, r2, #5
 8001bae:	e7f6      	b.n	8001b9e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	0952      	lsrs	r2, r2, #5
 8001bbe:	e7e6      	b.n	8001b8e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000394 	.word	0x20000394
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40021800 	.word	0x40021800

08001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001bd4:	2803      	cmp	r0, #3
 8001bd6:	d823      	bhi.n	8001c20 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001bd8:	e8df f000 	tbb	[pc, r0]
 8001bdc:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001be2:	2110      	movs	r1, #16
 8001be4:	4810      	ldr	r0, [pc, #64]	; (8001c28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	3a00      	subs	r2, #0
 8001bea:	bf18      	it	ne
 8001bec:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bee:	f003 bb03 	b.w	80051f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	3a00      	subs	r2, #0
 8001bfa:	bf18      	it	ne
 8001bfc:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001c00:	e7f5      	b.n	8001bee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	3a00      	subs	r2, #0
 8001c0a:	bf18      	it	ne
 8001c0c:	2201      	movne	r2, #1
 8001c0e:	e7f6      	b.n	8001bfe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	4806      	ldr	r0, [pc, #24]	; (8001c30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	3a00      	subs	r2, #0
 8001c1a:	bf18      	it	ne
 8001c1c:	2201      	movne	r2, #1
 8001c1e:	e7e6      	b.n	8001bee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000394 	.word	0x20000394
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40021800 	.word	0x40021800

08001c34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c34:	2803      	cmp	r0, #3
 8001c36:	d80f      	bhi.n	8001c58 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001c38:	e8df f000 	tbb	[pc, r0]
 8001c3c:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c40:	2110      	movs	r1, #16
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c44:	f003 badd 	b.w	8005202 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c48:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c4c:	e7fa      	b.n	8001c44 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	e7fb      	b.n	8001c4a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	4803      	ldr	r0, [pc, #12]	; (8001c64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c56:	e7f5      	b.n	8001c44 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40021800 	.word	0x40021800

08001c68 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001c68:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001c6a:	2803      	cmp	r0, #3
 8001c6c:	d813      	bhi.n	8001c96 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8001c6e:	e8df f000 	tbb	[pc, r0]
 8001c72:	0a02      	.short	0x0a02
 8001c74:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c76:	2110      	movs	r1, #16
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c7a:	f003 fab7 	bl	80051ec <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001c7e:	1e43      	subs	r3, r0, #1
 8001c80:	4258      	negs	r0, r3
 8001c82:	4158      	adcs	r0, r3
 8001c84:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c86:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8001c8a:	e7f6      	b.n	8001c7a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	e7fb      	b.n	8001c88 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c90:	2140      	movs	r1, #64	; 0x40
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001c94:	e7f1      	b.n	8001c7a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7f1      	b.n	8001c7e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001c9a:	bf00      	nop
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40021800 	.word	0x40021800

08001ca8 <_ZN8touchgfx4GPIO4initEv>:
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4d08      	ldr	r5, [pc, #32]	; (8001ccc <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001cac:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001cae:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001cb0:	b2e0      	uxtb	r0, r4
 8001cb2:	f7ff ffd9 	bl	8001c68 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001cb6:	b118      	cbz	r0, 8001cc0 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001cbc:	bf18      	it	ne
 8001cbe:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001cc0:	3401      	adds	r4, #1
 8001cc2:	3504      	adds	r5, #4
 8001cc4:	2c05      	cmp	r4, #5
 8001cc6:	d1f3      	bne.n	8001cb0 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000394 	.word	0x20000394

08001cd0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001cd0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001cd2:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001cd6:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001cda:	4770      	bx	lr

08001cdc <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001cdc:	2000      	movs	r0, #0
 8001cde:	4770      	bx	lr

08001ce0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ce0:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001ce2:	3900      	subs	r1, #0
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001ce6:	bf18      	it	ne
 8001ce8:	2101      	movne	r1, #1
 8001cea:	7019      	strb	r1, [r3, #0]
    }
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2001520f 	.word	0x2001520f

08001cf4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	4770      	bx	lr

08001cf8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001cf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cfa:	b10b      	cbz	r3, 8001d00 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4718      	bx	r3
        }
    }
 8001d00:	4770      	bx	lr

08001d02 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001d02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d06:	4770      	bx	lr

08001d08 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001d08:	6840      	ldr	r0, [r0, #4]
 8001d0a:	6803      	ldr	r3, [r0, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4718      	bx	r3

08001d10 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d10:	4770      	bx	lr
	...

08001d14 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d18:	f001 f87c 	bl	8002e14 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001d26:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001d2a:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001d2c:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001d2e:	4d06      	ldr	r5, [pc, #24]	; (8001d48 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001d30:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001d34:	4628      	mov	r0, r5
 8001d36:	f7ff fe79 	bl	8001a2c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001d3a:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001d3c:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001d3e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	c0000000 	.word	0xc0000000
 8001d48:	200003a4 	.word	0x200003a4

08001d4c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d4c:	f001 b818 	b.w	8002d80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001d50 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d50:	f001 b81c 	b.w	8002d8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001d54 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d56:	f001 f88f 	bl	8002e78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d5a:	4910      	ldr	r1, [pc, #64]	; (8001d9c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d62:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d66:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d6a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d6e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d72:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001d76:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d78:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d7c:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d7e:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001d82:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d84:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001d88:	d2f9      	bcs.n	8001d7e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001d8a:	3b20      	subs	r3, #32
 8001d8c:	f113 0f20 	cmn.w	r3, #32
 8001d90:	d1f2      	bne.n	8001d78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001d92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d96:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001da0:	f001 b86c 	b.w	8002e7c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001da4 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001da4:	f000 bfc8 	b.w	8002d38 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001da8 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001da8:	f001 b986 	b.w	80030b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001dac <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001dac:	f001 b98e 	b.w	80030cc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001db0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001db0:	f000 bfcc 	b.w	8002d4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001db4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001db8:	f016 fd74 	bl	80188a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001dc8:	4718      	bx	r3

08001dca <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001dca:	f015 bfc3 	b.w	8017d54 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001dce <_ZN11TouchGFXHALD0Ev>:
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	217c      	movs	r1, #124	; 0x7c
 8001dd4:	f027 fcb8 	bl	8029748 <_ZdlPvj>
 8001dd8:	4620      	mov	r0, r4
 8001dda:	bd10      	pop	{r4, pc}

08001ddc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001ddc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001de0:	b11b      	cbz	r3, 8001dea <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001de2:	6840      	ldr	r0, [r0, #4]
 8001de4:	6803      	ldr	r3, [r0, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4718      	bx	r3
    }
 8001dea:	4618      	mov	r0, r3
 8001dec:	4770      	bx	lr
	...

08001df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001df0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001df6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001df8:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001dfc:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d009      	beq.n	8001e16 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001e02:	b93a      	cbnz	r2, 8001e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e04:	490a      	ldr	r1, [pc, #40]	; (8001e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e08:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e0a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001e0c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001e0e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e10:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001e12:	701a      	strb	r2, [r3, #0]
        }
    }
 8001e14:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d0fc      	beq.n	8001e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e1a:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e1e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e20:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e22:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001e24:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001e26:	2200      	movs	r2, #0
 8001e28:	e7f3      	b.n	8001e12 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001e2a:	bf00      	nop
 8001e2c:	20015208 	.word	0x20015208
 8001e30:	20015206 	.word	0x20015206
 8001e34:	20015204 	.word	0x20015204

08001e38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	460d      	mov	r5, r1
 8001e3c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e3e:	b935      	cbnz	r5, 8001e4e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001e42:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001e4a:	f027 fcab 	bl	80297a4 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001e4e:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001e52:	3a00      	subs	r2, #0
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001e56:	bf18      	it	ne
 8001e58:	2201      	movne	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001e5c:	6803      	ldr	r3, [r0, #0]
    }
 8001e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e66:	4718      	bx	r3
 8001e68:	0802adf0 	.word	0x0802adf0
 8001e6c:	0802ae28 	.word	0x0802ae28
 8001e70:	0802ae76 	.word	0x0802ae76
 8001e74:	2001520e 	.word	0x2001520e

08001e78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001e78:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	428b      	cmp	r3, r1
 8001e80:	d803      	bhi.n	8001e8a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d905      	bls.n	8001e96 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001e8c:	219e      	movs	r1, #158	; 0x9e
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001e90:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e92:	f027 fc87 	bl	80297a4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e98:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e9c:	801a      	strh	r2, [r3, #0]
    }
 8001e9e:	bd08      	pop	{r3, pc}
 8001ea0:	20015204 	.word	0x20015204
 8001ea4:	20015206 	.word	0x20015206
 8001ea8:	0802aebb 	.word	0x0802aebb
 8001eac:	0802af1e 	.word	0x0802af1e
 8001eb0:	0802ae76 	.word	0x0802ae76
 8001eb4:	2001520a 	.word	0x2001520a
 8001eb8:	2001520c 	.word	0x2001520c

08001ebc <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001ebc:	4601      	mov	r1, r0
 8001ebe:	b508      	push	{r3, lr}
        return instance;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <IdleTaskHook+0x14>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001ec4:	b101      	cbz	r1, 8001ec8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001ec6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001ec8:	f016 fd06 	bl	80188d8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001ecc:	2001      	movs	r0, #1
 8001ece:	bd08      	pop	{r3, pc}
 8001ed0:	20015210 	.word	0x20015210

08001ed4 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	4a02      	ldr	r2, [pc, #8]	; (8001ee8 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200003a4 	.word	0x200003a4
 8001ee8:	0802adb8 	.word	0x0802adb8

08001eec <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001eec:	2101      	movs	r1, #1
 8001eee:	2200      	movs	r2, #0
{
 8001ef0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ef2:	4608      	mov	r0, r1
 8001ef4:	f005 fafe 	bl	80074f4 <osSemaphoreNew>
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001efa:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001efc:	b928      	cbnz	r0, 8001f0a <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001f00:	2128      	movs	r1, #40	; 0x28
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001f06:	f027 fc4d 	bl	80297a4 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f005 fbb6 	bl	8007680 <osMessageQueueNew>
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001f16:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f18:	b918      	cbnz	r0, 8001f22 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001f20:	e7f0      	b.n	8001f04 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001f22:	bd08      	pop	{r3, pc}
 8001f24:	200003b4 	.word	0x200003b4
 8001f28:	0802b03c 	.word	0x0802b03c
 8001f2c:	0802b085 	.word	0x0802b085
 8001f30:	0802b0b4 	.word	0x0802b0b4
 8001f34:	200003b0 	.word	0x200003b0
 8001f38:	0802b101 	.word	0x0802b101

08001f3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f005 bb2c 	b.w	80075a0 <osSemaphoreAcquire>
 8001f48:	200003b4 	.word	0x200003b4

08001f4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001f4c:	4b01      	ldr	r3, [pc, #4]	; (8001f54 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f005 bb60 	b.w	8007614 <osSemaphoreRelease>
 8001f54:	200003b4 	.word	0x200003b4

08001f58 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f005 bb1f 	b.w	80075a0 <osSemaphoreAcquire>
 8001f62:	bf00      	nop
 8001f64:	200003b4 	.word	0x200003b4

08001f68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001f68:	f7ff bff0 	b.w	8001f4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001f6c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001f72:	461a      	mov	r2, r3
 8001f74:	6800      	ldr	r0, [r0, #0]
 8001f76:	f005 bbc9 	b.w	800770c <osMessageQueuePut>
 8001f7a:	bf00      	nop
 8001f7c:	200003b0 	.word	0x200003b0
 8001f80:	20000004 	.word	0x20000004

08001f84 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f84:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f86:	2300      	movs	r3, #0
 8001f88:	4c07      	ldr	r4, [pc, #28]	; (8001fa8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001f8a:	a901      	add	r1, sp, #4
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6820      	ldr	r0, [r4, #0]
 8001f90:	f005 fbfe 	bl	8007790 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	2200      	movs	r2, #0
 8001f9a:	a901      	add	r1, sp, #4
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	f005 fbf7 	bl	8007790 <osMessageQueueGet>
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200003b0 	.word	0x200003b0

08001fac <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001fac:	6803      	ldr	r3, [r0, #0]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4718      	bx	r3

08001fb2 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	4770      	bx	lr

08001fb6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001fb6:	6803      	ldr	r3, [r0, #0]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	4718      	bx	r3

08001fbc <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001fbe:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fca:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fd8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001fe0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_ZN8STM32DMA10initializeEv+0x40>)
 8001fe6:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <_ZN8STM32DMA10initializeEv+0x44>)
 8001fee:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001ff0:	b002      	add	sp, #8
 8001ff2:	4770      	bx	lr
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	2000017c 	.word	0x2000017c
 8001ffc:	08002045 	.word	0x08002045
 8002000:	e000e100 	.word	0xe000e100

08002004 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002004:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002008:	4770      	bx	lr
	...

0800200c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002012:	6003      	str	r3, [r0, #0]
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <_ZN8STM32DMAD1Ev+0x1c>)
 8002016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800201a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800201e:	f3bf 8f6f 	isb	sy
}
 8002022:	4770      	bx	lr
 8002024:	0802b2a0 	.word	0x0802b2a0
 8002028:	e000e100 	.word	0xe000e100

0800202c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
}
 8002030:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002034:	f7ff ffea 	bl	800200c <_ZN8STM32DMAD1Ev>
 8002038:	4620      	mov	r0, r4
 800203a:	f027 fb85 	bl	8029748 <_ZdlPvj>
 800203e:	4620      	mov	r0, r4
 8002040:	bd10      	pop	{r4, pc}
	...

08002044 <DMA2D_XferCpltCallback>:
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <DMA2D_XferCpltCallback+0xc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4718      	bx	r3
 8002050:	20015210 	.word	0x20015210

08002054 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <_ZN8STM32DMAC1Ev+0x30>)
 800205a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800205c:	2600      	movs	r6, #0
 800205e:	4625      	mov	r5, r4
 8002060:	2260      	movs	r2, #96	; 0x60
 8002062:	6060      	str	r0, [r4, #4]
 8002064:	7226      	strb	r6, [r4, #8]
 8002066:	7266      	strb	r6, [r4, #9]
 8002068:	f845 3b20 	str.w	r3, [r5], #32
 800206c:	4629      	mov	r1, r5
 800206e:	f016 fd6f 	bl	8018b50 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002072:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002076:	60ee      	str	r6, [r5, #12]
 8002078:	3524      	adds	r5, #36	; 0x24
 800207a:	42ab      	cmp	r3, r5
 800207c:	d1fb      	bne.n	8002076 <_ZN8STM32DMAC1Ev+0x22>
}
 800207e:	4620      	mov	r0, r4
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	bf00      	nop
 8002084:	0802b2a0 	.word	0x0802b2a0

08002088 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002088:	b508      	push	{r3, lr}
    switch (format)
 800208a:	290b      	cmp	r1, #11
 800208c:	d80b      	bhi.n	80020a6 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800208e:	e8df f001 	tbb	[pc, r1]
 8002092:	0612      	.short	0x0612
 8002094:	0a0a0a10 	.word	0x0a0a0a10
 8002098:	0808080a 	.word	0x0808080a
 800209c:	0808      	.short	0x0808
 800209e:	2001      	movs	r0, #1
}
 80020a0:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80020a2:	2005      	movs	r0, #5
        break;
 80020a4:	e7fc      	b.n	80020a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80020a8:	2166      	movs	r1, #102	; 0x66
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 80020ae:	f027 fb79 	bl	80297a4 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e7f4      	b.n	80020a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80020b6:	2002      	movs	r0, #2
    return dma2dColorMode;
 80020b8:	e7f2      	b.n	80020a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80020ba:	bf00      	nop
 80020bc:	0802b143 	.word	0x0802b143
 80020c0:	0802b15e 	.word	0x0802b15e
 80020c4:	0802b1a8 	.word	0x0802b1a8

080020c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80020c8:	b508      	push	{r3, lr}
    switch (format)
 80020ca:	290a      	cmp	r1, #10
 80020cc:	d809      	bhi.n	80020e2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 80020ce:	e8df f001 	tbb	[pc, r1]
 80020d2:	0610      	.short	0x0610
 80020d4:	0808080e 	.word	0x0808080e
 80020d8:	06060608 	.word	0x06060608
 80020dc:	06          	.byte	0x06
 80020dd:	00          	.byte	0x00
 80020de:	2001      	movs	r0, #1
}
 80020e0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80020e4:	2187      	movs	r1, #135	; 0x87
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80020ea:	f027 fb5b 	bl	80297a4 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80020ee:	2000      	movs	r0, #0
 80020f0:	e7f6      	b.n	80020e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80020f2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80020f4:	e7f4      	b.n	80020e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80020f6:	bf00      	nop
 80020f8:	0802b143 	.word	0x0802b143
 80020fc:	0802b1f3 	.word	0x0802b1f3
 8002100:	0802b1a8 	.word	0x0802b1a8

08002104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002108:	7f4f      	ldrb	r7, [r1, #29]
{
 800210a:	460c      	mov	r4, r1
 800210c:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800210e:	4639      	mov	r1, r7
 8002110:	f7ff ffba 	bl	8002088 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002114:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002118:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800211a:	4648      	mov	r0, r9
 800211c:	4641      	mov	r1, r8
 800211e:	f7ff ffb3 	bl	8002088 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002122:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002124:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002126:	4648      	mov	r0, r9
 8002128:	f7ff ffce 	bl	80020c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800212c:	8aa1      	ldrh	r1, [r4, #20]
 800212e:	8b62      	ldrh	r2, [r4, #26]
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002132:	1a52      	subs	r2, r2, r1
 8002134:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002136:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002138:	8b22      	ldrh	r2, [r4, #24]
 800213a:	1a52      	subs	r2, r2, r1
 800213c:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800213e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002140:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002142:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002146:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002148:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800214a:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800214c:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800214e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002150:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002152:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002156:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002158:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 800215c:	d026      	beq.n	80021ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 800215e:	d810      	bhi.n	8002182 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002160:	2920      	cmp	r1, #32
 8002162:	ea45 0402 	orr.w	r4, r5, r2
 8002166:	d062      	beq.n	800222e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002168:	2940      	cmp	r1, #64	; 0x40
 800216a:	d060      	beq.n	800222e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 800216c:	2904      	cmp	r1, #4
 800216e:	d05e      	beq.n	800222e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002170:	432a      	orrs	r2, r5
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002174:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002176:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800217a:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800217c:	d05b      	beq.n	8002236 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800217e:	4a30      	ldr	r2, [pc, #192]	; (8002240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002180:	e040      	b.n	8002204 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002182:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002186:	d007      	beq.n	8002198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002188:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800218c:	d1f0      	bne.n	8002170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800218e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002192:	f042 0209 	orr.w	r2, r2, #9
 8002196:	e003      	b.n	80021a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002198:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800219c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a0:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80021a2:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80021a4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021a6:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021a8:	6158      	str	r0, [r3, #20]
 80021aa:	e02a      	b.n	8002202 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80021ac:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ae:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80021b0:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80021b6:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021b8:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 80021ba:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021bc:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021be:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80021c0:	b142      	cbz	r2, 80021d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d021      	beq.n	800220a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80021c8:	f240 1111 	movw	r1, #273	; 0x111
 80021cc:	4a1e      	ldr	r2, [pc, #120]	; (8002248 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80021ce:	481f      	ldr	r0, [pc, #124]	; (800224c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80021d0:	f027 fae8 	bl	80297a4 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021d4:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 80021d6:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021d8:	8861      	ldrh	r1, [r4, #2]
 80021da:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021de:	3901      	subs	r1, #1
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021e8:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	0692      	lsls	r2, r2, #26
 80021f8:	d4fc      	bmi.n	80021f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80021fa:	2210      	movs	r2, #16
 80021fc:	609a      	str	r2, [r3, #8]
            if (blend)
 80021fe:	2800      	cmp	r0, #0
 8002200:	d0bd      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002204:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8002206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800220a:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 800220c:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002210:	69d9      	ldr	r1, [r3, #28]
 8002212:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8002216:	bf18      	it	ne
 8002218:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800221a:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800221e:	f022 0210 	bic.w	r2, r2, #16
 8002222:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002226:	f042 0210 	orr.w	r2, r2, #16
 800222a:	61da      	str	r2, [r3, #28]
                break;
 800222c:	e7dd      	b.n	80021ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800222e:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8002232:	61dc      	str	r4, [r3, #28]
 8002234:	e7b7      	b.n	80021a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002236:	f240 2201 	movw	r2, #513	; 0x201
 800223a:	e7e3      	b.n	8002204 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 800223c:	4002b000 	.word	0x4002b000
 8002240:	00010201 	.word	0x00010201
 8002244:	0802b23e 	.word	0x0802b23e
 8002248:	0802b258 	.word	0x0802b258
 800224c:	0802b1a8 	.word	0x0802b1a8
 8002250:	00020201 	.word	0x00020201

08002254 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002258:	7f89      	ldrb	r1, [r1, #30]
 800225a:	f7ff ff35 	bl	80020c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002260:	8aa6      	ldrh	r6, [r4, #20]
 8002262:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002264:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002266:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800226a:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800226c:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800226e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002270:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002272:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002276:	6826      	ldr	r6, [r4, #0]
 8002278:	68e1      	ldr	r1, [r4, #12]
 800227a:	2e08      	cmp	r6, #8
 800227c:	d10d      	bne.n	800229a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800227e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002280:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002282:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002286:	7f20      	ldrb	r0, [r4, #28]
 8002288:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800228c:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002290:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002292:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002294:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002296:	601a      	str	r2, [r3, #0]
    }
}
 8002298:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800229a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800229c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800229e:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 80022a0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80022a2:	0a0a      	lsrs	r2, r1, #8
 80022a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80022a8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80022ac:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80022b0:	4302      	orrs	r2, r0
 80022b2:	430a      	orrs	r2, r1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 80022b8:	e7ed      	b.n	8002296 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80022ba:	bf00      	nop
 80022bc:	4002b000 	.word	0x4002b000
 80022c0:	00010009 	.word	0x00010009
 80022c4:	00020201 	.word	0x00020201
 80022c8:	00030201 	.word	0x00030201

080022cc <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80022cc:	6940      	ldr	r0, [r0, #20]
 80022ce:	4770      	bx	lr

080022d0 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80022d0:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80022d4:	4770      	bx	lr

080022d6 <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80022d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022d8:	b923      	cbnz	r3, 80022e4 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 80022da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80022dc:	3800      	subs	r0, #0
 80022de:	bf18      	it	ne
 80022e0:	2001      	movne	r0, #1
 80022e2:	4770      	bx	lr
 80022e4:	2001      	movs	r0, #1
}
 80022e6:	4770      	bx	lr

080022e8 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80022e8:	6880      	ldr	r0, [r0, #8]
 80022ea:	4770      	bx	lr

080022ec <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80022ec:	3004      	adds	r0, #4
{
 80022ee:	b510      	push	{r4, lr}
 80022f0:	460c      	mov	r4, r1
    *data = videoInfo;
 80022f2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80022f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 80022f8:	bd10      	pop	{r4, pc}

080022fa <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 80022fa:	4770      	bx	lr

080022fc <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80022fc:	b508      	push	{r3, lr}
    assert(0);
 80022fe:	4a03      	ldr	r2, [pc, #12]	; (800230c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002300:	f240 210f 	movw	r1, #527	; 0x20f
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002306:	4803      	ldr	r0, [pc, #12]	; (8002314 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002308:	f027 fa4c 	bl	80297a4 <__assert_func>
 800230c:	0802b2e8 	.word	0x0802b2e8
 8002310:	0802cb1b 	.word	0x0802cb1b
 8002314:	0802b343 	.word	0x0802b343

08002318 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8002318:	b510      	push	{r4, lr}
 800231a:	4604      	mov	r4, r0
 800231c:	2148      	movs	r1, #72	; 0x48
 800231e:	f027 fa13 	bl	8029748 <_ZdlPvj>
 8002322:	4620      	mov	r0, r4
 8002324:	bd10      	pop	{r4, pc}
	...

08002328 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800232c:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800232e:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002330:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002334:	4605      	mov	r5, r0
 8002336:	460e      	mov	r6, r1
 8002338:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800233a:	2b00      	cmp	r3, #0
 800233c:	d052      	beq.n	80023e4 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800233e:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 8002340:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002342:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80023ec <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002346:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 800234a:	f00d fbab 	bl	800faa4 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 800234e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002352:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8002354:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 8002356:	a824      	add	r0, sp, #144	; 0x90
 8002358:	f007 fac5 	bl	80098e6 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 800235c:	463a      	mov	r2, r7
 800235e:	4631      	mov	r1, r6
 8002360:	a824      	add	r0, sp, #144	; 0x90
 8002362:	f008 fa59 	bl	800a818 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 8002366:	2101      	movs	r1, #1
 8002368:	a824      	add	r0, sp, #144	; 0x90
 800236a:	f007 fbc5 	bl	8009af8 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 800236e:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8002370:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 8002372:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 8002376:	f007 fc63 	bl	8009c40 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 800237a:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 800237e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002380:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002384:	429e      	cmp	r6, r3
 8002386:	bf28      	it	cs
 8002388:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800238a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800238c:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 800238e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002392:	bf28      	it	cs
 8002394:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002396:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 8002398:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 800239c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800239e:	429f      	cmp	r7, r3
 80023a0:	d91a      	bls.n	80023d8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80023a2:	2201      	movs	r2, #1
 80023a4:	a901      	add	r1, sp, #4
 80023a6:	a824      	add	r0, sp, #144	; 0x90
 80023a8:	f007 fc93 	bl	8009cd2 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80023ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80023ae:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80023b2:	4298      	cmp	r0, r3
 80023b4:	d90e      	bls.n	80023d4 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80023b6:	7859      	ldrb	r1, [r3, #1]
 80023b8:	789a      	ldrb	r2, [r3, #2]
 80023ba:	00c9      	lsls	r1, r1, #3
 80023bc:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 80023c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80023c4:	430a      	orrs	r2, r1
 80023c6:	f813 1b03 	ldrb.w	r1, [r3], #3
 80023ca:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 80023ce:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 80023d2:	e7ee      	b.n	80023b2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80023d4:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 80023d6:	e7e1      	b.n	800239c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 80023d8:	a824      	add	r0, sp, #144	; 0x90
 80023da:	f007 fbaf 	bl	8009b3c <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 80023de:	a824      	add	r0, sp, #144	; 0x90
 80023e0:	f007 face 	bl	8009980 <jpeg_destroy_decompress>
}
 80023e4:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80023e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ec:	fffff800 	.word	0xfffff800

080023f0 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 80023f2:	6002      	str	r2, [r0, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80023fa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80023fe:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 8002402:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8002406:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 800240a:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800240e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 8002412:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002416:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 800241a:	4770      	bx	lr
 800241c:	0802b624 	.word	0x0802b624

08002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002420:	b420      	push	{r5}
 8002422:	460d      	mov	r5, r1
 8002424:	4611      	mov	r1, r2
 8002426:	461a      	mov	r2, r3
    if (reader != 0)
 8002428:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800242a:	b13b      	cbz	r3, 800243c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800242c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800242e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002430:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 8002432:	4428      	add	r0, r5
}
 8002434:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 8002438:	f027 be8e 	b.w	802a158 <strncmp>
        src = (const char*)movieData + offset;
 800243c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800243e:	e7f8      	b.n	8002432 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

08002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002440:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8002442:	b510      	push	{r4, lr}
    if (reader != 0)
 8002444:	b173      	cbz	r3, 8002464 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002446:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002448:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 800244a:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800244c:	1853      	adds	r3, r2, r1
 800244e:	5c52      	ldrb	r2, [r2, r1]
 8002450:	7898      	ldrb	r0, [r3, #2]
 8002452:	785c      	ldrb	r4, [r3, #1]
 8002454:	0400      	lsls	r0, r0, #16
 8002456:	78db      	ldrb	r3, [r3, #3]
 8002458:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800245c:	4310      	orrs	r0, r2
 800245e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002462:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002464:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002466:	5858      	ldr	r0, [r3, r1]
 8002468:	e7fb      	b.n	8002462 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

0800246a <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800246a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800246c:	b143      	cbz	r3, 8002480 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800246e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002470:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002472:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002474:	185a      	adds	r2, r3, r1
 8002476:	5c58      	ldrb	r0, [r3, r1]
 8002478:	7852      	ldrb	r2, [r2, #1]
 800247a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800247e:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8002480:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002482:	5a58      	ldrh	r0, [r3, r1]
}
 8002484:	4770      	bx	lr
	...

08002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4604      	mov	r4, r0
    if (reader != 0)
 800248c:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 800248e:	460d      	mov	r5, r1
 8002490:	4616      	mov	r6, r2
    if (reader != 0)
 8002492:	b1d8      	cbz	r0, 80024cc <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002496:	4293      	cmp	r3, r2
 8002498:	d208      	bcs.n	80024ac <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800249a:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 800249e:	2168      	movs	r1, #104	; 0x68
 80024a0:	480d      	ldr	r0, [pc, #52]	; (80024d8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80024a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80024a8:	f027 f97c 	bl	80297a4 <__assert_func>
        reader->seek(offset);
 80024ac:	6803      	ldr	r3, [r0, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80024b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80024b4:	4632      	mov	r2, r6
 80024b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024b8:	6803      	ldr	r3, [r0, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	4798      	blx	r3
 80024be:	b910      	cbnz	r0, 80024c6 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80024c0:	230d      	movs	r3, #13
 80024c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 80024c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 80024c8:	6425      	str	r5, [r4, #64]	; 0x40
}
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80024cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024ce:	4408      	add	r0, r1
 80024d0:	e7fb      	b.n	80024ca <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 80024d2:	bf00      	nop
 80024d4:	0802b3ad 	.word	0x0802b3ad
 80024d8:	0802b343 	.word	0x0802b343
 80024dc:	0802b39a 	.word	0x0802b39a

080024e0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 80024e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80024e4:	6943      	ldr	r3, [r0, #20]
{
 80024e6:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80024e8:	b92b      	cbnz	r3, 80024f6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80024ea:	4b23      	ldr	r3, [pc, #140]	; (8002578 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80024ec:	21ad      	movs	r1, #173	; 0xad
 80024ee:	4a23      	ldr	r2, [pc, #140]	; (800257c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80024f0:	4823      	ldr	r0, [pc, #140]	; (8002580 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 80024f2:	f027 f957 	bl	80297a4 <__assert_func>
    readData(currentMovieOffset, 8);
 80024f6:	2208      	movs	r2, #8
 80024f8:	6981      	ldr	r1, [r0, #24]
 80024fa:	f7ff ffc5 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80024fe:	69a1      	ldr	r1, [r4, #24]
 8002500:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002502:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002506:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002508:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800250c:	f7ff ff98 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002510:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002512:	69a1      	ldr	r1, [r4, #24]
 8002514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002516:	440d      	add	r5, r1
 8002518:	f105 0208 	add.w	r2, r5, #8
 800251c:	429a      	cmp	r2, r3
 800251e:	d224      	bcs.n	800256a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 8002520:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002522:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002524:	2208      	movs	r2, #8
 8002526:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002528:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 800252c:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800252e:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 8002530:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 8002532:	f7ff ffa9 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 8002536:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800253a:	4620      	mov	r0, r4
 800253c:	4641      	mov	r1, r8
 800253e:	f7ff ff94 	bl	800246a <_ZN20SoftwareMJPEGDecoder6getU16Em>
 8002542:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002544:	f108 0104 	add.w	r1, r8, #4
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff ff79 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800254e:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 8002550:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002552:	d1de      	bne.n	8002512 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002554:	f108 0102 	add.w	r1, r8, #2
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff ff86 	bl	800246a <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800255e:	42b8      	cmp	r0, r7
 8002560:	d1d7      	bne.n	8002512 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 8002562:	2d00      	cmp	r5, #0
 8002564:	d0d5      	beq.n	8002512 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 8002566:	2001      	movs	r0, #1
 8002568:	e004      	b.n	8002574 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 800256a:	2301      	movs	r3, #1
    return false;
 800256c:	2000      	movs	r0, #0
    frameNumber = 1;
 800256e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002570:	6a23      	ldr	r3, [r4, #32]
 8002572:	61a3      	str	r3, [r4, #24]
}
 8002574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002578:	0802b3ef 	.word	0x0802b3ef
 800257c:	0802b438 	.word	0x0802b438
 8002580:	0802b343 	.word	0x0802b343

08002584 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	4604      	mov	r4, r0
 800258a:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800258e:	468a      	mov	sl, r1
 8002590:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8002592:	6981      	ldr	r1, [r0, #24]
 8002594:	2208      	movs	r2, #8
{
 8002596:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 8002598:	f7ff ff76 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800259c:	69a7      	ldr	r7, [r4, #24]
 800259e:	4620      	mov	r0, r4
 80025a0:	1d39      	adds	r1, r7, #4
 80025a2:	f7ff ff4d 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80025a6:	f107 0108 	add.w	r1, r7, #8
 80025aa:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80025ac:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff ff6a 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80025b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80025b6:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80025b8:	b933      	cbnz	r3, 80025c8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 80025bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80025c0:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 80025c2:	483c      	ldr	r0, [pc, #240]	; (80026b4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 80025c4:	f027 f8ee 	bl	80297a4 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80025c8:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80025ca:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80025cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 80025d0:	f00d fa68 	bl	800faa4 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 80025d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80025d8:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 80025da:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 80025dc:	a824      	add	r0, sp, #144	; 0x90
 80025de:	f007 f982 	bl	80098e6 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80025e2:	4632      	mov	r2, r6
 80025e4:	4639      	mov	r1, r7
 80025e6:	a824      	add	r0, sp, #144	; 0x90
 80025e8:	f008 f916 	bl	800a818 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80025ec:	2101      	movs	r1, #1
 80025ee:	a824      	add	r0, sp, #144	; 0x90
 80025f0:	f007 fa82 	bl	8009af8 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80025f4:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80025f6:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 80025f8:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 80025fc:	f007 fb20 	bl	8009c40 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002600:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002604:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002606:	42b3      	cmp	r3, r6
 8002608:	d205      	bcs.n	8002616 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800260a:	2201      	movs	r2, #1
 800260c:	a901      	add	r1, sp, #4
 800260e:	a824      	add	r0, sp, #144	; 0x90
 8002610:	f007 fb5f 	bl	8009cd2 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 8002614:	e7f6      	b.n	8002604 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 8002616:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 800261a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800261e:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8002622:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002624:	fb08 5506 	mla	r5, r8, r6, r5
 8002628:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800262a:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 800262e:	f8df b088 	ldr.w	fp, [pc, #136]	; 80026b8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 8002632:	b23f      	sxth	r7, r7
 8002634:	429f      	cmp	r7, r3
 8002636:	bf28      	it	cs
 8002638:	461f      	movcs	r7, r3
 800263a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800263e:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 8002642:	441e      	add	r6, r3
 8002644:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 8002646:	b236      	sxth	r6, r6
 8002648:	429e      	cmp	r6, r3
 800264a:	bf28      	it	cs
 800264c:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 800264e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002650:	42b3      	cmp	r3, r6
 8002652:	d21f      	bcs.n	8002694 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002654:	2201      	movs	r2, #1
 8002656:	a901      	add	r1, sp, #4
 8002658:	a824      	add	r0, sp, #144	; 0x90
 800265a:	f007 fb3a 	bl	8009cd2 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 800265e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002660:	4649      	mov	r1, r9
 8002662:	4452      	add	r2, sl
 8002664:	42b9      	cmp	r1, r7
 8002666:	f102 0203 	add.w	r2, r2, #3
 800266a:	d211      	bcs.n	8002690 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 800266c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8002670:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8002674:	00c0      	lsls	r0, r0, #3
 8002676:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 800267a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800267e:	4303      	orrs	r3, r0
 8002680:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8002684:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 8002688:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 800268c:	3101      	adds	r1, #1
 800268e:	e7e9      	b.n	8002664 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002690:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 8002692:	e7dc      	b.n	800264e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002694:	a824      	add	r0, sp, #144	; 0x90
 8002696:	f007 fa51 	bl	8009b3c <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800269a:	a824      	add	r0, sp, #144	; 0x90
 800269c:	f007 f970 	bl	8009980 <jpeg_destroy_decompress>
}
 80026a0:	2001      	movs	r0, #1
 80026a2:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80026a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	0802b46b 	.word	0x0802b46b
 80026b0:	0802b4c1 	.word	0x0802b4c1
 80026b4:	0802b343 	.word	0x0802b343
 80026b8:	fffff800 	.word	0xfffff800

080026bc <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80026bc:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	bf38      	it	cc
 80026c2:	2101      	movcc	r1, #1
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80026c6:	b570      	push	{r4, r5, r6, lr}
 80026c8:	460d      	mov	r5, r1
 80026ca:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80026cc:	4798      	blx	r3
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d204      	bcs.n	80026dc <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	4620      	mov	r0, r4
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	4798      	blx	r3
 80026da:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026dc:	1e6b      	subs	r3, r5, #1
 80026de:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80026e0:	2210      	movs	r2, #16
 80026e2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026e4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80026e8:	f106 0108 	add.w	r1, r6, #8
 80026ec:	f7ff fecc 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026f0:	f106 0110 	add.w	r1, r6, #16
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff fea3 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80026fa:	6a23      	ldr	r3, [r4, #32]
 80026fc:	3b04      	subs	r3, #4
 80026fe:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002700:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002704:	bd70      	pop	{r4, r5, r6, pc}
	...

08002708 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 8002708:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 800270c:	2100      	movs	r1, #0
{
 800270e:	4604      	mov	r4, r0
    readData(0, 72);
 8002710:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8002712:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002714:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 8002718:	f7ff feb6 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 800271c:	69a7      	ldr	r7, [r4, #24]
 800271e:	2304      	movs	r3, #4
 8002720:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002722:	4639      	mov	r1, r7
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff fe7b 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800272a:	b140      	cbz	r0, 800273e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 800272c:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800272e:	4a61      	ldr	r2, [pc, #388]	; (80028b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002730:	21f5      	movs	r1, #245	; 0xf5
        lastError = AVI_ERROR_NOT_RIFF;
 8002732:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 8002736:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002738:	4860      	ldr	r0, [pc, #384]	; (80028bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800273a:	f027 f833 	bl	80297a4 <__assert_func>
    currentMovieOffset += 8;
 800273e:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002742:	2304      	movs	r3, #4
 8002744:	4a5e      	ldr	r2, [pc, #376]	; (80028c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002746:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002748:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800274a:	f7ff fe69 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800274e:	b130      	cbz	r0, 800275e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002750:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002752:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002754:	21fd      	movs	r1, #253	; 0xfd
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002756:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800275c:	e7ec      	b.n	8002738 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 800275e:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002762:	2304      	movs	r3, #4
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002766:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002768:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800276a:	f7ff fe59 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800276e:	4606      	mov	r6, r0
 8002770:	b138      	cbz	r0, 8002782 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002772:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002774:	4a4f      	ldr	r2, [pc, #316]	; (80028b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002776:	f44f 7182 	mov.w	r1, #260	; 0x104
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800277a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002780:	e7da      	b.n	8002738 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002782:	f107 0110 	add.w	r1, r7, #16
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff fe5a 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800278c:	4605      	mov	r5, r0
 800278e:	b920      	cbnz	r0, 800279a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002792:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002796:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002798:	e7ce      	b.n	8002738 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800279a:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 800279e:	2304      	movs	r3, #4
 80027a0:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80027a2:	4620      	mov	r0, r4
 80027a4:	4641      	mov	r1, r8
 80027a6:	f7ff fe3b 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d04b      	beq.n	8002846 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80027ae:	2306      	movs	r3, #6
 80027b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 80027b4:	2304      	movs	r3, #4
 80027b6:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80027b8:	f107 0118 	add.w	r1, r7, #24
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff fe2f 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d041      	beq.n	800284a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80027c6:	2307      	movs	r3, #7
 80027c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80027cc:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027ce:	4f43      	ldr	r7, [pc, #268]	; (80028dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80027d0:	220c      	movs	r2, #12
 80027d2:	4620      	mov	r0, r4
 80027d4:	4629      	mov	r1, r5
 80027d6:	f7ff fe57 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027da:	f105 0608 	add.w	r6, r5, #8
 80027de:	2304      	movs	r3, #4
 80027e0:	463a      	mov	r2, r7
 80027e2:	4620      	mov	r0, r4
 80027e4:	4631      	mov	r1, r6
 80027e6:	f7ff fe1b 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d04a      	beq.n	8002888 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d14a      	bne.n	800288c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027f8:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027fa:	42ab      	cmp	r3, r5
 80027fc:	d84a      	bhi.n	8002894 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80027fe:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002802:	1d29      	adds	r1, r5, #4
 8002804:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002806:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002808:	9101      	str	r1, [sp, #4]
 800280a:	f7ff fe19 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800280e:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002810:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002812:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff fe13 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800281a:	4406      	add	r6, r0
    readData(listOffset, 4);
 800281c:	2204      	movs	r2, #4
 800281e:	4620      	mov	r0, r4
 8002820:	4631      	mov	r1, r6
 8002822:	f7ff fe31 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002826:	2304      	movs	r3, #4
 8002828:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800282a:	4631      	mov	r1, r6
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff fdf7 	bl	8002420 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002832:	2800      	cmp	r0, #0
 8002834:	d139      	bne.n	80028aa <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 8002836:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002838:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 800283a:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800283c:	69a3      	ldr	r3, [r4, #24]
 800283e:	6223      	str	r3, [r4, #32]
}
 8002840:	b002      	add	sp, #8
 8002842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002846:	2601      	movs	r6, #1
 8002848:	e7b4      	b.n	80027b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 800284a:	2e00      	cmp	r6, #0
 800284c:	d0be      	beq.n	80027cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800284e:	f107 0120 	add.w	r1, r7, #32
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fdf4 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800285c:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002860:	fbb0 f0f3 	udiv	r0, r0, r3
 8002864:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff fdea 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800286c:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002870:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff fde4 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002878:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800287c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fdde 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002884:	6120      	str	r0, [r4, #16]
 8002886:	e7a1      	b.n	80027cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0b8      	beq.n	80027fe <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800288c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800288e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002892:	e7d5      	b.n	8002840 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fdd3 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800289a:	3008      	adds	r0, #8
        readData(listOffset, 12);
 800289c:	220c      	movs	r2, #12
        listOffset += listSize;
 800289e:	4405      	add	r5, r0
        readData(listOffset, 12);
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7ff fdf0 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028a8:	e797      	b.n	80027da <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80028aa:	230b      	movs	r3, #11
 80028ac:	e7ef      	b.n	800288e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80028ae:	bf00      	nop
 80028b0:	0802b51b 	.word	0x0802b51b
 80028b4:	0802b539 	.word	0x0802b539
 80028b8:	0802b520 	.word	0x0802b520
 80028bc:	0802b343 	.word	0x0802b343
 80028c0:	0802b566 	.word	0x0802b566
 80028c4:	0802b56b 	.word	0x0802b56b
 80028c8:	0802b583 	.word	0x0802b583
 80028cc:	0802b588 	.word	0x0802b588
 80028d0:	0802b59e 	.word	0x0802b59e
 80028d4:	0802b5aa 	.word	0x0802b5aa
 80028d8:	0802b5af 	.word	0x0802b5af
 80028dc:	0802b5b4 	.word	0x0802b5b4
 80028e0:	0802b5b9 	.word	0x0802b5b9

080028e4 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80028e4:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 80028e8:	2200      	movs	r2, #0
 80028ea:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 80028ec:	f7ff bf0c 	b.w	8002708 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080028f0 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028f0:	b510      	push	{r4, lr}
    movieData = 0;
 80028f2:	2300      	movs	r3, #0
{
 80028f4:	4604      	mov	r4, r0
 80028f6:	4608      	mov	r0, r1
    movieData = 0;
 80028f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80028fa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028fc:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4798      	blx	r3
 8002902:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002904:	4620      	mov	r0, r4
}
 8002906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800290a:	f7ff befd 	b.w	8002708 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

0800290e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 800290e:	b4f0      	push	{r4, r5, r6, r7}
 8002910:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002914:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002918:	b12a      	cbz	r2, 8002926 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800291a:	b123      	cbz	r3, 8002926 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 800291c:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002920:	bcf0      	pop	{r4, r5, r6, r7}
 8002922:	f7ff bd01 	b.w	8002328 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002926:	bcf0      	pop	{r4, r5, r6, r7}
 8002928:	4770      	bx	lr
	...

0800292c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800292c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002930:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002932:	6943      	ldr	r3, [r0, #20]
{
 8002934:	4604      	mov	r4, r0
 8002936:	460f      	mov	r7, r1
 8002938:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800293a:	b92b      	cbnz	r3, 8002948 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 800293e:	217a      	movs	r1, #122	; 0x7a
 8002940:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002942:	482b      	ldr	r0, [pc, #172]	; (80029f0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002944:	f026 ff2e 	bl	80297a4 <__assert_func>
    readData(currentMovieOffset, 8);
 8002948:	2208      	movs	r2, #8
 800294a:	6981      	ldr	r1, [r0, #24]
 800294c:	f7ff fd9c 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002950:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002952:	4620      	mov	r0, r4
 8002954:	f106 0a08 	add.w	sl, r6, #8
 8002958:	1d31      	adds	r1, r6, #4
 800295a:	f7ff fd71 	bl	8002440 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800295e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002960:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002964:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002966:	429a      	cmp	r2, r3
 8002968:	d231      	bcs.n	80029ce <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 800296a:	4631      	mov	r1, r6
 800296c:	4620      	mov	r0, r4
 800296e:	f7ff fd7c 	bl	800246a <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002972:	f243 0330 	movw	r3, #12336	; 0x3030
 8002976:	4298      	cmp	r0, r3
 8002978:	d11d      	bne.n	80029b6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800297a:	1cb1      	adds	r1, r6, #2
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff fd74 	bl	800246a <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002982:	f246 3364 	movw	r3, #25444	; 0x6364
 8002986:	4298      	cmp	r0, r3
 8002988:	d115      	bne.n	80029b6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800298a:	b1a5      	cbz	r5, 80029b6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800298c:	462a      	mov	r2, r5
 800298e:	4651      	mov	r1, sl
 8002990:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002992:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002996:	f7ff fd77 	bl	8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800299a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800299c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800299e:	462a      	mov	r2, r5
 80029a0:	4620      	mov	r0, r4
 80029a2:	f8cd 8000 	str.w	r8, [sp]
 80029a6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80029aa:	463b      	mov	r3, r7
 80029ac:	f7ff ffaf 	bl	800290e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80029b0:	6963      	ldr	r3, [r4, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80029b6:	69a3      	ldr	r3, [r4, #24]
 80029b8:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80029ba:	b18d      	cbz	r5, 80029e0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80029bc:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80029be:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80029c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80029c2:	3301      	adds	r3, #1
 80029c4:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80029c8:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80029ca:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80029cc:	d10a      	bne.n	80029e4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80029ce:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80029d0:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80029d2:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80029d4:	61a3      	str	r3, [r4, #24]
}
 80029d6:	f080 0001 	eor.w	r0, r0, #1
 80029da:	b004      	add	sp, #16
 80029dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 80029e0:	3308      	adds	r3, #8
 80029e2:	e7eb      	b.n	80029bc <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 80029e4:	2000      	movs	r0, #0
 80029e6:	e7f6      	b.n	80029d6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80029e8:	0802b3ef 	.word	0x0802b3ef
 80029ec:	0802b5be 	.word	0x0802b5be
 80029f0:	0802b343 	.word	0x0802b343

080029f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80029f4:	2001      	movs	r0, #1
 80029f6:	4770      	bx	lr

080029f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80029f8:	200c      	movs	r0, #12
 80029fa:	4770      	bx	lr

080029fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80029fc:	230c      	movs	r3, #12
 80029fe:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a02:	3008      	adds	r0, #8
 8002a04:	4770      	bx	lr

08002a06 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002a06:	230c      	movs	r3, #12
 8002a08:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a0c:	3008      	adds	r0, #8
 8002a0e:	4770      	bx	lr

08002a10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002a10:	2001      	movs	r0, #1
 8002a12:	4770      	bx	lr

08002a14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002a14:	f44f 7025 	mov.w	r0, #660	; 0x294
 8002a18:	4770      	bx	lr

08002a1a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a1a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002a1e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a22:	3008      	adds	r0, #8
 8002a24:	4770      	bx	lr

08002a26 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a26:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002a2a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a2e:	3008      	adds	r0, #8
 8002a30:	4770      	bx	lr

08002a32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002a32:	2001      	movs	r0, #1
 8002a34:	4770      	bx	lr

08002a36 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002a36:	2010      	movs	r0, #16
 8002a38:	4770      	bx	lr

08002a3a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a3a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002a3e:	3008      	adds	r0, #8
 8002a40:	4770      	bx	lr

08002a42 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a42:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002a46:	3008      	adds	r0, #8
 8002a48:	4770      	bx	lr

08002a4a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotohomeScreenNoTransition();
 8002a4a:	4608      	mov	r0, r1
 8002a4c:	f000 bede 	b.w	800380c <_ZN23FrontendApplicationBase26gotohomeScreenNoTransitionEv>

08002a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a52:	b510      	push	{r4, lr}
 8002a54:	4604      	mov	r4, r0
 8002a56:	6003      	str	r3, [r0, #0]
 8002a58:	f014 f870 	bl	8016b3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	bd10      	pop	{r4, pc}
 8002a60:	0802b6cc 	.word	0x0802b6cc

08002a64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4604      	mov	r4, r0
 8002a68:	f7ff fff2 	bl	8002a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a6c:	2114      	movs	r1, #20
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f026 fe6a 	bl	8029748 <_ZdlPvj>
 8002a74:	4620      	mov	r0, r4
 8002a76:	bd10      	pop	{r4, pc}

08002a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a7a:	b510      	push	{r4, lr}
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	6003      	str	r3, [r0, #0]
 8002a80:	f014 f85c 	bl	8016b3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a84:	4620      	mov	r0, r4
 8002a86:	bd10      	pop	{r4, pc}
 8002a88:	0802b698 	.word	0x0802b698

08002a8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	4604      	mov	r4, r0
 8002a90:	f7ff fff2 	bl	8002a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a94:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f026 fe55 	bl	8029748 <_ZdlPvj>
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	bd10      	pop	{r4, pc}
	...

08002aa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	6003      	str	r3, [r0, #0]
 8002aac:	f014 f846 	bl	8016b3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	bd10      	pop	{r4, pc}
 8002ab4:	0802b664 	.word	0x0802b664

08002ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4604      	mov	r4, r0
 8002abc:	f7ff fff2 	bl	8002aa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ac0:	2118      	movs	r1, #24
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f026 fe40 	bl	8029748 <_ZdlPvj>
 8002ac8:	4620      	mov	r0, r4
 8002aca:	bd10      	pop	{r4, pc}

08002acc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <_ZN12FrontendHeapD1Ev+0x24>)
 8002ace:	b510      	push	{r4, lr}
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	6003      	str	r3, [r0, #0]
 8002ad4:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
 8002ad8:	f7ff ffba 	bl	8002a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002adc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002ae0:	f7ff ffca 	bl	8002a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11galerieViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ae4:	f104 0014 	add.w	r0, r4, #20
 8002ae8:	f7ff ffdc 	bl	8002aa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galeriePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002aec:	4620      	mov	r0, r4
 8002aee:	bd10      	pop	{r4, pc}
 8002af0:	0802b700 	.word	0x0802b700

08002af4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002af4:	b508      	push	{r3, lr}
 8002af6:	4802      	ldr	r0, [pc, #8]	; (8002b00 <__tcf_0+0xc>)
 8002af8:	f7ff ffe8 	bl	8002acc <_ZN12FrontendHeapD1Ev>
 8002afc:	bd08      	pop	{r3, pc}
 8002afe:	bf00      	nop
 8002b00:	200003bc 	.word	0x200003bc

08002b04 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002b04:	b510      	push	{r4, lr}
 8002b06:	4604      	mov	r4, r0
 8002b08:	f7ff ffe0 	bl	8002acc <_ZN12FrontendHeapD1Ev>
 8002b0c:	f240 413c 	movw	r1, #1084	; 0x43c
 8002b10:	4620      	mov	r0, r4
 8002b12:	f026 fe19 	bl	8029748 <_ZdlPvj>
 8002b16:	4620      	mov	r0, r4
 8002b18:	bd10      	pop	{r4, pc}
	...

08002b1c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002b20:	f000 fc5a 	bl	80033d8 <_ZN14BitmapDatabase11getInstanceEv>
 8002b24:	2400      	movs	r4, #0
 8002b26:	4605      	mov	r5, r0
 8002b28:	f000 fc5a 	bl	80033e0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	4601      	mov	r1, r0
 8002b30:	4622      	mov	r2, r4
 8002b32:	4628      	mov	r0, r5
 8002b34:	9400      	str	r4, [sp, #0]
 8002b36:	f01a fff1 	bl	801db1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <touchgfx_init+0xb4>)
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002b3e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002b40:	4d25      	ldr	r5, [pc, #148]	; (8002bd8 <touchgfx_init+0xbc>)
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f001 f810 	bl	8003b68 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002b48:	4824      	ldr	r0, [pc, #144]	; (8002bdc <touchgfx_init+0xc0>)
 8002b4a:	f01a ff4f 	bl	801d9ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002b4e:	782b      	ldrb	r3, [r5, #0]
 8002b50:	f3bf 8f5b 	dmb	ish
 8002b54:	07db      	lsls	r3, r3, #31
 8002b56:	d435      	bmi.n	8002bc4 <touchgfx_init+0xa8>
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f026 fdf7 	bl	802974c <__cxa_guard_acquire>
 8002b5e:	b388      	cbz	r0, 8002bc4 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002b60:	4c1f      	ldr	r4, [pc, #124]	; (8002be0 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <touchgfx_init+0xc8>)
 8002b64:	f504 7638 	add.w	r6, r4, #736	; 0x2e0
 8002b68:	f104 0014 	add.w	r0, r4, #20
 8002b6c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002b70:	f504 7732 	add.w	r7, r4, #712	; 0x2c8
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	6060      	str	r0, [r4, #4]
 8002b78:	f8c4 8008 	str.w	r8, [r4, #8]
 8002b7c:	60e7      	str	r7, [r4, #12]
 8002b7e:	6126      	str	r6, [r4, #16]
 8002b80:	f013 ffde 	bl	8016b40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <touchgfx_init+0xcc>)
 8002b86:	4640      	mov	r0, r8
 8002b88:	6163      	str	r3, [r4, #20]
 8002b8a:	f013 ffd9 	bl	8016b40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <touchgfx_init+0xd0>)
 8002b90:	4638      	mov	r0, r7
 8002b92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b94:	f013 ffd4 	bl	8016b40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <touchgfx_init+0xd4>)
 8002b9a:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
 8002b9e:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
 8002ba2:	f001 fbf3 	bl	800438c <_ZN5ModelC1Ev>
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	f504 7137 	add.w	r1, r4, #732	; 0x2dc
 8002bac:	4630      	mov	r0, r6
 8002bae:	f001 fbe3 	bl	8004378 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f000 fe2a 	bl	800380c <_ZN23FrontendApplicationBase26gotohomeScreenNoTransitionEv>
        static FrontendHeap instance;
 8002bb8:	480e      	ldr	r0, [pc, #56]	; (8002bf4 <touchgfx_init+0xd8>)
 8002bba:	f026 fe11 	bl	80297e0 <atexit>
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f026 fdd0 	bl	8029764 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <touchgfx_init+0xdc>)
}
 8002bc6:	b002      	add	sp, #8
 8002bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002bcc:	f7ff b8a2 	b.w	8001d14 <_ZN11TouchGFXHAL10initializeEv>
 8002bd0:	2001526c 	.word	0x2001526c
 8002bd4:	20001618 	.word	0x20001618
 8002bd8:	200003b8 	.word	0x200003b8
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	200003bc 	.word	0x200003bc
 8002be4:	0802b700 	.word	0x0802b700
 8002be8:	0802b664 	.word	0x0802b664
 8002bec:	0802b698 	.word	0x0802b698
 8002bf0:	0802b6cc 	.word	0x0802b6cc
 8002bf4:	08002af5 	.word	0x08002af5
 8002bf8:	2000159c 	.word	0x2000159c

08002bfc <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002bfc:	4770      	bx	lr
	...

08002c00 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002c00:	4801      	ldr	r0, [pc, #4]	; (8002c08 <touchgfx_taskEntry+0x8>)
 8002c02:	f015 b910 	b.w	8017e26 <_ZN8touchgfx3HAL9taskEntryEv>
 8002c06:	bf00      	nop
 8002c08:	2000159c 	.word	0x2000159c

08002c0c <_GLOBAL__sub_I_touchgfx_init>:
}
 8002c0c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002c0e:	4e23      	ldr	r6, [pc, #140]	; (8002c9c <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002c12:	4c24      	ldr	r4, [pc, #144]	; (8002ca4 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002c14:	4630      	mov	r0, r6
static LCD16bpp display;
 8002c16:	4d24      	ldr	r5, [pc, #144]	; (8002ca8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002c18:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002c1a:	f7ff fa1b 	bl	8002054 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f01e f888 	bl	8020d34 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c2c:	4820      	ldr	r0, [pc, #128]	; (8002cb0 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002c2e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60
 8002c32:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002c36:	671a      	str	r2, [r3, #112]	; 0x70
 8002c38:	60dc      	str	r4, [r3, #12]
 8002c3a:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002c3e:	491d      	ldr	r1, [pc, #116]	; (8002cb4 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002c40:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002c44:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002c48:	6759      	str	r1, [r3, #116]	; 0x74
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002c50:	4919      	ldr	r1, [pc, #100]	; (8002cb8 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002c52:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c54:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002c58:	8001      	strh	r1, [r0, #0]
 8002c5a:	4818      	ldr	r0, [pc, #96]	; (8002cbc <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002c5c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002c62:	4817      	ldr	r0, [pc, #92]	; (8002cc0 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002c64:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002c68:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002c6c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002c70:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002c74:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002c78:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002c7c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002c80:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002c84:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c88:	8001      	strh	r1, [r0, #0]
 8002c8a:	480e      	ldr	r0, [pc, #56]	; (8002cc4 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c90:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002c92:	490d      	ldr	r1, [pc, #52]	; (8002cc8 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002c94:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002c96:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	200007fc 	.word	0x200007fc
 8002ca0:	0802ade0 	.word	0x0802ade0
 8002ca4:	200007f8 	.word	0x200007f8
 8002ca8:	2000161c 	.word	0x2000161c
 8002cac:	2000159c 	.word	0x2000159c
 8002cb0:	20015204 	.word	0x20015204
 8002cb4:	01000001 	.word	0x01000001
 8002cb8:	20015210 	.word	0x20015210
 8002cbc:	2001520a 	.word	0x2001520a
 8002cc0:	20015206 	.word	0x20015206
 8002cc4:	2001520c 	.word	0x2001520c
 8002cc8:	20015208 	.word	0x20015208
 8002ccc:	0802af6c 	.word	0x0802af6c

08002cd0 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002cd0:	4801      	ldr	r0, [pc, #4]	; (8002cd8 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002cd2:	f7ff b99b 	b.w	800200c <_ZN8STM32DMAD1Ev>
 8002cd6:	bf00      	nop
 8002cd8:	200007fc 	.word	0x200007fc

08002cdc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002cdc:	2000      	movs	r0, #0
 8002cde:	4770      	bx	lr

08002ce0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002ce0:	8081      	strh	r1, [r0, #4]
    }
 8002ce2:	4770      	bx	lr

08002ce4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002ce4:	80c1      	strh	r1, [r0, #6]
    }
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002ce8:	8101      	strh	r1, [r0, #8]
    }
 8002cea:	4770      	bx	lr

08002cec <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002cec:	8141      	strh	r1, [r0, #10]
    }
 8002cee:	4770      	bx	lr

08002cf0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002cf0:	4770      	bx	lr

08002cf2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002cf2:	4770      	bx	lr

08002cf4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002cf4:	4770      	bx	lr

08002cf6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002cf6:	4770      	bx	lr

08002cf8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002cf8:	4770      	bx	lr

08002cfa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002cfa:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002cfc:	88c4      	ldrh	r4, [r0, #6]
 8002cfe:	6803      	ldr	r3, [r0, #0]
 8002d00:	1b12      	subs	r2, r2, r4
 8002d02:	8884      	ldrh	r4, [r0, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	1b09      	subs	r1, r1, r4
 8002d08:	b212      	sxth	r2, r2
    }
 8002d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002d0e:	b209      	sxth	r1, r1
 8002d10:	4718      	bx	r3

08002d12 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d16:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002d22:	6010      	str	r0, [r2, #0]
    }
 8002d24:	4770      	bx	lr

08002d26 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002d26:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002d2a:	b11a      	cbz	r2, 8002d34 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002d2c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002d30:	b102      	cbz	r2, 8002d34 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002d32:	6018      	str	r0, [r3, #0]
        }
    }
 8002d34:	4770      	bx	lr
	...

08002d38 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002d3a:	2290      	movs	r2, #144	; 0x90
 8002d3c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002d40:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002d50:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002d52:	480a      	ldr	r0, [pc, #40]	; (8002d7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002d5e:	6911      	ldr	r1, [r2, #16]
 8002d60:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002d64:	3901      	subs	r1, #1
 8002d66:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002d6a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002d72:	4770      	bx	lr
 8002d74:	40016800 	.word	0x40016800
 8002d78:	20001698 	.word	0x20001698
 8002d7c:	20001696 	.word	0x20001696

08002d80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002d82:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002d86:	4770      	bx	lr
 8002d88:	40016800 	.word	0x40016800

08002d8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002d8e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002d90:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d96:	4770      	bx	lr
 8002d98:	40016800 	.word	0x40016800

08002d9c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002d9e:	6953      	ldr	r3, [r2, #20]
 8002da0:	03db      	lsls	r3, r3, #15
{
 8002da2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002da4:	d51e      	bpl.n	8002de4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002dac:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002db0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002db4:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002db8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002dbc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002dc0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002dc2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002dc6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002dc8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002dcc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002dce:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002dd2:	d2f9      	bcs.n	8002dc8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002dd4:	3b20      	subs	r3, #32
 8002dd6:	f113 0f20 	cmn.w	r3, #32
 8002dda:	d1f2      	bne.n	8002dc2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002ddc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002de0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	bf00      	nop
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002dec:	4770      	bx	lr

08002dee <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002dee:	2338      	movs	r3, #56	; 0x38
 8002df0:	fb01 3103 	mla	r1, r1, r3, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002df8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002dfc:	b90b      	cbnz	r3, 8002e02 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002dfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e00:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002e02:	4770      	bx	lr

08002e04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002e04:	4770      	bx	lr

08002e06 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002e06:	b510      	push	{r4, lr}
 8002e08:	4604      	mov	r4, r0
 8002e0a:	2158      	movs	r1, #88	; 0x58
 8002e0c:	f026 fc9c 	bl	8029748 <_ZdlPvj>
 8002e10:	4620      	mov	r0, r4
 8002e12:	bd10      	pop	{r4, pc}

08002e14 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	4604      	mov	r4, r0
    HAL::initialize();
 8002e18:	f014 fff1 	bl	8017dfe <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002e20:	f018 f976 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4620      	mov	r0, r4
 8002e28:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002e34:	2300      	movs	r3, #0
 8002e36:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002e3a:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002e3e:	4a06      	ldr	r2, [pc, #24]	; (8002e58 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002e40:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002e46:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002e48:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	c007f800 	.word	0xc007f800
 8002e54:	20001e64 	.word	0x20001e64
 8002e58:	20001e1c 	.word	0x20001e1c
 8002e5c:	c00bf400 	.word	0xc00bf400

08002e60 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002e60:	f014 bfb4 	b.w	8017dcc <_ZN8touchgfx3HAL10beginFrameEv>

08002e64 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002e64:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002e68:	b113      	cbz	r3, 8002e70 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002e6a:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002e70:	f014 bfb8 	b.w	8017de4 <_ZN8touchgfx3HAL8endFrameEv>
 8002e74:	20001694 	.word	0x20001694

08002e78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002e78:	f014 bf72 	b.w	8017d60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002e7c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002e7c:	f015 b8db 	b.w	8018036 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002e80 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002e80:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e84:	b112      	cbz	r2, 8002e8c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002e86:	6803      	ldr	r3, [r0, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4718      	bx	r3
    }
 8002e8c:	4770      	bx	lr
	...

08002e90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8002e90:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002e92:	b131      	cbz	r1, 8002ea2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002e96:	f240 1197 	movw	r1, #407	; 0x197
 8002e9a:	4a04      	ldr	r2, [pc, #16]	; (8002eac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002e9e:	f026 fc81 	bl	80297a4 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002ea2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002ea6:	bd08      	pop	{r3, pc}
 8002ea8:	0802b70c 	.word	0x0802b70c
 8002eac:	0802b720 	.word	0x0802b720
 8002eb0:	0802b8ad 	.word	0x0802b8ad

08002eb4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002eb4:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002eb6:	b131      	cbz	r1, 8002ec6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002eba:	f240 1191 	movw	r1, #401	; 0x191
 8002ebe:	4a06      	ldr	r2, [pc, #24]	; (8002ed8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002ec0:	4806      	ldr	r0, [pc, #24]	; (8002edc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002ec2:	f026 fc6f 	bl	80297a4 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002ec6:	6840      	ldr	r0, [r0, #4]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	6803      	ldr	r3, [r0, #0]
    }
 8002ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4718      	bx	r3
 8002ed4:	0802b70c 	.word	0x0802b70c
 8002ed8:	0802b8ef 	.word	0x0802b8ef
 8002edc:	0802b8ad 	.word	0x0802b8ad

08002ee0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002ee0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002ee2:	b129      	cbz	r1, 8002ef0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002ee6:	217a      	movs	r1, #122	; 0x7a
 8002ee8:	4a03      	ldr	r2, [pc, #12]	; (8002ef8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002eea:	4804      	ldr	r0, [pc, #16]	; (8002efc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002eec:	f026 fc5a 	bl	80297a4 <__assert_func>
    }
 8002ef0:	6900      	ldr	r0, [r0, #16]
 8002ef2:	bd08      	pop	{r3, pc}
 8002ef4:	0802b70c 	.word	0x0802b70c
 8002ef8:	0802baa0 	.word	0x0802baa0
 8002efc:	0802b8ad 	.word	0x0802b8ad

08002f00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002f00:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002f02:	b129      	cbz	r1, 8002f10 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002f06:	2183      	movs	r1, #131	; 0x83
 8002f08:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002f0a:	4806      	ldr	r0, [pc, #24]	; (8002f24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002f0c:	f026 fc4a 	bl	80297a4 <__assert_func>
        stream.tickCount = 0;
 8002f10:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002f12:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002f14:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002f18:	bd08      	pop	{r3, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0802b70c 	.word	0x0802b70c
 8002f20:	0802bc58 	.word	0x0802bc58
 8002f24:	0802b8ad 	.word	0x0802b8ad

08002f28 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002f2c:	b129      	cbz	r1, 8002f3a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002f30:	21a4      	movs	r1, #164	; 0xa4
 8002f32:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002f34:	4827      	ldr	r0, [pc, #156]	; (8002fd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002f36:	f026 fc35 	bl	80297a4 <__assert_func>
        switch (cmd)
 8002f3a:	2a05      	cmp	r2, #5
 8002f3c:	d834      	bhi.n	8002fa8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002f3e:	e8df f002 	tbb	[pc, r2]
 8002f42:	2903      	.short	0x2903
 8002f44:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002f48:	6840      	ldr	r0, [r0, #4]
 8002f4a:	6803      	ldr	r3, [r0, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	4798      	blx	r3
 8002f50:	b350      	cbz	r0, 8002fa8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002f52:	f04f 31ff 	mov.w	r1, #4294967295
 8002f56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f58:	f004 fa72 	bl	8007440 <osMutexAcquire>
                stream.cancelDecoding = false;
 8002f5c:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002f5e:	2201      	movs	r2, #1
                if (stream.isStopped)
 8002f60:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002f64:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002f68:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002f6c:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002f6e:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 8002f70:	b101      	cbz	r1, 8002f74 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002f72:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002f74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002f78:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 8002f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f7c:	b92b      	cbnz	r3, 8002f8a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002f7e:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002f80:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002f82:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002f86:	f004 fb45 	bl	8007614 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002f8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002f90:	f004 ba86 	b.w	80074a0 <osMutexRelease>
            stream.isPlaying = false;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002f9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002f9e:	e003      	b.n	8002fa8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002fa0:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002fa6:	6143      	str	r3, [r0, #20]
    }
 8002fa8:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002faa:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002fb0:	6143      	str	r3, [r0, #20]
 8002fb2:	e7f2      	b.n	8002f9a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e7ed      	b.n	8002f9a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002fbe:	3b00      	subs	r3, #0
 8002fc0:	bf18      	it	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002fc8:	e7ee      	b.n	8002fa8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002fca:	bf00      	nop
 8002fcc:	0802b70c 	.word	0x0802b70c
 8002fd0:	0802be17 	.word	0x0802be17
 8002fd4:	0802b8ad 	.word	0x0802b8ad

08002fd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002fde:	b129      	cbz	r1, 8002fec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002fe0:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002fe2:	21e7      	movs	r1, #231	; 0xe7
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002fe6:	4832      	ldr	r0, [pc, #200]	; (80030b0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002fe8:	f026 fbdc 	bl	80297a4 <__assert_func>
        if (stream.isPlaying)
 8002fec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ff0:	b133      	cbz	r3, 8003000 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002ffa:	6943      	ldr	r3, [r0, #20]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d04d      	beq.n	80030a2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003006:	69e1      	ldr	r1, [r4, #28]
 8003008:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800300c:	4353      	muls	r3, r2
 800300e:	68a2      	ldr	r2, [r4, #8]
 8003010:	434a      	muls	r2, r1
 8003012:	4293      	cmp	r3, r2
 8003014:	d220      	bcs.n	8003058 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003016:	6a23      	ldr	r3, [r4, #32]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d042      	beq.n	80030a2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003022:	f004 fa0d 	bl	8007440 <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 8003026:	6a23      	ldr	r3, [r4, #32]
 8003028:	b10b      	cbz	r3, 800302e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 800302e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003030:	b9fb      	cbnz	r3, 8003072 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8003032:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8003034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003036:	f004 fa33 	bl	80074a0 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 800303a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800303e:	b90b      	cbnz	r3, 8003044 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8003040:	6a23      	ldr	r3, [r4, #32]
 8003042:	b13b      	cbz	r3, 8003054 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8003044:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003046:	b92b      	cbnz	r3, 8003054 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8003048:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 800304a:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 800304c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8003050:	f004 fae0 	bl	8007614 <osSemaphoreRelease>
    }
 8003054:	4628      	mov	r0, r5
 8003056:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8003058:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 800305c:	2800      	cmp	r0, #0
 800305e:	d0dd      	beq.n	800301c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003066:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003068:	bf98      	it	ls
 800306a:	f102 32ff 	addls.w	r2, r2, #4294967295
 800306e:	6262      	str	r2, [r4, #36]	; 0x24
 8003070:	e7d4      	b.n	800301c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8003072:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8003074:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8003078:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 800307a:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 800307c:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 800307e:	68e2      	ldr	r2, [r4, #12]
 8003080:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8003082:	68a2      	ldr	r2, [r4, #8]
 8003084:	3201      	adds	r2, #1
 8003086:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003088:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 800308a:	6833      	ldr	r3, [r6, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8003090:	2d00      	cmp	r5, #0
 8003092:	d1ce      	bne.n	8003032 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8003094:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1cb      	bne.n	8003034 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 800309c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80030a0:	e7c8      	b.n	8003034 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 80030a2:	2501      	movs	r5, #1
 80030a4:	e7c9      	b.n	800303a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 80030a6:	bf00      	nop
 80030a8:	0802b70c 	.word	0x0802b70c
 80030ac:	0802bfee 	.word	0x0802bfee
 80030b0:	0802b8ad 	.word	0x0802b8ad
 80030b4:	20015210 	.word	0x20015210

080030b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80030ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100

080030cc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80030ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80030d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80030e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030ea:	f3bf 8f6f 	isb	sy
}
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80030f4:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80030f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80030fa:	bb3b      	cbnz	r3, 800314c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 80030fc:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 80030fe:	6083      	str	r3, [r0, #8]
 8003100:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 8003102:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8003104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003108:	6143      	str	r3, [r0, #20]
 800310a:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 800310c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003110:	6183      	str	r3, [r0, #24]
 8003112:	61c3      	str	r3, [r0, #28]
 8003114:	6203      	str	r3, [r0, #32]
 8003116:	6243      	str	r3, [r0, #36]	; 0x24
 8003118:	6283      	str	r3, [r0, #40]	; 0x28
 800311a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800311c:	6303      	str	r3, [r0, #48]	; 0x30
 800311e:	6343      	str	r3, [r0, #52]	; 0x34
 8003120:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003124:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003126:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 800312a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800312e:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8003130:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003132:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003134:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003136:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 800313a:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 800313e:	4429      	add	r1, r5
 8003140:	428c      	cmp	r4, r1
 8003142:	d90a      	bls.n	800315a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003146:	2158      	movs	r1, #88	; 0x58
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 800314a:	e003      	b.n	8003154 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 800314e:	f240 11f5 	movw	r1, #501	; 0x1f5
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003154:	4808      	ldr	r0, [pc, #32]	; (8003178 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003156:	f026 fb25 	bl	80297a4 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 800315a:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 800315c:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003160:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 8003162:	6342      	str	r2, [r0, #52]	; 0x34
    }
 8003164:	4618      	mov	r0, r3
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	0802c34c 	.word	0x0802c34c
 800316c:	0802c38c 	.word	0x0802c38c
 8003170:	0802c192 	.word	0x0802c192
 8003174:	0802c1c2 	.word	0x0802c1c2
 8003178:	0802b8ad 	.word	0x0802b8ad

0800317c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800317c:	b510      	push	{r4, lr}
        return instance;
 800317e:	4c14      	ldr	r4, [pc, #80]	; (80031d0 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	b323      	cbz	r3, 80031ce <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_LTDC_LineEventCallback+0x58>)
 8003186:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <HAL_LTDC_LineEventCallback+0x5c>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	8811      	ldrh	r1, [r2, #0]
 800318c:	428b      	cmp	r3, r1
 800318e:	d113      	bne.n	80031b8 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_LTDC_LineEventCallback+0x60>)
 8003192:	8819      	ldrh	r1, [r3, #0]
 8003194:	f002 fd46 	bl	8005c24 <HAL_LTDC_ProgramLineEvent>
 8003198:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800319a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800319e:	3301      	adds	r3, #1
 80031a0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80031a4:	f7fe fee2 	bl	8001f6c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	f015 fb7b 	bl	80188a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80031ae:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80031b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80031b4:	f7fe bcde 	b.w	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80031b8:	f002 fd34 	bl	8005c24 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80031bc:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80031be:	6803      	ldr	r3, [r0, #0]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80031c4:	2000      	movs	r0, #0
    }
 80031c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80031ca:	f7fe bd03 	b.w	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	20015210 	.word	0x20015210
 80031d4:	40016800 	.word	0x40016800
 80031d8:	20001698 	.word	0x20001698
 80031dc:	20001696 	.word	0x20001696

080031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80031e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031e4:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 80031e6:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80031ea:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 80031ee:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80031f2:	b91b      	cbnz	r3, 80031fc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 80031f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80031f6:	f004 f9d3 	bl	80075a0 <osSemaphoreAcquire>
                continue;
 80031fa:	e7f6      	b.n	80031ea <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 80031fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031fe:	f004 f91f 	bl	8007440 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003202:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 8003206:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003208:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 800320a:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800320c:	bf08      	it	eq
 800320e:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 8003210:	b336      	cbz	r6, 8003260 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 8003212:	682b      	ldr	r3, [r5, #0]
 8003214:	4631      	mov	r1, r6
 8003216:	4628      	mov	r0, r5
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	4798      	blx	r3
                stream.seek_to_frame = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 8003220:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003226:	f004 f93b 	bl	80074a0 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800322a:	682b      	ldr	r3, [r5, #0]
 800322c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003230:	4639      	mov	r1, r7
 8003232:	f8cd 8000 	str.w	r8, [sp]
 8003236:	4628      	mov	r0, r5
 8003238:	695e      	ldr	r6, [r3, #20]
 800323a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800323e:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003244:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 8003246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003248:	f004 f8fa 	bl	8007440 <osMutexAcquire>
            if (stream.cancelDecoding)
 800324c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8003250:	b1c3      	cbz	r3, 8003284 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 8003252:	2300      	movs	r3, #0
 8003254:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800325a:	f004 f921 	bl	80074a0 <osMutexRelease>
 800325e:	e7c4      	b.n	80031ea <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 8003260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0de      	beq.n	8003224 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	4628      	mov	r0, r5
 800326a:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800326e:	4798      	blx	r3
 8003270:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003272:	4401      	add	r1, r0
 8003274:	4628      	mov	r0, r5
 8003276:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 8003278:	68a3      	ldr	r3, [r4, #8]
 800327a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 800327c:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 800327e:	4413      	add	r3, r2
 8003280:	60a3      	str	r3, [r4, #8]
 8003282:	e7cf      	b.n	8003224 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 8003284:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 8003286:	b15e      	cbz	r6, 80032a0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	4628      	mov	r0, r5
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	4798      	blx	r3
 8003290:	3801      	subs	r0, #1
 8003292:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 8003294:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 8003296:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 800329a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800329e:	e7db      	b.n	8003258 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 80032a0:	2301      	movs	r3, #1
 80032a2:	60e3      	str	r3, [r4, #12]
 80032a4:	e7f6      	b.n	8003294 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

080032a8 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <videoTaskFunc+0x8>)
{
 80032aa:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80032ac:	f7ff ff98 	bl	80031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80032b0:	20001e64 	.word	0x20001e64

080032b4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 80032b4:	6803      	ldr	r3, [r0, #0]
 80032b6:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 80032bc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80032be:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 80032c0:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 80032c2:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032ca:	f004 f8b9 	bl	8007440 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80032ce:	2138      	movs	r1, #56	; 0x38
 80032d0:	fb01 4305 	mla	r3, r1, r5, r4
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	b10a      	cbz	r2, 80032dc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 80032d8:	2200      	movs	r2, #0
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c
 80032dc:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 80032ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80032ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 80032f2:	f004 b8d5 	b.w	80074a0 <osMutexRelease>

080032f6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 80032f6:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 80032f8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 80032fc:	4604      	mov	r4, r0
 80032fe:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 8003300:	4611      	mov	r1, r2
 8003302:	6858      	ldr	r0, [r3, #4]
 8003304:	6803      	ldr	r3, [r0, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4798      	blx	r3
        clearState(handle);
 800330a:	4629      	mov	r1, r5
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff ffd1 	bl	80032b4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003312:	bd38      	pop	{r3, r4, r5, pc}

08003314 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	460d      	mov	r5, r1
 8003318:	4611      	mov	r1, r2
 800331a:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 800331c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003320:	6850      	ldr	r0, [r2, #4]
 8003322:	6802      	ldr	r2, [r0, #0]
 8003324:	6896      	ldr	r6, [r2, #8]
 8003326:	461a      	mov	r2, r3
 8003328:	47b0      	blx	r6
        clearState(handle);
 800332a:	4629      	mov	r1, r5
 800332c:	4620      	mov	r0, r4
 800332e:	f7ff ffc1 	bl	80032b4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003332:	bd70      	pop	{r4, r5, r6, pc}

08003334 <_GLOBAL__sub_I_lineBuffer>:
}
 8003334:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003336:	4916      	ldr	r1, [pc, #88]	; (8003390 <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 8003338:	2500      	movs	r5, #0
 800333a:	4816      	ldr	r0, [pc, #88]	; (8003394 <_GLOBAL__sub_I_lineBuffer+0x60>)
 800333c:	f7ff f858 	bl	80023f0 <_ZN20SoftwareMJPEGDecoderC1EPh>
 8003340:	4c15      	ldr	r4, [pc, #84]	; (8003398 <_GLOBAL__sub_I_lineBuffer+0x64>)
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <_GLOBAL__sub_I_lineBuffer+0x68>)
 8003344:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003346:	462a      	mov	r2, r5
 8003348:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 800334a:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800334c:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 8003350:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003352:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 8003354:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003358:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 800335c:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 8003360:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003364:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003368:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800336c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003370:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8003374:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 8003378:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800337c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 8003380:	f004 f8b8 	bl	80074f4 <osSemaphoreNew>
 8003384:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 8003386:	4628      	mov	r0, r5
 8003388:	f004 f818 	bl	80073bc <osMutexNew>
 800338c:	6560      	str	r0, [r4, #84]	; 0x54
}
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	2000169c 	.word	0x2000169c
 8003394:	20001e1c 	.word	0x20001e1c
 8003398:	20001e64 	.word	0x20001e64
 800339c:	0802c53c 	.word	0x0802c53c

080033a0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80033a0:	4770      	bx	lr

080033a2 <_ZN23ApplicationFontProviderD0Ev>:
 80033a2:	b510      	push	{r4, lr}
 80033a4:	4604      	mov	r4, r0
 80033a6:	2104      	movs	r1, #4
 80033a8:	f026 f9ce 	bl	8029748 <_ZdlPvj>
 80033ac:	4620      	mov	r0, r4
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80033b0:	2901      	cmp	r1, #1
{
 80033b2:	b508      	push	{r3, lr}
    switch (typography)
 80033b4:	d006      	beq.n	80033c4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80033b6:	2902      	cmp	r1, #2
 80033b8:	d008      	beq.n	80033cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80033ba:	b959      	cbnz	r1, 80033d4 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80033bc:	f000 fc20 	bl	8003c00 <_ZN17TypedTextDatabase8getFontsEv>
 80033c0:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80033c2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80033c4:	f000 fc1c 	bl	8003c00 <_ZN17TypedTextDatabase8getFontsEv>
 80033c8:	6840      	ldr	r0, [r0, #4]
 80033ca:	e7fa      	b.n	80033c2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80033cc:	f000 fc18 	bl	8003c00 <_ZN17TypedTextDatabase8getFontsEv>
 80033d0:	6880      	ldr	r0, [r0, #8]
 80033d2:	e7f6      	b.n	80033c2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80033d4:	2000      	movs	r0, #0
 80033d6:	e7f4      	b.n	80033c2 <_ZN23ApplicationFontProvider7getFontEt+0x12>

080033d8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80033d8:	4800      	ldr	r0, [pc, #0]	; (80033dc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80033da:	4770      	bx	lr
 80033dc:	0802c584 	.word	0x0802c584

080033e0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80033e0:	2006      	movs	r0, #6
 80033e2:	4770      	bx	lr

080033e4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80033e4:	b513      	push	{r0, r1, r4, lr}
 80033e6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80033e8:	b151      	cbz	r1, 8003400 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033ea:	6803      	ldr	r3, [r0, #0]
 80033ec:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80033ee:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80033f0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033f4:	689c      	ldr	r4, [r3, #8]
 80033f6:	f10d 0303 	add.w	r3, sp, #3
 80033fa:	47a0      	blx	r4
        return glyph;
    }
 80033fc:	b002      	add	sp, #8
 80033fe:	bd10      	pop	{r4, pc}
            return 0;
 8003400:	4608      	mov	r0, r1
 8003402:	e7fb      	b.n	80033fc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003404 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003404:	89c0      	ldrh	r0, [r0, #14]
 8003406:	4770      	bx	lr

08003408 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003408:	8a00      	ldrh	r0, [r0, #16]
 800340a:	4770      	bx	lr

0800340c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800340c:	88c0      	ldrh	r0, [r0, #6]
 800340e:	4770      	bx	lr

08003410 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003410:	8880      	ldrh	r0, [r0, #4]
 8003412:	4770      	bx	lr

08003414 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003414:	7a80      	ldrb	r0, [r0, #10]
    }
 8003416:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800341a:	4770      	bx	lr

0800341c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800341c:	7a80      	ldrb	r0, [r0, #10]
    }
 800341e:	09c0      	lsrs	r0, r0, #7
 8003420:	4770      	bx	lr

08003422 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003422:	4770      	bx	lr

08003424 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003424:	b510      	push	{r4, lr}
 8003426:	4604      	mov	r4, r0
    }
 8003428:	2108      	movs	r1, #8
 800342a:	f026 f98d 	bl	8029748 <_ZdlPvj>
 800342e:	4620      	mov	r0, r4
 8003430:	bd10      	pop	{r4, pc}

08003432 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003432:	4770      	bx	lr

08003434 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003434:	4770      	bx	lr

08003436 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003436:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800343a:	6808      	ldr	r0, [r1, #0]
 800343c:	6849      	ldr	r1, [r1, #4]
 800343e:	c303      	stmia	r3!, {r0, r1}
    }
 8003440:	4770      	bx	lr

08003442 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003442:	4770      	bx	lr

08003444 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003444:	4770      	bx	lr

08003446 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003446:	6041      	str	r1, [r0, #4]
    }
 8003448:	4770      	bx	lr

0800344a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800344a:	4770      	bx	lr

0800344c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800344e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003452:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003456:	2300      	movs	r3, #0
 8003458:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// home

void FrontendApplicationBase::gotohomeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotohomeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800345c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003460:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotohomeScreenNoTransition();
    }
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	0800365d 	.word	0x0800365d

0800346c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800346c:	2301      	movs	r3, #1
 800346e:	7203      	strb	r3, [r0, #8]
    }
 8003470:	4770      	bx	lr

08003472 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003472:	4770      	bx	lr

08003474 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003474:	4770      	bx	lr

08003476 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003476:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003478:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800347a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800347c:	68c2      	ldr	r2, [r0, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	1054      	asrs	r4, r2, #1
 8003482:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003486:	07d2      	lsls	r2, r2, #31
 8003488:	bf48      	it	mi
 800348a:	590a      	ldrmi	r2, [r1, r4]
    }
 800348c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003490:	bf48      	it	mi
 8003492:	58d3      	ldrmi	r3, [r2, r3]
 8003494:	4718      	bx	r3

08003496 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003496:	6843      	ldr	r3, [r0, #4]
 8003498:	b12b      	cbz	r3, 80034a6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800349a:	6883      	ldr	r3, [r0, #8]
 800349c:	b92b      	cbnz	r3, 80034aa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800349e:	68c0      	ldr	r0, [r0, #12]
 80034a0:	f000 0001 	and.w	r0, r0, #1
 80034a4:	4770      	bx	lr
 80034a6:	4618      	mov	r0, r3
 80034a8:	4770      	bx	lr
 80034aa:	2001      	movs	r0, #1
    }
 80034ac:	4770      	bx	lr

080034ae <_ZN8touchgfx12NoTransitionD0Ev>:
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
 80034b2:	210c      	movs	r1, #12
 80034b4:	f026 f948 	bl	8029748 <_ZdlPvj>
 80034b8:	4620      	mov	r0, r4
 80034ba:	bd10      	pop	{r4, pc}

080034bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	2110      	movs	r1, #16
 80034c2:	f026 f941 	bl	8029748 <_ZdlPvj>
 80034c6:	4620      	mov	r0, r4
 80034c8:	bd10      	pop	{r4, pc}

080034ca <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80034ca:	b510      	push	{r4, lr}
 80034cc:	4604      	mov	r4, r0
 80034ce:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80034d2:	f026 f939 	bl	8029748 <_ZdlPvj>
 80034d6:	4620      	mov	r0, r4
 80034d8:	bd10      	pop	{r4, pc}

080034da <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80034da:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80034dc:	f017 fe18 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80034e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80034e4:	f018 baa8 	b.w	801ba38 <_ZN8touchgfx11Application10invalidateEv>

080034e8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80034ec:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 80034f0:	b158      	cbz	r0, 800350a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4798      	blx	r3
 80034f8:	b138      	cbz	r0, 800350a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80034fa:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80034fe:	6803      	ldr	r3, [r0, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800350a:	bd10      	pop	{r4, pc}

0800350c <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogalerieScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotogalerieScreenNoTransitionImpl()
{
 800350c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<galerieView, galeriePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003510:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003514:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003516:	68a8      	ldr	r0, [r5, #8]
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4798      	blx	r3
 800351e:	f5b0 7f25 	cmp.w	r0, #660	; 0x294
 8003522:	d205      	bcs.n	8003530 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x24>
 8003524:	4b45      	ldr	r3, [pc, #276]	; (800363c <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x130>)
 8003526:	21a3      	movs	r1, #163	; 0xa3
 8003528:	4a45      	ldr	r2, [pc, #276]	; (8003640 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800352a:	4846      	ldr	r0, [pc, #280]	; (8003644 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x138>)
 800352c:	f026 f93a 	bl	80297a4 <__assert_func>
 8003530:	6868      	ldr	r0, [r5, #4]
 8003532:	6803      	ldr	r3, [r0, #0]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4798      	blx	r3
 8003538:	280f      	cmp	r0, #15
 800353a:	d803      	bhi.n	8003544 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x38>
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x13c>)
 800353e:	21a4      	movs	r1, #164	; 0xa4
 8003540:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x134>)
 8003542:	e7f2      	b.n	800352a <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003544:	68e8      	ldr	r0, [r5, #12]
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4798      	blx	r3
 800354c:	280b      	cmp	r0, #11
 800354e:	d803      	bhi.n	8003558 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x4c>
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x140>)
 8003552:	21a5      	movs	r1, #165	; 0xa5
 8003554:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x134>)
 8003556:	e7e8      	b.n	800352a <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003558:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003654 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 800355c:	f017 fdd8 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003560:	3004      	adds	r0, #4
 8003562:	f017 fe13 	bl	801b18c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003566:	f8d9 0000 	ldr.w	r0, [r9]
 800356a:	b110      	cbz	r0, 8003572 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 800356c:	6803      	ldr	r3, [r0, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4798      	blx	r3
    if (*currentTrans)
 8003572:	f8d9 0000 	ldr.w	r0, [r9]
 8003576:	b110      	cbz	r0, 800357e <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4798      	blx	r3
    if (*currentScreen)
 800357e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003658 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x14c>
 8003582:	f8d8 0000 	ldr.w	r0, [r8]
 8003586:	b110      	cbz	r0, 800358e <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4798      	blx	r3
    if (*currentPresenter)
 800358e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003592:	b110      	cbz	r0, 800359a <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003594:	6803      	ldr	r3, [r0, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4798      	blx	r3
    if (*currentScreen)
 800359a:	f8d8 0000 	ldr.w	r0, [r8]
 800359e:	b110      	cbz	r0, 80035a6 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4798      	blx	r3
    if (*currentPresenter)
 80035a6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80035aa:	b110      	cbz	r0, 80035b2 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80035ac:	6803      	ldr	r3, [r0, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80035b2:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80035b4:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80035b6:	f04f 0b00 	mov.w	fp, #0
 80035ba:	6803      	ldr	r3, [r0, #0]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	4798      	blx	r3
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x144>)
 80035c2:	4604      	mov	r4, r0
 80035c4:	f8c0 b004 	str.w	fp, [r0, #4]
 80035c8:	6003      	str	r3, [r0, #0]
 80035ca:	4659      	mov	r1, fp
 80035cc:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80035d0:	68a8      	ldr	r0, [r5, #8]
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	4798      	blx	r3
 80035d8:	4606      	mov	r6, r0
 80035da:	f000 ff0f 	bl	80043fc <_ZN11galerieViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80035de:	6868      	ldr	r0, [r5, #4]
 80035e0:	4659      	mov	r1, fp
 80035e2:	6803      	ldr	r3, [r0, #0]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	4798      	blx	r3
 80035e8:	4605      	mov	r5, r0
 80035ea:	4631      	mov	r1, r6
 80035ec:	f000 fee0 	bl	80043b0 <_ZN16galeriePresenterC1ER11galerieView>
    *currentTrans = newTransition;
 80035f0:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80035f4:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80035f8:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80035fc:	b1e5      	cbz	r5, 8003638 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0x12c>
 80035fe:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003600:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003604:	4630      	mov	r0, r6
 8003606:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003608:	f8c5 a008 	str.w	sl, [r5, #8]
 800360c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800360e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003610:	4798      	blx	r3
    newPresenter->activate();
 8003612:	682b      	ldr	r3, [r5, #0]
 8003614:	4628      	mov	r0, r5
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800361a:	4621      	mov	r1, r4
 800361c:	4630      	mov	r0, r6
 800361e:	f019 fa45 	bl	801caac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	4620      	mov	r0, r4
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4798      	blx	r3
    newTransition->invalidate();
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	4620      	mov	r0, r4
 800362e:	695b      	ldr	r3, [r3, #20]
}
 8003630:	b001      	add	sp, #4
 8003632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003636:	4718      	bx	r3
    model->bind(newPresenter);
 8003638:	462b      	mov	r3, r5
 800363a:	e7e1      	b.n	8003600 <_ZN23FrontendApplicationBase33gotogalerieScreenNoTransitionImplEv+0xf4>
 800363c:	0802c60c 	.word	0x0802c60c
 8003640:	0802c69a 	.word	0x0802c69a
 8003644:	0802c79e 	.word	0x0802c79e
 8003648:	0802c7e5 	.word	0x0802c7e5
 800364c:	0802c888 	.word	0x0802c888
 8003650:	0802ca98 	.word	0x0802ca98
 8003654:	20015250 	.word	0x20015250
 8003658:	2001524c 	.word	0x2001524c

0800365c <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv>:
{
 800365c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<homeView, homePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003660:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003664:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003666:	68a8      	ldr	r0, [r5, #8]
 8003668:	6803      	ldr	r3, [r0, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4798      	blx	r3
 800366e:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
 8003672:	d205      	bcs.n	8003680 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x24>
 8003674:	4b45      	ldr	r3, [pc, #276]	; (800378c <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x130>)
 8003676:	21a3      	movs	r1, #163	; 0xa3
 8003678:	4a45      	ldr	r2, [pc, #276]	; (8003790 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800367a:	4846      	ldr	r0, [pc, #280]	; (8003794 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x138>)
 800367c:	f026 f892 	bl	80297a4 <__assert_func>
 8003680:	6868      	ldr	r0, [r5, #4]
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4798      	blx	r3
 8003688:	280f      	cmp	r0, #15
 800368a:	d803      	bhi.n	8003694 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x38>
 800368c:	4b42      	ldr	r3, [pc, #264]	; (8003798 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x13c>)
 800368e:	21a4      	movs	r1, #164	; 0xa4
 8003690:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x134>)
 8003692:	e7f2      	b.n	800367a <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003694:	68e8      	ldr	r0, [r5, #12]
 8003696:	6803      	ldr	r3, [r0, #0]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4798      	blx	r3
 800369c:	280b      	cmp	r0, #11
 800369e:	d803      	bhi.n	80036a8 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x4c>
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x140>)
 80036a2:	21a5      	movs	r1, #165	; 0xa5
 80036a4:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x134>)
 80036a6:	e7e8      	b.n	800367a <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80036a8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80037a4 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80036ac:	f017 fd30 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 80036b0:	3004      	adds	r0, #4
 80036b2:	f017 fd6b 	bl	801b18c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80036b6:	f8d9 0000 	ldr.w	r0, [r9]
 80036ba:	b110      	cbz	r0, 80036c2 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80036bc:	6803      	ldr	r3, [r0, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4798      	blx	r3
    if (*currentTrans)
 80036c2:	f8d9 0000 	ldr.w	r0, [r9]
 80036c6:	b110      	cbz	r0, 80036ce <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80036c8:	6803      	ldr	r3, [r0, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4798      	blx	r3
    if (*currentScreen)
 80036ce:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80037a8 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x14c>
 80036d2:	f8d8 0000 	ldr.w	r0, [r8]
 80036d6:	b110      	cbz	r0, 80036de <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80036d8:	6803      	ldr	r3, [r0, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4798      	blx	r3
    if (*currentPresenter)
 80036de:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80036e2:	b110      	cbz	r0, 80036ea <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80036e4:	6803      	ldr	r3, [r0, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4798      	blx	r3
    if (*currentScreen)
 80036ea:	f8d8 0000 	ldr.w	r0, [r8]
 80036ee:	b110      	cbz	r0, 80036f6 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80036f0:	6803      	ldr	r3, [r0, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4798      	blx	r3
    if (*currentPresenter)
 80036f6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80036fa:	b110      	cbz	r0, 8003702 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80036fc:	6803      	ldr	r3, [r0, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003702:	68e8      	ldr	r0, [r5, #12]
 8003704:	2100      	movs	r1, #0
 8003706:	f04f 0b00 	mov.w	fp, #0
 800370a:	6803      	ldr	r3, [r0, #0]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	4798      	blx	r3
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x144>)
 8003712:	4604      	mov	r4, r0
 8003714:	f8c0 b004 	str.w	fp, [r0, #4]
 8003718:	6003      	str	r3, [r0, #0]
 800371a:	4659      	mov	r1, fp
 800371c:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003720:	68a8      	ldr	r0, [r5, #8]
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	4798      	blx	r3
 8003728:	4606      	mov	r6, r0
 800372a:	f000 fea7 	bl	800447c <_ZN8homeViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800372e:	6868      	ldr	r0, [r5, #4]
 8003730:	4659      	mov	r1, fp
 8003732:	6803      	ldr	r3, [r0, #0]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	4798      	blx	r3
 8003738:	4605      	mov	r5, r0
 800373a:	4631      	mov	r1, r6
 800373c:	f000 fe78 	bl	8004430 <_ZN13homePresenterC1ER8homeView>
    *currentTrans = newTransition;
 8003740:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003744:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8003748:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800374c:	b1e5      	cbz	r5, 8003788 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0x12c>
 800374e:	1d2b      	adds	r3, r5, #4
 8003750:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003754:	4630      	mov	r0, r6
 8003756:	6833      	ldr	r3, [r6, #0]
 8003758:	f8c5 a008 	str.w	sl, [r5, #8]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003760:	4798      	blx	r3
    newPresenter->activate();
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	4628      	mov	r0, r5
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800376a:	4621      	mov	r1, r4
 800376c:	4630      	mov	r0, r6
 800376e:	f019 f99d 	bl	801caac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	4620      	mov	r0, r4
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	4798      	blx	r3
    newTransition->invalidate();
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	4620      	mov	r0, r4
 800377e:	695b      	ldr	r3, [r3, #20]
}
 8003780:	b001      	add	sp, #4
 8003782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003786:	4718      	bx	r3
    model->bind(newPresenter);
 8003788:	462b      	mov	r3, r5
 800378a:	e7e1      	b.n	8003750 <_ZN23FrontendApplicationBase30gotohomeScreenNoTransitionImplEv+0xf4>
 800378c:	0802c60c 	.word	0x0802c60c
 8003790:	0802c92b 	.word	0x0802c92b
 8003794:	0802c79e 	.word	0x0802c79e
 8003798:	0802c7e5 	.word	0x0802c7e5
 800379c:	0802c888 	.word	0x0802c888
 80037a0:	0802ca98 	.word	0x0802ca98
 80037a4:	20015250 	.word	0x20015250
 80037a8:	2001524c 	.word	0x2001524c

080037ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	4604      	mov	r4, r0
 80037b0:	4617      	mov	r7, r2
 80037b2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80037b4:	f017 fdbc 	bl	801b330 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80037ba:	2500      	movs	r5, #0
        instance = this;
 80037bc:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037be:	4629      	mov	r1, r5
      model(m)
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80037c2:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80037c6:	4e0f      	ldr	r6, [pc, #60]	; (8003804 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80037ce:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80037d2:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037d6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80037d8:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f9c1 	bl	8003b68 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80037e6:	6833      	ldr	r3, [r6, #0]
 80037e8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80037ec:	b10a      	cbz	r2, 80037f2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80037ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80037f0:	b900      	cbnz	r0, 80037f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80037f2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80037f4:	f01f f885 	bl	8022902 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80037f8:	4620      	mov	r0, r4
 80037fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037fc:	2001525c 	.word	0x2001525c
 8003800:	0802ca4c 	.word	0x0802ca4c
 8003804:	20015210 	.word	0x20015210
 8003808:	0802ca34 	.word	0x0802ca34

0800380c <_ZN23FrontendApplicationBase26gotohomeScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <_ZN23FrontendApplicationBase26gotohomeScreenNoTransitionEv+0x1c>)
 800380e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003812:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003816:	2300      	movs	r3, #0
 8003818:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 800381c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003820:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	0800365d 	.word	0x0800365d

0800382c <_ZN23FrontendApplicationBase29gotogalerieScreenNoTransitionEv>:
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <_ZN23FrontendApplicationBase29gotogalerieScreenNoTransitionEv+0x1c>)
 800382e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003832:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003836:	2300      	movs	r3, #0
 8003838:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 800383c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003840:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	0800350d 	.word	0x0800350d

0800384c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800384c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800384e:	4770      	bx	lr

08003850 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003850:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003852:	4770      	bx	lr

08003854 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003854:	4770      	bx	lr

08003856 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003856:	888b      	ldrh	r3, [r1, #4]
 8003858:	69c0      	ldr	r0, [r0, #28]
 800385a:	0adb      	lsrs	r3, r3, #11
 800385c:	680a      	ldr	r2, [r1, #0]
 800385e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003862:	4410      	add	r0, r2
 8003864:	4770      	bx	lr

08003866 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003866:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003868:	b1c2      	cbz	r2, 800389c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800386a:	7b13      	ldrb	r3, [r2, #12]
 800386c:	b1b3      	cbz	r3, 800389c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800386e:	7b54      	ldrb	r4, [r2, #13]
 8003870:	7ad2      	ldrb	r2, [r2, #11]
 8003872:	0224      	lsls	r4, r4, #8
 8003874:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003878:	4314      	orrs	r4, r2
 800387a:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800387c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800387e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003882:	8813      	ldrh	r3, [r2, #0]
 8003884:	428b      	cmp	r3, r1
 8003886:	d102      	bne.n	800388e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003888:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 800388c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800388e:	d805      	bhi.n	800389c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003890:	3801      	subs	r0, #1
 8003892:	3204      	adds	r2, #4
 8003894:	b280      	uxth	r0, r0
 8003896:	2800      	cmp	r0, #0
 8003898:	d1f3      	bne.n	8003882 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800389a:	e7f7      	b.n	800388c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800389c:	2000      	movs	r0, #0
 800389e:	e7f5      	b.n	800388c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080038a0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4604      	mov	r4, r0
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	f025 ff4f 	bl	8029748 <_ZdlPvj>
 80038aa:	4620      	mov	r0, r4
 80038ac:	bd10      	pop	{r4, pc}
	...

080038b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80038b0:	b530      	push	{r4, r5, lr}
 80038b2:	b08b      	sub	sp, #44	; 0x2c
 80038b4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80038b6:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 80038ba:	9508      	str	r5, [sp, #32]
 80038bc:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80038c0:	9507      	str	r5, [sp, #28]
 80038c2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80038c6:	9506      	str	r5, [sp, #24]
 80038c8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80038cc:	9505      	str	r5, [sp, #20]
 80038ce:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80038d2:	9504      	str	r5, [sp, #16]
 80038d4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80038d8:	9503      	str	r5, [sp, #12]
 80038da:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80038de:	9502      	str	r5, [sp, #8]
 80038e0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80038e4:	9501      	str	r5, [sp, #4]
 80038e6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80038ea:	9500      	str	r5, [sp, #0]
 80038ec:	f018 fd4c 	bl	801c388 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80038f2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038f8:	61e3      	str	r3, [r4, #28]
 80038fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80038fc:	6223      	str	r3, [r4, #32]
 80038fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003900:	6263      	str	r3, [r4, #36]	; 0x24
 8003902:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003904:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003906:	b00b      	add	sp, #44	; 0x2c
 8003908:	bd30      	pop	{r4, r5, pc}
 800390a:	bf00      	nop
 800390c:	0802cabc 	.word	0x0802cabc

08003910 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003910:	4770      	bx	lr
	...

08003914 <_Z23getFont_verdana_10_4bppv>:
{
 8003914:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003916:	4d16      	ldr	r5, [pc, #88]	; (8003970 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003918:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800391a:	782c      	ldrb	r4, [r5, #0]
 800391c:	f3bf 8f5b 	dmb	ish
 8003920:	f014 0401 	ands.w	r4, r4, #1
 8003924:	d120      	bne.n	8003968 <_Z23getFont_verdana_10_4bppv+0x54>
 8003926:	4628      	mov	r0, r5
 8003928:	f025 ff10 	bl	802974c <__cxa_guard_acquire>
 800392c:	b1e0      	cbz	r0, 8003968 <_Z23getFont_verdana_10_4bppv+0x54>
 800392e:	233f      	movs	r3, #63	; 0x3f
 8003930:	2201      	movs	r2, #1
 8003932:	4910      	ldr	r1, [pc, #64]	; (8003974 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003934:	9309      	str	r3, [sp, #36]	; 0x24
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003938:	4810      	ldr	r0, [pc, #64]	; (800397c <_Z23getFont_verdana_10_4bppv+0x68>)
 800393a:	9308      	str	r3, [sp, #32]
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800393e:	940a      	str	r4, [sp, #40]	; 0x28
 8003940:	9405      	str	r4, [sp, #20]
 8003942:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003946:	2304      	movs	r3, #4
 8003948:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800394c:	230a      	movs	r3, #10
 800394e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003958:	f7ff ffaa 	bl	80038b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800395c:	4809      	ldr	r0, [pc, #36]	; (8003984 <_Z23getFont_verdana_10_4bppv+0x70>)
 800395e:	f025 ff3f 	bl	80297e0 <atexit>
 8003962:	4628      	mov	r0, r5
 8003964:	f025 fefe 	bl	8029764 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003968:	4804      	ldr	r0, [pc, #16]	; (800397c <_Z23getFont_verdana_10_4bppv+0x68>)
 800396a:	b00f      	add	sp, #60	; 0x3c
 800396c:	bd30      	pop	{r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	20001ebc 	.word	0x20001ebc
 8003974:	900b3bec 	.word	0x900b3bec
 8003978:	0802f830 	.word	0x0802f830
 800397c:	20001ec0 	.word	0x20001ec0
 8003980:	0802f880 	.word	0x0802f880
 8003984:	08003911 	.word	0x08003911

08003988 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 30, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003988:	4770      	bx	lr
	...

0800398c <_Z23getFont_verdana_20_4bppv>:
{
 800398c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 30, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800398e:	4d17      	ldr	r5, [pc, #92]	; (80039ec <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8003990:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 30, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003992:	782c      	ldrb	r4, [r5, #0]
 8003994:	f3bf 8f5b 	dmb	ish
 8003998:	f014 0401 	ands.w	r4, r4, #1
 800399c:	d122      	bne.n	80039e4 <_Z23getFont_verdana_20_4bppv+0x58>
 800399e:	4628      	mov	r0, r5
 80039a0:	f025 fed4 	bl	802974c <__cxa_guard_acquire>
 80039a4:	b1f0      	cbz	r0, 80039e4 <_Z23getFont_verdana_20_4bppv+0x58>
 80039a6:	233f      	movs	r3, #63	; 0x3f
 80039a8:	221e      	movs	r2, #30
 80039aa:	4911      	ldr	r1, [pc, #68]	; (80039f0 <_Z23getFont_verdana_20_4bppv+0x64>)
 80039ac:	9309      	str	r3, [sp, #36]	; 0x24
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <_Z23getFont_verdana_20_4bppv+0x68>)
 80039b0:	4811      	ldr	r0, [pc, #68]	; (80039f8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80039b2:	9308      	str	r3, [sp, #32]
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <_Z23getFont_verdana_20_4bppv+0x70>)
 80039b6:	940a      	str	r4, [sp, #40]	; 0x28
 80039b8:	9307      	str	r3, [sp, #28]
 80039ba:	2301      	movs	r3, #1
 80039bc:	9401      	str	r4, [sp, #4]
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80039c4:	2304      	movs	r3, #4
 80039c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80039ca:	2314      	movs	r3, #20
 80039cc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2318      	movs	r3, #24
 80039d4:	f7ff ff6c 	bl	80038b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039d8:	4809      	ldr	r0, [pc, #36]	; (8003a00 <_Z23getFont_verdana_20_4bppv+0x74>)
 80039da:	f025 ff01 	bl	80297e0 <atexit>
 80039de:	4628      	mov	r0, r5
 80039e0:	f025 fec0 	bl	8029764 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80039e4:	4804      	ldr	r0, [pc, #16]	; (80039f8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80039e6:	b00f      	add	sp, #60	; 0x3c
 80039e8:	bd30      	pop	{r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	20001eec 	.word	0x20001eec
 80039f0:	900b3bfc 	.word	0x900b3bfc
 80039f4:	0802f834 	.word	0x0802f834
 80039f8:	20001ef0 	.word	0x20001ef0
 80039fc:	0802f884 	.word	0x0802f884
 8003a00:	08003989 	.word	0x08003989

08003a04 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a04:	4770      	bx	lr
	...

08003a08 <_Z23getFont_verdana_40_4bppv>:
{
 8003a08:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a0a:	4d16      	ldr	r5, [pc, #88]	; (8003a64 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003a0c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a0e:	782c      	ldrb	r4, [r5, #0]
 8003a10:	f3bf 8f5b 	dmb	ish
 8003a14:	f014 0401 	ands.w	r4, r4, #1
 8003a18:	d120      	bne.n	8003a5c <_Z23getFont_verdana_40_4bppv+0x54>
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f025 fe96 	bl	802974c <__cxa_guard_acquire>
 8003a20:	b1e0      	cbz	r0, 8003a5c <_Z23getFont_verdana_40_4bppv+0x54>
 8003a22:	233f      	movs	r3, #63	; 0x3f
 8003a24:	2201      	movs	r2, #1
 8003a26:	4910      	ldr	r1, [pc, #64]	; (8003a68 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003a28:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <_Z23getFont_verdana_40_4bppv+0x64>)
 8003a2c:	4810      	ldr	r0, [pc, #64]	; (8003a70 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a2e:	9308      	str	r3, [sp, #32]
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003a32:	940a      	str	r4, [sp, #40]	; 0x28
 8003a34:	9405      	str	r4, [sp, #20]
 8003a36:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a40:	2328      	movs	r3, #40	; 0x28
 8003a42:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a4c:	f7ff ff30 	bl	80038b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003a52:	f025 fec5 	bl	80297e0 <atexit>
 8003a56:	4628      	mov	r0, r5
 8003a58:	f025 fe84 	bl	8029764 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003a5c:	4804      	ldr	r0, [pc, #16]	; (8003a70 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a5e:	b00f      	add	sp, #60	; 0x3c
 8003a60:	bd30      	pop	{r4, r5, pc}
 8003a62:	bf00      	nop
 8003a64:	20001f1c 	.word	0x20001f1c
 8003a68:	900b3da0 	.word	0x900b3da0
 8003a6c:	0802f87c 	.word	0x0802f87c
 8003a70:	20001f20 	.word	0x20001f20
 8003a74:	0802f888 	.word	0x0802f888
 8003a78:	08003a05 	.word	0x08003a05

08003a7c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	4770      	bx	lr

08003a80 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003a80:	2000      	movs	r0, #0
 8003a82:	4770      	bx	lr

08003a84 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003a84:	b40e      	push	{r1, r2, r3}
 8003a86:	b503      	push	{r0, r1, lr}
 8003a88:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a8a:	2100      	movs	r1, #0
{
 8003a8c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003a90:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a92:	f018 faa1 	bl	801bfd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003a96:	b002      	add	sp, #8
 8003a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a9c:	b003      	add	sp, #12
 8003a9e:	4770      	bx	lr

08003aa0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003aa0:	b40c      	push	{r2, r3}
 8003aa2:	b507      	push	{r0, r1, r2, lr}
 8003aa4:	ab04      	add	r3, sp, #16
 8003aa6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003aaa:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003aac:	f018 fa94 	bl	801bfd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ab0:	b003      	add	sp, #12
 8003ab2:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ab6:	b002      	add	sp, #8
 8003ab8:	4770      	bx	lr
	...

08003abc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003abc:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003ac2:	b373      	cbz	r3, 8003b22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003ac4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003ac6:	b92b      	cbnz	r3, 8003ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003aca:	21c5      	movs	r1, #197	; 0xc5
 8003acc:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003ace:	4819      	ldr	r0, [pc, #100]	; (8003b34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003ad0:	f025 fe68 	bl	80297a4 <__assert_func>
            return buffer[pos];
 8003ad4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003ad6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ada:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003adc:	b30b      	cbz	r3, 8003b22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003ade:	f019 fd49 	bl	801d574 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003ae2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d803      	bhi.n	8003af0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003aea:	21cb      	movs	r1, #203	; 0xcb
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003aee:	e7ee      	b.n	8003ace <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003af0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003af2:	f640 103f 	movw	r0, #2367	; 0x93f
 8003af6:	1c53      	adds	r3, r2, #1
 8003af8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003afa:	2b09      	cmp	r3, #9
 8003afc:	4619      	mov	r1, r3
 8003afe:	bf88      	it	hi
 8003b00:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b04:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003b08:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003b0a:	4281      	cmp	r1, r0
 8003b0c:	d109      	bne.n	8003b22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003b0e:	2b0a      	cmp	r3, #10
 8003b10:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003b14:	bf28      	it	cs
 8003b16:	2300      	movcs	r3, #0
            return buffer[pos];
 8003b18:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003b1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003b1e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003b20:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003b22:	4620      	mov	r0, r4
}
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003b28:	f019 bc26 	b.w	801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003b2c:	0802cb14 	.word	0x0802cb14
 8003b30:	0802cb1d 	.word	0x0802cb1d
 8003b34:	0802cbc8 	.word	0x0802cbc8
 8003b38:	0802cc12 	.word	0x0802cc12
 8003b3c:	0802cc20 	.word	0x0802cc20

08003b40 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003b40:	f019 bbe3 	b.w	801d30a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003b44 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003b44:	b510      	push	{r4, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	ac02      	add	r4, sp, #8
 8003b4a:	e884 0006 	stmia.w	r4, {r1, r2}
 8003b4e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003b50:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003b52:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003b54:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	9b08      	ldr	r3, [sp, #32]
 8003b5e:	f016 fedb 	bl	801a918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003b62:	b006      	add	sp, #24
 8003b64:	bd10      	pop	{r4, pc}
	...

08003b68 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003b68:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003b6a:	bb18      	cbnz	r0, 8003bb4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003b6e:	4813      	ldr	r0, [pc, #76]	; (8003bbc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4913      	ldr	r1, [pc, #76]	; (8003bc0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003b74:	b1b3      	cbz	r3, 8003ba4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003b76:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003b78:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003b7a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003b7c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003b7e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	441a      	add	r2, r3
 8003b84:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003b8c:	f000 f838 	bl	8003c00 <_ZN17TypedTextDatabase8getFontsEv>
 8003b90:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003b92:	f000 f833 	bl	8003bfc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003b98:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003b9c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003ba0:	8018      	strh	r0, [r3, #0]
    }
}
 8003ba2:	e007      	b.n	8003bb4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003ba6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003baa:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003bae:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	d1e8      	bne.n	8003b86 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20001f4c 	.word	0x20001f4c
 8003bbc:	20001f50 	.word	0x20001f50
 8003bc0:	20001f54 	.word	0x20001f54
 8003bc4:	20001f58 	.word	0x20001f58
 8003bc8:	20015260 	.word	0x20015260
 8003bcc:	20015268 	.word	0x20015268
 8003bd0:	20015264 	.word	0x20015264
 8003bd4:	900b3dd4 	.word	0x900b3dd4
 8003bd8:	900b3db0 	.word	0x900b3db0
 8003bdc:	900b3e78 	.word	0x900b3e78

08003be0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20001f54 	.word	0x20001f54
 8003bf8:	20001f50 	.word	0x20001f50

08003bfc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003bfc:	2009      	movs	r0, #9
 8003bfe:	4770      	bx	lr

08003c00 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003c00:	4800      	ldr	r0, [pc, #0]	; (8003c04 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003c02:	4770      	bx	lr
 8003c04:	20001f5c 	.word	0x20001f5c

08003c08 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003c08:	b510      	push	{r4, lr}
};
 8003c0a:	4c05      	ldr	r4, [pc, #20]	; (8003c20 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003c0c:	f7ff febe 	bl	800398c <_Z23getFont_verdana_20_4bppv>
};
 8003c10:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003c12:	f7ff fef9 	bl	8003a08 <_Z23getFont_verdana_40_4bppv>
};
 8003c16:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003c18:	f7ff fe7c 	bl	8003914 <_Z23getFont_verdana_10_4bppv>
};
 8003c1c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003c1e:	bd10      	pop	{r4, pc}
 8003c20:	20001f5c 	.word	0x20001f5c

08003c24 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003c24:	4770      	bx	lr

08003c26 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003c26:	4770      	bx	lr

08003c28 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003c28:	4770      	bx	lr

08003c2a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003c2a:	4770      	bx	lr

08003c2c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003c2c:	4770      	bx	lr

08003c2e <_ZN15galerieViewBaseD1Ev>:
}

galerieViewBase::~galerieViewBase()
{

}
 8003c2e:	4770      	bx	lr

08003c30 <_ZN15galerieViewBase11setupScreenEv>:

void galerieViewBase::setupScreen()
{

}
 8003c30:	4770      	bx	lr

08003c32 <_ZN8touchgfx8CallbackI15galerieViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003c32:	4770      	bx	lr

08003c34 <_ZN8touchgfx8CallbackI15galerieViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003c34:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003c36:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003c38:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003c3a:	68c2      	ldr	r2, [r0, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	1055      	asrs	r5, r2, #1
 8003c40:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003c44:	07d2      	lsls	r2, r2, #31
 8003c46:	bf48      	it	mi
 8003c48:	5962      	ldrmi	r2, [r4, r5]
    }
 8003c4a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003c4c:	bf48      	it	mi
 8003c4e:	58d3      	ldrmi	r3, [r2, r3]
 8003c50:	4718      	bx	r3

08003c52 <_ZNK8touchgfx8CallbackI15galerieViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8003c52:	6843      	ldr	r3, [r0, #4]
 8003c54:	b12b      	cbz	r3, 8003c62 <_ZNK8touchgfx8CallbackI15galerieViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003c56:	6883      	ldr	r3, [r0, #8]
 8003c58:	b92b      	cbnz	r3, 8003c66 <_ZNK8touchgfx8CallbackI15galerieViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003c5a:	68c0      	ldr	r0, [r0, #12]
 8003c5c:	f000 0001 	and.w	r0, r0, #1
 8003c60:	4770      	bx	lr
 8003c62:	4618      	mov	r0, r3
 8003c64:	4770      	bx	lr
 8003c66:	2001      	movs	r0, #1
    }
 8003c68:	4770      	bx	lr

08003c6a <_ZN8touchgfx8CallbackI15galerieViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	2110      	movs	r1, #16
 8003c70:	f025 fd6a 	bl	8029748 <_ZdlPvj>
 8003c74:	4620      	mov	r0, r4
 8003c76:	bd10      	pop	{r4, pc}

08003c78 <_ZN15galerieViewBaseD0Ev>:
galerieViewBase::~galerieViewBase()
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4604      	mov	r4, r0
}
 8003c7c:	f44f 7125 	mov.w	r1, #660	; 0x294
 8003c80:	f025 fd62 	bl	8029748 <_ZdlPvj>
 8003c84:	4620      	mov	r0, r4
 8003c86:	bd10      	pop	{r4, pc}

08003c88 <_ZN15galerieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void galerieViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &return_button)
 8003c88:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 8003c8c:	4288      	cmp	r0, r1
{
 8003c8e:	b508      	push	{r3, lr}
    if (&src == &return_button)
 8003c90:	d105      	bne.n	8003c9e <_ZN15galerieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~galerieViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003c92:	f017 fa3d 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When return_button clicked change screen to home
        //Go to home with no screen transition
        application().gotohomeScreenNoTransition();
    }
}
 8003c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotohomeScreenNoTransition();
 8003c9a:	f7ff bdb7 	b.w	800380c <_ZN23FrontendApplicationBase26gotohomeScreenNoTransitionEv>
}
 8003c9e:	bd08      	pop	{r3, pc}

08003ca0 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003ca0:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003ca2:	b570      	push	{r4, r5, r6, lr}
 8003ca4:	4604      	mov	r4, r0
        setX(x);
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003ca8:	4615      	mov	r5, r2
        setX(x);
 8003caa:	4798      	blx	r3
        setY(y);
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003cb8:	4718      	bx	r3

08003cba <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003cba:	b570      	push	{r4, r5, r6, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003cc4:	f7ff ffec 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	4629      	mov	r1, r5
 8003ccc:	4620      	mov	r0, r4
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	4798      	blx	r3
        setHeight(height);
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003cde:	4718      	bx	r3

08003ce0 <_ZN8touchgfx6WidgetC1Ev>:
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003ce6:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 8003cea:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003cee:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf6:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8003cf8:	4a01      	ldr	r2, [pc, #4]	; (8003d00 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003cfa:	6002      	str	r2, [r0, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	0802cdc0 	.word	0x0802cdc0

08003d04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4604      	mov	r4, r0
 8003d08:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003d0a:	2226      	movs	r2, #38	; 0x26
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f025 fdd9 	bl	80298c4 <memset>
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7ff ffe4 	bl	8003ce0 <_ZN8touchgfx6WidgetC1Ev>
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	882b      	ldrh	r3, [r5, #0]
 8003d22:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003d24:	23ff      	movs	r3, #255	; 0xff
 8003d26:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 8003d2a:	f015 fc1a 	bl	8019562 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003d2e:	4620      	mov	r0, r4
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	0802f304 	.word	0x0802f304

08003d38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8003d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8003d3c:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 8003d3e:	4606      	mov	r6, r0
 8003d40:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 8003d42:	428b      	cmp	r3, r1
 8003d44:	d92a      	bls.n	8003d9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	b92b      	cbnz	r3, 8003d58 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8003d4e:	216c      	movs	r1, #108	; 0x6c
 8003d50:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8003d52:	4818      	ldr	r0, [pc, #96]	; (8003db4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8003d54:	f025 fd26 	bl	80297a4 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003d58:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	f7ff ff3a 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	9001      	str	r0, [sp, #4]
 8003d70:	4628      	mov	r0, r5
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	4798      	blx	r3
 8003d76:	682b      	ldr	r3, [r5, #0]
 8003d78:	4604      	mov	r4, r0
 8003d7a:	9901      	ldr	r1, [sp, #4]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	4628      	mov	r0, r5
 8003d80:	4798      	blx	r3
 8003d82:	fb14 f400 	smulbb	r4, r4, r0
 8003d86:	682b      	ldr	r3, [r5, #0]
 8003d88:	4628      	mov	r0, r5
 8003d8a:	b2a4      	uxth	r4, r4
 8003d8c:	9901      	ldr	r1, [sp, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	4798      	blx	r3
 8003d92:	4404      	add	r4, r0
 8003d94:	f8a6 4046 	strh.w	r4, [r6, #70]	; 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    }
 8003da2:	e7f9      	b.n	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x60>
 8003da4:	20015264 	.word	0x20015264
 8003da8:	20015260 	.word	0x20015260
 8003dac:	0802ccf2 	.word	0x0802ccf2
 8003db0:	0802cd34 	.word	0x0802cd34
 8003db4:	0802cd6f 	.word	0x0802cd6f
 8003db8:	20015268 	.word	0x20015268
 8003dbc:	2001526c 	.word	0x2001526c

08003dc0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003dc4:	2226      	movs	r2, #38	; 0x26
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f025 fd7c 	bl	80298c4 <memset>
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff ff87 	bl	8003ce0 <_ZN8touchgfx6WidgetC1Ev>
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003dd4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003dd8:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003dda:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003dde:	62a3      	str	r3, [r4, #40]	; 0x28
 8003de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de4:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003de6:	2300      	movs	r3, #0
 8003de8:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	8723      	strh	r3, [r4, #56]	; 0x38
 8003df2:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003df4:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	bf00      	nop
 8003dfc:	0802f20c 	.word	0x0802f20c
 8003e00:	0802c604 	.word	0x0802c604

08003e04 <_ZN15galerieViewBaseC1Ev>:
galerieViewBase::galerieViewBase() :
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	4604      	mov	r4, r0
        : presenter(0)
 8003e0a:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003e0c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    buttonCallback(this, &galerieViewBase::buttonCallbackHandler)
 8003e10:	4626      	mov	r6, r4
 8003e12:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
 8003e16:	f104 0998 	add.w	r9, r4, #152	; 0x98
 8003e1a:	f504 78fa 	add.w	r8, r4, #500	; 0x1f4
 8003e1e:	f504 7bce 	add.w	fp, r4, #412	; 0x19c
galerieViewBase::galerieViewBase() :
 8003e22:	ed2d 8b04 	vpush	{d8-d9}
 8003e26:	b08b      	sub	sp, #44	; 0x2c
 8003e28:	f018 fc94 	bl	801c754 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &galerieViewBase::buttonCallbackHandler)
 8003e2c:	4b8b      	ldr	r3, [pc, #556]	; (800405c <_ZN15galerieViewBaseC1Ev+0x258>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003e2e:	2226      	movs	r2, #38	; 0x26
 8003e30:	4629      	mov	r1, r5
 8003e32:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003e34:	f846 3b40 	str.w	r3, [r6], #64
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f025 fd43 	bl	80298c4 <memset>
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff ff4e 	bl	8003ce0 <_ZN8touchgfx6WidgetC1Ev>
 8003e44:	4b86      	ldr	r3, [pc, #536]	; (8004060 <_ZN15galerieViewBaseC1Ev+0x25c>)
 8003e46:	a908      	add	r1, sp, #32
 8003e48:	4650      	mov	r0, sl
 8003e4a:	6423      	str	r3, [r4, #64]	; 0x40
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
        : color(col)
 8003e50:	66a5      	str	r5, [r4, #104]	; 0x68
 8003e52:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8003e56:	f8ad 7020 	strh.w	r7, [sp, #32]
 8003e5a:	f7ff ff53 	bl	8003d04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003e5e:	4648      	mov	r0, r9
 8003e60:	f013 fc4a 	bl	80176f8 <_ZN8touchgfx19ScrollableContainerC1Ev>
 8003e64:	f504 73aa 	add.w	r3, r4, #340	; 0x154
 8003e68:	4618      	mov	r0, r3
 8003e6a:	ee08 3a10 	vmov	s16, r3
 8003e6e:	f015 fcb9 	bl	80197e4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e76:	a908      	add	r1, sp, #32
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 8003e78:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
 8003e7c:	f8a4 31c0 	strh.w	r3, [r4, #448]	; 0x1c0
 8003e80:	4b78      	ldr	r3, [pc, #480]	; (8004064 <_ZN15galerieViewBaseC1Ev+0x260>)
 8003e82:	f8ad 7020 	strh.w	r7, [sp, #32]
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003e86:	1d27      	adds	r7, r4, #4
 8003e88:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
 8003e8c:	f504 73e4 	add.w	r3, r4, #456	; 0x1c8
        : x(0), y(0), width(0), height(0)
 8003e90:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
 8003e94:	4618      	mov	r0, r3
 8003e96:	ee09 3a10 	vmov	s18, r3
 8003e9a:	e9c4 556a 	strd	r5, r5, [r4, #424]	; 0x1a8
 8003e9e:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
 8003ea2:	e9c4 556e 	strd	r5, r5, [r4, #440]	; 0x1b8
 8003ea6:	f7ff ff2d 	bl	8003d04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f7ff ff88 	bl	8003dc0 <_ZN8touchgfx8TextAreaC1Ev>
 8003eb0:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	ee08 3a90 	vmov	s17, r3
 8003eba:	f7ff ff81 	bl	8003dc0 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <_ZN15galerieViewBaseC1Ev+0x264>)
    __background.setPosition(0, 0, 480, 272);
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	e9c4 34a1 	strd	r3, r4, [r4, #644]	; 0x284
 8003eca:	4b68      	ldr	r3, [pc, #416]	; (800406c <_ZN15galerieViewBaseC1Ev+0x268>)
 8003ecc:	e9c4 35a3 	strd	r3, r5, [r4, #652]	; 0x28c
 8003ed0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003eda:	f7ff feee 	bl	8003cba <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003ede:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	66a3      	str	r3, [r4, #104]	; 0x68
 8003ee8:	2603      	movs	r6, #3
 8003eea:	f012 fe3d 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8003eee:	462a      	mov	r2, r5
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4650      	mov	r0, sl
 8003ef4:	f7ff fed4 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_METEOR_RAIN_ID));
 8003ef8:	a908      	add	r1, sp, #32
 8003efa:	4650      	mov	r0, sl
 8003efc:	f8ad 5020 	strh.w	r5, [sp, #32]
 8003f00:	f015 fb2f 	bl	8019562 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003f04:	4651      	mov	r1, sl
 8003f06:	4638      	mov	r0, r7
 8003f08:	f04f 0a02 	mov.w	sl, #2
 8003f0c:	f012 fe2c 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scrollableContainer1.setPosition(17, 48, 446, 210);
 8003f10:	23d2      	movs	r3, #210	; 0xd2
 8003f12:	2230      	movs	r2, #48	; 0x30
 8003f14:	4648      	mov	r0, r9
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	2111      	movs	r1, #17
 8003f1a:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8003f1e:	f7ff fecc 	bl	8003cba <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8003f22:	4648      	mov	r0, r9
 8003f24:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8003f28:	f013 fefd 	bl	8017d26 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    scrollableContainer1.setScrollbarsAlpha(255);
 8003f2c:	4648      	mov	r0, r9
 8003f2e:	21ff      	movs	r1, #255	; 0xff
 8003f30:	f013 fefe 	bl	8017d30 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
 8003f34:	4649      	mov	r1, r9
 8003f36:	4638      	mov	r0, r7
 8003f38:	f04f 0901 	mov.w	r9, #1
 8003f3c:	f012 fe14 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    return_button.setXY(2, 2);
 8003f40:	2202      	movs	r2, #2
 8003f42:	ee18 0a10 	vmov	r0, s16
 8003f46:	4611      	mov	r1, r2
 8003f48:	f7ff feaa 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    return_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_PRESSED_ID));
 8003f4c:	aa08      	add	r2, sp, #32
 8003f4e:	a907      	add	r1, sp, #28
 8003f50:	ee18 0a10 	vmov	r0, s16
 8003f54:	f8ad 6020 	strh.w	r6, [sp, #32]
 8003f58:	f8ad a01c 	strh.w	sl, [sp, #28]
 8003f5c:	f015 fa3b 	bl	80193d6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003f60:	ee18 0a10 	vmov	r0, s16
class TypedText
 8003f64:	f8a4 618c 	strh.w	r6, [r4, #396]	; 0x18c
 8003f68:	f7ff fee6 	bl	8003d38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	ee18 1a10 	vmov	r1, s16
 8003f74:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8003f76:	ae02      	add	r6, sp, #8
        colorPressed = col;
 8003f78:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
    return_button.setAction(buttonCallback);
 8003f7c:	f504 7321 	add.w	r3, r4, #644	; 0x284
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003f80:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8003f84:	f012 fdf0 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    container1.setPosition(202, 0, 250, 42);
 8003f88:	232a      	movs	r3, #42	; 0x2a
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	21ca      	movs	r1, #202	; 0xca
 8003f92:	23fa      	movs	r3, #250	; 0xfa
 8003f94:	f7ff fe91 	bl	8003cba <_ZN8touchgfx8Drawable11setPositionEssss>
    image2.setXY(0, -228);
 8003f98:	f06f 02e3 	mvn.w	r2, #227	; 0xe3
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	ee19 0a10 	vmov	r0, s18
 8003fa2:	f7ff fe7d 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_CONTAINERS_LARGE_NARROW_DARK_ID));
 8003fa6:	a908      	add	r1, sp, #32
 8003fa8:	ee19 0a10 	vmov	r0, s18
 8003fac:	f8ad 9020 	strh.w	r9, [sp, #32]
 8003fb0:	f015 fad7 	bl	8019562 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    container1.add(image2);
 8003fb4:	ee19 1a10 	vmov	r1, s18
 8003fb8:	4658      	mov	r0, fp
 8003fba:	f012 fdd5 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    text_nbimage.setXY(13, 9);
 8003fbe:	2209      	movs	r2, #9
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	210d      	movs	r1, #13
 8003fc4:	f7ff fe6c 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003fc8:	4b29      	ldr	r3, [pc, #164]	; (8004070 <_ZN15galerieViewBaseC1Ev+0x26c>)
        boundingArea = calculateBoundingArea();
 8003fca:	4641      	mov	r1, r8
 8003fcc:	4630      	mov	r0, r6
        color = newColor;
 8003fce:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
        linespace = space;
 8003fd2:	f8a4 5228 	strh.w	r5, [r4, #552]	; 0x228
        boundingArea = calculateBoundingArea();
 8003fd6:	f014 ff07 	bl	8018de8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003fda:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
        : typedTextId(id)
 8003fde:	4b25      	ldr	r3, [pc, #148]	; (8004074 <_ZN15galerieViewBaseC1Ev+0x270>)
 8003fe0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003fe4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    text_nbimage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3DM2));
 8003fe8:	a908      	add	r1, sp, #32
 8003fea:	4640      	mov	r0, r8
 8003fec:	9308      	str	r3, [sp, #32]
 8003fee:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
 8003ff2:	f015 f993 	bl	801931c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    container1.add(text_nbimage);
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	4658      	mov	r0, fp
 8003ffa:	f012 fdb5 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    text_nbimage_1.setXY(202, 9);
 8003ffe:	2209      	movs	r2, #9
 8004000:	ee18 0a90 	vmov	r0, s17
 8004004:	21ca      	movs	r1, #202	; 0xca
 8004006:	f7ff fe4b 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <_ZN15galerieViewBaseC1Ev+0x26c>)
        boundingArea = calculateBoundingArea();
 800400c:	ee18 1a90 	vmov	r1, s17
 8004010:	4630      	mov	r0, r6
        color = newColor;
 8004012:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
        linespace = space;
 8004016:	f8a4 5270 	strh.w	r5, [r4, #624]	; 0x270
        boundingArea = calculateBoundingArea();
 800401a:	f014 fee5 	bl	8018de8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800401e:	f504 731e 	add.w	r3, r4, #632	; 0x278
 8004022:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <_ZN15galerieViewBaseC1Ev+0x270>)
    text_nbimage_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLPC));
 800402c:	a908      	add	r1, sp, #32
 800402e:	ee18 0a90 	vmov	r0, s17
 8004032:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8004036:	9308      	str	r3, [sp, #32]
 8004038:	f015 f970 	bl	801931c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    container1.add(text_nbimage_1);
 800403c:	ee18 1a90 	vmov	r1, s17
 8004040:	4658      	mov	r0, fp
 8004042:	f012 fd91 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004046:	4638      	mov	r0, r7
 8004048:	4659      	mov	r1, fp
 800404a:	f012 fd8d 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800404e:	4620      	mov	r0, r4
 8004050:	b00b      	add	sp, #44	; 0x2c
 8004052:	ecbd 8b04 	vpop	{d8-d9}
 8004056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	0802ce40 	.word	0x0802ce40
 8004060:	0802f29c 	.word	0x0802f29c
 8004064:	0802f088 	.word	0x0802f088
 8004068:	0802ce28 	.word	0x0802ce28
 800406c:	08003c89 	.word	0x08003c89
 8004070:	ff78b0cc 	.word	0xff78b0cc
 8004074:	0802c604 	.word	0x0802c604

08004078 <_ZN12homeViewBase14function1_testEv>:
     * Virtual Action Handlers
     */
    virtual void function1_test()
    {
        // Override and implement this function in home
    }
 8004078:	4770      	bx	lr

0800407a <_ZN12homeViewBaseD1Ev>:
}

homeViewBase::~homeViewBase()
{

}
 800407a:	4770      	bx	lr

0800407c <_ZN12homeViewBase11setupScreenEv>:

void homeViewBase::setupScreen()
{

}
 800407c:	4770      	bx	lr

0800407e <_ZN8touchgfx8CallbackI12homeViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800407e:	4770      	bx	lr

08004080 <_ZN8touchgfx8CallbackI12homeViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004080:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004082:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004084:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004086:	68c2      	ldr	r2, [r0, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	1055      	asrs	r5, r2, #1
 800408c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004090:	07d2      	lsls	r2, r2, #31
 8004092:	bf48      	it	mi
 8004094:	5962      	ldrmi	r2, [r4, r5]
    }
 8004096:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004098:	bf48      	it	mi
 800409a:	58d3      	ldrmi	r3, [r2, r3]
 800409c:	4718      	bx	r3

0800409e <_ZNK8touchgfx8CallbackI12homeViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800409e:	6843      	ldr	r3, [r0, #4]
 80040a0:	b12b      	cbz	r3, 80040ae <_ZNK8touchgfx8CallbackI12homeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 80040a2:	6883      	ldr	r3, [r0, #8]
 80040a4:	b92b      	cbnz	r3, 80040b2 <_ZNK8touchgfx8CallbackI12homeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80040a6:	68c0      	ldr	r0, [r0, #12]
 80040a8:	f000 0001 	and.w	r0, r0, #1
 80040ac:	4770      	bx	lr
 80040ae:	4618      	mov	r0, r3
 80040b0:	4770      	bx	lr
 80040b2:	2001      	movs	r0, #1
    }
 80040b4:	4770      	bx	lr

080040b6 <_ZN8touchgfx8CallbackI12homeViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80040b6:	b510      	push	{r4, lr}
 80040b8:	4604      	mov	r4, r0
 80040ba:	2110      	movs	r1, #16
 80040bc:	f025 fb44 	bl	8029748 <_ZdlPvj>
 80040c0:	4620      	mov	r0, r4
 80040c2:	bd10      	pop	{r4, pc}

080040c4 <_ZN12homeViewBaseD0Ev>:
homeViewBase::~homeViewBase()
 80040c4:	b510      	push	{r4, lr}
 80040c6:	4604      	mov	r4, r0
}
 80040c8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80040cc:	f025 fb3c 	bl	8029748 <_ZdlPvj>
 80040d0:	4620      	mov	r0, r4
 80040d2:	bd10      	pop	{r4, pc}

080040d4 <_ZN12homeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void homeViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &galerie_button)
 80040d4:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 80040d8:	4299      	cmp	r1, r3
{
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	4604      	mov	r4, r0
 80040de:	460d      	mov	r5, r1
    if (&src == &galerie_button)
 80040e0:	d103      	bne.n	80040ea <_ZN12homeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80040e2:	f017 f815 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When galerie_button clicked change screen to galerie
        //Go to galerie with no screen transition
        application().gotogalerieScreenNoTransition();
 80040e6:	f7ff fba1 	bl	800382c <_ZN23FrontendApplicationBase29gotogalerieScreenNoTransitionEv>
    }
    if (&src == &help_button)
 80040ea:	f504 7394 	add.w	r3, r4, #296	; 0x128
 80040ee:	429d      	cmp	r5, r3
 80040f0:	d105      	bne.n	80040fe <_ZN12homeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
    {
        //Interaction2
        //When help_button clicked call virtual function
        //Call function1_test
        function1_test();
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	4620      	mov	r0, r4
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
}
 80040f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        function1_test();
 80040fc:	4718      	bx	r3
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}

08004100 <_ZN12homeViewBaseC1Ev>:
homeViewBase::homeViewBase() :
 8004100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004104:	4604      	mov	r4, r0
 8004106:	b08b      	sub	sp, #44	; 0x2c
 8004108:	2500      	movs	r5, #0
 800410a:	f018 fb23 	bl	801c754 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &homeViewBase::buttonCallbackHandler)
 800410e:	4626      	mov	r6, r4
 8004110:	4b88      	ldr	r3, [pc, #544]	; (8004334 <_ZN12homeViewBaseC1Ev+0x234>)
        : Widget(), alpha(255), color(0)
 8004112:	4629      	mov	r1, r5
 8004114:	2226      	movs	r2, #38	; 0x26
 8004116:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004118:	f104 096c 	add.w	r9, r4, #108	; 0x6c
 800411c:	f846 3b40 	str.w	r3, [r6], #64
 8004120:	4630      	mov	r0, r6
 8004122:	f025 fbcf 	bl	80298c4 <memset>
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff fdda 	bl	8003ce0 <_ZN8touchgfx6WidgetC1Ev>
 800412c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004130:	4b81      	ldr	r3, [pc, #516]	; (8004338 <_ZN12homeViewBaseC1Ev+0x238>)
 8004132:	f64f 77ff 	movw	r7, #65535	; 0xffff
        : Widget(), bitmap(bmp), alpha(255)
 8004136:	2226      	movs	r2, #38	; 0x26
 8004138:	4629      	mov	r1, r5
 800413a:	6423      	str	r3, [r4, #64]	; 0x40
 800413c:	4648      	mov	r0, r9
 800413e:	f884 8066 	strb.w	r8, [r4, #102]	; 0x66
 8004142:	f104 0be0 	add.w	fp, r4, #224	; 0xe0
        : color(col)
 8004146:	66a5      	str	r5, [r4, #104]	; 0x68
 8004148:	f504 7a94 	add.w	sl, r4, #296	; 0x128
 800414c:	f8ad 7020 	strh.w	r7, [sp, #32]
 8004150:	f025 fbb8 	bl	80298c4 <memset>
 8004154:	4648      	mov	r0, r9
 8004156:	f7ff fdc3 	bl	8003ce0 <_ZN8touchgfx6WidgetC1Ev>
 800415a:	4b78      	ldr	r3, [pc, #480]	; (800433c <_ZN12homeViewBaseC1Ev+0x23c>)
        Image::setBitmap(bmp);
 800415c:	a908      	add	r1, sp, #32
 800415e:	4648      	mov	r0, r9
        : Widget(), bitmap(bmp), alpha(255)
 8004160:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004162:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004166:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
 800416a:	f504 78b8 	add.w	r8, r4, #368	; 0x170
 800416e:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8004172:	f015 f9f6 	bl	8019562 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004176:	f104 0398 	add.w	r3, r4, #152	; 0x98
 800417a:	4618      	mov	r0, r3
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	f015 fb31 	bl	80197e4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004182:	4658      	mov	r0, fp
 8004184:	f015 fb2e 	bl	80197e4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004188:	4650      	mov	r0, sl
 800418a:	f015 fb2b 	bl	80197e4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800418e:	4629      	mov	r1, r5
 8004190:	2226      	movs	r2, #38	; 0x26
 8004192:	4640      	mov	r0, r8
 8004194:	f025 fb96 	bl	80298c4 <memset>
 8004198:	4640      	mov	r0, r8
 800419a:	f7ff fda1 	bl	8003ce0 <_ZN8touchgfx6WidgetC1Ev>
 800419e:	4a68      	ldr	r2, [pc, #416]	; (8004340 <_ZN12homeViewBaseC1Ev+0x240>)
 80041a0:	4b68      	ldr	r3, [pc, #416]	; (8004344 <_ZN12homeViewBaseC1Ev+0x244>)
        setXY(x, y);
 80041a2:	4629      	mov	r1, r5
 80041a4:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
 80041a8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80041ac:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
 80041b0:	4630      	mov	r0, r6
 80041b2:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ba:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
 80041be:	1d27      	adds	r7, r4, #4
        : color(col)
 80041c0:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
 80041c4:	f8a4 51a8 	strh.w	r5, [r4, #424]	; 0x1a8
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80041c8:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
              text(0)
 80041cc:	e9c4 256c 	strd	r2, r5, [r4, #432]	; 0x1b0
        : pobject(pObject), pmemfun(pmemfun_1)
 80041d0:	4a5d      	ldr	r2, [pc, #372]	; (8004348 <_ZN12homeViewBaseC1Ev+0x248>)
 80041d2:	e9c4 246e 	strd	r2, r4, [r4, #440]	; 0x1b8
 80041d6:	4a5d      	ldr	r2, [pc, #372]	; (800434c <_ZN12homeViewBaseC1Ev+0x24c>)
 80041d8:	e9c4 2570 	strd	r2, r5, [r4, #448]	; 0x1c0
 80041dc:	462a      	mov	r2, r5
 80041de:	f7ff fd5f 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80041e2:	4630      	mov	r0, r6
 80041e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80041e8:	f7fe fd7e 	bl	8002ce8 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80041ec:	4630      	mov	r0, r6
 80041ee:	f44f 7188 	mov.w	r1, #272	; 0x110
 80041f2:	f7fe fd7b 	bl	8002cec <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 80041f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80041fa:	4631      	mov	r1, r6
 80041fc:	4638      	mov	r0, r7
 80041fe:	66a2      	str	r2, [r4, #104]	; 0x68
 8004200:	2604      	movs	r6, #4
 8004202:	f012 fcb1 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background_img.setXY(0, 0);
 8004206:	462a      	mov	r2, r5
 8004208:	4629      	mov	r1, r5
 800420a:	4648      	mov	r0, r9
 800420c:	f7ff fd48 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    background_img.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_METEOR_RAIN_ID));
 8004210:	a908      	add	r1, sp, #32
 8004212:	4648      	mov	r0, r9
 8004214:	f8ad 5020 	strh.w	r5, [sp, #32]
 8004218:	f015 f9a3 	bl	8019562 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800421c:	4649      	mov	r1, r9
 800421e:	4638      	mov	r0, r7
 8004220:	f04f 0905 	mov.w	r9, #5
 8004224:	f012 fca0 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wifistate_button.setXY(120, 37);
 8004228:	9b01      	ldr	r3, [sp, #4]
 800422a:	2225      	movs	r2, #37	; 0x25
 800422c:	2178      	movs	r1, #120	; 0x78
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fd36 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    wifistate_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8004234:	9b01      	ldr	r3, [sp, #4]
 8004236:	a907      	add	r1, sp, #28
 8004238:	aa08      	add	r2, sp, #32
 800423a:	4618      	mov	r0, r3
 800423c:	f8ad 601c 	strh.w	r6, [sp, #28]
 8004240:	f8ad 9020 	strh.w	r9, [sp, #32]
 8004244:	f015 f8c7 	bl	80193d6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004248:	9b01      	ldr	r3, [sp, #4]
class TypedText
 800424a:	2207      	movs	r2, #7
 800424c:	4618      	mov	r0, r3
 800424e:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8004252:	f7ff fd71 	bl	8003d38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004256:	9b01      	ldr	r3, [sp, #4]
        color = col;
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	4638      	mov	r0, r7
 800425e:	4619      	mov	r1, r3
        colorPressed = col;
 8004260:	e9c4 2235 	strd	r2, r2, [r4, #212]	; 0xd4
 8004264:	f012 fc80 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    galerie_button.setXY(120, 111);
 8004268:	4658      	mov	r0, fp
 800426a:	226f      	movs	r2, #111	; 0x6f
 800426c:	2178      	movs	r1, #120	; 0x78
 800426e:	f7ff fd17 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    galerie_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8004272:	aa08      	add	r2, sp, #32
 8004274:	a907      	add	r1, sp, #28
 8004276:	4658      	mov	r0, fp
 8004278:	f8ad 601c 	strh.w	r6, [sp, #28]
 800427c:	f8ad 9020 	strh.w	r9, [sp, #32]
 8004280:	f015 f8a9 	bl	80193d6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004284:	2308      	movs	r3, #8
        updateTextPosition();
 8004286:	4658      	mov	r0, fp
 8004288:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 800428c:	f7ff fd54 	bl	8003d38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8004290:	f04f 32ff 	mov.w	r2, #4294967295
 8004294:	4659      	mov	r1, fp
 8004296:	4638      	mov	r0, r7
        colorPressed = col;
 8004298:	e9c4 2247 	strd	r2, r2, [r4, #284]	; 0x11c
    galerie_button.setAction(buttonCallback);
 800429c:	f504 72dc 	add.w	r2, r4, #440	; 0x1b8
 80042a0:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 80042a4:	9201      	str	r2, [sp, #4]
 80042a6:	f012 fc5f 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    help_button.setXY(120, 182);
 80042aa:	4650      	mov	r0, sl
 80042ac:	22b6      	movs	r2, #182	; 0xb6
 80042ae:	2178      	movs	r1, #120	; 0x78
 80042b0:	f7ff fcf6 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
    help_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 80042b4:	aa08      	add	r2, sp, #32
 80042b6:	a907      	add	r1, sp, #28
 80042b8:	4650      	mov	r0, sl
 80042ba:	f8ad 601c 	strh.w	r6, [sp, #28]
        boundingArea = calculateBoundingArea();
 80042be:	ae02      	add	r6, sp, #8
 80042c0:	f8ad 9020 	strh.w	r9, [sp, #32]
 80042c4:	f015 f887 	bl	80193d6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80042c8:	2306      	movs	r3, #6
        updateTextPosition();
 80042ca:	4650      	mov	r0, sl
 80042cc:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 80042d0:	f7ff fd32 	bl	8003d38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	4651      	mov	r1, sl
 80042da:	4638      	mov	r0, r7
        colorPressed = col;
 80042dc:	e9c4 2259 	strd	r2, r2, [r4, #356]	; 0x164
 80042e0:	9a01      	ldr	r2, [sp, #4]
 80042e2:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
 80042e6:	f012 fc3f 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(0, 0);
 80042ea:	462a      	mov	r2, r5
 80042ec:	4629      	mov	r1, r5
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fcd6 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80042f4:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80042f8:	4641      	mov	r1, r8
 80042fa:	4630      	mov	r0, r6
        color = newColor;
 80042fc:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
        linespace = space;
 8004300:	f8a4 51a4 	strh.w	r5, [r4, #420]	; 0x1a4
        boundingArea = calculateBoundingArea();
 8004304:	f014 fd70 	bl	8018de8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004308:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 800430c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <_ZN12homeViewBaseC1Ev+0x244>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GHTS));
 8004316:	a908      	add	r1, sp, #32
 8004318:	4640      	mov	r0, r8
 800431a:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800431e:	9308      	str	r3, [sp, #32]
 8004320:	f014 fffc 	bl	801931c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004324:	4638      	mov	r0, r7
 8004326:	4641      	mov	r1, r8
 8004328:	f012 fc1e 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800432c:	4620      	mov	r0, r4
 800432e:	b00b      	add	sp, #44	; 0x2c
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	0802ce8c 	.word	0x0802ce8c
 8004338:	0802f29c 	.word	0x0802f29c
 800433c:	0802f304 	.word	0x0802f304
 8004340:	0802f20c 	.word	0x0802f20c
 8004344:	0802c604 	.word	0x0802c604
 8004348:	0802ce74 	.word	0x0802ce74
 800434c:	080040d5 	.word	0x080040d5

08004350 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004350:	4770      	bx	lr

08004352 <_ZN19FrontendApplicationD0Ev>:
 8004352:	b510      	push	{r4, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800435a:	f025 f9f5 	bl	8029748 <_ZdlPvj>
 800435e:	4620      	mov	r0, r4
 8004360:	bd10      	pop	{r4, pc}

08004362 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004362:	b510      	push	{r4, lr}
 8004364:	4604      	mov	r4, r0
    {
        model.tick();
 8004366:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800436a:	f000 f812 	bl	8004392 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800436e:	4620      	mov	r0, r4
    }
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004374:	f016 bf68 	b.w	801b248 <_ZN8touchgfx11Application15handleTickEventEv>

08004378 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800437c:	f7ff fa16 	bl	80037ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004380:	4b01      	ldr	r3, [pc, #4]	; (8004388 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004382:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004384:	6023      	str	r3, [r4, #0]
}
 8004386:	bd10      	pop	{r4, pc}
 8004388:	0802cec4 	.word	0x0802cec4

0800438c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800438c:	2200      	movs	r2, #0
 800438e:	6002      	str	r2, [r0, #0]
{

}
 8004390:	4770      	bx	lr

08004392 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8004392:	4770      	bx	lr

08004394 <_ZN16galeriePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~galeriePresenter() {};
 8004394:	4770      	bx	lr

08004396 <_ZThn4_N16galeriePresenterD1Ev>:
 8004396:	3804      	subs	r0, #4
 8004398:	4770      	bx	lr

0800439a <_ZN16galeriePresenter10deactivateEv>:
}

void galeriePresenter::activate()
{

}
 800439a:	4770      	bx	lr

0800439c <_ZN16galeriePresenterD0Ev>:
 800439c:	b510      	push	{r4, lr}
 800439e:	4604      	mov	r4, r0
 80043a0:	2110      	movs	r1, #16
 80043a2:	f025 f9d1 	bl	8029748 <_ZdlPvj>
 80043a6:	4620      	mov	r0, r4
 80043a8:	bd10      	pop	{r4, pc}

080043aa <_ZThn4_N16galeriePresenterD0Ev>:
 80043aa:	f1a0 0004 	sub.w	r0, r0, #4
 80043ae:	e7f5      	b.n	800439c <_ZN16galeriePresenterD0Ev>

080043b0 <_ZN16galeriePresenterC1ER11galerieView>:
    ModelListener() : model(0) {}
 80043b0:	2200      	movs	r2, #0
    : view(v)
 80043b2:	60c1      	str	r1, [r0, #12]
 80043b4:	6082      	str	r2, [r0, #8]
 80043b6:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <_ZN16galeriePresenterC1ER11galerieView+0x18>)
galeriePresenter::galeriePresenter(galerieView& v)
 80043b8:	b510      	push	{r4, lr}
    : view(v)
 80043ba:	f102 0408 	add.w	r4, r2, #8
 80043be:	3220      	adds	r2, #32
 80043c0:	6004      	str	r4, [r0, #0]
 80043c2:	6042      	str	r2, [r0, #4]
}
 80043c4:	bd10      	pop	{r4, pc}
 80043c6:	bf00      	nop
 80043c8:	0802cf08 	.word	0x0802cf08

080043cc <_ZN11galerieView14tearDownScreenEv>:
}

void galerieView::tearDownScreen()
{
    galerieViewBase::tearDownScreen();
}
 80043cc:	4770      	bx	lr
	...

080043d0 <_ZN11galerieViewD1Ev>:

class galerieView : public galerieViewBase
{
public:
    galerieView();
    virtual ~galerieView() {}
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <_ZN11galerieViewD1Ev+0x10>)
 80043d2:	b510      	push	{r4, lr}
 80043d4:	4604      	mov	r4, r0
 80043d6:	6003      	str	r3, [r0, #0]
 80043d8:	f7ff fc29 	bl	8003c2e <_ZN15galerieViewBaseD1Ev>
 80043dc:	4620      	mov	r0, r4
 80043de:	bd10      	pop	{r4, pc}
 80043e0:	0802cf38 	.word	0x0802cf38

080043e4 <_ZN11galerieViewD0Ev>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	f7ff fff2 	bl	80043d0 <_ZN11galerieViewD1Ev>
 80043ec:	f44f 7125 	mov.w	r1, #660	; 0x294
 80043f0:	4620      	mov	r0, r4
 80043f2:	f025 f9a9 	bl	8029748 <_ZdlPvj>
 80043f6:	4620      	mov	r0, r4
 80043f8:	bd10      	pop	{r4, pc}
	...

080043fc <_ZN11galerieViewC1Ev>:
galerieView::galerieView()
 80043fc:	b510      	push	{r4, lr}
 80043fe:	4604      	mov	r4, r0
 8004400:	f7ff fd00 	bl	8003e04 <_ZN15galerieViewBaseC1Ev>
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <_ZN11galerieViewC1Ev+0x10>)
}
 8004406:	4620      	mov	r0, r4
galerieView::galerieView()
 8004408:	6023      	str	r3, [r4, #0]
}
 800440a:	bd10      	pop	{r4, pc}
 800440c:	0802cf38 	.word	0x0802cf38

08004410 <_ZN11galerieView11setupScreenEv>:
    galerieViewBase::setupScreen();
 8004410:	f7ff bc0e 	b.w	8003c30 <_ZN15galerieViewBase11setupScreenEv>

08004414 <_ZN13homePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~homePresenter() {};
 8004414:	4770      	bx	lr

08004416 <_ZThn4_N13homePresenterD1Ev>:
 8004416:	3804      	subs	r0, #4
 8004418:	4770      	bx	lr

0800441a <_ZN13homePresenter10deactivateEv>:
}

void homePresenter::activate()
{

}
 800441a:	4770      	bx	lr

0800441c <_ZN13homePresenterD0Ev>:
 800441c:	b510      	push	{r4, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	2110      	movs	r1, #16
 8004422:	f025 f991 	bl	8029748 <_ZdlPvj>
 8004426:	4620      	mov	r0, r4
 8004428:	bd10      	pop	{r4, pc}

0800442a <_ZThn4_N13homePresenterD0Ev>:
 800442a:	f1a0 0004 	sub.w	r0, r0, #4
 800442e:	e7f5      	b.n	800441c <_ZN13homePresenterD0Ev>

08004430 <_ZN13homePresenterC1ER8homeView>:
 8004430:	2200      	movs	r2, #0
    : view(v)
 8004432:	60c1      	str	r1, [r0, #12]
 8004434:	6082      	str	r2, [r0, #8]
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <_ZN13homePresenterC1ER8homeView+0x18>)
homePresenter::homePresenter(homeView& v)
 8004438:	b510      	push	{r4, lr}
    : view(v)
 800443a:	f102 0408 	add.w	r4, r2, #8
 800443e:	3220      	adds	r2, #32
 8004440:	6004      	str	r4, [r0, #0]
 8004442:	6042      	str	r2, [r0, #4]
}
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	0802cf64 	.word	0x0802cf64

0800444c <_ZN8homeView14tearDownScreenEv>:
}

void homeView::tearDownScreen()
{
    homeViewBase::tearDownScreen();
}
 800444c:	4770      	bx	lr
	...

08004450 <_ZN8homeViewD1Ev>:

class homeView : public homeViewBase
{
public:
    homeView();
    virtual ~homeView() {}
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <_ZN8homeViewD1Ev+0x10>)
 8004452:	b510      	push	{r4, lr}
 8004454:	4604      	mov	r4, r0
 8004456:	6003      	str	r3, [r0, #0]
 8004458:	f7ff fe0f 	bl	800407a <_ZN12homeViewBaseD1Ev>
 800445c:	4620      	mov	r0, r4
 800445e:	bd10      	pop	{r4, pc}
 8004460:	0802cf94 	.word	0x0802cf94

08004464 <_ZN8homeViewD0Ev>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4604      	mov	r4, r0
 8004468:	f7ff fff2 	bl	8004450 <_ZN8homeViewD1Ev>
 800446c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8004470:	4620      	mov	r0, r4
 8004472:	f025 f969 	bl	8029748 <_ZdlPvj>
 8004476:	4620      	mov	r0, r4
 8004478:	bd10      	pop	{r4, pc}
	...

0800447c <_ZN8homeViewC1Ev>:
homeView::homeView()
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
 8004480:	f7ff fe3e 	bl	8004100 <_ZN12homeViewBaseC1Ev>
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <_ZN8homeViewC1Ev+0x10>)
}
 8004486:	4620      	mov	r0, r4
homeView::homeView()
 8004488:	6023      	str	r3, [r4, #0]
}
 800448a:	bd10      	pop	{r4, pc}
 800448c:	0802cf94 	.word	0x0802cf94

08004490 <_ZN8homeView11setupScreenEv>:
    homeViewBase::setupScreen();
 8004490:	f7ff bdf4 	b.w	800407c <_ZN12homeViewBase11setupScreenEv>

08004494 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004494:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004496:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800449a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800449c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80044a0:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044a2:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80044a4:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80044a6:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80044a8:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80044aa:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80044ac:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80044ae:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80044b0:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044b2:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80044b4:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80044b6:	480b      	ldr	r0, [pc, #44]	; (80044e4 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80044b8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044bc:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80044c0:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80044c4:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80044c6:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 80044c8:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80044ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80044ce:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80044d0:	466a      	mov	r2, sp
 80044d2:	f001 fd7f 	bl	8005fd4 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 80044d6:	3800      	subs	r0, #0
 80044d8:	bf18      	it	ne
 80044da:	2001      	movne	r0, #1
 80044dc:	b015      	add	sp, #84	; 0x54
 80044de:	f85d fb04 	ldr.w	pc, [sp], #4
 80044e2:	bf00      	nop
 80044e4:	20001f68 	.word	0x20001f68

080044e8 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80044e8:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044ea:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80044ee:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f4:	4817      	ldr	r0, [pc, #92]	; (8004554 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044f6:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80044f8:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044fa:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80044fc:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80044fe:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004500:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004504:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8004506:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004508:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800450a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800450e:	f001 fd1e 	bl	8005f4e <HAL_QSPI_Command>
 8004512:	b9e0      	cbnz	r0, 800454e <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8004514:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8004516:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004518:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800451c:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800451e:	480d      	ldr	r0, [pc, #52]	; (8004554 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8004520:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004524:	2310      	movs	r3, #16
 8004526:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800452a:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800452c:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800452e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004536:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004538:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800453a:	f241 3388 	movw	r3, #5000	; 0x1388
 800453e:	f001 fd49 	bl	8005fd4 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8004542:	3800      	subs	r0, #0
 8004544:	bf18      	it	ne
 8004546:	2001      	movne	r0, #1
}
 8004548:	b015      	add	sp, #84	; 0x54
 800454a:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800454e:	2001      	movs	r0, #1
 8004550:	e7fa      	b.n	8004548 <QSPI_WriteEnable.constprop.0+0x60>
 8004552:	bf00      	nop
 8004554:	20001f68 	.word	0x20001f68

08004558 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8004558:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800455a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800455e:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004560:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004564:	480e      	ldr	r0, [pc, #56]	; (80045a0 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004566:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004568:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800456a:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800456c:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800456e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004572:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004578:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800457a:	2300      	movs	r3, #0
 800457c:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004580:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004582:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004584:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004586:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004588:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800458c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004590:	f001 fd70 	bl	8006074 <HAL_QSPI_MemoryMapped>
}
 8004594:	3800      	subs	r0, #0
 8004596:	bf18      	it	ne
 8004598:	2001      	movne	r0, #1
 800459a:	b011      	add	sp, #68	; 0x44
 800459c:	f85d fb04 	ldr.w	pc, [sp], #4
 80045a0:	20001f68 	.word	0x20001f68

080045a4 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80045a6:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80045a8:	4845      	ldr	r0, [pc, #276]	; (80046c0 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80045aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ac:	f042 0202 	orr.w	r2, r2, #2
{
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
{
 80045b4:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80045b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80045b8:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80045ba:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80045bc:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80045be:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80045c2:	4d40      	ldr	r5, [pc, #256]	; (80046c4 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 80045c4:	9200      	str	r2, [sp, #0]
 80045c6:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	f042 0202 	orr.w	r2, r2, #2
 80045ce:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	f022 0202 	bic.w	r2, r2, #2
 80045d6:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 80045d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045da:	f042 0202 	orr.w	r2, r2, #2
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
 80045e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e2:	f002 0202 	and.w	r2, r2, #2
 80045e6:	9201      	str	r2, [sp, #4]
 80045e8:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 80045ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ec:	f042 0202 	orr.w	r2, r2, #2
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
 80045f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f4:	f002 0202 	and.w	r2, r2, #2
 80045f8:	9202      	str	r2, [sp, #8]
 80045fa:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 80045fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
 8004604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004606:	f002 0208 	and.w	r2, r2, #8
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800460e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004610:	f042 0208 	orr.w	r2, r2, #8
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
 8004616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004618:	f002 0208 	and.w	r2, r2, #8
 800461c:	9204      	str	r2, [sp, #16]
 800461e:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8004620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004622:	f042 0210 	orr.w	r2, r2, #16
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
 8004628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462a:	f002 0210 	and.w	r2, r2, #16
 800462e:	9205      	str	r2, [sp, #20]
 8004630:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8004632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004634:	f042 0208 	orr.w	r2, r2, #8
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800463a:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	9306      	str	r3, [sp, #24]
 8004644:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800464c:	2303      	movs	r3, #3
 800464e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004652:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004654:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004656:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004658:	f000 fc42 	bl	8004ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800465c:	a907      	add	r1, sp, #28
 800465e:	4818      	ldr	r0, [pc, #96]	; (80046c0 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004660:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004662:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004664:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004666:	f000 fc3b 	bl	8004ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800466a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800466e:	a907      	add	r1, sp, #28
 8004670:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004672:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8004674:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004676:	f000 fc33 	bl	8004ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800467a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800467e:	a907      	add	r1, sp, #28
 8004680:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004682:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004684:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004686:	f000 fc2b 	bl	8004ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800468a:	a907      	add	r1, sp, #28
 800468c:	480e      	ldr	r0, [pc, #56]	; (80046c8 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800468e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004690:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004692:	f000 fc25 	bl	8004ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800469a:	a907      	add	r1, sp, #28
 800469c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800469e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80046a0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80046a2:	f000 fc1d 	bl	8004ee0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80046a6:	4632      	mov	r2, r6
 80046a8:	210f      	movs	r1, #15
 80046aa:	205c      	movs	r0, #92	; 0x5c
 80046ac:	f000 f9d8 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80046b0:	205c      	movs	r0, #92	; 0x5c
 80046b2:	f000 fa07 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
}
 80046b6:	b00d      	add	sp, #52	; 0x34
 80046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40020400 	.word	0x40020400
 80046c4:	40020c00 	.word	0x40020c00
 80046c8:	40021000 	.word	0x40021000

080046cc <BSP_QSPI_Init>:
{ 
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 80046ce:	4c49      	ldr	r4, [pc, #292]	; (80047f4 <BSP_QSPI_Init+0x128>)
{ 
 80046d0:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 80046d2:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80046d4:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 80046d6:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80046d8:	f001 fc26 	bl	8005f28 <HAL_QSPI_DeInit>
 80046dc:	4605      	mov	r5, r0
 80046de:	b110      	cbz	r0, 80046e6 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 80046e0:	2001      	movs	r0, #1
}
 80046e2:	b011      	add	sp, #68	; 0x44
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80046e6:	4601      	mov	r1, r0
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7ff ff5b 	bl	80045a4 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 80046ee:	2601      	movs	r6, #1
 80046f0:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 80046f6:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80046fa:	2310      	movs	r3, #16
 80046fc:	60e3      	str	r3, [r4, #12]
 80046fe:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004702:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004706:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004708:	3b01      	subs	r3, #1
 800470a:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 800470c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8004710:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004714:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004718:	f001 fbb2 	bl	8005e80 <HAL_QSPI_Init>
 800471c:	2800      	cmp	r0, #0
 800471e:	d1df      	bne.n	80046e0 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004720:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004724:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8004726:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 800472c:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800472e:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004730:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004732:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004734:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004736:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800473a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800473e:	4620      	mov	r0, r4
 8004740:	f001 fc05 	bl	8005f4e <HAL_QSPI_Command>
 8004744:	b108      	cbz	r0, 800474a <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8004746:	2004      	movs	r0, #4
 8004748:	e7cb      	b.n	80046e2 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 800474a:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	a902      	add	r1, sp, #8
 8004752:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8004754:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004756:	f001 fbfa 	bl	8005f4e <HAL_QSPI_Command>
 800475a:	2800      	cmp	r0, #0
 800475c:	d1f3      	bne.n	8004746 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800475e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004762:	f7ff fe97 	bl	8004494 <QSPI_AutoPollingMemReady.constprop.0>
 8004766:	2800      	cmp	r0, #0
 8004768:	d1ed      	bne.n	8004746 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800476a:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 800476c:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004774:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004776:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004778:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800477a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800477e:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004782:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004786:	4620      	mov	r0, r4
 8004788:	f001 fbe1 	bl	8005f4e <HAL_QSPI_Command>
 800478c:	2800      	cmp	r0, #0
 800478e:	d1da      	bne.n	8004746 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	f10d 0107 	add.w	r1, sp, #7
 8004798:	4620      	mov	r0, r4
 800479a:	f001 fd51 	bl	8006240 <HAL_QSPI_Receive>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d1d1      	bne.n	8004746 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80047a2:	f7ff fea1 	bl	80044e8 <QSPI_WriteEnable.constprop.0>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d1cd      	bne.n	8004746 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80047aa:	2381      	movs	r3, #129	; 0x81
 80047ac:	22f0      	movs	r2, #240	; 0xf0
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80047b4:	210a      	movs	r1, #10
 80047b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047ba:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047be:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047c8:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80047ca:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80047d0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047d4:	f001 fbbb 	bl	8005f4e <HAL_QSPI_Command>
 80047d8:	2800      	cmp	r0, #0
 80047da:	d1b4      	bne.n	8004746 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	f10d 0107 	add.w	r1, sp, #7
 80047e4:	4620      	mov	r0, r4
 80047e6:	f001 fccf 	bl	8006188 <HAL_QSPI_Transmit>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	f43f af79 	beq.w	80046e2 <BSP_QSPI_Init+0x16>
 80047f0:	e7a9      	b.n	8004746 <BSP_QSPI_Init+0x7a>
 80047f2:	bf00      	nop
 80047f4:	20001f68 	.word	0x20001f68
 80047f8:	a0001000 	.word	0xa0001000

080047fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047fc:	490f      	ldr	r1, [pc, #60]	; (800483c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047fe:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004800:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <SystemInit+0x44>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004816:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800481e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004822:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004824:	4a07      	ldr	r2, [pc, #28]	; (8004844 <SystemInit+0x48>)
 8004826:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800482e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004830:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004836:	608b      	str	r3, [r1, #8]
#endif
}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	40023800 	.word	0x40023800
 8004844:	24003010 	.word	0x24003010

08004848 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8004848:	4770      	bx	lr

0800484a <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800484a:	2000      	movs	r0, #0
 800484c:	4770      	bx	lr
	...

08004850 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8004850:	2300      	movs	r3, #0
{
 8004852:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004854:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	b90a      	cbnz	r2, 8004862 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
{
 8004862:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004864:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004866:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004868:	21a8      	movs	r1, #168	; 0xa8
 800486a:	4628      	mov	r0, r5
 800486c:	f7fd f966 	bl	8001b3c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004870:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004874:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8004878:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800487c:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800487e:	d103      	bne.n	8004888 <ft5336_ReadID+0x38>
  return (ucReadId);
 8004880:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004884:	b003      	add	sp, #12
 8004886:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004888:	2b51      	cmp	r3, #81	; 0x51
 800488a:	d1ec      	bne.n	8004866 <ft5336_ReadID+0x16>
 800488c:	e7f8      	b.n	8004880 <ft5336_ReadID+0x30>
 800488e:	bf00      	nop
 8004890:	20001fb6 	.word	0x20001fb6

08004894 <ft5336_TS_DetectTouch>:
{
 8004894:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004896:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004898:	2102      	movs	r1, #2
 800489a:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 800489c:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80048a0:	f7fd f94c 	bl	8001b3c <TS_IO_Read>
 80048a4:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80048a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80048b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d901      	bls.n	80048c0 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80048bc:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80048c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80048c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80048ca:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80048cc:	2200      	movs	r2, #0
 80048ce:	709a      	strb	r2, [r3, #2]
}
 80048d0:	b002      	add	sp, #8
 80048d2:	bd10      	pop	{r4, pc}
 80048d4:	20001fb6 	.word	0x20001fb6

080048d8 <ft5336_TS_GetXY>:
{
 80048d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80048dc:	4d2f      	ldr	r5, [pc, #188]	; (800499c <ft5336_TS_GetXY+0xc4>)
{
 80048de:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 80048e0:	2300      	movs	r3, #0
{
 80048e2:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80048e4:	78ac      	ldrb	r4, [r5, #2]
 80048e6:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 80048e8:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80048ec:	42a2      	cmp	r2, r4
 80048ee:	d94d      	bls.n	800498c <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 80048f0:	2c09      	cmp	r4, #9
 80048f2:	d84e      	bhi.n	8004992 <ft5336_TS_GetXY+0xba>
 80048f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	1d19      	adds	r1, r3, #4
 80048fe:	f103 0b03 	add.w	fp, r3, #3
 8004902:	f103 0a06 	add.w	sl, r3, #6
 8004906:	3305      	adds	r3, #5
 8004908:	b2c9      	uxtb	r1, r1
 800490a:	fa5f fb8b 	uxtb.w	fp, fp
 800490e:	fa5f fa8a 	uxtb.w	sl, sl
 8004912:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004916:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004918:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80049a0 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800491c:	4620      	mov	r0, r4
 800491e:	f7fd f90d 	bl	8001b3c <TS_IO_Read>
 8004922:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004926:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800492a:	4659      	mov	r1, fp
 800492c:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800492e:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004932:	f7fd f903 	bl	8001b3c <TS_IO_Read>
 8004936:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800493a:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800493c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004940:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004942:	f8b9 2000 	ldrh.w	r2, [r9]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800494c:	4313      	orrs	r3, r2
    *X = coord;
 800494e:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004950:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004954:	f7fd f8f2 	bl	8001b3c <TS_IO_Read>
 8004958:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800495c:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800495e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004962:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004964:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004968:	f7fd f8e8 	bl	8001b3c <TS_IO_Read>
 800496c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004970:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004974:	f8b9 2000 	ldrh.w	r2, [r9]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800497e:	4313      	orrs	r3, r2
 8004980:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8004984:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004986:	78ab      	ldrb	r3, [r5, #2]
 8004988:	3301      	adds	r3, #1
 800498a:	70ab      	strb	r3, [r5, #2]
}
 800498c:	b003      	add	sp, #12
 800498e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004992:	4698      	mov	r8, r3
 8004994:	469a      	mov	sl, r3
 8004996:	469b      	mov	fp, r3
 8004998:	4619      	mov	r1, r3
 800499a:	e7bc      	b.n	8004916 <ft5336_TS_GetXY+0x3e>
 800499c:	20001fb6 	.word	0x20001fb6
 80049a0:	20001fb4 	.word	0x20001fb4

080049a4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80049a4:	2201      	movs	r2, #1
 80049a6:	21a4      	movs	r1, #164	; 0xa4
 80049a8:	b2c0      	uxtb	r0, r0
 80049aa:	f7fd b8ad 	b.w	8001b08 <TS_IO_Write>

080049ae <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80049ae:	2200      	movs	r2, #0
 80049b0:	21a4      	movs	r1, #164	; 0xa4
 80049b2:	b2c0      	uxtb	r0, r0
 80049b4:	f7fd b8a8 	b.w	8001b08 <TS_IO_Write>

080049b8 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80049b8:	f7ff bff9 	b.w	80049ae <ft5336_TS_DisableIT>

080049bc <ft5336_TS_ClearIT>:
 80049bc:	4770      	bx	lr
	...

080049c0 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	b90a      	cbnz	r2, 80049ca <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
}
 80049ca:	4770      	bx	lr
 80049cc:	20001fb6 	.word	0x20001fb6

080049d0 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d0:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049d2:	2003      	movs	r0, #3
{
 80049d4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049de:	f000 f82d 	bl	8004a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fc ff2a 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049e8:	f7fc fccc 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80049ec:	2000      	movs	r0, #0
 80049ee:	bd08      	pop	{r3, pc}
 80049f0:	40023c00 	.word	0x40023c00

080049f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80049f4:	4a03      	ldr	r2, [pc, #12]	; (8004a04 <HAL_IncTick+0x10>)
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <HAL_IncTick+0x14>)
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	440b      	add	r3, r1
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20001fbc 	.word	0x20001fbc
 8004a08:	20000038 	.word	0x20000038

08004a0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a0c:	4b01      	ldr	r3, [pc, #4]	; (8004a14 <HAL_GetTick+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20001fbc 	.word	0x20001fbc

08004a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff fff6 	bl	8004a0c <HAL_GetTick>
 8004a20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a22:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004a24:	bf1e      	ittt	ne
 8004a26:	4b04      	ldrne	r3, [pc, #16]	; (8004a38 <HAL_Delay+0x20>)
 8004a28:	781b      	ldrbne	r3, [r3, #0]
 8004a2a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a2c:	f7ff ffee 	bl	8004a0c <HAL_GetTick>
 8004a30:	1b43      	subs	r3, r0, r5
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	d3fa      	bcc.n	8004a2c <HAL_Delay+0x14>
  {
  }
}
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	20000038 	.word	0x20000038

08004a3c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a3c:	4907      	ldr	r1, [pc, #28]	; (8004a5c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a3e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a40:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a4a:	0412      	lsls	r2, r2, #16
 8004a4c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004a58:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000ed00 	.word	0xe000ed00

08004a60 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a62:	b530      	push	{r4, r5, lr}
 8004a64:	68dc      	ldr	r4, [r3, #12]
 8004a66:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	2d04      	cmp	r5, #4
 8004a72:	bf28      	it	cs
 8004a74:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a76:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7c:	bf8c      	ite	hi
 8004a7e:	3c03      	subhi	r4, #3
 8004a80:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a82:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8004a86:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a88:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a90:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	fa01 f104 	lsl.w	r1, r1, r4
 8004a98:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004aa0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004aa2:	db06      	blt.n	8004ab2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004aa8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004aac:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004ab0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab2:	f000 000f 	and.w	r0, r0, #15
 8004ab6:	4a02      	ldr	r2, [pc, #8]	; (8004ac0 <HAL_NVIC_SetPriority+0x60>)
 8004ab8:	5413      	strb	r3, [r2, r0]
 8004aba:	e7f9      	b.n	8004ab0 <HAL_NVIC_SetPriority+0x50>
 8004abc:	e000ed00 	.word	0xe000ed00
 8004ac0:	e000ed14 	.word	0xe000ed14

08004ac4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	db08      	blt.n	8004ada <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac8:	0942      	lsrs	r2, r0, #5
 8004aca:	2301      	movs	r3, #1
 8004acc:	f000 001f 	and.w	r0, r0, #31
 8004ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ad4:	4b01      	ldr	r3, [pc, #4]	; (8004adc <HAL_NVIC_EnableIRQ+0x18>)
 8004ad6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004ada:	4770      	bx	lr
 8004adc:	e000e100 	.word	0xe000e100

08004ae0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	db0d      	blt.n	8004b00 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae4:	0943      	lsrs	r3, r0, #5
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f000 001f 	and.w	r0, r0, #31
 8004aec:	3320      	adds	r3, #32
 8004aee:	fa02 f000 	lsl.w	r0, r2, r0
 8004af2:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <HAL_NVIC_DisableIRQ+0x24>)
 8004af4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004afc:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000e100 	.word	0xe000e100

08004b08 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004b08:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_MPU_Disable+0x18>)
 8004b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_MPU_Enable+0x1c>)
 8004b26:	f040 0001 	orr.w	r0, r0, #1
 8004b2a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b3a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b3e:	4770      	bx	lr
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b44:	7843      	ldrb	r3, [r0, #1]
 8004b46:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_MPU_ConfigRegion+0x54>)
{
 8004b48:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004b4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8004b4e:	7801      	ldrb	r1, [r0, #0]
 8004b50:	b1e9      	cbz	r1, 8004b8e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004b52:	6843      	ldr	r3, [r0, #4]
 8004b54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b58:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b5a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b5c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b5e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b62:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b64:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b66:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b6a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b6c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b70:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b72:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004b76:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004b7c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b82:	7a01      	ldrb	r1, [r0, #8]
 8004b84:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b88:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004b8c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004b8e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004b92:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8004b96:	e7f9      	b.n	8004b8c <HAL_MPU_ConfigRegion+0x48>
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b9c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	b908      	cbnz	r0, 8004ba6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004ba2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004ba4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ba6:	7f43      	ldrb	r3, [r0, #29]
 8004ba8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bac:	b913      	cbnz	r3, 8004bb4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004bae:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004bb0:	f7fc fc06 	bl	80013c0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004bb8:	7923      	ldrb	r3, [r4, #4]
 8004bba:	b9e3      	cbnz	r3, 8004bf6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_CRC_Init+0x70>)
 8004bc0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	f022 0218 	bic.w	r2, r2, #24
 8004bc8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bca:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bcc:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bce:	b9d2      	cbnz	r2, 8004c06 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bd4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004bd6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	6961      	ldr	r1, [r4, #20]
 8004bdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004be0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004be2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004be4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004bf4:	e7d6      	b.n	8004ba4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bf6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f808 	bl	8004c10 <HAL_CRCEx_Polynomial_Set>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d0e2      	beq.n	8004bca <HAL_CRC_Init+0x2e>
 8004c04:	e7cd      	b.n	8004ba2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c06:	6922      	ldr	r2, [r4, #16]
 8004c08:	e7e4      	b.n	8004bd4 <HAL_CRC_Init+0x38>
 8004c0a:	bf00      	nop
 8004c0c:	04c11db7 	.word	0x04c11db7

08004c10 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c10:	231f      	movs	r3, #31
{
 8004c12:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c14:	3b01      	subs	r3, #1
 8004c16:	d31c      	bcc.n	8004c52 <HAL_CRCEx_Polynomial_Set+0x42>
 8004c18:	fa21 f403 	lsr.w	r4, r1, r3
 8004c1c:	07e4      	lsls	r4, r4, #31
 8004c1e:	d5f9      	bpl.n	8004c14 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004c20:	2a10      	cmp	r2, #16
 8004c22:	d012      	beq.n	8004c4a <HAL_CRCEx_Polynomial_Set+0x3a>
 8004c24:	d804      	bhi.n	8004c30 <HAL_CRCEx_Polynomial_Set+0x20>
 8004c26:	b13a      	cbz	r2, 8004c38 <HAL_CRCEx_Polynomial_Set+0x28>
 8004c28:	2a08      	cmp	r2, #8
 8004c2a:	d010      	beq.n	8004c4e <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004c2c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004c2e:	e00b      	b.n	8004c48 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8004c30:	2a18      	cmp	r2, #24
 8004c32:	d1fb      	bne.n	8004c2c <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c34:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c36:	d8f9      	bhi.n	8004c2c <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c38:	6800      	ldr	r0, [r0, #0]
 8004c3a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c3c:	6883      	ldr	r3, [r0, #8]
 8004c3e:	f023 0318 	bic.w	r3, r3, #24
 8004c42:	431a      	orrs	r2, r3
 8004c44:	6082      	str	r2, [r0, #8]
 8004c46:	2000      	movs	r0, #0
}
 8004c48:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c4a:	2b07      	cmp	r3, #7
 8004c4c:	e7f3      	b.n	8004c36 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c4e:	2b0f      	cmp	r3, #15
 8004c50:	e7f1      	b.n	8004c36 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d1ea      	bne.n	8004c2c <HAL_CRCEx_Polynomial_Set+0x1c>
 8004c56:	e7ef      	b.n	8004c38 <HAL_CRCEx_Polynomial_Set+0x28>

08004c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004c5e:	f7ff fed5 	bl	8004a0c <HAL_GetTick>
 8004c62:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c64:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d006      	beq.n	8004c7a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c6c:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004c6e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c70:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004c72:	2300      	movs	r3, #0
 8004c74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f022 0216 	bic.w	r2, r2, #22
 8004c82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c8e:	b90a      	cbnz	r2, 8004c94 <HAL_DMA_Abort+0x3c>
 8004c90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004c92:	b11a      	cbz	r2, 8004c9c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	f022 0208 	bic.w	r2, r2, #8
 8004c9a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f013 0301 	ands.w	r3, r3, #1
 8004cac:	d10a      	bne.n	8004cc4 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004cb0:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004cb2:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb4:	408a      	lsls	r2, r1
 8004cb6:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004cb8:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8004cba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004cc2:	e7d9      	b.n	8004c78 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cc4:	f7ff fea2 	bl	8004a0c <HAL_GetTick>
 8004cc8:	1b40      	subs	r0, r0, r5
 8004cca:	2805      	cmp	r0, #5
 8004ccc:	d9ea      	bls.n	8004ca4 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cce:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cd0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd2:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004cd4:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cd6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004cda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004cde:	e7cb      	b.n	8004c78 <HAL_DMA_Abort+0x20>

08004ce0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ce0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b330      	cbz	r0, 8004d34 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004ce6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cee:	b91b      	cbnz	r3, 8004cf8 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004cf0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004cf4:	f7fc fb7a 	bl	80013ec <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004cf8:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cfa:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004cfc:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004cfe:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d04:	6813      	ldr	r3, [r2, #0]
 8004d06:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d0a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d0c:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d0e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d10:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004d12:	f023 0307 	bic.w	r3, r3, #7
 8004d16:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d18:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d1a:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d26:	430b      	orrs	r3, r1
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d2a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d2c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004d32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d34:	2001      	movs	r0, #1
 8004d36:	e7fc      	b.n	8004d32 <HAL_DMA2D_Init+0x52>

08004d38 <HAL_DMA2D_LineEventCallback>:
 8004d38:	4770      	bx	lr

08004d3a <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004d3a:	4770      	bx	lr

08004d3c <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d3c:	6803      	ldr	r3, [r0, #0]
{
 8004d3e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d40:	685e      	ldr	r6, [r3, #4]
{
 8004d42:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004d44:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d46:	07f2      	lsls	r2, r6, #31
 8004d48:	d514      	bpl.n	8004d74 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004d4a:	05e9      	lsls	r1, r5, #23
 8004d4c:	d512      	bpl.n	8004d74 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d5e:	2201      	movs	r2, #1
 8004d60:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d62:	2304      	movs	r3, #4
 8004d64:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d6e:	6943      	ldr	r3, [r0, #20]
 8004d70:	b103      	cbz	r3, 8004d74 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d72:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d74:	06b2      	lsls	r2, r6, #26
 8004d76:	d516      	bpl.n	8004da6 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004d78:	04ab      	lsls	r3, r5, #18
 8004d7a:	d514      	bpl.n	8004da6 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004d86:	2220      	movs	r2, #32
 8004d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d8c:	f043 0302 	orr.w	r3, r3, #2
 8004d90:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d92:	2304      	movs	r3, #4
 8004d94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d9e:	6963      	ldr	r3, [r4, #20]
 8004da0:	b10b      	cbz	r3, 8004da6 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004da2:	4620      	mov	r0, r4
 8004da4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004da6:	0730      	lsls	r0, r6, #28
 8004da8:	d516      	bpl.n	8004dd8 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004daa:	0529      	lsls	r1, r5, #20
 8004dac:	d514      	bpl.n	8004dd8 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004db8:	2208      	movs	r2, #8
 8004dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004dbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004dd0:	6963      	ldr	r3, [r4, #20]
 8004dd2:	b10b      	cbz	r3, 8004dd8 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004dd8:	0772      	lsls	r2, r6, #29
 8004dda:	d50b      	bpl.n	8004df4 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ddc:	056b      	lsls	r3, r5, #21
 8004dde:	d509      	bpl.n	8004df4 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004de0:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004de2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004dec:	2204      	movs	r2, #4
 8004dee:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004df0:	f7ff ffa2 	bl	8004d38 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004df4:	07b0      	lsls	r0, r6, #30
 8004df6:	d514      	bpl.n	8004e22 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004df8:	05a9      	lsls	r1, r5, #22
 8004dfa:	d512      	bpl.n	8004e22 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e04:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e06:	2202      	movs	r2, #2
 8004e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e0c:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e14:	2300      	movs	r3, #0
 8004e16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	b10b      	cbz	r3, 8004e22 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e22:	06f2      	lsls	r2, r6, #27
 8004e24:	d513      	bpl.n	8004e4e <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e26:	04eb      	lsls	r3, r5, #19
 8004e28:	d511      	bpl.n	8004e4e <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e2a:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004e2c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e34:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e36:	2210      	movs	r2, #16
 8004e38:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e3c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004e44:	2300      	movs	r3, #0
 8004e46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004e4a:	f7ff ff76 	bl	8004d3a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}

08004e50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e52:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	f04f 0302 	mov.w	r3, #2
 8004e5c:	d02b      	beq.n	8004eb6 <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e5e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004e62:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e64:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004e68:	4f1c      	ldr	r7, [pc, #112]	; (8004edc <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004e6a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e6e:	010e      	lsls	r6, r1, #4
 8004e70:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004e72:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004e76:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e7a:	3c09      	subs	r4, #9
 8004e7c:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e7e:	bf96      	itet	ls
 8004e80:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004e84:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e88:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004e8a:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004e8c:	b9a9      	cbnz	r1, 8004eba <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004e8e:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e90:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004e92:	ea01 0107 	and.w	r1, r1, r7
 8004e96:	ea42 0201 	orr.w	r2, r2, r1
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004e9c:	6982      	ldr	r2, [r0, #24]
 8004e9e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ea0:	d803      	bhi.n	8004eaa <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004ea2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004ea4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004eb6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004eba:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ebc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004ebe:	ea01 0107 	and.w	r1, r1, r7
 8004ec2:	ea42 0201 	orr.w	r2, r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004ec8:	eb00 0206 	add.w	r2, r0, r6
 8004ecc:	6992      	ldr	r2, [r2, #24]
 8004ece:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ed0:	d8eb      	bhi.n	8004eaa <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004ed2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004ed6:	621d      	str	r5, [r3, #32]
 8004ed8:	e7e7      	b.n	8004eaa <HAL_DMA2D_ConfigLayer+0x5a>
 8004eda:	bf00      	nop
 8004edc:	00fcfff0 	.word	0x00fcfff0

08004ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ee4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80050a4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eea:	4a6c      	ldr	r2, [pc, #432]	; (800509c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004eec:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eee:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004ef0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ef2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004ef6:	43ac      	bics	r4, r5
 8004ef8:	f040 80b6 	bne.w	8005068 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004efc:	684d      	ldr	r5, [r1, #4]
 8004efe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f02:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f04:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f08:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f0c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f0e:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f10:	2f01      	cmp	r7, #1
 8004f12:	d834      	bhi.n	8004f7e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004f14:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f16:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f1a:	68cf      	ldr	r7, [r1, #12]
 8004f1c:	fa07 f708 	lsl.w	r7, r7, r8
 8004f20:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004f24:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004f26:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f28:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f2c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004f30:	409f      	lsls	r7, r3
 8004f32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004f36:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004f38:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f3a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f3c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f40:	688f      	ldr	r7, [r1, #8]
 8004f42:	fa07 f708 	lsl.w	r7, r7, r8
 8004f46:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004f4a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f4c:	d119      	bne.n	8004f82 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004f4e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f52:	f003 0b07 	and.w	fp, r3, #7
 8004f56:	f04f 0e0f 	mov.w	lr, #15
 8004f5a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004f5e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004f62:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f66:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004f6a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f6e:	690f      	ldr	r7, [r1, #16]
 8004f70:	fa07 f70b 	lsl.w	r7, r7, fp
 8004f74:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004f78:	f8ca 7020 	str.w	r7, [sl, #32]
 8004f7c:	e001      	b.n	8004f82 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f7e:	2c03      	cmp	r4, #3
 8004f80:	d1da      	bne.n	8004f38 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004f82:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f84:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f88:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f8c:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f90:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004f94:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f96:	d067      	beq.n	8005068 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f98:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004f9c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004fa0:	f003 0703 	and.w	r7, r3, #3
 8004fa4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004fac:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004fb0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004fb6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004fba:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004fbe:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004fc2:	9401      	str	r4, [sp, #4]
 8004fc4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004fc6:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8004fca:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004fce:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004fd2:	4c33      	ldr	r4, [pc, #204]	; (80050a0 <HAL_GPIO_Init+0x1c0>)
 8004fd4:	42a0      	cmp	r0, r4
 8004fd6:	d04e      	beq.n	8005076 <HAL_GPIO_Init+0x196>
 8004fd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fdc:	42a0      	cmp	r0, r4
 8004fde:	d04c      	beq.n	800507a <HAL_GPIO_Init+0x19a>
 8004fe0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fe4:	42a0      	cmp	r0, r4
 8004fe6:	d04a      	beq.n	800507e <HAL_GPIO_Init+0x19e>
 8004fe8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fec:	42a0      	cmp	r0, r4
 8004fee:	d048      	beq.n	8005082 <HAL_GPIO_Init+0x1a2>
 8004ff0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ff4:	42a0      	cmp	r0, r4
 8004ff6:	d046      	beq.n	8005086 <HAL_GPIO_Init+0x1a6>
 8004ff8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ffc:	42a0      	cmp	r0, r4
 8004ffe:	d044      	beq.n	800508a <HAL_GPIO_Init+0x1aa>
 8005000:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005004:	42a0      	cmp	r0, r4
 8005006:	d042      	beq.n	800508e <HAL_GPIO_Init+0x1ae>
 8005008:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800500c:	42a0      	cmp	r0, r4
 800500e:	d040      	beq.n	8005092 <HAL_GPIO_Init+0x1b2>
 8005010:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005014:	42a0      	cmp	r0, r4
 8005016:	d03e      	beq.n	8005096 <HAL_GPIO_Init+0x1b6>
 8005018:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800501c:	42a0      	cmp	r0, r4
 800501e:	bf0c      	ite	eq
 8005020:	2409      	moveq	r4, #9
 8005022:	240a      	movne	r4, #10
 8005024:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005026:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005028:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800502c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800502e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8005032:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8005034:	bf54      	ite	pl
 8005036:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005038:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800503c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800503e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8005040:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8005042:	bf54      	ite	pl
 8005044:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005046:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800504a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800504c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800504e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8005050:	bf54      	ite	pl
 8005052:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005054:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005058:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800505a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800505c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800505e:	bf54      	ite	pl
 8005060:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005062:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8005066:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005068:	3301      	adds	r3, #1
 800506a:	2b10      	cmp	r3, #16
 800506c:	f47f af3e 	bne.w	8004eec <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8005070:	b003      	add	sp, #12
 8005072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005076:	2400      	movs	r4, #0
 8005078:	e7d4      	b.n	8005024 <HAL_GPIO_Init+0x144>
 800507a:	2401      	movs	r4, #1
 800507c:	e7d2      	b.n	8005024 <HAL_GPIO_Init+0x144>
 800507e:	2402      	movs	r4, #2
 8005080:	e7d0      	b.n	8005024 <HAL_GPIO_Init+0x144>
 8005082:	2403      	movs	r4, #3
 8005084:	e7ce      	b.n	8005024 <HAL_GPIO_Init+0x144>
 8005086:	2404      	movs	r4, #4
 8005088:	e7cc      	b.n	8005024 <HAL_GPIO_Init+0x144>
 800508a:	2405      	movs	r4, #5
 800508c:	e7ca      	b.n	8005024 <HAL_GPIO_Init+0x144>
 800508e:	2406      	movs	r4, #6
 8005090:	e7c8      	b.n	8005024 <HAL_GPIO_Init+0x144>
 8005092:	2407      	movs	r4, #7
 8005094:	e7c6      	b.n	8005024 <HAL_GPIO_Init+0x144>
 8005096:	2408      	movs	r4, #8
 8005098:	e7c4      	b.n	8005024 <HAL_GPIO_Init+0x144>
 800509a:	bf00      	nop
 800509c:	40013c00 	.word	0x40013c00
 80050a0:	40020000 	.word	0x40020000
 80050a4:	40023800 	.word	0x40023800

080050a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ac:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050ae:	4c4a      	ldr	r4, [pc, #296]	; (80051d8 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050b0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80051e0 <HAL_GPIO_DeInit+0x138>
 80050b4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80051e4 <HAL_GPIO_DeInit+0x13c>
 80050b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80051e8 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80050bc:	2301      	movs	r3, #1
 80050be:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80050c2:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80050c6:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80050ca:	d16e      	bne.n	80051aa <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 80050cc:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050d0:	f002 0c03 	and.w	ip, r2, #3
 80050d4:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_GPIO_DeInit+0x134>)
 80050d8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050e0:	4298      	cmp	r0, r3
 80050e2:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050e6:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 80050ea:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050ee:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050f2:	d05f      	beq.n	80051b4 <HAL_GPIO_DeInit+0x10c>
 80050f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f8:	4298      	cmp	r0, r3
 80050fa:	d05d      	beq.n	80051b8 <HAL_GPIO_DeInit+0x110>
 80050fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005100:	4298      	cmp	r0, r3
 8005102:	d05b      	beq.n	80051bc <HAL_GPIO_DeInit+0x114>
 8005104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005108:	4298      	cmp	r0, r3
 800510a:	d059      	beq.n	80051c0 <HAL_GPIO_DeInit+0x118>
 800510c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005110:	4298      	cmp	r0, r3
 8005112:	d057      	beq.n	80051c4 <HAL_GPIO_DeInit+0x11c>
 8005114:	4548      	cmp	r0, r9
 8005116:	d057      	beq.n	80051c8 <HAL_GPIO_DeInit+0x120>
 8005118:	4550      	cmp	r0, sl
 800511a:	d057      	beq.n	80051cc <HAL_GPIO_DeInit+0x124>
 800511c:	4558      	cmp	r0, fp
 800511e:	d057      	beq.n	80051d0 <HAL_GPIO_DeInit+0x128>
 8005120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005124:	4298      	cmp	r0, r3
 8005126:	d055      	beq.n	80051d4 <HAL_GPIO_DeInit+0x12c>
 8005128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512c:	4298      	cmp	r0, r3
 800512e:	bf0c      	ite	eq
 8005130:	2309      	moveq	r3, #9
 8005132:	230a      	movne	r3, #10
 8005134:	fa03 f30c 	lsl.w	r3, r3, ip
 8005138:	4543      	cmp	r3, r8
 800513a:	d113      	bne.n	8005164 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	ea23 0307 	bic.w	r3, r3, r7
 8005142:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	ea23 0307 	bic.w	r3, r3, r7
 800514a:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800514c:	68e3      	ldr	r3, [r4, #12]
 800514e:	ea23 0307 	bic.w	r3, r3, r7
 8005152:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005154:	68a3      	ldr	r3, [r4, #8]
 8005156:	ea23 0307 	bic.w	r3, r3, r7
 800515a:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800515c:	68ab      	ldr	r3, [r5, #8]
 800515e:	ea23 0306 	bic.w	r3, r3, r6
 8005162:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005164:	2603      	movs	r6, #3
 8005166:	0053      	lsls	r3, r2, #1
 8005168:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800516a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800516e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005172:	270f      	movs	r7, #15
 8005174:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005178:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800517c:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005180:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005182:	fa22 f506 	lsr.w	r5, r2, r6
 8005186:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800518a:	6a2e      	ldr	r6, [r5, #32]
 800518c:	ea26 0707 	bic.w	r7, r6, r7
 8005190:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005192:	68c5      	ldr	r5, [r0, #12]
 8005194:	ea25 0503 	bic.w	r5, r5, r3
 8005198:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800519a:	6845      	ldr	r5, [r0, #4]
 800519c:	ea25 050e 	bic.w	r5, r5, lr
 80051a0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051a2:	6885      	ldr	r5, [r0, #8]
 80051a4:	ea25 0303 	bic.w	r3, r5, r3
 80051a8:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051aa:	3201      	adds	r2, #1
 80051ac:	2a10      	cmp	r2, #16
 80051ae:	d185      	bne.n	80050bc <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80051b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80051b4:	2300      	movs	r3, #0
 80051b6:	e7bd      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7bb      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e7b9      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051c0:	2303      	movs	r3, #3
 80051c2:	e7b7      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051c4:	2304      	movs	r3, #4
 80051c6:	e7b5      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051c8:	2305      	movs	r3, #5
 80051ca:	e7b3      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051cc:	2306      	movs	r3, #6
 80051ce:	e7b1      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051d0:	2307      	movs	r3, #7
 80051d2:	e7af      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051d4:	2308      	movs	r3, #8
 80051d6:	e7ad      	b.n	8005134 <HAL_GPIO_DeInit+0x8c>
 80051d8:	40013c00 	.word	0x40013c00
 80051dc:	40020000 	.word	0x40020000
 80051e0:	40021400 	.word	0x40021400
 80051e4:	40021800 	.word	0x40021800
 80051e8:	40021c00 	.word	0x40021c00

080051ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051ec:	6903      	ldr	r3, [r0, #16]
 80051ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80051f0:	bf14      	ite	ne
 80051f2:	2001      	movne	r0, #1
 80051f4:	2000      	moveq	r0, #0
 80051f6:	4770      	bx	lr

080051f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f8:	b10a      	cbz	r2, 80051fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80051fa:	6181      	str	r1, [r0, #24]
  }
}
 80051fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80051fe:	0409      	lsls	r1, r1, #16
 8005200:	e7fb      	b.n	80051fa <HAL_GPIO_WritePin+0x2>

08005202 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005202:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005204:	ea01 0203 	and.w	r2, r1, r3
 8005208:	ea21 0103 	bic.w	r1, r1, r3
 800520c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005210:	6181      	str	r1, [r0, #24]
}
 8005212:	4770      	bx	lr

08005214 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005214:	6803      	ldr	r3, [r0, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	0791      	lsls	r1, r2, #30
 800521a:	d501      	bpl.n	8005220 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800521c:	2200      	movs	r2, #0
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	07d2      	lsls	r2, r2, #31
 8005224:	d403      	bmi.n	800522e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	619a      	str	r2, [r3, #24]
  }
}
 800522e:	4770      	bx	lr

08005230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005230:	b530      	push	{r4, r5, lr}
 8005232:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005234:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005238:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800523c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005242:	4a05      	ldr	r2, [pc, #20]	; (8005258 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005244:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005246:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800524a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800524e:	ea20 0002 	bic.w	r0, r0, r2
 8005252:	4303      	orrs	r3, r0
 8005254:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005256:	bd30      	pop	{r4, r5, pc}
 8005258:	03ff63ff 	.word	0x03ff63ff

0800525c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800525c:	6803      	ldr	r3, [r0, #0]
{
 800525e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005262:	699c      	ldr	r4, [r3, #24]
{
 8005264:	4605      	mov	r5, r0
 8005266:	460f      	mov	r7, r1
 8005268:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800526a:	f014 0410 	ands.w	r4, r4, #16
 800526e:	d070      	beq.n	8005352 <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 8005270:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005272:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005276:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	0692      	lsls	r2, r2, #26
 800527e:	d462      	bmi.n	8005346 <I2C_IsErrorOccurred+0xea>
 8005280:	f1b8 0f00 	cmp.w	r8, #0
 8005284:	d036      	beq.n	80052f4 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 8005286:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800528a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005290:	05d6      	lsls	r6, r2, #23
 8005292:	d505      	bpl.n	80052a0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005294:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005298:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800529c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800529e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052a0:	0551      	lsls	r1, r2, #21
 80052a2:	d505      	bpl.n	80052b0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80052a8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80052ac:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052ae:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052b0:	0592      	lsls	r2, r2, #22
 80052b2:	d550      	bpl.n	8005356 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80052b8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052bc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80052be:	4628      	mov	r0, r5
 80052c0:	f7ff ffa8 	bl	8005214 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80052c4:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80052c6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80052c8:	6853      	ldr	r3, [r2, #4]
 80052ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80052ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80052d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80052dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80052de:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80052e2:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80052ee:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80052f2:	e032      	b.n	800535a <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 80052f4:	1c7a      	adds	r2, r7, #1
 80052f6:	d0c0      	beq.n	800527a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7ff fb88 	bl	8004a0c <HAL_GetTick>
 80052fc:	1b80      	subs	r0, r0, r6
 80052fe:	42b8      	cmp	r0, r7
 8005300:	d801      	bhi.n	8005306 <I2C_IsErrorOccurred+0xaa>
 8005302:	2f00      	cmp	r7, #0
 8005304:	d1b8      	bne.n	8005278 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800530a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800530e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005310:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005312:	0400      	lsls	r0, r0, #16
 8005314:	d50a      	bpl.n	800532c <I2C_IsErrorOccurred+0xd0>
 8005316:	0448      	lsls	r0, r1, #17
 8005318:	d408      	bmi.n	800532c <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800531a:	2a20      	cmp	r2, #32
 800531c:	d006      	beq.n	800532c <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005324:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005326:	f7ff fb71 	bl	8004a0c <HAL_GetTick>
 800532a:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	0699      	lsls	r1, r3, #26
 8005332:	d4a1      	bmi.n	8005278 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005334:	f7ff fb6a 	bl	8004a0c <HAL_GetTick>
 8005338:	1b80      	subs	r0, r0, r6
 800533a:	2819      	cmp	r0, #25
 800533c:	d9f6      	bls.n	800532c <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800533e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8005340:	f04f 0801 	mov.w	r8, #1
 8005344:	e798      	b.n	8005278 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8005346:	f1b8 0f00 	cmp.w	r8, #0
 800534a:	d19c      	bne.n	8005286 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800534c:	2220      	movs	r2, #32
 800534e:	61da      	str	r2, [r3, #28]
 8005350:	e799      	b.n	8005286 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	4620      	mov	r0, r4
 8005354:	e79a      	b.n	800528c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8005356:	2800      	cmp	r0, #0
 8005358:	d1b1      	bne.n	80052be <I2C_IsErrorOccurred+0x62>
}
 800535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800535e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	4604      	mov	r4, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	079b      	lsls	r3, r3, #30
 800536c:	d501      	bpl.n	8005372 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800536e:	2000      	movs	r0, #0
}
 8005370:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005372:	4632      	mov	r2, r6
 8005374:	4629      	mov	r1, r5
 8005376:	4620      	mov	r0, r4
 8005378:	f7ff ff70 	bl	800525c <I2C_IsErrorOccurred>
 800537c:	b9a0      	cbnz	r0, 80053a8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800537e:	1c6a      	adds	r2, r5, #1
 8005380:	d0f1      	beq.n	8005366 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7ff fb43 	bl	8004a0c <HAL_GetTick>
 8005386:	1b80      	subs	r0, r0, r6
 8005388:	42a8      	cmp	r0, r5
 800538a:	d801      	bhi.n	8005390 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800538c:	2d00      	cmp	r5, #0
 800538e:	d1ea      	bne.n	8005366 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005392:	f043 0320 	orr.w	r3, r3, #32
 8005396:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005398:	2320      	movs	r3, #32
 800539a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800539e:	2300      	movs	r3, #0
 80053a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80053a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80053a8:	2001      	movs	r0, #1
 80053aa:	e7e1      	b.n	8005370 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080053ac <I2C_WaitOnFlagUntilTimeout>:
{
 80053ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	9f06      	ldr	r7, [sp, #24]
 80053b2:	4604      	mov	r4, r0
 80053b4:	4688      	mov	r8, r1
 80053b6:	4616      	mov	r6, r2
 80053b8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	6993      	ldr	r3, [r2, #24]
 80053be:	ea38 0303 	bics.w	r3, r8, r3
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	42b3      	cmp	r3, r6
 80053ca:	d001      	beq.n	80053d0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80053cc:	2000      	movs	r0, #0
 80053ce:	e015      	b.n	80053fc <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	1c6b      	adds	r3, r5, #1
 80053d2:	d0f3      	beq.n	80053bc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d4:	f7ff fb1a 	bl	8004a0c <HAL_GetTick>
 80053d8:	1bc0      	subs	r0, r0, r7
 80053da:	42a8      	cmp	r0, r5
 80053dc:	d801      	bhi.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0x36>
 80053de:	2d00      	cmp	r5, #0
 80053e0:	d1eb      	bne.n	80053ba <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80053e4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	f043 0320 	orr.w	r3, r3, #32
 80053ea:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	2320      	movs	r3, #32
 80053ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80053f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80053fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005400 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
 8005406:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	069b      	lsls	r3, r3, #26
 800540e:	d501      	bpl.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005410:	2000      	movs	r0, #0
}
 8005412:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005414:	4632      	mov	r2, r6
 8005416:	4629      	mov	r1, r5
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff ff1f 	bl	800525c <I2C_IsErrorOccurred>
 800541e:	b990      	cbnz	r0, 8005446 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005420:	f7ff faf4 	bl	8004a0c <HAL_GetTick>
 8005424:	1b80      	subs	r0, r0, r6
 8005426:	42a8      	cmp	r0, r5
 8005428:	d801      	bhi.n	800542e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800542a:	2d00      	cmp	r5, #0
 800542c:	d1ec      	bne.n	8005408 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005436:	2320      	movs	r3, #32
 8005438:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	2300      	movs	r3, #0
 800543e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005442:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005446:	2001      	movs	r0, #1
 8005448:	e7e3      	b.n	8005412 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800544a <HAL_I2C_Init>:
{
 800544a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800544c:	4604      	mov	r4, r0
 800544e:	2800      	cmp	r0, #0
 8005450:	d04a      	beq.n	80054e8 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005452:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005456:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800545a:	b91b      	cbnz	r3, 8005464 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800545c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005460:	f7fb ffe4 	bl	800142c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005464:	2324      	movs	r3, #36	; 0x24
 8005466:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005474:	6862      	ldr	r2, [r4, #4]
 8005476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800547a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005482:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005484:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005488:	2901      	cmp	r1, #1
 800548a:	d124      	bne.n	80054d6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800548c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005490:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005492:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005494:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005496:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800549a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80054ac:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ae:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054b4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054b6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80054d4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054da:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054dc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054de:	d1d8      	bne.n	8005492 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	e7d4      	b.n	8005492 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80054e8:	2001      	movs	r0, #1
 80054ea:	e7f3      	b.n	80054d4 <HAL_I2C_Init+0x8a>

080054ec <HAL_I2C_DeInit>:
{
 80054ec:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80054ee:	4604      	mov	r4, r0
 80054f0:	b198      	cbz	r0, 800551a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80054f2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f4:	2324      	movs	r3, #36	; 0x24
 80054f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80054fa:	6813      	ldr	r3, [r2, #0]
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005502:	f7fb ffd7 	bl	80014b4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005506:	2000      	movs	r0, #0
 8005508:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800550a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800550e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005512:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005514:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005518:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800551a:	2001      	movs	r0, #1
 800551c:	e7fc      	b.n	8005518 <HAL_I2C_DeInit+0x2c>
	...

08005520 <HAL_I2C_Mem_Write>:
{
 8005520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005526:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800552a:	4604      	mov	r4, r0
 800552c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800552e:	2b20      	cmp	r3, #32
{
 8005530:	4616      	mov	r6, r2
 8005532:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005536:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800553a:	f040 80c6 	bne.w	80056ca <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800553e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005540:	b113      	cbz	r3, 8005548 <HAL_I2C_Mem_Write+0x28>
 8005542:	f1ba 0f00 	cmp.w	sl, #0
 8005546:	d106      	bne.n	8005556 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800554c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800554e:	2001      	movs	r0, #1
}
 8005550:	b003      	add	sp, #12
 8005552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005556:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800555a:	2b01      	cmp	r3, #1
 800555c:	f000 80b5 	beq.w	80056ca <HAL_I2C_Mem_Write+0x1aa>
 8005560:	f04f 0b01 	mov.w	fp, #1
 8005564:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005568:	f7ff fa50 	bl	8004a0c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800556c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800556e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005570:	9000      	str	r0, [sp, #0]
 8005572:	465a      	mov	r2, fp
 8005574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff ff17 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 800557e:	2800      	cmp	r0, #0
 8005580:	d1e5      	bne.n	800554e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005582:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005584:	fa5f f289 	uxtb.w	r2, r9
 8005588:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800558a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800558c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005598:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800559a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800559c:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800559e:	4b4c      	ldr	r3, [pc, #304]	; (80056d0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80055a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055aa:	f7ff fe41 	bl	8005230 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	462a      	mov	r2, r5
 80055b0:	4641      	mov	r1, r8
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff fed3 	bl	800535e <I2C_WaitOnTXISFlagUntilTimeout>
 80055b8:	bb18      	cbnz	r0, 8005602 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ba:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055be:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055c0:	d115      	bne.n	80055ee <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055c2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ca:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055cc:	4643      	mov	r3, r8
 80055ce:	9500      	str	r5, [sp, #0]
 80055d0:	f7ff feec 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 80055d4:	b9a8      	cbnz	r0, 8005602 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2bff      	cmp	r3, #255	; 0xff
 80055dc:	d815      	bhi.n	800560a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80055de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80055e6:	b292      	uxth	r2, r2
 80055e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	e012      	b.n	8005614 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055ee:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f0:	4641      	mov	r1, r8
 80055f2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	462a      	mov	r2, r5
 80055f8:	f7ff feb1 	bl	800535e <I2C_WaitOnTXISFlagUntilTimeout>
 80055fc:	b908      	cbnz	r0, 8005602 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	e7df      	b.n	80055c2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005608:	e7a1      	b.n	800554e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800560a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800560c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005610:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005612:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005614:	4639      	mov	r1, r7
 8005616:	4620      	mov	r0, r4
 8005618:	f7ff fe0a 	bl	8005230 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	462a      	mov	r2, r5
 800561e:	4641      	mov	r1, r8
 8005620:	4620      	mov	r0, r4
 8005622:	f7ff fe9c 	bl	800535e <I2C_WaitOnTXISFlagUntilTimeout>
 8005626:	2800      	cmp	r0, #0
 8005628:	d191      	bne.n	800554e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800562a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005632:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005634:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005636:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005638:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800563a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800563c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800563e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005640:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005642:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005644:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005646:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005648:	b29b      	uxth	r3, r3
 800564a:	b1b3      	cbz	r3, 800567a <HAL_I2C_Mem_Write+0x15a>
 800564c:	b9aa      	cbnz	r2, 800567a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800564e:	4643      	mov	r3, r8
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	4620      	mov	r0, r4
 8005654:	9500      	str	r5, [sp, #0]
 8005656:	f7ff fea9 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 800565a:	2800      	cmp	r0, #0
 800565c:	f47f af77 	bne.w	800554e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005660:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2bff      	cmp	r3, #255	; 0xff
 8005666:	d928      	bls.n	80056ba <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005668:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800566a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800566e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005670:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005672:	4639      	mov	r1, r7
 8005674:	4620      	mov	r0, r4
 8005676:	f7ff fddb 	bl	8005230 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800567a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1cc      	bne.n	800561c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005682:	462a      	mov	r2, r5
 8005684:	4641      	mov	r1, r8
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff feba 	bl	8005400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800568c:	2800      	cmp	r0, #0
 800568e:	f47f af5e 	bne.w	800554e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	2120      	movs	r1, #32
 8005696:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800569e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80056a2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80056b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056b4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80056b8:	e74a      	b.n	8005550 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80056ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056c0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80056c2:	b292      	uxth	r2, r2
 80056c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	e7d3      	b.n	8005672 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80056ca:	2002      	movs	r0, #2
 80056cc:	e740      	b.n	8005550 <HAL_I2C_Mem_Write+0x30>
 80056ce:	bf00      	nop
 80056d0:	80002000 	.word	0x80002000

080056d4 <HAL_I2C_Mem_Read>:
{
 80056d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80056de:	4604      	mov	r4, r0
 80056e0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	2b20      	cmp	r3, #32
{
 80056e4:	4616      	mov	r6, r2
 80056e6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80056ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ee:	f040 80c9 	bne.w	8005884 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80056f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056f4:	b113      	cbz	r3, 80056fc <HAL_I2C_Mem_Read+0x28>
 80056f6:	f1ba 0f00 	cmp.w	sl, #0
 80056fa:	d106      	bne.n	800570a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005700:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005702:	2001      	movs	r0, #1
}
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800570a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800570e:	2b01      	cmp	r3, #1
 8005710:	f000 80b8 	beq.w	8005884 <HAL_I2C_Mem_Read+0x1b0>
 8005714:	f04f 0b01 	mov.w	fp, #1
 8005718:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800571c:	f7ff f976 	bl	8004a0c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005720:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005722:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005724:	9000      	str	r0, [sp, #0]
 8005726:	465a      	mov	r2, fp
 8005728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff fe3d 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8005732:	2800      	cmp	r0, #0
 8005734:	d1e5      	bne.n	8005702 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005736:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005738:	fa5f f289 	uxtb.w	r2, r9
 800573c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800573e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005740:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800574a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800574c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800574e:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005750:	4b4d      	ldr	r3, [pc, #308]	; (8005888 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8005752:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4603      	mov	r3, r0
 800575a:	4620      	mov	r0, r4
 800575c:	f7ff fd68 	bl	8005230 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	462a      	mov	r2, r5
 8005762:	4641      	mov	r1, r8
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff fdfa 	bl	800535e <I2C_WaitOnTXISFlagUntilTimeout>
 800576a:	bb20      	cbnz	r0, 80057b6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005770:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005772:	d116      	bne.n	80057a2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005776:	2200      	movs	r2, #0
 8005778:	2140      	movs	r1, #64	; 0x40
 800577a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800577c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800577e:	4643      	mov	r3, r8
 8005780:	9500      	str	r5, [sp, #0]
 8005782:	f7ff fe13 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8005786:	b9b0      	cbnz	r0, 80057b6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2bff      	cmp	r3, #255	; 0xff
 800578e:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_I2C_Mem_Read+0x1b8>)
 8005790:	d815      	bhi.n	80057be <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800579a:	b292      	uxth	r2, r2
 800579c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	e012      	b.n	80057c8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057a2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a4:	4641      	mov	r1, r8
 80057a6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057aa:	462a      	mov	r2, r5
 80057ac:	f7ff fdd7 	bl	800535e <I2C_WaitOnTXISFlagUntilTimeout>
 80057b0:	b908      	cbnz	r0, 80057b6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	e7de      	b.n	8005774 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057bc:	e7a1      	b.n	8005702 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057be:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c8:	4639      	mov	r1, r7
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff fd30 	bl	8005230 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057d0:	4643      	mov	r3, r8
 80057d2:	2200      	movs	r2, #0
 80057d4:	2104      	movs	r1, #4
 80057d6:	4620      	mov	r0, r4
 80057d8:	9500      	str	r5, [sp, #0]
 80057da:	f7ff fde7 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d18f      	bne.n	8005702 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80057ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80057ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057ee:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80057f0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80057f2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057f6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80057f8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80057fa:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005800:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	b1b3      	cbz	r3, 8005834 <HAL_I2C_Mem_Read+0x160>
 8005806:	b9aa      	cbnz	r2, 8005834 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005808:	4643      	mov	r3, r8
 800580a:	2180      	movs	r1, #128	; 0x80
 800580c:	4620      	mov	r0, r4
 800580e:	9500      	str	r5, [sp, #0]
 8005810:	f7ff fdcc 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8005814:	2800      	cmp	r0, #0
 8005816:	f47f af74 	bne.w	8005702 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800581a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2bff      	cmp	r3, #255	; 0xff
 8005820:	d928      	bls.n	8005874 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005822:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005828:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800582a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800582c:	4639      	mov	r1, r7
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff fcfe 	bl	8005230 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005834:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1c9      	bne.n	80057d0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583c:	462a      	mov	r2, r5
 800583e:	4641      	mov	r1, r8
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff fddd 	bl	8005400 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005846:	2800      	cmp	r0, #0
 8005848:	f47f af5b 	bne.w	8005702 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	2120      	movs	r1, #32
 8005850:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005858:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800585c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800586a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005872:	e747      	b.n	8005704 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005874:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800587c:	b292      	uxth	r2, r2
 800587e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	e7d3      	b.n	800582c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8005884:	2002      	movs	r0, #2
 8005886:	e73d      	b.n	8005704 <HAL_I2C_Mem_Read+0x30>
 8005888:	80002000 	.word	0x80002000
 800588c:	80002400 	.word	0x80002400

08005890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005890:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005892:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005896:	2b20      	cmp	r3, #32
 8005898:	b2dc      	uxtb	r4, r3
 800589a:	d11d      	bne.n	80058d8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800589c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d019      	beq.n	80058d8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a4:	2324      	movs	r3, #36	; 0x24
 80058a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058aa:	6803      	ldr	r3, [r0, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4311      	orrs	r1, r2
 80058c0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80058d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80058d4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80058d6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80058d8:	2002      	movs	r0, #2
 80058da:	e7fc      	b.n	80058d6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080058dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058dc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	b2dc      	uxtb	r4, r3
 80058e6:	d11c      	bne.n	8005922 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d018      	beq.n	8005922 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058f0:	2324      	movs	r3, #36	; 0x24
 80058f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058f6:	6803      	ldr	r3, [r0, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005900:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005902:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005906:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800590a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005914:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005916:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800591a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800591e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005920:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005922:	2002      	movs	r0, #2
 8005924:	e7fc      	b.n	8005920 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08005926 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005926:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005928:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800592a:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800592e:	3284      	adds	r2, #132	; 0x84
 8005930:	1883      	adds	r3, r0, r2
{
 8005932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005936:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005938:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800593c:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800593e:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005942:	684c      	ldr	r4, [r1, #4]
 8005944:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005948:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800594c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005950:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005952:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005954:	68c5      	ldr	r5, [r0, #12]
 8005956:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800595a:	443d      	add	r5, r7
 800595c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005960:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005962:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005964:	68c5      	ldr	r5, [r0, #12]
 8005966:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800596a:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800596c:	689d      	ldr	r5, [r3, #8]
 800596e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005972:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005974:	688d      	ldr	r5, [r1, #8]
 8005976:	68c7      	ldr	r7, [r0, #12]
 8005978:	3501      	adds	r5, #1
 800597a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800597e:	443d      	add	r5, r7
 8005980:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005984:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005986:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005988:	691d      	ldr	r5, [r3, #16]
 800598a:	f025 0507 	bic.w	r5, r5, #7
 800598e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005990:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005992:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005994:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005998:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800599c:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80059a0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80059a4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80059a8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80059ac:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80059b0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80059b2:	695d      	ldr	r5, [r3, #20]
 80059b4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80059b8:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80059ba:	694d      	ldr	r5, [r1, #20]
 80059bc:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80059be:	69dd      	ldr	r5, [r3, #28]
 80059c0:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80059c4:	f025 0507 	bic.w	r5, r5, #7
 80059c8:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80059ca:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80059ce:	433d      	orrs	r5, r7
 80059d0:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80059d2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80059d4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80059d6:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80059da:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80059dc:	b31e      	cbz	r6, 8005a26 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80059de:	2e01      	cmp	r6, #1
 80059e0:	d023      	beq.n	8005a2a <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80059e2:	1eb5      	subs	r5, r6, #2
 80059e4:	2d02      	cmp	r5, #2
 80059e6:	d922      	bls.n	8005a2e <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80059e8:	2e07      	cmp	r6, #7
 80059ea:	bf0c      	ite	eq
 80059ec:	2502      	moveq	r5, #2
 80059ee:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80059f0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059f2:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80059f6:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059fa:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80059fc:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059fe:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a00:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a02:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a04:	436e      	muls	r6, r5
 8005a06:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005a0a:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005a0c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005a0e:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8005a12:	f024 0407 	bic.w	r4, r4, #7
 8005a16:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a18:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a1a:	5883      	ldr	r3, [r0, r2]
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	5083      	str	r3, [r0, r2]
}
 8005a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005a26:	2504      	movs	r5, #4
 8005a28:	e7e2      	b.n	80059f0 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005a2a:	2503      	movs	r5, #3
 8005a2c:	e7e0      	b.n	80059f0 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005a2e:	2502      	movs	r5, #2
 8005a30:	e7de      	b.n	80059f0 <LTDC_SetConfig+0xca>
	...

08005a34 <HAL_LTDC_Init>:
{
 8005a34:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005a36:	4604      	mov	r4, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d063      	beq.n	8005b04 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a3c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005a40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a44:	b91b      	cbnz	r3, 8005a4e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005a46:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005a4a:	f7fb fd4f 	bl	80014ec <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a5c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a5e:	6999      	ldr	r1, [r3, #24]
 8005a60:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005a64:	4302      	orrs	r2, r0
 8005a66:	68e0      	ldr	r0, [r4, #12]
 8005a68:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a6a:	6920      	ldr	r0, [r4, #16]
 8005a6c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a6e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a70:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a72:	4925      	ldr	r1, [pc, #148]	; (8005b08 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a74:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	400a      	ands	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005a82:	69a0      	ldr	r0, [r4, #24]
 8005a84:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a86:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a88:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005a96:	6a20      	ldr	r0, [r4, #32]
 8005a98:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a9c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005aaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005aac:	4302      	orrs	r2, r0
 8005aae:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	4011      	ands	r1, r2
 8005ab4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ab6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005abe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ac6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005aca:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ace:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ad2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ad6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005ada:	430a      	orrs	r2, r1
 8005adc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005ae0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ae4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aea:	f042 0206 	orr.w	r2, r2, #6
 8005aee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005af8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005afa:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005afe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005b04:	2001      	movs	r0, #1
 8005b06:	e7fc      	b.n	8005b02 <HAL_LTDC_Init+0xce>
 8005b08:	f000f800 	.word	0xf000f800

08005b0c <HAL_LTDC_ErrorCallback>:
 8005b0c:	4770      	bx	lr

08005b0e <HAL_LTDC_ReloadEventCallback>:
 8005b0e:	4770      	bx	lr

08005b10 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005b10:	6803      	ldr	r3, [r0, #0]
{
 8005b12:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005b14:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8005b16:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005b18:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005b1a:	0772      	lsls	r2, r6, #29
 8005b1c:	d514      	bpl.n	8005b48 <HAL_LTDC_IRQHandler+0x38>
 8005b1e:	0769      	lsls	r1, r5, #29
 8005b20:	d512      	bpl.n	8005b48 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b24:	f022 0204 	bic.w	r2, r2, #4
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005b2e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005b32:	f043 0301 	orr.w	r3, r3, #1
 8005b36:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005b3a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005b3c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005b40:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005b44:	f7ff ffe2 	bl	8005b0c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005b48:	07b2      	lsls	r2, r6, #30
 8005b4a:	d516      	bpl.n	8005b7a <HAL_LTDC_IRQHandler+0x6a>
 8005b4c:	07ab      	lsls	r3, r5, #30
 8005b4e:	d514      	bpl.n	8005b7a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005b50:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005b52:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b56:	f022 0202 	bic.w	r2, r2, #2
 8005b5a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005b60:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005b70:	2300      	movs	r3, #0
 8005b72:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005b76:	f7ff ffc9 	bl	8005b0c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005b7a:	07f0      	lsls	r0, r6, #31
 8005b7c:	d510      	bpl.n	8005ba0 <HAL_LTDC_IRQHandler+0x90>
 8005b7e:	07e9      	lsls	r1, r5, #31
 8005b80:	d50e      	bpl.n	8005ba0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005b82:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005b84:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005b8e:	2201      	movs	r2, #1
 8005b90:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005b92:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b94:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005b98:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005b9c:	f7fd faee 	bl	800317c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ba0:	0732      	lsls	r2, r6, #28
 8005ba2:	d511      	bpl.n	8005bc8 <HAL_LTDC_IRQHandler+0xb8>
 8005ba4:	072b      	lsls	r3, r5, #28
 8005ba6:	d50f      	bpl.n	8005bc8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ba8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005baa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bae:	f022 0208 	bic.w	r2, r2, #8
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005bc4:	f7ff ffa3 	bl	8005b0e <HAL_LTDC_ReloadEventCallback>
}
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}

08005bca <HAL_LTDC_ConfigLayer>:
{
 8005bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005bce:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	f04f 0002 	mov.w	r0, #2
 8005bde:	d01f      	beq.n	8005c20 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005be0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005be2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005be6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005be8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005bec:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005bf0:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005bf4:	3438      	adds	r4, #56	; 0x38
 8005bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c02:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c04:	4630      	mov	r0, r6
 8005c06:	4662      	mov	r2, ip
 8005c08:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005c0a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c0c:	f7ff fe8b 	bl	8005926 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c10:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005c12:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c14:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c18:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005c1c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c24 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005c24:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f04f 0302 	mov.w	r3, #2
 8005c2e:	d012      	beq.n	8005c56 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c30:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c34:	6803      	ldr	r3, [r0, #0]
 8005c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005c3e:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <HAL_LTDC_ProgramLineEvent+0x38>)
 8005c40:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005c50:	2300      	movs	r3, #0
 8005c52:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8005c56:	4618      	mov	r0, r3
}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40016800 	.word	0x40016800

08005c60 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c60:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c66:	4c19      	ldr	r4, [pc, #100]	; (8005ccc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c80:	f7fe fec4 	bl	8004a0c <HAL_GetTick>
 8005c84:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	03da      	lsls	r2, r3, #15
 8005c8a:	d50c      	bpl.n	8005ca6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c8c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c8e:	4d0f      	ldr	r5, [pc, #60]	; (8005ccc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c94:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005c96:	f7fe feb9 	bl	8004a0c <HAL_GetTick>
 8005c9a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c9c:	686b      	ldr	r3, [r5, #4]
 8005c9e:	039b      	lsls	r3, r3, #14
 8005ca0:	d50a      	bpl.n	8005cb8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e006      	b.n	8005cb4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ca6:	f7fe feb1 	bl	8004a0c <HAL_GetTick>
 8005caa:	1b40      	subs	r0, r0, r5
 8005cac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005cb0:	d9e9      	bls.n	8005c86 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005cb2:	2003      	movs	r0, #3
}
 8005cb4:	b003      	add	sp, #12
 8005cb6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cb8:	f7fe fea8 	bl	8004a0c <HAL_GetTick>
 8005cbc:	1b00      	subs	r0, r0, r4
 8005cbe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005cc2:	d9eb      	bls.n	8005c9c <HAL_PWREx_EnableOverDrive+0x3c>
 8005cc4:	e7f5      	b.n	8005cb2 <HAL_PWREx_EnableOverDrive+0x52>
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40007000 	.word	0x40007000

08005cd0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005cd4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005cd6:	b136      	cbz	r6, 8005ce6 <QSPI_Config+0x16>
 8005cd8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005cdc:	d003      	beq.n	8005ce6 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005cde:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005ce0:	6804      	ldr	r4, [r0, #0]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005ce6:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005cea:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005cee:	f1b9 0f00 	cmp.w	r9, #0
 8005cf2:	d04f      	beq.n	8005d94 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cf4:	694b      	ldr	r3, [r1, #20]
 8005cf6:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005cfa:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cfc:	f8d1 a000 	ldr.w	sl, [r1]
 8005d00:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8005d04:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8005d08:	ea49 0902 	orr.w	r9, r9, r2
 8005d0c:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005d10:	b335      	cbz	r5, 8005d60 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005d12:	688b      	ldr	r3, [r1, #8]
 8005d14:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d18:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005d1a:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005d1c:	b19f      	cbz	r7, 8005d46 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d1e:	ea4a 0307 	orr.w	r3, sl, r7
 8005d22:	4323      	orrs	r3, r4
 8005d24:	68cc      	ldr	r4, [r1, #12]
 8005d26:	ea43 0308 	orr.w	r3, r3, r8
 8005d2a:	ea43 030e 	orr.w	r3, r3, lr
 8005d2e:	4333      	orrs	r3, r6
 8005d30:	4323      	orrs	r3, r4
 8005d32:	ea43 030c 	orr.w	r3, r3, ip
 8005d36:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005d38:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d3c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005d3e:	d00d      	beq.n	8005d5c <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005d40:	684b      	ldr	r3, [r1, #4]
 8005d42:	6183      	str	r3, [r0, #24]
 8005d44:	e00a      	b.n	8005d5c <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d46:	ea4a 0304 	orr.w	r3, sl, r4
 8005d4a:	ea43 0308 	orr.w	r3, r3, r8
 8005d4e:	ea43 030e 	orr.w	r3, r3, lr
 8005d52:	4333      	orrs	r3, r6
 8005d54:	ea43 030c 	orr.w	r3, r3, ip
 8005d58:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d5a:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005d60:	b16f      	cbz	r7, 8005d7e <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d62:	ea4a 0307 	orr.w	r3, sl, r7
 8005d66:	4323      	orrs	r3, r4
 8005d68:	68cc      	ldr	r4, [r1, #12]
 8005d6a:	ea43 0308 	orr.w	r3, r3, r8
 8005d6e:	ea43 030e 	orr.w	r3, r3, lr
 8005d72:	4323      	orrs	r3, r4
 8005d74:	ea43 030c 	orr.w	r3, r3, ip
 8005d78:	ea43 0309 	orr.w	r3, r3, r9
 8005d7c:	e7dc      	b.n	8005d38 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d7e:	ea4a 0304 	orr.w	r3, sl, r4
 8005d82:	ea43 0308 	orr.w	r3, r3, r8
 8005d86:	ea43 030e 	orr.w	r3, r3, lr
 8005d8a:	ea43 030c 	orr.w	r3, r3, ip
 8005d8e:	ea43 0309 	orr.w	r3, r3, r9
 8005d92:	e7e2      	b.n	8005d5a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005d94:	b365      	cbz	r5, 8005df0 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005d96:	6804      	ldr	r4, [r0, #0]
 8005d98:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d9a:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005d9c:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005d9e:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005da2:	694e      	ldr	r6, [r1, #20]
 8005da4:	ea43 0502 	orr.w	r5, r3, r2
 8005da8:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005dac:	04b6      	lsls	r6, r6, #18
 8005dae:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005db2:	b1a7      	cbz	r7, 8005dde <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005db4:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005db6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005dba:	ea40 0008 	orr.w	r0, r0, r8
 8005dbe:	ea43 0300 	orr.w	r3, r3, r0
 8005dc2:	68c8      	ldr	r0, [r1, #12]
 8005dc4:	ea43 030c 	orr.w	r3, r3, ip
 8005dc8:	ea43 0300 	orr.w	r3, r3, r0
 8005dcc:	ea43 0306 	orr.w	r3, r3, r6
 8005dd0:	ea43 0305 	orr.w	r3, r3, r5
 8005dd4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005dd6:	d0c1      	beq.n	8005d5c <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005dd8:	684b      	ldr	r3, [r1, #4]
 8005dda:	61a3      	str	r3, [r4, #24]
 8005ddc:	e7be      	b.n	8005d5c <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005dde:	ea40 0008 	orr.w	r0, r0, r8
 8005de2:	4303      	orrs	r3, r0
 8005de4:	ea43 030c 	orr.w	r3, r3, ip
 8005de8:	4333      	orrs	r3, r6
 8005dea:	432b      	orrs	r3, r5
 8005dec:	6163      	str	r3, [r4, #20]
 8005dee:	e7b5      	b.n	8005d5c <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005df0:	b17f      	cbz	r7, 8005e12 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005df2:	ea46 0307 	orr.w	r3, r6, r7
 8005df6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005df8:	6800      	ldr	r0, [r0, #0]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	4323      	orrs	r3, r4
 8005dfe:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005e00:	4323      	orrs	r3, r4
 8005e02:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005e04:	4323      	orrs	r3, r4
 8005e06:	68cc      	ldr	r4, [r1, #12]
 8005e08:	4323      	orrs	r3, r4
 8005e0a:	694c      	ldr	r4, [r1, #20]
 8005e0c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005e10:	e792      	b.n	8005d38 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d0a2      	beq.n	8005d5c <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e16:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005e18:	6800      	ldr	r0, [r0, #0]
 8005e1a:	4333      	orrs	r3, r6
 8005e1c:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	694b      	ldr	r3, [r1, #20]
 8005e22:	4332      	orrs	r2, r6
 8005e24:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005e26:	4332      	orrs	r2, r6
 8005e28:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8005e2c:	6142      	str	r2, [r0, #20]
}
 8005e2e:	e795      	b.n	8005d5c <QSPI_Config+0x8c>

08005e30 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460e      	mov	r6, r1
 8005e3c:	4615      	mov	r5, r2
 8005e3e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	6893      	ldr	r3, [r2, #8]
 8005e44:	4233      	tst	r3, r6
 8005e46:	bf14      	ite	ne
 8005e48:	2301      	movne	r3, #1
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	d101      	bne.n	8005e54 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005e50:	2000      	movs	r0, #0
 8005e52:	e012      	b.n	8005e7a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005e58:	d0f3      	beq.n	8005e42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fe fdd7 	bl	8004a0c <HAL_GetTick>
 8005e5e:	1bc0      	subs	r0, r0, r7
 8005e60:	4540      	cmp	r0, r8
 8005e62:	d802      	bhi.n	8005e6a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005e64:	f1b8 0f00 	cmp.w	r8, #0
 8005e68:	d1ea      	bne.n	8005e40 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005e6a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005e6c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005e6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005e72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005e80 <HAL_QSPI_Init>:
{
 8005e80:	b530      	push	{r4, r5, lr}
 8005e82:	4604      	mov	r4, r0
 8005e84:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005e86:	f7fe fdc1 	bl	8004a0c <HAL_GetTick>
 8005e8a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d047      	beq.n	8005f20 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005e90:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005e94:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005e98:	b94a      	cbnz	r2, 8005eae <HAL_QSPI_Init+0x2e>
 8005e9a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005e9c:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005e9e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005ea2:	f7fb fbd1 	bl	8001648 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	68a1      	ldr	r1, [r4, #8]
 8005eb2:	6802      	ldr	r2, [r0, #0]
 8005eb4:	3901      	subs	r1, #1
 8005eb6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005eba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ebe:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005ec0:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005ec6:	9200      	str	r2, [sp, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f7ff ffb1 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005ece:	bb10      	cbnz	r0, 8005f16 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	69e5      	ldr	r5, [r4, #28]
 8005ed4:	68e3      	ldr	r3, [r4, #12]
 8005ed6:	6811      	ldr	r1, [r2, #0]
 8005ed8:	432b      	orrs	r3, r5
 8005eda:	6a25      	ldr	r5, [r4, #32]
 8005edc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005ee0:	432b      	orrs	r3, r5
 8005ee2:	6865      	ldr	r5, [r4, #4]
 8005ee4:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005ee8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005ef0:	6855      	ldr	r5, [r2, #4]
 8005ef2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6921      	ldr	r1, [r4, #16]
 8005efa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005efe:	4909      	ldr	r1, [pc, #36]	; (8005f24 <HAL_QSPI_Init+0xa4>)
 8005f00:	4029      	ands	r1, r5
 8005f02:	430b      	orrs	r3, r1
 8005f04:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005f0e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f10:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005f12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005f16:	2300      	movs	r3, #0
 8005f18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005f1c:	b005      	add	sp, #20
 8005f1e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005f20:	2001      	movs	r0, #1
 8005f22:	e7fb      	b.n	8005f1c <HAL_QSPI_Init+0x9c>
 8005f24:	ffe0f8fe 	.word	0xffe0f8fe

08005f28 <HAL_QSPI_DeInit>:
{
 8005f28:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	b168      	cbz	r0, 8005f4a <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8005f2e:	6802      	ldr	r2, [r0, #0]
 8005f30:	6813      	ldr	r3, [r2, #0]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005f38:	f7fb fbf4 	bl	8001724 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005f40:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005f44:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005f48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	e7fc      	b.n	8005f48 <HAL_QSPI_DeInit+0x20>

08005f4e <HAL_QSPI_Command>:
{
 8005f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f52:	4604      	mov	r4, r0
 8005f54:	b085      	sub	sp, #20
 8005f56:	4617      	mov	r7, r2
 8005f58:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005f5a:	f7fe fd57 	bl	8004a0c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005f5e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005f62:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005f64:	2a01      	cmp	r2, #1
 8005f66:	d033      	beq.n	8005fd0 <HAL_QSPI_Command+0x82>
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2602      	movs	r6, #2
 8005f6c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005f70:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005f74:	2a01      	cmp	r2, #1
 8005f76:	fa5f f882 	uxtb.w	r8, r2
 8005f7a:	d127      	bne.n	8005fcc <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f7c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005f7e:	9003      	str	r0, [sp, #12]
 8005f80:	2120      	movs	r1, #32
 8005f82:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f84:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005f86:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005f88:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005f8c:	f7ff ff50 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005f90:	4605      	mov	r5, r0
 8005f92:	b9a0      	cbnz	r0, 8005fbe <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005f94:	4602      	mov	r2, r0
 8005f96:	4649      	mov	r1, r9
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff fe99 	bl	8005cd0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005f9e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	b94a      	cbnz	r2, 8005fba <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4620      	mov	r0, r4
 8005fac:	9700      	str	r7, [sp, #0]
 8005fae:	f7ff ff3f 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	b918      	cbnz	r0, 8005fbe <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005fba:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	b005      	add	sp, #20
 8005fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005fcc:	4635      	mov	r5, r6
 8005fce:	e7f6      	b.n	8005fbe <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8005fd0:	2502      	movs	r5, #2
 8005fd2:	e7f7      	b.n	8005fc4 <HAL_QSPI_Command+0x76>

08005fd4 <HAL_QSPI_AutoPolling>:
{
 8005fd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005fd8:	4604      	mov	r4, r0
 8005fda:	4615      	mov	r5, r2
 8005fdc:	461e      	mov	r6, r3
 8005fde:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005fe0:	f7fe fd14 	bl	8004a0c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005fe4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005fe8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005fea:	2a01      	cmp	r2, #1
 8005fec:	d040      	beq.n	8006070 <HAL_QSPI_AutoPolling+0x9c>
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ff4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005ff8:	2a01      	cmp	r2, #1
 8005ffa:	b2d7      	uxtb	r7, r2
 8005ffc:	d136      	bne.n	800606c <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005ffe:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006000:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006002:	9003      	str	r0, [sp, #12]
 8006004:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006006:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006008:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800600a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800600e:	2120      	movs	r1, #32
 8006010:	f7ff ff0e 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006014:	bb20      	cbnz	r0, 8006060 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006016:	6821      	ldr	r1, [r4, #0]
 8006018:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800601a:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800601c:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800601e:	686a      	ldr	r2, [r5, #4]
 8006020:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006022:	68aa      	ldr	r2, [r5, #8]
 8006024:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006026:	680a      	ldr	r2, [r1, #0]
 8006028:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800602c:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800602e:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006030:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006034:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006036:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8006038:	68ea      	ldr	r2, [r5, #12]
 800603a:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800603e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006042:	f7ff fe45 	bl	8005cd0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	463a      	mov	r2, r7
 800604a:	2108      	movs	r1, #8
 800604c:	4620      	mov	r0, r4
 800604e:	9600      	str	r6, [sp, #0]
 8006050:	f7ff feee 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006054:	b920      	cbnz	r0, 8006060 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	2208      	movs	r2, #8
 800605a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800605c:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006060:	2300      	movs	r3, #0
 8006062:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006066:	b004      	add	sp, #16
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800606c:	2002      	movs	r0, #2
 800606e:	e7f7      	b.n	8006060 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8006070:	2002      	movs	r0, #2
 8006072:	e7f8      	b.n	8006066 <HAL_QSPI_AutoPolling+0x92>

08006074 <HAL_QSPI_MemoryMapped>:
{
 8006074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006076:	4604      	mov	r4, r0
 8006078:	4616      	mov	r6, r2
 800607a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800607c:	f7fe fcc6 	bl	8004a0c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006080:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006084:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006086:	2a01      	cmp	r2, #1
 8006088:	d033      	beq.n	80060f2 <HAL_QSPI_MemoryMapped+0x7e>
 800608a:	2201      	movs	r2, #1
 800608c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006090:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006094:	2a01      	cmp	r2, #1
 8006096:	d12a      	bne.n	80060ee <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006098:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800609a:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800609c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800609e:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80060a0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80060a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060a6:	9100      	str	r1, [sp, #0]
 80060a8:	2120      	movs	r1, #32
 80060aa:	f7ff fec1 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80060ae:	4605      	mov	r5, r0
 80060b0:	b9b8      	cbnz	r0, 80060e2 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	6872      	ldr	r2, [r6, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80060b8:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80060ba:	f020 0008 	bic.w	r0, r0, #8
 80060be:	ea40 0002 	orr.w	r0, r0, r2
 80060c2:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80060c4:	d107      	bne.n	80060d6 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80060c6:	6832      	ldr	r2, [r6, #0]
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80060ca:	2210      	movs	r2, #16
 80060cc:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060d4:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80060d6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80060da:	4639      	mov	r1, r7
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff fdf7 	bl	8005cd0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80060e2:	2300      	movs	r3, #0
 80060e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80060e8:	4628      	mov	r0, r5
 80060ea:	b003      	add	sp, #12
 80060ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80060ee:	2502      	movs	r5, #2
 80060f0:	e7f7      	b.n	80060e2 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80060f2:	2502      	movs	r5, #2
 80060f4:	e7f8      	b.n	80060e8 <HAL_QSPI_MemoryMapped+0x74>

080060f6 <HAL_QSPI_Abort>:
{
 80060f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060f8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80060fa:	f7fe fc87 	bl	8004a0c <HAL_GetTick>
 80060fe:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006100:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8006104:	f010 0002 	ands.w	r0, r0, #2
 8006108:	d03a      	beq.n	8006180 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 800610a:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800610c:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 800610e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006112:	680a      	ldr	r2, [r1, #0]
 8006114:	f012 0204 	ands.w	r2, r2, #4
 8006118:	d034      	beq.n	8006184 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800611a:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800611c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800611e:	f022 0204 	bic.w	r2, r2, #4
 8006122:	9303      	str	r3, [sp, #12]
 8006124:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8006126:	f7fe fd97 	bl	8004c58 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800612a:	9b03      	ldr	r3, [sp, #12]
 800612c:	b118      	cbz	r0, 8006136 <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800612e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006130:	f042 0204 	orr.w	r2, r2, #4
 8006134:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	6891      	ldr	r1, [r2, #8]
 800613a:	0689      	lsls	r1, r1, #26
 800613c:	d51d      	bpl.n	800617a <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800613e:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006140:	4620      	mov	r0, r4
 8006142:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006144:	f041 0102 	orr.w	r1, r1, #2
 8006148:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800614a:	2102      	movs	r1, #2
 800614c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800614e:	9200      	str	r2, [sp, #0]
 8006150:	2201      	movs	r2, #1
 8006152:	f7ff fe6d 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	b990      	cbnz	r0, 8006180 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	2102      	movs	r1, #2
 800615e:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006160:	2120      	movs	r1, #32
 8006162:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006164:	9200      	str	r2, [sp, #0]
 8006166:	4602      	mov	r2, r0
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fe61 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800616e:	b938      	cbnz	r0, 8006180 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	6953      	ldr	r3, [r2, #20]
 8006174:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006178:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800617a:	2301      	movs	r3, #1
 800617c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8006180:	b004      	add	sp, #16
 8006182:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	4610      	mov	r0, r2
 8006186:	e7d6      	b.n	8006136 <HAL_QSPI_Abort+0x40>

08006188 <HAL_QSPI_Transmit>:
{
 8006188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618a:	4604      	mov	r4, r0
 800618c:	b085      	sub	sp, #20
 800618e:	4616      	mov	r6, r2
 8006190:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006192:	f7fe fc3b 	bl	8004a0c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006196:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800619a:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800619c:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800619e:	2a01      	cmp	r2, #1
 80061a0:	d04c      	beq.n	800623c <HAL_QSPI_Transmit+0xb4>
 80061a2:	2201      	movs	r2, #1
 80061a4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80061a8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80061ac:	2a01      	cmp	r2, #1
 80061ae:	b2d0      	uxtb	r0, r2
 80061b0:	d142      	bne.n	8006238 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061b2:	2200      	movs	r2, #0
 80061b4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80061b6:	2f00      	cmp	r7, #0
 80061b8:	d039      	beq.n	800622e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80061ba:	2212      	movs	r2, #18
 80061bc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80061c0:	692a      	ldr	r2, [r5, #16]
 80061c2:	3201      	adds	r2, #1
 80061c4:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80061c6:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80061c8:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80061ca:	3201      	adds	r2, #1
 80061cc:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80061ce:	696a      	ldr	r2, [r5, #20]
 80061d0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80061d4:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80061d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80061d8:	b9a2      	cbnz	r2, 8006204 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80061da:	2201      	movs	r2, #1
 80061dc:	2102      	movs	r1, #2
 80061de:	4620      	mov	r0, r4
 80061e0:	9600      	str	r6, [sp, #0]
 80061e2:	f7ff fe25 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80061e6:	b928      	cbnz	r0, 80061f4 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80061ec:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80061ee:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80061f0:	f7ff ff81 	bl	80060f6 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80061fa:	2300      	movs	r3, #0
 80061fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006200:	b005      	add	sp, #20
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006204:	2201      	movs	r2, #1
 8006206:	2104      	movs	r1, #4
 8006208:	4620      	mov	r0, r4
 800620a:	9600      	str	r6, [sp, #0]
 800620c:	9303      	str	r3, [sp, #12]
 800620e:	f7ff fe0f 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006212:	2800      	cmp	r0, #0
 8006214:	d1ee      	bne.n	80061f4 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006216:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006218:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8006220:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006222:	3201      	adds	r2, #1
 8006224:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006226:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006228:	3a01      	subs	r2, #1
 800622a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800622c:	e7d3      	b.n	80061d6 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800622e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006230:	f043 0308 	orr.w	r3, r3, #8
 8006234:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006236:	e7e0      	b.n	80061fa <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006238:	2002      	movs	r0, #2
 800623a:	e7de      	b.n	80061fa <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800623c:	2002      	movs	r0, #2
 800623e:	e7df      	b.n	8006200 <HAL_QSPI_Transmit+0x78>

08006240 <HAL_QSPI_Receive>:
{
 8006240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	b085      	sub	sp, #20
 8006246:	4616      	mov	r6, r2
 8006248:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800624a:	f7fe fbdf 	bl	8004a0c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800624e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006250:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006252:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8006256:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800625a:	2a01      	cmp	r2, #1
 800625c:	d050      	beq.n	8006300 <HAL_QSPI_Receive+0xc0>
 800625e:	2201      	movs	r2, #1
 8006260:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006264:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006268:	2a01      	cmp	r2, #1
 800626a:	b2d0      	uxtb	r0, r2
 800626c:	d146      	bne.n	80062fc <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800626e:	2200      	movs	r2, #0
 8006270:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8006272:	2f00      	cmp	r7, #0
 8006274:	d03d      	beq.n	80062f2 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006276:	2222      	movs	r2, #34	; 0x22
 8006278:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800627c:	692a      	ldr	r2, [r5, #16]
 800627e:	3201      	adds	r2, #1
 8006280:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006282:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8006284:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006286:	3201      	adds	r2, #1
 8006288:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800628a:	6969      	ldr	r1, [r5, #20]
 800628c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8006290:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8006294:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006296:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800629a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800629c:	b9a2      	cbnz	r2, 80062c8 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800629e:	2201      	movs	r2, #1
 80062a0:	2102      	movs	r1, #2
 80062a2:	4620      	mov	r0, r4
 80062a4:	9600      	str	r6, [sp, #0]
 80062a6:	f7ff fdc3 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80062aa:	b928      	cbnz	r0, 80062b8 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80062b0:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062b2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80062b4:	f7ff ff1f 	bl	80060f6 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80062be:	2300      	movs	r3, #0
 80062c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80062c4:	b005      	add	sp, #20
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80062c8:	2201      	movs	r2, #1
 80062ca:	2106      	movs	r1, #6
 80062cc:	4620      	mov	r0, r4
 80062ce:	9600      	str	r6, [sp, #0]
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	f7ff fdad 	bl	8005e30 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d1ee      	bne.n	80062b8 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80062da:	f895 1020 	ldrb.w	r1, [r5, #32]
 80062de:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80062e0:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80062e2:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80062e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80062e6:	3201      	adds	r2, #1
 80062e8:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80062ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062ec:	3a01      	subs	r2, #1
 80062ee:	63a2      	str	r2, [r4, #56]	; 0x38
 80062f0:	e7d3      	b.n	800629a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80062f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062f4:	f043 0308 	orr.w	r3, r3, #8
 80062f8:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80062fa:	e7e0      	b.n	80062be <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80062fc:	2002      	movs	r0, #2
 80062fe:	e7de      	b.n	80062be <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8006300:	2002      	movs	r0, #2
 8006302:	e7df      	b.n	80062c4 <HAL_QSPI_Receive+0x84>

08006304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006304:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006308:	4604      	mov	r4, r0
 800630a:	b340      	cbz	r0, 800635e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630c:	6803      	ldr	r3, [r0, #0]
 800630e:	07db      	lsls	r3, r3, #31
 8006310:	d410      	bmi.n	8006334 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	079f      	lsls	r7, r3, #30
 8006316:	d464      	bmi.n	80063e2 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	0719      	lsls	r1, r3, #28
 800631c:	f100 80aa 	bmi.w	8006474 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	075a      	lsls	r2, r3, #29
 8006324:	f100 80cb 	bmi.w	80064be <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006328:	69a2      	ldr	r2, [r4, #24]
 800632a:	2a00      	cmp	r2, #0
 800632c:	f040 8134 	bne.w	8006598 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006330:	2000      	movs	r0, #0
 8006332:	e02b      	b.n	800638c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006334:	4b96      	ldr	r3, [pc, #600]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	f002 020c 	and.w	r2, r2, #12
 800633c:	2a04      	cmp	r2, #4
 800633e:	d007      	beq.n	8006350 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	f002 020c 	and.w	r2, r2, #12
 8006346:	2a08      	cmp	r2, #8
 8006348:	d10b      	bne.n	8006362 <HAL_RCC_OscConfig+0x5e>
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	0256      	lsls	r6, r2, #9
 800634e:	d508      	bpl.n	8006362 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006350:	4b8f      	ldr	r3, [pc, #572]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	039d      	lsls	r5, r3, #14
 8006356:	d5dc      	bpl.n	8006312 <HAL_RCC_OscConfig+0xe>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1d9      	bne.n	8006312 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800635e:	2001      	movs	r0, #1
 8006360:	e014      	b.n	800638c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006368:	d113      	bne.n	8006392 <HAL_RCC_OscConfig+0x8e>
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006370:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006372:	f7fe fb4b 	bl	8004a0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4e86      	ldr	r6, [pc, #536]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006378:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637a:	6833      	ldr	r3, [r6, #0]
 800637c:	0398      	lsls	r0, r3, #14
 800637e:	d4c8      	bmi.n	8006312 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006380:	f7fe fb44 	bl	8004a0c <HAL_GetTick>
 8006384:	1b40      	subs	r0, r0, r5
 8006386:	2864      	cmp	r0, #100	; 0x64
 8006388:	d9f7      	bls.n	800637a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800638a:	2003      	movs	r0, #3
}
 800638c:	b002      	add	sp, #8
 800638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006392:	4d7f      	ldr	r5, [pc, #508]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b992      	cbnz	r2, 80063be <HAL_RCC_OscConfig+0xba>
 8006398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80063a6:	f7fe fb31 	bl	8004a0c <HAL_GetTick>
 80063aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	0399      	lsls	r1, r3, #14
 80063b0:	d5af      	bpl.n	8006312 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b2:	f7fe fb2b 	bl	8004a0c <HAL_GetTick>
 80063b6:	1b80      	subs	r0, r0, r6
 80063b8:	2864      	cmp	r0, #100	; 0x64
 80063ba:	d9f7      	bls.n	80063ac <HAL_RCC_OscConfig+0xa8>
 80063bc:	e7e5      	b.n	800638a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063be:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80063c2:	d107      	bne.n	80063d4 <HAL_RCC_OscConfig+0xd0>
 80063c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	e7ce      	b.n	8006372 <HAL_RCC_OscConfig+0x6e>
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e0:	e7f6      	b.n	80063d0 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e2:	4b6b      	ldr	r3, [pc, #428]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	f012 0f0c 	tst.w	r2, #12
 80063ea:	d007      	beq.n	80063fc <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	f002 020c 	and.w	r2, r2, #12
 80063f2:	2a08      	cmp	r2, #8
 80063f4:	d111      	bne.n	800641a <HAL_RCC_OscConfig+0x116>
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	0252      	lsls	r2, r2, #9
 80063fa:	d40e      	bmi.n	800641a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fc:	4a64      	ldr	r2, [pc, #400]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	079b      	lsls	r3, r3, #30
 8006402:	d502      	bpl.n	800640a <HAL_RCC_OscConfig+0x106>
 8006404:	68e3      	ldr	r3, [r4, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d1a9      	bne.n	800635e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	6813      	ldr	r3, [r2, #0]
 800640c:	6921      	ldr	r1, [r4, #16]
 800640e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006412:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006416:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006418:	e77e      	b.n	8006318 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800641a:	68e2      	ldr	r2, [r4, #12]
 800641c:	b1c2      	cbz	r2, 8006450 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800641e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006420:	4d5b      	ldr	r5, [pc, #364]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006428:	f7fe faf0 	bl	8004a0c <HAL_GetTick>
 800642c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	079f      	lsls	r7, r3, #30
 8006432:	d507      	bpl.n	8006444 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6922      	ldr	r2, [r4, #16]
 8006438:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800643c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	e769      	b.n	8006318 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006444:	f7fe fae2 	bl	8004a0c <HAL_GetTick>
 8006448:	1b80      	subs	r0, r0, r6
 800644a:	2802      	cmp	r0, #2
 800644c:	d9ef      	bls.n	800642e <HAL_RCC_OscConfig+0x12a>
 800644e:	e79c      	b.n	800638a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8006450:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006452:	4e4f      	ldr	r6, [pc, #316]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800645a:	f7fe fad7 	bl	8004a0c <HAL_GetTick>
 800645e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	0798      	lsls	r0, r3, #30
 8006464:	f57f af58 	bpl.w	8006318 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006468:	f7fe fad0 	bl	8004a0c <HAL_GetTick>
 800646c:	1b40      	subs	r0, r0, r5
 800646e:	2802      	cmp	r0, #2
 8006470:	d9f6      	bls.n	8006460 <HAL_RCC_OscConfig+0x15c>
 8006472:	e78a      	b.n	800638a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006474:	6963      	ldr	r3, [r4, #20]
 8006476:	4d46      	ldr	r5, [pc, #280]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 8006478:	b183      	cbz	r3, 800649c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800647a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006482:	f7fe fac3 	bl	8004a0c <HAL_GetTick>
 8006486:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006488:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800648a:	079b      	lsls	r3, r3, #30
 800648c:	f53f af48 	bmi.w	8006320 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006490:	f7fe fabc 	bl	8004a0c <HAL_GetTick>
 8006494:	1b80      	subs	r0, r0, r6
 8006496:	2802      	cmp	r0, #2
 8006498:	d9f6      	bls.n	8006488 <HAL_RCC_OscConfig+0x184>
 800649a:	e776      	b.n	800638a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800649c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80064a4:	f7fe fab2 	bl	8004a0c <HAL_GetTick>
 80064a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80064ac:	079f      	lsls	r7, r3, #30
 80064ae:	f57f af37 	bpl.w	8006320 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b2:	f7fe faab 	bl	8004a0c <HAL_GetTick>
 80064b6:	1b80      	subs	r0, r0, r6
 80064b8:	2802      	cmp	r0, #2
 80064ba:	d9f6      	bls.n	80064aa <HAL_RCC_OscConfig+0x1a6>
 80064bc:	e765      	b.n	800638a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064be:	4b34      	ldr	r3, [pc, #208]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 80064c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c2:	00d0      	lsls	r0, r2, #3
 80064c4:	d427      	bmi.n	8006516 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80064c8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064da:	4d2e      	ldr	r5, [pc, #184]	; (8006594 <HAL_RCC_OscConfig+0x290>)
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	05d9      	lsls	r1, r3, #23
 80064e0:	d51b      	bpl.n	800651a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e2:	68a3      	ldr	r3, [r4, #8]
 80064e4:	4d2a      	ldr	r5, [pc, #168]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d127      	bne.n	800653a <HAL_RCC_OscConfig+0x236>
 80064ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80064f6:	f7fe fa89 	bl	8004a0c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fa:	4e25      	ldr	r6, [pc, #148]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80064fc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006500:	079b      	lsls	r3, r3, #30
 8006502:	d53f      	bpl.n	8006584 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8006504:	2f00      	cmp	r7, #0
 8006506:	f43f af0f 	beq.w	8006328 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800650a:	4a21      	ldr	r2, [pc, #132]	; (8006590 <HAL_RCC_OscConfig+0x28c>)
 800650c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800650e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006512:	6413      	str	r3, [r2, #64]	; 0x40
 8006514:	e708      	b.n	8006328 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8006516:	2700      	movs	r7, #0
 8006518:	e7df      	b.n	80064da <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006522:	f7fe fa73 	bl	8004a0c <HAL_GetTick>
 8006526:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	05da      	lsls	r2, r3, #23
 800652c:	d4d9      	bmi.n	80064e2 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fe fa6d 	bl	8004a0c <HAL_GetTick>
 8006532:	1b80      	subs	r0, r0, r6
 8006534:	2864      	cmp	r0, #100	; 0x64
 8006536:	d9f7      	bls.n	8006528 <HAL_RCC_OscConfig+0x224>
 8006538:	e727      	b.n	800638a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800653a:	b9ab      	cbnz	r3, 8006568 <HAL_RCC_OscConfig+0x264>
 800653c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	672b      	str	r3, [r5, #112]	; 0x70
 8006548:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800654a:	f023 0304 	bic.w	r3, r3, #4
 800654e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006550:	f7fe fa5c 	bl	8004a0c <HAL_GetTick>
 8006554:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006556:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006558:	0798      	lsls	r0, r3, #30
 800655a:	d5d3      	bpl.n	8006504 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655c:	f7fe fa56 	bl	8004a0c <HAL_GetTick>
 8006560:	1b80      	subs	r0, r0, r6
 8006562:	4540      	cmp	r0, r8
 8006564:	d9f7      	bls.n	8006556 <HAL_RCC_OscConfig+0x252>
 8006566:	e710      	b.n	800638a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006568:	2b05      	cmp	r3, #5
 800656a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800656c:	d103      	bne.n	8006576 <HAL_RCC_OscConfig+0x272>
 800656e:	f043 0304 	orr.w	r3, r3, #4
 8006572:	672b      	str	r3, [r5, #112]	; 0x70
 8006574:	e7b9      	b.n	80064ea <HAL_RCC_OscConfig+0x1e6>
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	672b      	str	r3, [r5, #112]	; 0x70
 800657c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800657e:	f023 0304 	bic.w	r3, r3, #4
 8006582:	e7b5      	b.n	80064f0 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006584:	f7fe fa42 	bl	8004a0c <HAL_GetTick>
 8006588:	1b40      	subs	r0, r0, r5
 800658a:	4540      	cmp	r0, r8
 800658c:	d9b7      	bls.n	80064fe <HAL_RCC_OscConfig+0x1fa>
 800658e:	e6fc      	b.n	800638a <HAL_RCC_OscConfig+0x86>
 8006590:	40023800 	.word	0x40023800
 8006594:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006598:	4d38      	ldr	r5, [pc, #224]	; (800667c <HAL_RCC_OscConfig+0x378>)
 800659a:	68ab      	ldr	r3, [r5, #8]
 800659c:	f003 030c 	and.w	r3, r3, #12
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d041      	beq.n	8006628 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80065a4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065a6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80065a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ac:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ae:	d12e      	bne.n	800660e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80065b0:	f7fe fa2c 	bl	8004a0c <HAL_GetTick>
 80065b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	682b      	ldr	r3, [r5, #0]
 80065b8:	0199      	lsls	r1, r3, #6
 80065ba:	d422      	bmi.n	8006602 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	1e5a      	subs	r2, r3, #1
 80065c2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80065c6:	430b      	orrs	r3, r1
 80065c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80065d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80065d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065dc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80065e6:	f7fe fa11 	bl	8004a0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ea:	4d24      	ldr	r5, [pc, #144]	; (800667c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80065ec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	019a      	lsls	r2, r3, #6
 80065f2:	f53f ae9d 	bmi.w	8006330 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f6:	f7fe fa09 	bl	8004a0c <HAL_GetTick>
 80065fa:	1b00      	subs	r0, r0, r4
 80065fc:	2802      	cmp	r0, #2
 80065fe:	d9f6      	bls.n	80065ee <HAL_RCC_OscConfig+0x2ea>
 8006600:	e6c3      	b.n	800638a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006602:	f7fe fa03 	bl	8004a0c <HAL_GetTick>
 8006606:	1b80      	subs	r0, r0, r6
 8006608:	2802      	cmp	r0, #2
 800660a:	d9d4      	bls.n	80065b6 <HAL_RCC_OscConfig+0x2b2>
 800660c:	e6bd      	b.n	800638a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800660e:	f7fe f9fd 	bl	8004a0c <HAL_GetTick>
 8006612:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	019b      	lsls	r3, r3, #6
 8006618:	f57f ae8a 	bpl.w	8006330 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fe f9f6 	bl	8004a0c <HAL_GetTick>
 8006620:	1b00      	subs	r0, r0, r4
 8006622:	2802      	cmp	r0, #2
 8006624:	d9f6      	bls.n	8006614 <HAL_RCC_OscConfig+0x310>
 8006626:	e6b0      	b.n	800638a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006628:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800662a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800662c:	f43f ae97 	beq.w	800635e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006634:	69e1      	ldr	r1, [r4, #28]
 8006636:	428a      	cmp	r2, r1
 8006638:	f47f ae91 	bne.w	800635e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800663c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006640:	6a21      	ldr	r1, [r4, #32]
 8006642:	428a      	cmp	r2, r1
 8006644:	f47f ae8b 	bne.w	800635e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006648:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800664c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800664e:	401a      	ands	r2, r3
 8006650:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006654:	f47f ae83 	bne.w	800635e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006658:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800665a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800665e:	0852      	lsrs	r2, r2, #1
 8006660:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006662:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006666:	f47f ae7a 	bne.w	800635e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800666a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800666e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006670:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006674:	f43f ae5c 	beq.w	8006330 <HAL_RCC_OscConfig+0x2c>
 8006678:	e671      	b.n	800635e <HAL_RCC_OscConfig+0x5a>
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800

08006680 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006680:	4913      	ldr	r1, [pc, #76]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006682:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006684:	688b      	ldr	r3, [r1, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b04      	cmp	r3, #4
 800668c:	d01b      	beq.n	80066c6 <HAL_RCC_GetSysClockFreq+0x46>
 800668e:	2b08      	cmp	r3, #8
 8006690:	d11b      	bne.n	80066ca <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006692:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006694:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006696:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006698:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800669c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80066a4:	bf1a      	itte	ne
 80066a6:	480b      	ldrne	r0, [pc, #44]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80066a8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066aa:	480b      	ldreq	r0, [pc, #44]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x58>)
 80066ac:	fba1 0100 	umull	r0, r1, r1, r0
 80066b0:	f7fa fa1c 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80066bc:	3301      	adds	r3, #1
 80066be:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80066c0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80066c4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066c6:	4803      	ldr	r0, [pc, #12]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80066c8:	e7fc      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80066ca:	4803      	ldr	r0, [pc, #12]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80066cc:	e7fa      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x44>
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
 80066d4:	017d7840 	.word	0x017d7840
 80066d8:	00f42400 	.word	0x00f42400

080066dc <HAL_RCC_ClockConfig>:
{
 80066dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80066e2:	4604      	mov	r4, r0
 80066e4:	b910      	cbnz	r0, 80066ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80066e6:	2001      	movs	r0, #1
}
 80066e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4a46      	ldr	r2, [pc, #280]	; (8006808 <HAL_RCC_ClockConfig+0x12c>)
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	428b      	cmp	r3, r1
 80066f6:	d328      	bcc.n	800674a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	0797      	lsls	r7, r2, #30
 80066fc:	d430      	bmi.n	8006760 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fe:	07d0      	lsls	r0, r2, #31
 8006700:	d444      	bmi.n	800678c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006702:	4a41      	ldr	r2, [pc, #260]	; (8006808 <HAL_RCC_ClockConfig+0x12c>)
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	42ab      	cmp	r3, r5
 800670c:	d867      	bhi.n	80067de <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	0751      	lsls	r1, r2, #29
 8006712:	d470      	bmi.n	80067f6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	0713      	lsls	r3, r2, #28
 8006716:	d507      	bpl.n	8006728 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006718:	4a3c      	ldr	r2, [pc, #240]	; (800680c <HAL_RCC_ClockConfig+0x130>)
 800671a:	6921      	ldr	r1, [r4, #16]
 800671c:	6893      	ldr	r3, [r2, #8]
 800671e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006722:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006726:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006728:	f7ff ffaa 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 800672c:	4b37      	ldr	r3, [pc, #220]	; (800680c <HAL_RCC_ClockConfig+0x130>)
 800672e:	4a38      	ldr	r2, [pc, #224]	; (8006810 <HAL_RCC_ClockConfig+0x134>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006736:	5cd3      	ldrb	r3, [r2, r3]
 8006738:	40d8      	lsrs	r0, r3
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_RCC_ClockConfig+0x138>)
 800673c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800673e:	4b36      	ldr	r3, [pc, #216]	; (8006818 <HAL_RCC_ClockConfig+0x13c>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f7fb f87b 	bl	800183c <HAL_InitTick>
  return HAL_OK;
 8006746:	2000      	movs	r0, #0
 8006748:	e7ce      	b.n	80066e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	f023 030f 	bic.w	r3, r3, #15
 8006750:	430b      	orrs	r3, r1
 8006752:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006754:	6813      	ldr	r3, [r2, #0]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	428b      	cmp	r3, r1
 800675c:	d1c3      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xa>
 800675e:	e7cb      	b.n	80066f8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006760:	f012 0f04 	tst.w	r2, #4
 8006764:	4b29      	ldr	r3, [pc, #164]	; (800680c <HAL_RCC_ClockConfig+0x130>)
 8006766:	d003      	beq.n	8006770 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006768:	6899      	ldr	r1, [r3, #8]
 800676a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800676e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006770:	0716      	lsls	r6, r2, #28
 8006772:	d503      	bpl.n	800677c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800677a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800677c:	4923      	ldr	r1, [pc, #140]	; (800680c <HAL_RCC_ClockConfig+0x130>)
 800677e:	68a0      	ldr	r0, [r4, #8]
 8006780:	688b      	ldr	r3, [r1, #8]
 8006782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006786:	4303      	orrs	r3, r0
 8006788:	608b      	str	r3, [r1, #8]
 800678a:	e7b8      	b.n	80066fe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678c:	6861      	ldr	r1, [r4, #4]
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <HAL_RCC_ClockConfig+0x130>)
 8006790:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006792:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006794:	d11b      	bne.n	80067ce <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679a:	d0a4      	beq.n	80066e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800679e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a2:	4f1a      	ldr	r7, [pc, #104]	; (800680c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067a4:	f022 0203 	bic.w	r2, r2, #3
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80067ac:	f7fe f92e 	bl	8004a0c <HAL_GetTick>
 80067b0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6862      	ldr	r2, [r4, #4]
 80067b6:	f003 030c 	and.w	r3, r3, #12
 80067ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80067be:	d0a0      	beq.n	8006702 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c0:	f7fe f924 	bl	8004a0c <HAL_GetTick>
 80067c4:	1b80      	subs	r0, r0, r6
 80067c6:	4540      	cmp	r0, r8
 80067c8:	d9f3      	bls.n	80067b2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80067ca:	2003      	movs	r0, #3
 80067cc:	e78c      	b.n	80066e8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ce:	2902      	cmp	r1, #2
 80067d0:	d102      	bne.n	80067d8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80067d6:	e7e0      	b.n	800679a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d8:	f012 0f02 	tst.w	r2, #2
 80067dc:	e7dd      	b.n	800679a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	6813      	ldr	r3, [r2, #0]
 80067e0:	f023 030f 	bic.w	r3, r3, #15
 80067e4:	432b      	orrs	r3, r5
 80067e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	42ab      	cmp	r3, r5
 80067f0:	f47f af79 	bne.w	80066e6 <HAL_RCC_ClockConfig+0xa>
 80067f4:	e78b      	b.n	800670e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067f6:	4905      	ldr	r1, [pc, #20]	; (800680c <HAL_RCC_ClockConfig+0x130>)
 80067f8:	68e0      	ldr	r0, [r4, #12]
 80067fa:	688b      	ldr	r3, [r1, #8]
 80067fc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006800:	4303      	orrs	r3, r0
 8006802:	608b      	str	r3, [r1, #8]
 8006804:	e786      	b.n	8006714 <HAL_RCC_ClockConfig+0x38>
 8006806:	bf00      	nop
 8006808:	40023c00 	.word	0x40023c00
 800680c:	40023800 	.word	0x40023800
 8006810:	0802cfc4 	.word	0x0802cfc4
 8006814:	2000000c 	.word	0x2000000c
 8006818:	2000003c 	.word	0x2000003c

0800681c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <HAL_RCC_GetPCLK1Freq+0x14>)
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006826:	5cd3      	ldrb	r3, [r2, r3]
 8006828:	4a03      	ldr	r2, [pc, #12]	; (8006838 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800682a:	6810      	ldr	r0, [r2, #0]
}
 800682c:	40d8      	lsrs	r0, r3
 800682e:	4770      	bx	lr
 8006830:	40023800 	.word	0x40023800
 8006834:	0802cfd4 	.word	0x0802cfd4
 8006838:	2000000c 	.word	0x2000000c

0800683c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800683c:	230f      	movs	r3, #15
 800683e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <HAL_RCC_GetClockConfig+0x34>)
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	f002 0203 	and.w	r2, r2, #3
 8006848:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006850:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006858:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006862:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006864:	4b03      	ldr	r3, [pc, #12]	; (8006874 <HAL_RCC_GetClockConfig+0x38>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	600b      	str	r3, [r1, #0]
}
 800686e:	4770      	bx	lr
 8006870:	40023800 	.word	0x40023800
 8006874:	40023c00 	.word	0x40023c00

08006878 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006878:	6803      	ldr	r3, [r0, #0]
{
 800687a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800687e:	f013 0601 	ands.w	r6, r3, #1
{
 8006882:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006884:	d00b      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006886:	4aaa      	ldr	r2, [pc, #680]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006888:	6891      	ldr	r1, [r2, #8]
 800688a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800688e:	6091      	str	r1, [r2, #8]
 8006890:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006892:	6891      	ldr	r1, [r2, #8]
 8006894:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006896:	fab6 f686 	clz	r6, r6
 800689a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800689c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800689e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80068a2:	d012      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068a4:	49a2      	ldr	r1, [pc, #648]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068a6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80068a8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068ac:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80068b4:	bf08      	it	eq
 80068b6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068b8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068bc:	bf16      	itet	ne
 80068be:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80068c2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068c4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068c6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068ca:	02d8      	lsls	r0, r3, #11
 80068cc:	d510      	bpl.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068ce:	4898      	ldr	r0, [pc, #608]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068d2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068d6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80068de:	ea42 0201 	orr.w	r2, r2, r1
 80068e2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068e6:	f000 8184 	beq.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80068ea:	2900      	cmp	r1, #0
 80068ec:	bf08      	it	eq
 80068ee:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80068f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80068f4:	bf18      	it	ne
 80068f6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068f8:	0699      	lsls	r1, r3, #26
 80068fa:	d531      	bpl.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068fc:	4b8c      	ldr	r3, [pc, #560]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068fe:	4f8d      	ldr	r7, [pc, #564]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006902:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691a:	f7fe f877 	bl	8004a0c <HAL_GetTick>
 800691e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	05da      	lsls	r2, r3, #23
 8006924:	f140 8167 	bpl.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006928:	4f81      	ldr	r7, [pc, #516]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800692a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800692c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006930:	f040 816c 	bne.w	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006934:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006936:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800693a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800693e:	4a7c      	ldr	r2, [pc, #496]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006940:	f040 818a 	bne.w	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006944:	6891      	ldr	r1, [r2, #8]
 8006946:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800694a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800694e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006952:	4301      	orrs	r1, r0
 8006954:	6091      	str	r1, [r2, #8]
 8006956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800695c:	430b      	orrs	r3, r1
 800695e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	06d9      	lsls	r1, r3, #27
 8006964:	d50c      	bpl.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006966:	4a72      	ldr	r2, [pc, #456]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006968:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800696c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006970:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8006974:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006978:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800697a:	4301      	orrs	r1, r0
 800697c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006980:	045a      	lsls	r2, r3, #17
 8006982:	d508      	bpl.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006984:	496a      	ldr	r1, [pc, #424]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006986:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006988:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800698c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006990:	4302      	orrs	r2, r0
 8006992:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006996:	041f      	lsls	r7, r3, #16
 8006998:	d508      	bpl.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800699a:	4965      	ldr	r1, [pc, #404]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800699c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800699e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80069a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80069a6:	4302      	orrs	r2, r0
 80069a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069ac:	03d8      	lsls	r0, r3, #15
 80069ae:	d508      	bpl.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b0:	495f      	ldr	r1, [pc, #380]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80069b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80069b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80069b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069bc:	4302      	orrs	r2, r0
 80069be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069c2:	0399      	lsls	r1, r3, #14
 80069c4:	d508      	bpl.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069c6:	495a      	ldr	r1, [pc, #360]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80069c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80069ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80069ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80069d2:	4302      	orrs	r2, r0
 80069d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d8:	065a      	lsls	r2, r3, #25
 80069da:	d508      	bpl.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069dc:	4954      	ldr	r1, [pc, #336]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80069de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80069e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80069e4:	f022 0203 	bic.w	r2, r2, #3
 80069e8:	4302      	orrs	r2, r0
 80069ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069ee:	061f      	lsls	r7, r3, #24
 80069f0:	d508      	bpl.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069f2:	494f      	ldr	r1, [pc, #316]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80069f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80069f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80069fa:	f022 020c 	bic.w	r2, r2, #12
 80069fe:	4302      	orrs	r2, r0
 8006a00:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a04:	05d8      	lsls	r0, r3, #23
 8006a06:	d508      	bpl.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a08:	4949      	ldr	r1, [pc, #292]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a0a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006a0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a10:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006a14:	4302      	orrs	r2, r0
 8006a16:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a1a:	0599      	lsls	r1, r3, #22
 8006a1c:	d508      	bpl.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a1e:	4944      	ldr	r1, [pc, #272]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a20:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006a22:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a26:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a2a:	4302      	orrs	r2, r0
 8006a2c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a30:	055a      	lsls	r2, r3, #21
 8006a32:	d508      	bpl.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a34:	493e      	ldr	r1, [pc, #248]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a38:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a40:	4302      	orrs	r2, r0
 8006a42:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006a46:	051f      	lsls	r7, r3, #20
 8006a48:	d508      	bpl.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006a4a:	4939      	ldr	r1, [pc, #228]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a56:	4302      	orrs	r2, r0
 8006a58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006a5c:	04d8      	lsls	r0, r3, #19
 8006a5e:	d508      	bpl.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006a60:	4933      	ldr	r1, [pc, #204]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a62:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006a64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006a6c:	4302      	orrs	r2, r0
 8006a6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006a72:	0499      	lsls	r1, r3, #18
 8006a74:	d508      	bpl.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006a76:	492e      	ldr	r1, [pc, #184]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a78:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006a7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a82:	4302      	orrs	r2, r0
 8006a84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a88:	025a      	lsls	r2, r3, #9
 8006a8a:	d508      	bpl.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a8c:	4928      	ldr	r1, [pc, #160]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a8e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006a90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a94:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006a98:	4302      	orrs	r2, r0
 8006a9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a9e:	029f      	lsls	r7, r3, #10
 8006aa0:	d50c      	bpl.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006aa2:	4823      	ldr	r0, [pc, #140]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006aa4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006aa6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006aaa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006aae:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8006ab2:	bf08      	it	eq
 8006ab4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006abc:	f013 0f08 	tst.w	r3, #8
 8006ac0:	bf18      	it	ne
 8006ac2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ac4:	0358      	lsls	r0, r3, #13
 8006ac6:	d508      	bpl.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ac8:	4919      	ldr	r1, [pc, #100]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006aca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006acc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ad0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ad4:	4302      	orrs	r2, r0
 8006ad6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006ada:	0219      	lsls	r1, r3, #8
 8006adc:	d509      	bpl.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ade:	4914      	ldr	r1, [pc, #80]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ae0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006ae4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ae8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006aec:	4302      	orrs	r2, r0
 8006aee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006af2:	2e01      	cmp	r6, #1
 8006af4:	f000 80b4 	beq.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006af8:	019a      	lsls	r2, r3, #6
 8006afa:	f100 80b1 	bmi.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006afe:	2d01      	cmp	r5, #1
 8006b00:	d175      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b02:	4d0b      	ldr	r5, [pc, #44]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0c:	f7fd ff7e 	bl	8004a0c <HAL_GetTick>
 8006b10:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	009f      	lsls	r7, r3, #2
 8006b16:	f100 8127 	bmi.w	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	0316      	lsls	r6, r2, #12
 8006b1e:	d501      	bpl.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b22:	b14b      	cbz	r3, 8006b38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006b24:	02d0      	lsls	r0, r2, #11
 8006b26:	d522      	bpl.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b2a:	bb03      	cbnz	r3, 8006b6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8006b2c:	e004      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006b2e:	bf00      	nop
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b38:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b3c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b44:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6961      	ldr	r1, [r4, #20]
 8006b4c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006b50:	69a1      	ldr	r1, [r4, #24]
 8006b52:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006b56:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b5a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006b5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006b60:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006b64:	3901      	subs	r1, #1
 8006b66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b6a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b6e:	0291      	lsls	r1, r2, #10
 8006b70:	d515      	bpl.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006b72:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b78:	d111      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b7a:	4982      	ldr	r1, [pc, #520]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b7c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b80:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b84:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006b88:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006b8c:	4303      	orrs	r3, r0
 8006b8e:	6960      	ldr	r0, [r4, #20]
 8006b90:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b94:	6a20      	ldr	r0, [r4, #32]
 8006b96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b9e:	0712      	lsls	r2, r2, #28
 8006ba0:	d519      	bpl.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ba2:	4a78      	ldr	r2, [pc, #480]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ba4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ba8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bac:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	6961      	ldr	r1, [r4, #20]
 8006bb8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006bbc:	69e1      	ldr	r1, [r4, #28]
 8006bbe:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006bc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bc6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006bca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bcc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006bd6:	4c6b      	ldr	r4, [pc, #428]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bde:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fd ff14 	bl	8004a0c <HAL_GetTick>
 8006be4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	f140 80c4 	bpl.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e009      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8006bf2:	2601      	movs	r6, #1
 8006bf4:	e67c      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf6:	f7fd ff09 	bl	8004a0c <HAL_GetTick>
 8006bfa:	eba0 0008 	sub.w	r0, r0, r8
 8006bfe:	2864      	cmp	r0, #100	; 0x64
 8006c00:	f67f ae8e 	bls.w	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006c04:	2003      	movs	r0, #3
}
 8006c06:	b003      	add	sp, #12
 8006c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c0e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006c12:	4293      	cmp	r3, r2
 8006c14:	f43f ae8e 	beq.w	8006934 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c24:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c2c:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006c2e:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	f57f ae7e 	bpl.w	8006934 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8006c38:	f7fd fee8 	bl	8004a0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006c40:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c44:	0798      	lsls	r0, r3, #30
 8006c46:	f53f ae75 	bmi.w	8006934 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c4a:	f7fd fedf 	bl	8004a0c <HAL_GetTick>
 8006c4e:	eba0 0008 	sub.w	r0, r0, r8
 8006c52:	4548      	cmp	r0, r9
 8006c54:	d9f5      	bls.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006c56:	e7d5      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c58:	6891      	ldr	r1, [r2, #8]
 8006c5a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006c5e:	e679      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006c60:	4e48      	ldr	r6, [pc, #288]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c62:	6833      	ldr	r3, [r6, #0]
 8006c64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c68:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006c6a:	f7fd fecf 	bl	8004a0c <HAL_GetTick>
 8006c6e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c70:	6833      	ldr	r3, [r6, #0]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	d472      	bmi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d7      	lsls	r7, r2, #31
 8006c7a:	d512      	bpl.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c7e:	b983      	cbnz	r3, 8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c80:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c84:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c8c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6861      	ldr	r1, [r4, #4]
 8006c94:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006c98:	68a1      	ldr	r1, [r4, #8]
 8006c9a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006c9e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ca2:	0316      	lsls	r6, r2, #12
 8006ca4:	d503      	bpl.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ca6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cac:	d005      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006cae:	02d0      	lsls	r0, r2, #11
 8006cb0:	d51e      	bpl.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cb8:	d11a      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006cba:	4932      	ldr	r1, [pc, #200]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006cbc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cc0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cc8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006ccc:	4303      	orrs	r3, r0
 8006cce:	6860      	ldr	r0, [r4, #4]
 8006cd0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006cd4:	68e0      	ldr	r0, [r4, #12]
 8006cd6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006cde:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ce4:	f020 001f 	bic.w	r0, r0, #31
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4303      	orrs	r3, r0
 8006cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cf0:	01d1      	lsls	r1, r2, #7
 8006cf2:	d511      	bpl.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006cf4:	4923      	ldr	r1, [pc, #140]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006cf6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cfa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006cfe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006d02:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006d06:	4303      	orrs	r3, r0
 8006d08:	6860      	ldr	r0, [r4, #4]
 8006d0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006d0e:	6920      	ldr	r0, [r4, #16]
 8006d10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d18:	0192      	lsls	r2, r2, #6
 8006d1a:	d50d      	bpl.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	6862      	ldr	r2, [r4, #4]
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006d26:	68e2      	ldr	r2, [r4, #12]
 8006d28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d2c:	68a2      	ldr	r2, [r4, #8]
 8006d2e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006d32:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006d38:	4e12      	ldr	r6, [pc, #72]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d3a:	6833      	ldr	r3, [r6, #0]
 8006d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d40:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006d42:	f7fd fe63 	bl	8004a0c <HAL_GetTick>
 8006d46:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d48:	6833      	ldr	r3, [r6, #0]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	f53f aed7 	bmi.w	8006afe <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d50:	f7fd fe5c 	bl	8004a0c <HAL_GetTick>
 8006d54:	1bc0      	subs	r0, r0, r7
 8006d56:	2864      	cmp	r0, #100	; 0x64
 8006d58:	d9f6      	bls.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006d5a:	e753      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d5c:	f7fd fe56 	bl	8004a0c <HAL_GetTick>
 8006d60:	1bc0      	subs	r0, r0, r7
 8006d62:	2864      	cmp	r0, #100	; 0x64
 8006d64:	d984      	bls.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d66:	e74d      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d68:	f7fd fe50 	bl	8004a0c <HAL_GetTick>
 8006d6c:	1b80      	subs	r0, r0, r6
 8006d6e:	2864      	cmp	r0, #100	; 0x64
 8006d70:	f67f aecf 	bls.w	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006d74:	e746      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d76:	f7fd fe49 	bl	8004a0c <HAL_GetTick>
 8006d7a:	1b40      	subs	r0, r0, r5
 8006d7c:	2864      	cmp	r0, #100	; 0x64
 8006d7e:	f67f af32 	bls.w	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006d82:	e73f      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006d84:	40023800 	.word	0x40023800

08006d88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	b1c8      	cbz	r0, 8006dc4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d90:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d98:	b91b      	cbnz	r3, 8006da2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d9a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d9e:	f7fa fce5 	bl	800176c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006da2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006da4:	1d21      	adds	r1, r4, #4
 8006da6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006da8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006dac:	f000 f9cf 	bl	800714e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006db0:	6862      	ldr	r2, [r4, #4]
 8006db2:	4629      	mov	r1, r5
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	f000 fa05 	bl	80071c4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006dba:	2301      	movs	r3, #1

  return HAL_OK;
 8006dbc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006dbe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	e7fc      	b.n	8006dc2 <HAL_SDRAM_Init+0x3a>

08006dc8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006dc8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006dca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006dce:	4605      	mov	r5, r0
 8006dd0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006dd2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006dd4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006dd6:	d010      	beq.n	8006dfa <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006dd8:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006ddc:	2c01      	cmp	r4, #1
 8006dde:	d110      	bne.n	8006e02 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006de0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006de2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006de4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006de8:	f000 fa22 	bl	8007230 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d104      	bne.n	8006dfc <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006df2:	2305      	movs	r3, #5
 8006df4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006df8:	2000      	movs	r0, #0
}
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006dfc:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006e00:	e7fa      	b.n	8006df8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006e02:	2001      	movs	r0, #1
 8006e04:	e7f9      	b.n	8006dfa <HAL_SDRAM_SendCommand+0x32>

08006e06 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e06:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e08:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006e0c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	b2d8      	uxtb	r0, r3
 8006e12:	d00d      	beq.n	8006e30 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006e14:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	b2dd      	uxtb	r5, r3
 8006e1c:	d109      	bne.n	8006e32 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e1e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e20:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e26:	f000 fa15 	bl	8007254 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e2a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e2c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006e32:	2001      	movs	r0, #1
 8006e34:	e7fc      	b.n	8006e30 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006e36 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d133      	bne.n	8006ea8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	2302      	movs	r3, #2
 8006e42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e46:	6803      	ldr	r3, [r0, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e50:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_TIM_Base_Start_IT+0x74>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01a      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5a:	d017      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e5c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d013      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00f      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00b      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e74:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d007      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e7c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x54>
 8006e84:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d107      	bne.n	8006e9c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8c:	6899      	ldr	r1, [r3, #8]
 8006e8e:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <HAL_TIM_Base_Start_IT+0x78>)
 8006e90:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e92:	2a06      	cmp	r2, #6
 8006e94:	d006      	beq.n	8006ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8006e96:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006e9a:	d003      	beq.n	8006ea4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ea4:	2000      	movs	r0, #0
}
 8006ea6:	4770      	bx	lr
    return HAL_ERROR;
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	4770      	bx	lr
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	00010007 	.word	0x00010007

08006eb4 <HAL_TIM_OC_DelayElapsedCallback>:
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_TIM_IC_CaptureCallback>:
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006eb8:	4770      	bx	lr

08006eba <HAL_TIM_TriggerCallback>:
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ebc:	6803      	ldr	r3, [r0, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	0791      	lsls	r1, r2, #30
{
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec6:	d50f      	bpl.n	8006ee8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	0792      	lsls	r2, r2, #30
 8006ecc:	d50c      	bpl.n	8006ee8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ece:	f06f 0202 	mvn.w	r2, #2
 8006ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	0799      	lsls	r1, r3, #30
 8006edc:	f000 8085 	beq.w	8006fea <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee0:	f7ff ffe9 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	0752      	lsls	r2, r2, #29
 8006eee:	d510      	bpl.n	8006f12 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	0750      	lsls	r0, r2, #29
 8006ef4:	d50d      	bpl.n	8006f12 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ef6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006efe:	2202      	movs	r2, #2
 8006f00:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006f08:	d075      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	f7ff ffd4 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	0711      	lsls	r1, r2, #28
 8006f18:	d50f      	bpl.n	8006f3a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	0712      	lsls	r2, r2, #28
 8006f1e:	d50c      	bpl.n	8006f3a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f20:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f28:	2204      	movs	r2, #4
 8006f2a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	d067      	beq.n	8007002 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006f32:	f7ff ffc0 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f36:	2300      	movs	r3, #0
 8006f38:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	06d0      	lsls	r0, r2, #27
 8006f40:	d510      	bpl.n	8006f64 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	06d1      	lsls	r1, r2, #27
 8006f46:	d50d      	bpl.n	8006f64 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f48:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f50:	2208      	movs	r2, #8
 8006f52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006f5a:	d058      	beq.n	800700e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5c:	f7ff ffab 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f60:	2300      	movs	r3, #0
 8006f62:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	07d2      	lsls	r2, r2, #31
 8006f6a:	d508      	bpl.n	8006f7e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	07d0      	lsls	r0, r2, #31
 8006f70:	d505      	bpl.n	8006f7e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f72:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f78:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f7a:	f7fa f9f7 	bl	800136c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	0611      	lsls	r1, r2, #24
 8006f84:	d508      	bpl.n	8006f98 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	0612      	lsls	r2, r2, #24
 8006f8a:	d505      	bpl.n	8006f98 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006f94:	f000 f8d9 	bl	800714a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	05d0      	lsls	r0, r2, #23
 8006f9e:	d508      	bpl.n	8006fb2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	0611      	lsls	r1, r2, #24
 8006fa4:	d505      	bpl.n	8006fb2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006faa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006fae:	f000 f8cd 	bl	800714c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	0652      	lsls	r2, r2, #25
 8006fb8:	d508      	bpl.n	8006fcc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	0650      	lsls	r0, r2, #25
 8006fbe:	d505      	bpl.n	8006fcc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006fc8:	f7ff ff77 	bl	8006eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	0691      	lsls	r1, r2, #26
 8006fd2:	d522      	bpl.n	800701a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	0692      	lsls	r2, r2, #26
 8006fd8:	d51f      	bpl.n	800701a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fda:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fe0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006fe6:	f000 b8af 	b.w	8007148 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fea:	f7ff ff63 	bl	8006eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff ff62 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ff4:	e776      	b.n	8006ee4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	f7ff ff5d 	bl	8006eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff ff5c 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007000:	e785      	b.n	8006f0e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	f7ff ff57 	bl	8006eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff ff56 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
 800700c:	e793      	b.n	8006f36 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	f7ff ff51 	bl	8006eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007012:	4620      	mov	r0, r4
 8007014:	f7ff ff50 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007018:	e7a2      	b.n	8006f60 <HAL_TIM_IRQHandler+0xa4>
}
 800701a:	bd10      	pop	{r4, pc}

0800701c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800701c:	4a30      	ldr	r2, [pc, #192]	; (80070e0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800701e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007020:	4290      	cmp	r0, r2
 8007022:	d012      	beq.n	800704a <TIM_Base_SetConfig+0x2e>
 8007024:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007028:	d00f      	beq.n	800704a <TIM_Base_SetConfig+0x2e>
 800702a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800702e:	4290      	cmp	r0, r2
 8007030:	d00b      	beq.n	800704a <TIM_Base_SetConfig+0x2e>
 8007032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007036:	4290      	cmp	r0, r2
 8007038:	d007      	beq.n	800704a <TIM_Base_SetConfig+0x2e>
 800703a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800703e:	4290      	cmp	r0, r2
 8007040:	d003      	beq.n	800704a <TIM_Base_SetConfig+0x2e>
 8007042:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007046:	4290      	cmp	r0, r2
 8007048:	d119      	bne.n	800707e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800704a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800704c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007050:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007052:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <TIM_Base_SetConfig+0xc4>)
 8007054:	4290      	cmp	r0, r2
 8007056:	d029      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 8007058:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800705c:	d026      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 800705e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007062:	4290      	cmp	r0, r2
 8007064:	d022      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 8007066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800706a:	4290      	cmp	r0, r2
 800706c:	d01e      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 800706e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007072:	4290      	cmp	r0, r2
 8007074:	d01a      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 8007076:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800707a:	4290      	cmp	r0, r2
 800707c:	d016      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <TIM_Base_SetConfig+0xc8>)
 8007080:	4290      	cmp	r0, r2
 8007082:	d013      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 8007084:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007088:	4290      	cmp	r0, r2
 800708a:	d00f      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 800708c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007090:	4290      	cmp	r0, r2
 8007092:	d00b      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 8007094:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007098:	4290      	cmp	r0, r2
 800709a:	d007      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 800709c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070a0:	4290      	cmp	r0, r2
 80070a2:	d003      	beq.n	80070ac <TIM_Base_SetConfig+0x90>
 80070a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070a8:	4290      	cmp	r0, r2
 80070aa:	d103      	bne.n	80070b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b0:	68ca      	ldr	r2, [r1, #12]
 80070b2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b4:	694a      	ldr	r2, [r1, #20]
 80070b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80070bc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070be:	688b      	ldr	r3, [r1, #8]
 80070c0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c2:	680b      	ldr	r3, [r1, #0]
 80070c4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <TIM_Base_SetConfig+0xc4>)
 80070c8:	4298      	cmp	r0, r3
 80070ca:	d003      	beq.n	80070d4 <TIM_Base_SetConfig+0xb8>
 80070cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d0:	4298      	cmp	r0, r3
 80070d2:	d101      	bne.n	80070d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d4:	690b      	ldr	r3, [r1, #16]
 80070d6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d8:	2301      	movs	r3, #1
 80070da:	6143      	str	r3, [r0, #20]
}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40014000 	.word	0x40014000

080070e8 <HAL_TIM_Base_Init>:
{
 80070e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80070ea:	4604      	mov	r4, r0
 80070ec:	b350      	cbz	r0, 8007144 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80070ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80070f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070f6:	b91b      	cbnz	r3, 8007100 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80070f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80070fc:	f7ff fe9b 	bl	8006e36 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8007106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710a:	f7ff ff87 	bl	800701c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800710e:	2301      	movs	r3, #1
  return HAL_OK;
 8007110:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007112:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007116:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800711a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800711e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007122:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800712a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007136:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800713a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800713e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007142:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007144:	2001      	movs	r0, #1
 8007146:	e7fc      	b.n	8007142 <HAL_TIM_Base_Init+0x5a>

08007148 <HAL_TIMEx_CommutCallback>:
 8007148:	4770      	bx	lr

0800714a <HAL_TIMEx_BreakCallback>:
 800714a:	4770      	bx	lr

0800714c <HAL_TIMEx_Break2Callback>:
 800714c:	4770      	bx	lr

0800714e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800714e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007152:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007154:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8007158:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800715c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8007160:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8007164:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8007168:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800716a:	b9a2      	cbnz	r2, 8007196 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800716c:	ea43 0209 	orr.w	r2, r3, r9
 8007170:	6801      	ldr	r1, [r0, #0]
 8007172:	432a      	orrs	r2, r5
 8007174:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007178:	ea42 0308 	orr.w	r3, r2, r8
 800717c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8007180:	ea43 030e 	orr.w	r3, r3, lr
 8007184:	ea43 030c 	orr.w	r3, r3, ip
 8007188:	433b      	orrs	r3, r7
 800718a:	4333      	orrs	r3, r6
 800718c:	430b      	orrs	r3, r1
 800718e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007190:	2000      	movs	r0, #0
 8007192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007196:	6802      	ldr	r2, [r0, #0]
 8007198:	ea43 0309 	orr.w	r3, r3, r9
 800719c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80071a0:	4313      	orrs	r3, r2
 80071a2:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80071a4:	ea45 0308 	orr.w	r3, r5, r8
 80071a8:	6842      	ldr	r2, [r0, #4]
 80071aa:	ea43 030e 	orr.w	r3, r3, lr
 80071ae:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80071b2:	ea43 030c 	orr.w	r3, r3, ip
 80071b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80071ba:	433b      	orrs	r3, r7
 80071bc:	4333      	orrs	r3, r6
 80071be:	4313      	orrs	r3, r2
 80071c0:	6043      	str	r3, [r0, #4]
 80071c2:	e7e5      	b.n	8007190 <FMC_SDRAM_Init+0x42>

080071c4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80071c4:	68cb      	ldr	r3, [r1, #12]
 80071c6:	f103 3cff 	add.w	ip, r3, #4294967295
 80071ca:	694b      	ldr	r3, [r1, #20]
{
 80071cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80071ce:	3b01      	subs	r3, #1
 80071d0:	680f      	ldr	r7, [r1, #0]
 80071d2:	684c      	ldr	r4, [r1, #4]
 80071d4:	688e      	ldr	r6, [r1, #8]
 80071d6:	051b      	lsls	r3, r3, #20
 80071d8:	690d      	ldr	r5, [r1, #16]
 80071da:	3c01      	subs	r4, #1
 80071dc:	6989      	ldr	r1, [r1, #24]
 80071de:	3e01      	subs	r6, #1
 80071e0:	3d01      	subs	r5, #1
 80071e2:	3f01      	subs	r7, #1
 80071e4:	3901      	subs	r1, #1
 80071e6:	0124      	lsls	r4, r4, #4
 80071e8:	0236      	lsls	r6, r6, #8
 80071ea:	042d      	lsls	r5, r5, #16
 80071ec:	0609      	lsls	r1, r1, #24
 80071ee:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80071f2:	b95a      	cbnz	r2, 800720c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80071f4:	433b      	orrs	r3, r7
 80071f6:	6882      	ldr	r2, [r0, #8]
 80071f8:	4323      	orrs	r3, r4
 80071fa:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80071fe:	4333      	orrs	r3, r6
 8007200:	432b      	orrs	r3, r5
 8007202:	430b      	orrs	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007208:	2000      	movs	r0, #0
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800720c:	6882      	ldr	r2, [r0, #8]
 800720e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007212:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007216:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007218:	ea44 0306 	orr.w	r3, r4, r6
 800721c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800721e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007220:	68c2      	ldr	r2, [r0, #12]
 8007222:	432b      	orrs	r3, r5
 8007224:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007228:	430b      	orrs	r3, r1
 800722a:	4313      	orrs	r3, r2
 800722c:	60c3      	str	r3, [r0, #12]
 800722e:	e7eb      	b.n	8007208 <FMC_SDRAM_Timing_Init+0x44>

08007230 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007230:	6902      	ldr	r2, [r0, #16]
{
 8007232:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007234:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007238:	0d92      	lsrs	r2, r2, #22
 800723a:	4323      	orrs	r3, r4
 800723c:	68cc      	ldr	r4, [r1, #12]
 800723e:	0592      	lsls	r2, r2, #22
 8007240:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007244:	4313      	orrs	r3, r2
 8007246:	688a      	ldr	r2, [r1, #8]
 8007248:	3a01      	subs	r2, #1
 800724a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800724e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007250:	2000      	movs	r0, #0
 8007252:	bd10      	pop	{r4, pc}

08007254 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007254:	6943      	ldr	r3, [r0, #20]
 8007256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800725a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800725e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007262:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007264:	2000      	movs	r0, #0
 8007266:	4770      	bx	lr

08007268 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007268:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800726c:	b113      	cbz	r3, 8007274 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800726e:	f06f 0005 	mvn.w	r0, #5
 8007272:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007274:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8007278:	4b07      	ldr	r3, [pc, #28]	; (8007298 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800727a:	b912      	cbnz	r2, 8007282 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800727c:	f3ef 8211 	mrs	r2, BASEPRI
 8007280:	b112      	cbz	r2, 8007288 <osKernelInitialize+0x20>
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	2a02      	cmp	r2, #2
 8007286:	d0f2      	beq.n	800726e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	b910      	cbnz	r0, 8007292 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007290:	4770      	bx	lr
    } else {
      stat = osError;
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007296:	4770      	bx	lr
 8007298:	20002220 	.word	0x20002220

0800729c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800729c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80072a2:	b113      	cbz	r3, 80072aa <osKernelStart+0xe>
    stat = osErrorISR;
 80072a4:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80072a8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072aa:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80072b0:	b912      	cbnz	r2, 80072b8 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072b2:	f3ef 8211 	mrs	r2, BASEPRI
 80072b6:	b112      	cbz	r2, 80072be <osKernelStart+0x22>
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	2a02      	cmp	r2, #2
 80072bc:	d0f2      	beq.n	80072a4 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	2a01      	cmp	r2, #1
 80072c2:	d105      	bne.n	80072d0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80072c4:	2202      	movs	r2, #2
 80072c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80072c8:	f001 fe7a 	bl	8008fc0 <vTaskStartScheduler>
      stat = osOK;
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7eb      	b.n	80072a8 <osKernelStart+0xc>
      stat = osError;
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80072d4:	e7e8      	b.n	80072a8 <osKernelStart+0xc>
 80072d6:	bf00      	nop
 80072d8:	20002220 	.word	0x20002220

080072dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	4614      	mov	r4, r2
 80072e0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072e2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072e4:	460b      	mov	r3, r1
  hTask = NULL;
 80072e6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80072ec:	bb22      	cbnz	r2, 8007338 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ee:	f3ef 8210 	mrs	r2, PRIMASK
 80072f2:	b912      	cbnz	r2, 80072fa <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072f4:	f3ef 8211 	mrs	r2, BASEPRI
 80072f8:	b11a      	cbz	r2, 8007302 <osThreadNew+0x26>
 80072fa:	4a22      	ldr	r2, [pc, #136]	; (8007384 <osThreadNew+0xa8>)
 80072fc:	6812      	ldr	r2, [r2, #0]
 80072fe:	2a02      	cmp	r2, #2
 8007300:	d01a      	beq.n	8007338 <osThreadNew+0x5c>
 8007302:	b1c8      	cbz	r0, 8007338 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007304:	2c00      	cmp	r4, #0
 8007306:	d02f      	beq.n	8007368 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007308:	69a5      	ldr	r5, [r4, #24]
 800730a:	2d00      	cmp	r5, #0
 800730c:	bf08      	it	eq
 800730e:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007310:	1e6a      	subs	r2, r5, #1
 8007312:	46ac      	mov	ip, r5
 8007314:	2a37      	cmp	r2, #55	; 0x37
 8007316:	d82b      	bhi.n	8007370 <osThreadNew+0x94>
 8007318:	6862      	ldr	r2, [r4, #4]
 800731a:	07d2      	lsls	r2, r2, #31
 800731c:	d428      	bmi.n	8007370 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800731e:	6966      	ldr	r6, [r4, #20]
 8007320:	b16e      	cbz	r6, 800733e <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007322:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8007324:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007326:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800732a:	b157      	cbz	r7, 8007342 <osThreadNew+0x66>
 800732c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8007330:	d902      	bls.n	8007338 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007332:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007334:	b104      	cbz	r4, 8007338 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007336:	b9ee      	cbnz	r6, 8007374 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007338:	9805      	ldr	r0, [sp, #20]
}
 800733a:	b007      	add	sp, #28
 800733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800733e:	2280      	movs	r2, #128	; 0x80
 8007340:	e7f0      	b.n	8007324 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007342:	f1be 0f00 	cmp.w	lr, #0
 8007346:	d1f7      	bne.n	8007338 <osThreadNew+0x5c>
      if (mem == 0) {
 8007348:	6924      	ldr	r4, [r4, #16]
 800734a:	2c00      	cmp	r4, #0
 800734c:	d1f4      	bne.n	8007338 <osThreadNew+0x5c>
 800734e:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007350:	a905      	add	r1, sp, #20
 8007352:	b292      	uxth	r2, r2
 8007354:	e9cd c100 	strd	ip, r1, [sp]
 8007358:	4621      	mov	r1, r4
 800735a:	f001 fca6 	bl	8008caa <xTaskCreate>
 800735e:	2801      	cmp	r0, #1
          hTask = NULL;
 8007360:	bf1c      	itt	ne
 8007362:	2300      	movne	r3, #0
 8007364:	9305      	strne	r3, [sp, #20]
 8007366:	e7e7      	b.n	8007338 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8007368:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800736c:	2280      	movs	r2, #128	; 0x80
 800736e:	e7ef      	b.n	8007350 <osThreadNew+0x74>
        return (NULL);
 8007370:	2000      	movs	r0, #0
 8007372:	e7e2      	b.n	800733a <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007374:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007378:	9500      	str	r5, [sp, #0]
 800737a:	f001 fc58 	bl	8008c2e <xTaskCreateStatic>
 800737e:	9005      	str	r0, [sp, #20]
 8007380:	e7da      	b.n	8007338 <osThreadNew+0x5c>
 8007382:	bf00      	nop
 8007384:	20002220 	.word	0x20002220

08007388 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007388:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800738a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800738e:	b113      	cbz	r3, 8007396 <osDelay+0xe>
    stat = osErrorISR;
 8007390:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007394:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007396:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800739a:	b913      	cbnz	r3, 80073a2 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800739c:	f3ef 8311 	mrs	r3, BASEPRI
 80073a0:	b11b      	cbz	r3, 80073aa <osDelay+0x22>
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <osDelay+0x30>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d0f2      	beq.n	8007390 <osDelay+0x8>
    if (ticks != 0U) {
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d0f2      	beq.n	8007394 <osDelay+0xc>
      vTaskDelay(ticks);
 80073ae:	f001 fdc5 	bl	8008f3c <vTaskDelay>
    stat = osOK;
 80073b2:	2000      	movs	r0, #0
 80073b4:	e7ee      	b.n	8007394 <osDelay+0xc>
 80073b6:	bf00      	nop
 80073b8:	20002220 	.word	0x20002220

080073bc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80073c4:	b116      	cbz	r6, 80073cc <osMutexNew+0x10>
  hMutex = NULL;
 80073c6:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073cc:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80073d0:	b912      	cbnz	r2, 80073d8 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073d2:	f3ef 8211 	mrs	r2, BASEPRI
 80073d6:	b11a      	cbz	r2, 80073e0 <osMutexNew+0x24>
 80073d8:	4a18      	ldr	r2, [pc, #96]	; (800743c <osMutexNew+0x80>)
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	2a02      	cmp	r2, #2
 80073de:	d0f2      	beq.n	80073c6 <osMutexNew+0xa>
    if (attr != NULL) {
 80073e0:	b115      	cbz	r5, 80073e8 <osMutexNew+0x2c>
      type = attr->attr_bits;
 80073e2:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80073e4:	0733      	lsls	r3, r6, #28
 80073e6:	d4ee      	bmi.n	80073c6 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80073e8:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 80073ec:	b17d      	cbz	r5, 800740e <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80073ee:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80073f2:	b151      	cbz	r1, 800740a <osMutexNew+0x4e>
 80073f4:	2b4f      	cmp	r3, #79	; 0x4f
 80073f6:	d9e6      	bls.n	80073c6 <osMutexNew+0xa>
        if (rmtx != 0U) {
 80073f8:	b1de      	cbz	r6, 8007432 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80073fa:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80073fc:	f000 ff4e 	bl	800829c <xQueueCreateMutexStatic>
 8007400:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007402:	2800      	cmp	r0, #0
 8007404:	d0df      	beq.n	80073c6 <osMutexNew+0xa>
          name = attr->name;
 8007406:	682d      	ldr	r5, [r5, #0]
 8007408:	e00a      	b.n	8007420 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1db      	bne.n	80073c6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800740e:	b196      	cbz	r6, 8007436 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007410:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8007412:	f000 ff78 	bl	8008306 <xQueueCreateMutex>
 8007416:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007418:	2800      	cmp	r0, #0
 800741a:	d0d4      	beq.n	80073c6 <osMutexNew+0xa>
        if (attr != NULL) {
 800741c:	2d00      	cmp	r5, #0
 800741e:	d1f2      	bne.n	8007406 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8007420:	4629      	mov	r1, r5
 8007422:	4620      	mov	r0, r4
 8007424:	f001 fa3a 	bl	800889c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007428:	2e00      	cmp	r6, #0
 800742a:	d0cd      	beq.n	80073c8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800742c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8007430:	e7ca      	b.n	80073c8 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007432:	2001      	movs	r0, #1
 8007434:	e7e2      	b.n	80073fc <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8007436:	2001      	movs	r0, #1
 8007438:	e7eb      	b.n	8007412 <osMutexNew+0x56>
 800743a:	bf00      	nop
 800743c:	20002220 	.word	0x20002220

08007440 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007440:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007442:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007446:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8007448:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800744c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800744e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007452:	b112      	cbz	r2, 800745a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8007454:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007458:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800745e:	b912      	cbnz	r2, 8007466 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007460:	f3ef 8211 	mrs	r2, BASEPRI
 8007464:	b11a      	cbz	r2, 800746e <osMutexAcquire+0x2e>
 8007466:	4a0d      	ldr	r2, [pc, #52]	; (800749c <osMutexAcquire+0x5c>)
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	2a02      	cmp	r2, #2
 800746c:	d0f2      	beq.n	8007454 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800746e:	b188      	cbz	r0, 8007494 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007470:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8007472:	b163      	cbz	r3, 800748e <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007474:	f001 f999 	bl	80087aa <xQueueTakeMutexRecursive>
 8007478:	2801      	cmp	r0, #1
 800747a:	d101      	bne.n	8007480 <osMutexAcquire+0x40>
  stat = osOK;
 800747c:	2000      	movs	r0, #0
 800747e:	e7eb      	b.n	8007458 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8007480:	2c00      	cmp	r4, #0
 8007482:	bf14      	ite	ne
 8007484:	f06f 0001 	mvnne.w	r0, #1
 8007488:	f06f 0002 	mvneq.w	r0, #2
 800748c:	e7e4      	b.n	8007458 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800748e:	f001 f8c1 	bl	8008614 <xQueueSemaphoreTake>
 8007492:	e7f1      	b.n	8007478 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8007494:	f06f 0003 	mvn.w	r0, #3
 8007498:	e7de      	b.n	8007458 <osMutexAcquire+0x18>
 800749a:	bf00      	nop
 800749c:	20002220 	.word	0x20002220

080074a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80074a0:	b508      	push	{r3, lr}
 80074a2:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80074a4:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80074a8:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ac:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80074b0:	b112      	cbz	r2, 80074b8 <osMutexRelease+0x18>
    stat = osErrorISR;
 80074b2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80074b6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80074bc:	b912      	cbnz	r2, 80074c4 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074be:	f3ef 8211 	mrs	r2, BASEPRI
 80074c2:	b11a      	cbz	r2, 80074cc <osMutexRelease+0x2c>
 80074c4:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <osMutexRelease+0x50>)
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	2a02      	cmp	r2, #2
 80074ca:	d0f2      	beq.n	80074b2 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80074cc:	b168      	cbz	r0, 80074ea <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 80074ce:	b13b      	cbz	r3, 80074e0 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80074d0:	f000 fef9 	bl	80082c6 <xQueueGiveMutexRecursive>
 80074d4:	2801      	cmp	r0, #1
  stat = osOK;
 80074d6:	bf0c      	ite	eq
 80074d8:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80074da:	f06f 0002 	mvnne.w	r0, #2
 80074de:	e7ea      	b.n	80074b6 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80074e0:	461a      	mov	r2, r3
 80074e2:	4619      	mov	r1, r3
 80074e4:	f000 fe1f 	bl	8008126 <xQueueGenericSend>
 80074e8:	e7f4      	b.n	80074d4 <osMutexRelease+0x34>
    stat = osErrorParameter;
 80074ea:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80074ee:	e7e2      	b.n	80074b6 <osMutexRelease+0x16>
 80074f0:	20002220 	.word	0x20002220

080074f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80074f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f6:	460e      	mov	r6, r1
 80074f8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fa:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80074fe:	b11b      	cbz	r3, 8007508 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007500:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007502:	4620      	mov	r0, r4
 8007504:	b002      	add	sp, #8
 8007506:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007508:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800750c:	b913      	cbnz	r3, 8007514 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800750e:	f3ef 8311 	mrs	r3, BASEPRI
 8007512:	b11b      	cbz	r3, 800751c <osSemaphoreNew+0x28>
 8007514:	4b21      	ldr	r3, [pc, #132]	; (800759c <osSemaphoreNew+0xa8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d0f1      	beq.n	8007500 <osSemaphoreNew+0xc>
 800751c:	2800      	cmp	r0, #0
 800751e:	d0ef      	beq.n	8007500 <osSemaphoreNew+0xc>
 8007520:	42b0      	cmp	r0, r6
 8007522:	d3ed      	bcc.n	8007500 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8007524:	b1ed      	cbz	r5, 8007562 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007526:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800752a:	b1c3      	cbz	r3, 800755e <osSemaphoreNew+0x6a>
 800752c:	2a4f      	cmp	r2, #79	; 0x4f
 800752e:	d9e7      	bls.n	8007500 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007530:	2801      	cmp	r0, #1
 8007532:	d129      	bne.n	8007588 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007534:	2203      	movs	r2, #3
 8007536:	9200      	str	r2, [sp, #0]
 8007538:	2200      	movs	r2, #0
 800753a:	4611      	mov	r1, r2
 800753c:	f000 fd6e 	bl	800801c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8007540:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007542:	2800      	cmp	r0, #0
 8007544:	d0dc      	beq.n	8007500 <osSemaphoreNew+0xc>
 8007546:	b1ce      	cbz	r6, 800757c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007548:	2300      	movs	r3, #0
 800754a:	461a      	mov	r2, r3
 800754c:	4619      	mov	r1, r3
 800754e:	f000 fdea 	bl	8008126 <xQueueGenericSend>
 8007552:	2801      	cmp	r0, #1
 8007554:	d012      	beq.n	800757c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8007556:	4620      	mov	r0, r4
 8007558:	f001 f9c6 	bl	80088e8 <vQueueDelete>
 800755c:	e7d0      	b.n	8007500 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800755e:	2a00      	cmp	r2, #0
 8007560:	d1ce      	bne.n	8007500 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007562:	2801      	cmp	r0, #1
 8007564:	d104      	bne.n	8007570 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8007566:	2203      	movs	r2, #3
 8007568:	2100      	movs	r1, #0
 800756a:	f000 fd6b 	bl	8008044 <xQueueGenericCreate>
 800756e:	e7e7      	b.n	8007540 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007570:	4631      	mov	r1, r6
 8007572:	f000 fdb6 	bl	80080e2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8007576:	4604      	mov	r4, r0
 8007578:	2800      	cmp	r0, #0
 800757a:	d0c1      	beq.n	8007500 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800757c:	b95d      	cbnz	r5, 8007596 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800757e:	4629      	mov	r1, r5
 8007580:	4620      	mov	r0, r4
 8007582:	f001 f98b 	bl	800889c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8007586:	e7bc      	b.n	8007502 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007588:	461a      	mov	r2, r3
 800758a:	4631      	mov	r1, r6
 800758c:	f000 fd83 	bl	8008096 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007590:	4604      	mov	r4, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	d0b4      	beq.n	8007500 <osSemaphoreNew+0xc>
          name = attr->name;
 8007596:	682d      	ldr	r5, [r5, #0]
 8007598:	e7f1      	b.n	800757e <osSemaphoreNew+0x8a>
 800759a:	bf00      	nop
 800759c:	20002220 	.word	0x20002220

080075a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80075a0:	b513      	push	{r0, r1, r4, lr}
 80075a2:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80075a4:	b918      	cbnz	r0, 80075ae <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 80075a6:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80075aa:	b002      	add	sp, #8
 80075ac:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ae:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80075b2:	b163      	cbz	r3, 80075ce <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 80075b4:	2c00      	cmp	r4, #0
 80075b6:	d1f6      	bne.n	80075a6 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80075b8:	aa01      	add	r2, sp, #4
 80075ba:	4621      	mov	r1, r4
      yield = pdFALSE;
 80075bc:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80075be:	f001 f918 	bl	80087f2 <xQueueReceiveFromISR>
 80075c2:	2801      	cmp	r0, #1
 80075c4:	d113      	bne.n	80075ee <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	b9a3      	cbnz	r3, 80075f4 <osSemaphoreAcquire+0x54>
  stat = osOK;
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7ed      	b.n	80075aa <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ce:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80075d2:	b913      	cbnz	r3, 80075da <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d4:	f3ef 8311 	mrs	r3, BASEPRI
 80075d8:	b11b      	cbz	r3, 80075e2 <osSemaphoreAcquire+0x42>
 80075da:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <osSemaphoreAcquire+0x70>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d0e8      	beq.n	80075b4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80075e2:	4621      	mov	r1, r4
 80075e4:	f001 f816 	bl	8008614 <xQueueSemaphoreTake>
 80075e8:	2801      	cmp	r0, #1
 80075ea:	d0ee      	beq.n	80075ca <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 80075ec:	b96c      	cbnz	r4, 800760a <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 80075ee:	f06f 0002 	mvn.w	r0, #2
 80075f2:	e7da      	b.n	80075aa <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80075f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	e7df      	b.n	80075ca <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800760a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800760e:	e7cc      	b.n	80075aa <osSemaphoreAcquire+0xa>
 8007610:	20002220 	.word	0x20002220

08007614 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007614:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007616:	b370      	cbz	r0, 8007676 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007618:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800761c:	b14b      	cbz	r3, 8007632 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800761e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007620:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007622:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007624:	f000 fef5 	bl	8008412 <xQueueGiveFromISR>
 8007628:	2801      	cmp	r0, #1
 800762a:	d014      	beq.n	8007656 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800762c:	f06f 0002 	mvn.w	r0, #2
 8007630:	e014      	b.n	800765c <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007632:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007636:	b913      	cbnz	r3, 800763e <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007638:	f3ef 8311 	mrs	r3, BASEPRI
 800763c:	b11b      	cbz	r3, 8007646 <osSemaphoreRelease+0x32>
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <osSemaphoreRelease+0x68>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d0eb      	beq.n	800761e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007646:	2300      	movs	r3, #0
 8007648:	461a      	mov	r2, r3
 800764a:	4619      	mov	r1, r3
 800764c:	f000 fd6b 	bl	8008126 <xQueueGenericSend>
 8007650:	2801      	cmp	r0, #1
 8007652:	d002      	beq.n	800765a <osSemaphoreRelease+0x46>
 8007654:	e7ea      	b.n	800762c <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	b913      	cbnz	r3, 8007660 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800765a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800765c:	b002      	add	sp, #8
 800765e:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007660:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007668:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	e7f1      	b.n	800765a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8007676:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800767a:	e7ef      	b.n	800765c <osSemaphoreRelease+0x48>
 800767c:	20002220 	.word	0x20002220

08007680 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007680:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007682:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007684:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007688:	b11b      	cbz	r3, 8007692 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800768a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800768c:	4628      	mov	r0, r5
 800768e:	b002      	add	sp, #8
 8007690:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007692:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007696:	b913      	cbnz	r3, 800769e <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007698:	f3ef 8311 	mrs	r3, BASEPRI
 800769c:	b11b      	cbz	r3, 80076a6 <osMessageQueueNew+0x26>
 800769e:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <osMessageQueueNew+0x88>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d0f1      	beq.n	800768a <osMessageQueueNew+0xa>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d0ef      	beq.n	800768a <osMessageQueueNew+0xa>
 80076aa:	2900      	cmp	r1, #0
 80076ac:	d0ed      	beq.n	800768a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 80076ae:	b1ec      	cbz	r4, 80076ec <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076b0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80076b4:	b193      	cbz	r3, 80076dc <osMessageQueueNew+0x5c>
 80076b6:	2a4f      	cmp	r2, #79	; 0x4f
 80076b8:	d9e7      	bls.n	800768a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076ba:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076bc:	2a00      	cmp	r2, #0
 80076be:	d0e4      	beq.n	800768a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076c0:	fb01 f500 	mul.w	r5, r1, r0
 80076c4:	6966      	ldr	r6, [r4, #20]
 80076c6:	42ae      	cmp	r6, r5
 80076c8:	d3df      	bcc.n	800768a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076ca:	2500      	movs	r5, #0
 80076cc:	9500      	str	r5, [sp, #0]
 80076ce:	f000 fca5 	bl	800801c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80076d2:	4605      	mov	r5, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d0d8      	beq.n	800768a <osMessageQueueNew+0xa>
        name = attr->name;
 80076d8:	6824      	ldr	r4, [r4, #0]
 80076da:	e00f      	b.n	80076fc <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076dc:	2a00      	cmp	r2, #0
 80076de:	d1d4      	bne.n	800768a <osMessageQueueNew+0xa>
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d1      	bne.n	800768a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076e6:	6963      	ldr	r3, [r4, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ce      	bne.n	800768a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 80076ec:	2200      	movs	r2, #0
 80076ee:	f000 fca9 	bl	8008044 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80076f2:	4605      	mov	r5, r0
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d0c8      	beq.n	800768a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	d1ed      	bne.n	80076d8 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 80076fc:	4621      	mov	r1, r4
 80076fe:	4628      	mov	r0, r5
 8007700:	f001 f8cc 	bl	800889c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007704:	e7c2      	b.n	800768c <osMessageQueueNew+0xc>
 8007706:	bf00      	nop
 8007708:	20002220 	.word	0x20002220

0800770c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800770c:	b513      	push	{r0, r1, r4, lr}
 800770e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007710:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007714:	b123      	cbz	r3, 8007720 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007716:	b9d8      	cbnz	r0, 8007750 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8007718:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800771c:	b002      	add	sp, #8
 800771e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007720:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007724:	b913      	cbnz	r3, 800772c <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007726:	f3ef 8311 	mrs	r3, BASEPRI
 800772a:	b11b      	cbz	r3, 8007734 <osMessageQueuePut+0x28>
 800772c:	4b17      	ldr	r3, [pc, #92]	; (800778c <osMessageQueuePut+0x80>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d0f0      	beq.n	8007716 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007734:	2800      	cmp	r0, #0
 8007736:	d0ef      	beq.n	8007718 <osMessageQueuePut+0xc>
 8007738:	2900      	cmp	r1, #0
 800773a:	d0ed      	beq.n	8007718 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800773c:	2300      	movs	r3, #0
 800773e:	4622      	mov	r2, r4
 8007740:	f000 fcf1 	bl	8008126 <xQueueGenericSend>
 8007744:	2801      	cmp	r0, #1
 8007746:	d010      	beq.n	800776a <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8007748:	b9e4      	cbnz	r4, 8007784 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800774a:	f06f 0002 	mvn.w	r0, #2
 800774e:	e7e5      	b.n	800771c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007750:	2900      	cmp	r1, #0
 8007752:	d0e1      	beq.n	8007718 <osMessageQueuePut+0xc>
 8007754:	2c00      	cmp	r4, #0
 8007756:	d1df      	bne.n	8007718 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007758:	4623      	mov	r3, r4
 800775a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800775c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800775e:	f000 fdef 	bl	8008340 <xQueueGenericSendFromISR>
 8007762:	2801      	cmp	r0, #1
 8007764:	d1f1      	bne.n	800774a <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	b90b      	cbnz	r3, 800776e <osMessageQueuePut+0x62>
  stat = osOK;
 800776a:	2000      	movs	r0, #0
 800776c:	e7d6      	b.n	800771c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800776e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007776:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	e7f2      	b.n	800776a <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007784:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007788:	e7c8      	b.n	800771c <osMessageQueuePut+0x10>
 800778a:	bf00      	nop
 800778c:	20002220 	.word	0x20002220

08007790 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007790:	b513      	push	{r0, r1, r4, lr}
 8007792:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007794:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007798:	b123      	cbz	r3, 80077a4 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800779a:	b9d0      	cbnz	r0, 80077d2 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800779c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80077a0:	b002      	add	sp, #8
 80077a2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80077a8:	b913      	cbnz	r3, 80077b0 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077aa:	f3ef 8311 	mrs	r3, BASEPRI
 80077ae:	b11b      	cbz	r3, 80077b8 <osMessageQueueGet+0x28>
 80077b0:	4b16      	ldr	r3, [pc, #88]	; (800780c <osMessageQueueGet+0x7c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d0f0      	beq.n	800779a <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d0ef      	beq.n	800779c <osMessageQueueGet+0xc>
 80077bc:	2900      	cmp	r1, #0
 80077be:	d0ed      	beq.n	800779c <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077c0:	4622      	mov	r2, r4
 80077c2:	f000 fe82 	bl	80084ca <xQueueReceive>
 80077c6:	2801      	cmp	r0, #1
 80077c8:	d00f      	beq.n	80077ea <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 80077ca:	b9dc      	cbnz	r4, 8007804 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 80077cc:	f06f 0002 	mvn.w	r0, #2
 80077d0:	e7e6      	b.n	80077a0 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d0e2      	beq.n	800779c <osMessageQueueGet+0xc>
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	d1e0      	bne.n	800779c <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80077da:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80077dc:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80077de:	f001 f808 	bl	80087f2 <xQueueReceiveFromISR>
 80077e2:	2801      	cmp	r0, #1
 80077e4:	d1f2      	bne.n	80077cc <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 80077e6:	9b01      	ldr	r3, [sp, #4]
 80077e8:	b90b      	cbnz	r3, 80077ee <osMessageQueueGet+0x5e>
  stat = osOK;
 80077ea:	2000      	movs	r0, #0
 80077ec:	e7d8      	b.n	80077a0 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80077ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80077f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	e7f2      	b.n	80077ea <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8007804:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007808:	e7ca      	b.n	80077a0 <osMessageQueueGet+0x10>
 800780a:	bf00      	nop
 800780c:	20002220 	.word	0x20002220

08007810 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007810:	4b03      	ldr	r3, [pc, #12]	; (8007820 <vApplicationGetIdleTaskMemory+0x10>)
 8007812:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007814:	4b03      	ldr	r3, [pc, #12]	; (8007824 <vApplicationGetIdleTaskMemory+0x14>)
 8007816:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	6013      	str	r3, [r2, #0]
}
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	200021c0 	.word	0x200021c0
 8007824:	20001fc0 	.word	0x20001fc0

08007828 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007828:	4b03      	ldr	r3, [pc, #12]	; (8007838 <vApplicationGetTimerTaskMemory+0x10>)
 800782a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <vApplicationGetTimerTaskMemory+0x14>)
 800782e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007834:	6013      	str	r3, [r2, #0]
}
 8007836:	4770      	bx	lr
 8007838:	20002624 	.word	0x20002624
 800783c:	20002224 	.word	0x20002224

08007840 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007840:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <prvInsertBlockIntoFreeList+0x40>)
{
 8007842:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007844:	461a      	mov	r2, r3
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4283      	cmp	r3, r0
 800784a:	d3fb      	bcc.n	8007844 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800784c:	6854      	ldr	r4, [r2, #4]
 800784e:	1911      	adds	r1, r2, r4
 8007850:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007852:	bf01      	itttt	eq
 8007854:	6841      	ldreq	r1, [r0, #4]
 8007856:	4610      	moveq	r0, r2
 8007858:	1909      	addeq	r1, r1, r4
 800785a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800785c:	6844      	ldr	r4, [r0, #4]
 800785e:	1901      	adds	r1, r0, r4
 8007860:	428b      	cmp	r3, r1
 8007862:	d107      	bne.n	8007874 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007864:	4907      	ldr	r1, [pc, #28]	; (8007884 <prvInsertBlockIntoFreeList+0x44>)
 8007866:	6809      	ldr	r1, [r1, #0]
 8007868:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800786a:	bf1f      	itttt	ne
 800786c:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800786e:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007870:	1909      	addne	r1, r1, r4
 8007872:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007874:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007876:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007878:	bf18      	it	ne
 800787a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800787c:	bd10      	pop	{r4, pc}
 800787e:	bf00      	nop
 8007880:	20014b8c 	.word	0x20014b8c
 8007884:	20002684 	.word	0x20002684

08007888 <pvPortMalloc>:
{
 8007888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800788c:	4f41      	ldr	r7, [pc, #260]	; (8007994 <pvPortMalloc+0x10c>)
{
 800788e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007890:	f001 fa38 	bl	8008d04 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007894:	4840      	ldr	r0, [pc, #256]	; (8007998 <pvPortMalloc+0x110>)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	b9f3      	cbnz	r3, 80078d8 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800789a:	4940      	ldr	r1, [pc, #256]	; (800799c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800789c:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800789e:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078a0:	4d3f      	ldr	r5, [pc, #252]	; (80079a0 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078a2:	bf1b      	ittet	ne
 80078a4:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078a6:	4a3f      	ldrne	r2, [pc, #252]	; (80079a4 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078a8:	4a3f      	ldreq	r2, [pc, #252]	; (80079a8 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078aa:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 80078ae:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078b0:	bf18      	it	ne
 80078b2:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078b4:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078b6:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 80078b8:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078ba:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 80078be:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078c2:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 80078c4:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078c6:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <pvPortMalloc+0x124>)
 80078cc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ce:	4a38      	ldr	r2, [pc, #224]	; (80079b0 <pvPortMalloc+0x128>)
 80078d0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078d6:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078d8:	f8d0 8000 	ldr.w	r8, [r0]
 80078dc:	ea18 0f04 	tst.w	r8, r4
 80078e0:	d152      	bne.n	8007988 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 80078e2:	2c00      	cmp	r4, #0
 80078e4:	d041      	beq.n	800796a <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80078e6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078ea:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ec:	bf1c      	itt	ne
 80078ee:	f023 0307 	bicne.w	r3, r3, #7
 80078f2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d047      	beq.n	8007988 <pvPortMalloc+0x100>
 80078f8:	4c2d      	ldr	r4, [pc, #180]	; (80079b0 <pvPortMalloc+0x128>)
 80078fa:	6826      	ldr	r6, [r4, #0]
 80078fc:	429e      	cmp	r6, r3
 80078fe:	d343      	bcc.n	8007988 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007900:	4a27      	ldr	r2, [pc, #156]	; (80079a0 <pvPortMalloc+0x118>)
 8007902:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007904:	6869      	ldr	r1, [r5, #4]
 8007906:	4299      	cmp	r1, r3
 8007908:	d201      	bcs.n	800790e <pvPortMalloc+0x86>
 800790a:	6828      	ldr	r0, [r5, #0]
 800790c:	b9b0      	cbnz	r0, 800793c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800790e:	6838      	ldr	r0, [r7, #0]
 8007910:	42a8      	cmp	r0, r5
 8007912:	d039      	beq.n	8007988 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007914:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007916:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007918:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800791a:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800791c:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800791e:	d914      	bls.n	800794a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007920:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007922:	0742      	lsls	r2, r0, #29
 8007924:	d00d      	beq.n	8007942 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	b672      	cpsid	i
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	b662      	cpsie	i
 800793a:	e7fe      	b.n	800793a <pvPortMalloc+0xb2>
 800793c:	462a      	mov	r2, r5
 800793e:	4605      	mov	r5, r0
 8007940:	e7e0      	b.n	8007904 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007942:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007944:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007946:	f7ff ff7b 	bl	8007840 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800794a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800794c:	4917      	ldr	r1, [pc, #92]	; (80079ac <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800794e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007950:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007954:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007956:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007958:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800795c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800795e:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007960:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007964:	bf38      	it	cc
 8007966:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007968:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800796a:	f001 fa71 	bl	8008e50 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800796e:	0763      	lsls	r3, r4, #29
 8007970:	d00c      	beq.n	800798c <pvPortMalloc+0x104>
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	b672      	cpsid	i
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	b662      	cpsie	i
 8007986:	e7fe      	b.n	8007986 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8007988:	2400      	movs	r4, #0
 800798a:	e7ee      	b.n	800796a <pvPortMalloc+0xe2>
}
 800798c:	4620      	mov	r0, r4
 800798e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007992:	bf00      	nop
 8007994:	20002684 	.word	0x20002684
 8007998:	20014b80 	.word	0x20014b80
 800799c:	20002688 	.word	0x20002688
 80079a0:	20014b8c 	.word	0x20014b8c
 80079a4:	20014b80 	.word	0x20014b80
 80079a8:	000124f8 	.word	0x000124f8
 80079ac:	20014b88 	.word	0x20014b88
 80079b0:	20014b84 	.word	0x20014b84

080079b4 <vPortFree>:
{
 80079b4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80079b6:	4604      	mov	r4, r0
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d032      	beq.n	8007a22 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079bc:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <vPortFree+0x70>)
 80079be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	4213      	tst	r3, r2
 80079c6:	d10a      	bne.n	80079de <vPortFree+0x2a>
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	b672      	cpsid	i
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	b662      	cpsie	i
 80079dc:	e7fe      	b.n	80079dc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079de:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80079e2:	b151      	cbz	r1, 80079fa <vPortFree+0x46>
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	b672      	cpsid	i
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	b662      	cpsie	i
 80079f8:	e7fe      	b.n	80079f8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079fa:	ea23 0302 	bic.w	r3, r3, r2
 80079fe:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007a02:	f001 f97f 	bl	8008d04 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <vPortFree+0x74>)
 8007a08:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a0c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a10:	6811      	ldr	r1, [r2, #0]
 8007a12:	440b      	add	r3, r1
 8007a14:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a16:	f7ff ff13 	bl	8007840 <prvInsertBlockIntoFreeList>
}
 8007a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007a1e:	f001 ba17 	b.w	8008e50 <xTaskResumeAll>
}
 8007a22:	bd10      	pop	{r4, pc}
 8007a24:	20014b80 	.word	0x20014b80
 8007a28:	20014b84 	.word	0x20014b84

08007a2c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a2c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a34:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a36:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a38:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a40:	4770      	bx	lr

08007a42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a46:	4770      	bx	lr

08007a48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a48:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a4a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007a4c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a4e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a54:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007a56:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007a58:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	6003      	str	r3, [r0, #0]
}
 8007a5e:	4770      	bx	lr

08007a60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a60:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a62:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a64:	1c63      	adds	r3, r4, #1
 8007a66:	d10a      	bne.n	8007a7e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a68:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a6e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a70:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a72:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007a74:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007a76:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007a78:	3301      	adds	r3, #1
 8007a7a:	6003      	str	r3, [r0, #0]
}
 8007a7c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a7e:	f100 0208 	add.w	r2, r0, #8
 8007a82:	4613      	mov	r3, r2
 8007a84:	6852      	ldr	r2, [r2, #4]
 8007a86:	6815      	ldr	r5, [r2, #0]
 8007a88:	42a5      	cmp	r5, r4
 8007a8a:	d9fa      	bls.n	8007a82 <vListInsert+0x22>
 8007a8c:	e7ed      	b.n	8007a6a <vListInsert+0xa>

08007a8e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a8e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a90:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007a94:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a96:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a98:	6859      	ldr	r1, [r3, #4]
 8007a9a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a9c:	bf08      	it	eq
 8007a9e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	3a01      	subs	r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007aaa:	6818      	ldr	r0, [r3, #0]
}
 8007aac:	4770      	bx	lr
	...

08007ab0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ab0:	4808      	ldr	r0, [pc, #32]	; (8007ad4 <prvPortStartFirstTask+0x24>)
 8007ab2:	6800      	ldr	r0, [r0, #0]
 8007ab4:	6800      	ldr	r0, [r0, #0]
 8007ab6:	f380 8808 	msr	MSP, r0
 8007aba:	f04f 0000 	mov.w	r0, #0
 8007abe:	f380 8814 	msr	CONTROL, r0
 8007ac2:	b662      	cpsie	i
 8007ac4:	b661      	cpsie	f
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	df00      	svc	0
 8007ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ad2:	0000      	.short	0x0000
 8007ad4:	e000ed08 	.word	0xe000ed08

08007ad8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ae8 <vPortEnableVFP+0x10>
 8007adc:	6801      	ldr	r1, [r0, #0]
 8007ade:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ae2:	6001      	str	r1, [r0, #0]
 8007ae4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ae6:	0000      	.short	0x0000
 8007ae8:	e000ed88 	.word	0xe000ed88

08007aec <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007aec:	2300      	movs	r3, #0
{
 8007aee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007af0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007af2:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <prvTaskExitError+0x44>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3301      	adds	r3, #1
 8007af8:	d00a      	beq.n	8007b10 <prvTaskExitError+0x24>
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	b672      	cpsid	i
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	b662      	cpsie	i
 8007b0e:	e7fe      	b.n	8007b0e <prvTaskExitError+0x22>
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	b672      	cpsid	i
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0fc      	beq.n	8007b24 <prvTaskExitError+0x38>
}
 8007b2a:	b002      	add	sp, #8
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20000040 	.word	0x20000040

08007b34 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b38:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b3c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007b40:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b42:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b46:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b48:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b4a:	f06f 0302 	mvn.w	r3, #2
 8007b4e:	6203      	str	r3, [r0, #32]
}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	08007aed 	.word	0x08007aed
	...

08007b60 <SVC_Handler>:
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	4770      	bx	lr
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst2>:
 8007b80:	20014bdc 	.word	0x20014bdc

08007b84 <vPortEnterCritical>:
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	b672      	cpsid	i
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	b662      	cpsie	i
	uxCriticalNesting++;
 8007b98:	4a0b      	ldr	r2, [pc, #44]	; (8007bc8 <vPortEnterCritical+0x44>)
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007b9e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007ba2:	d110      	bne.n	8007bc6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ba4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ba8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	b153      	cbz	r3, 8007bc6 <vPortEnterCritical+0x42>
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	b672      	cpsid	i
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	b662      	cpsie	i
 8007bc4:	e7fe      	b.n	8007bc4 <vPortEnterCritical+0x40>
}
 8007bc6:	4770      	bx	lr
 8007bc8:	20000040 	.word	0x20000040

08007bcc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007bcc:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <vPortExitCritical+0x28>)
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	b953      	cbnz	r3, 8007be8 <vPortExitCritical+0x1c>
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	b672      	cpsid	i
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	b662      	cpsie	i
 8007be6:	e7fe      	b.n	8007be6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007be8:	3b01      	subs	r3, #1
 8007bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bec:	b90b      	cbnz	r3, 8007bf2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bee:	f383 8811 	msr	BASEPRI, r3
}
 8007bf2:	4770      	bx	lr
 8007bf4:	20000040 	.word	0x20000040
	...

08007c00 <PendSV_Handler>:
	__asm volatile
 8007c00:	f3ef 8009 	mrs	r0, PSP
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <pxCurrentTCBConst>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	f01e 0f10 	tst.w	lr, #16
 8007c10:	bf08      	it	eq
 8007c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	6010      	str	r0, [r2, #0]
 8007c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c24:	b672      	cpsid	i
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	b662      	cpsie	i
 8007c34:	f001 fa16 	bl	8009064 <vTaskSwitchContext>
 8007c38:	f04f 0000 	mov.w	r0, #0
 8007c3c:	f380 8811 	msr	BASEPRI, r0
 8007c40:	bc09      	pop	{r0, r3}
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	6808      	ldr	r0, [r1, #0]
 8007c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	f01e 0f10 	tst.w	lr, #16
 8007c4e:	bf08      	it	eq
 8007c50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c54:	f380 8809 	msr	PSP, r0
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop

08007c60 <pxCurrentTCBConst>:
 8007c60:	20014bdc 	.word	0x20014bdc

08007c64 <SysTick_Handler>:
{
 8007c64:	b508      	push	{r3, lr}
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	b672      	cpsid	i
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007c7a:	f001 f851 	bl	8008d20 <xTaskIncrementTick>
 8007c7e:	b128      	cbz	r0, 8007c8c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f383 8811 	msr	BASEPRI, r3
}
 8007c92:	bd08      	pop	{r3, pc}

08007c94 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c94:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007c98:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c9e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ca0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ca2:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <vPortSetupTimerInterrupt+0x20>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cae:	2307      	movs	r3, #7
 8007cb0:	6113      	str	r3, [r2, #16]
}
 8007cb2:	4770      	bx	lr
 8007cb4:	2000000c 	.word	0x2000000c

08007cb8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cb8:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <xPortStartScheduler+0xbc>)
{
 8007cba:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cbc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cbe:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cc0:	b2d2      	uxtb	r2, r2
 8007cc2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cc4:	22ff      	movs	r2, #255	; 0xff
 8007cc6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cc8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cca:	4a2b      	ldr	r2, [pc, #172]	; (8007d78 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007cd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cda:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cdc:	2307      	movs	r3, #7
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <xPortStartScheduler+0xc4>)
 8007ce0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007ce6:	1e5c      	subs	r4, r3, #1
 8007ce8:	0600      	lsls	r0, r0, #24
 8007cea:	d40e      	bmi.n	8007d0a <xPortStartScheduler+0x52>
 8007cec:	b111      	cbz	r1, 8007cf4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	d013      	beq.n	8007d1c <xPortStartScheduler+0x64>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	b672      	cpsid	i
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	b662      	cpsie	i
 8007d08:	e7fe      	b.n	8007d08 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f88d 3003 	strb.w	r3, [sp, #3]
 8007d18:	4623      	mov	r3, r4
 8007d1a:	e7e2      	b.n	8007ce2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d20:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007d24:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d26:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	4a12      	ldr	r2, [pc, #72]	; (8007d74 <xPortStartScheduler+0xbc>)
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d30:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d38:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d3c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007d40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d44:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007d48:	f7ff ffa4 	bl	8007c94 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <xPortStartScheduler+0xc8>)
 8007d4e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007d50:	f7ff fec2 	bl	8007ad8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d54:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007d58:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d5c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007d60:	f7ff fea6 	bl	8007ab0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007d64:	f001 f97e 	bl	8009064 <vTaskSwitchContext>
}
 8007d68:	4628      	mov	r0, r5
	prvTaskExitError();
 8007d6a:	f7ff febf 	bl	8007aec <prvTaskExitError>
}
 8007d6e:	b003      	add	sp, #12
 8007d70:	bd30      	pop	{r4, r5, pc}
 8007d72:	bf00      	nop
 8007d74:	e000e400 	.word	0xe000e400
 8007d78:	20014b94 	.word	0x20014b94
 8007d7c:	20014b98 	.word	0x20014b98
 8007d80:	20000040 	.word	0x20000040

08007d84 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d84:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d88:	2b0f      	cmp	r3, #15
 8007d8a:	d910      	bls.n	8007dae <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d8c:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <vPortValidateInterruptPriority+0x58>)
 8007d8e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <vPortValidateInterruptPriority+0x5c>)
 8007d92:	7812      	ldrb	r2, [r2, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d90a      	bls.n	8007dae <vPortValidateInterruptPriority+0x2a>
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	e7fe      	b.n	8007dac <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <vPortValidateInterruptPriority+0x60>)
 8007db4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d90a      	bls.n	8007dd8 <vPortValidateInterruptPriority+0x54>
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	b672      	cpsid	i
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	b662      	cpsie	i
 8007dd6:	e7fe      	b.n	8007dd6 <vPortValidateInterruptPriority+0x52>
	}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000e3f0 	.word	0xe000e3f0
 8007de0:	20014b94 	.word	0x20014b94
 8007de4:	20014b98 	.word	0x20014b98

08007de8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dec:	f7ff feca 	bl	8007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007df0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007df2:	f7ff feeb 	bl	8007bcc <vPortExitCritical>

	return xReturn;
}
 8007df6:	fab4 f084 	clz	r0, r4
 8007dfa:	0940      	lsrs	r0, r0, #5
 8007dfc:	bd10      	pop	{r4, pc}

08007dfe <prvCopyDataToQueue>:
{
 8007dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e00:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e02:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007e04:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e06:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e08:	b952      	cbnz	r2, 8007e20 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e0a:	6807      	ldr	r7, [r0, #0]
 8007e0c:	bb47      	cbnz	r7, 8007e60 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e0e:	6880      	ldr	r0, [r0, #8]
 8007e10:	f001 fa98 	bl	8009344 <xTaskPriorityDisinherit>
 8007e14:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e16:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e18:	3601      	adds	r6, #1
}
 8007e1a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e1c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007e20:	b965      	cbnz	r5, 8007e3c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e22:	6840      	ldr	r0, [r0, #4]
 8007e24:	f021 fd40 	bl	80298a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e2c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e2e:	68a2      	ldr	r2, [r4, #8]
 8007e30:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e32:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e34:	d3f0      	bcc.n	8007e18 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	e7ed      	b.n	8007e18 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e3c:	68c0      	ldr	r0, [r0, #12]
 8007e3e:	f021 fd33 	bl	80298a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e44:	68e3      	ldr	r3, [r4, #12]
 8007e46:	4251      	negs	r1, r2
 8007e48:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e4e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e50:	bf3e      	ittt	cc
 8007e52:	68a3      	ldrcc	r3, [r4, #8]
 8007e54:	185b      	addcc	r3, r3, r1
 8007e56:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007e58:	2d02      	cmp	r5, #2
 8007e5a:	d101      	bne.n	8007e60 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e5c:	b116      	cbz	r6, 8007e64 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8007e5e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007e60:	2500      	movs	r5, #0
 8007e62:	e7d9      	b.n	8007e18 <prvCopyDataToQueue+0x1a>
 8007e64:	4635      	mov	r5, r6
 8007e66:	e7d7      	b.n	8007e18 <prvCopyDataToQueue+0x1a>

08007e68 <prvCopyDataFromQueue>:
{
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007e6e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e70:	b162      	cbz	r2, 8007e8c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e72:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e74:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e76:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e78:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e7a:	60dc      	str	r4, [r3, #12]
}
 8007e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e80:	bf24      	itt	cs
 8007e82:	6819      	ldrcs	r1, [r3, #0]
 8007e84:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e86:	68d9      	ldr	r1, [r3, #12]
 8007e88:	f021 bd0e 	b.w	80298a8 <memcpy>
}
 8007e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <prvUnlockQueue>:
{
 8007e92:	b570      	push	{r4, r5, r6, lr}
 8007e94:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007e96:	f7ff fe75 	bl	8007b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007e9a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e9e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007ea2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	dc14      	bgt.n	8007ed2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007ea8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eaa:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8007eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007eb2:	f7ff fe8b 	bl	8007bcc <vPortExitCritical>
	taskENTER_CRITICAL();
 8007eb6:	f7ff fe65 	bl	8007b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007eba:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007ebe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	dc12      	bgt.n	8007eea <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007ec4:	23ff      	movs	r3, #255	; 0xff
 8007ec6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007ece:	f7ff be7d 	b.w	8007bcc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0e7      	beq.n	8007ea8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f001 f945 	bl	8009168 <xTaskRemoveFromEventList>
 8007ede:	b108      	cbz	r0, 8007ee4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007ee0:	f001 f9d4 	bl	800928c <vTaskMissedYield>
			--cTxLock;
 8007ee4:	3d01      	subs	r5, #1
 8007ee6:	b26d      	sxtb	r5, r5
 8007ee8:	e7dc      	b.n	8007ea4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0e9      	beq.n	8007ec4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f001 f939 	bl	8009168 <xTaskRemoveFromEventList>
 8007ef6:	b108      	cbz	r0, 8007efc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007ef8:	f001 f9c8 	bl	800928c <vTaskMissedYield>
				--cRxLock;
 8007efc:	3d01      	subs	r5, #1
 8007efe:	b26d      	sxtb	r5, r5
 8007f00:	e7de      	b.n	8007ec0 <prvUnlockQueue+0x2e>

08007f02 <xQueueGenericReset>:
{
 8007f02:	b538      	push	{r3, r4, r5, lr}
 8007f04:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007f06:	4604      	mov	r4, r0
 8007f08:	b950      	cbnz	r0, 8007f20 <xQueueGenericReset+0x1e>
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	b672      	cpsid	i
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	b662      	cpsie	i
 8007f1e:	e7fe      	b.n	8007f1e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007f20:	f7ff fe30 	bl	8007b84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f2a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f2c:	434b      	muls	r3, r1
 8007f2e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f30:	1a5b      	subs	r3, r3, r1
 8007f32:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f34:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f36:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f38:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f3a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f3c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007f3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007f46:	b9a5      	cbnz	r5, 8007f72 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	b173      	cbz	r3, 8007f6a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f4c:	f104 0010 	add.w	r0, r4, #16
 8007f50:	f001 f90a 	bl	8009168 <xTaskRemoveFromEventList>
 8007f54:	b148      	cbz	r0, 8007f6a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8007f56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007f6a:	f7ff fe2f 	bl	8007bcc <vPortExitCritical>
}
 8007f6e:	2001      	movs	r0, #1
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f72:	f104 0010 	add.w	r0, r4, #16
 8007f76:	f7ff fd59 	bl	8007a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f7e:	f7ff fd55 	bl	8007a2c <vListInitialise>
 8007f82:	e7f2      	b.n	8007f6a <xQueueGenericReset+0x68>

08007f84 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8007f84:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8007f86:	461c      	mov	r4, r3
 8007f88:	b953      	cbnz	r3, 8007fa0 <xQueueGenericCreateStatic.part.0+0x1c>
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	b672      	cpsid	i
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	b662      	cpsie	i
 8007f9e:	e7fe      	b.n	8007f9e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fa0:	b15a      	cbz	r2, 8007fba <xQueueGenericCreateStatic.part.0+0x36>
 8007fa2:	b9b1      	cbnz	r1, 8007fd2 <xQueueGenericCreateStatic.part.0+0x4e>
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	b672      	cpsid	i
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	b662      	cpsie	i
 8007fb8:	e7fe      	b.n	8007fb8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fba:	b151      	cbz	r1, 8007fd2 <xQueueGenericCreateStatic.part.0+0x4e>
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fd2:	2350      	movs	r3, #80	; 0x50
 8007fd4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	2b50      	cmp	r3, #80	; 0x50
 8007fda:	d00a      	beq.n	8007ff2 <xQueueGenericCreateStatic.part.0+0x6e>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	b672      	cpsid	i
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	b662      	cpsie	i
 8007ff0:	e7fe      	b.n	8007ff0 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ff2:	2900      	cmp	r1, #0
 8007ff4:	bf08      	it	eq
 8007ff6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ff8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008002:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008006:	4619      	mov	r1, r3
 8008008:	4620      	mov	r0, r4
 800800a:	f7ff ff7a 	bl	8007f02 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800800e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8008012:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008014:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8008018:	b002      	add	sp, #8
 800801a:	bd10      	pop	{r4, pc}

0800801c <xQueueGenericCreateStatic>:
	{
 800801c:	b410      	push	{r4}
 800801e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008022:	b950      	cbnz	r0, 800803a <xQueueGenericCreateStatic+0x1e>
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	b672      	cpsid	i
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	b662      	cpsie	i
 8008038:	e7fe      	b.n	8008038 <xQueueGenericCreateStatic+0x1c>
 800803a:	9401      	str	r4, [sp, #4]
	}
 800803c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008040:	f7ff bfa0 	b.w	8007f84 <xQueueGenericCreateStatic.part.0>

08008044 <xQueueGenericCreate>:
	{
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	460d      	mov	r5, r1
 8008048:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800804a:	4606      	mov	r6, r0
 800804c:	b950      	cbnz	r0, 8008064 <xQueueGenericCreate+0x20>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	b672      	cpsid	i
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	b662      	cpsie	i
 8008062:	e7fe      	b.n	8008062 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008064:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008066:	3050      	adds	r0, #80	; 0x50
 8008068:	f7ff fc0e 	bl	8007888 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800806c:	4604      	mov	r4, r0
 800806e:	b170      	cbz	r0, 800808e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008070:	2300      	movs	r3, #0
 8008072:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008076:	b165      	cbz	r5, 8008092 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008078:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800807c:	2101      	movs	r1, #1
 800807e:	4620      	mov	r0, r4
 8008080:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008082:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008086:	f7ff ff3c 	bl	8007f02 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800808a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800808e:	4620      	mov	r0, r4
 8008090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008092:	4603      	mov	r3, r0
 8008094:	e7f2      	b.n	800807c <xQueueGenericCreate+0x38>

08008096 <xQueueCreateCountingSemaphoreStatic>:
	{
 8008096:	b513      	push	{r0, r1, r4, lr}
 8008098:	4613      	mov	r3, r2
 800809a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800809c:	b950      	cbnz	r0, 80080b4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	b672      	cpsid	i
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	b662      	cpsie	i
 80080b2:	e7fe      	b.n	80080b2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080b4:	4288      	cmp	r0, r1
 80080b6:	d20a      	bcs.n	80080ce <xQueueCreateCountingSemaphoreStatic+0x38>
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	b672      	cpsid	i
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	b662      	cpsie	i
 80080cc:	e7fe      	b.n	80080cc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080ce:	2202      	movs	r2, #2
 80080d0:	9200      	str	r2, [sp, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	4611      	mov	r1, r2
 80080d6:	f7ff ffa1 	bl	800801c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80080da:	b100      	cbz	r0, 80080de <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080dc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80080de:	b002      	add	sp, #8
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <xQueueCreateCountingSemaphore>:
	{
 80080e2:	b510      	push	{r4, lr}
 80080e4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80080e6:	b950      	cbnz	r0, 80080fe <xQueueCreateCountingSemaphore+0x1c>
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	b672      	cpsid	i
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	b662      	cpsie	i
 80080fc:	e7fe      	b.n	80080fc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080fe:	4288      	cmp	r0, r1
 8008100:	d20a      	bcs.n	8008118 <xQueueCreateCountingSemaphore+0x36>
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	b672      	cpsid	i
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	b662      	cpsie	i
 8008116:	e7fe      	b.n	8008116 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008118:	2202      	movs	r2, #2
 800811a:	2100      	movs	r1, #0
 800811c:	f7ff ff92 	bl	8008044 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008120:	b100      	cbz	r0, 8008124 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008122:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8008124:	bd10      	pop	{r4, pc}

08008126 <xQueueGenericSend>:
{
 8008126:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800812a:	b085      	sub	sp, #20
 800812c:	4688      	mov	r8, r1
 800812e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008130:	4604      	mov	r4, r0
{
 8008132:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008134:	b950      	cbnz	r0, 800814c <xQueueGenericSend+0x26>
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	b672      	cpsid	i
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	b662      	cpsie	i
 800814a:	e7fe      	b.n	800814a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800814c:	b961      	cbnz	r1, 8008168 <xQueueGenericSend+0x42>
 800814e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008150:	b153      	cbz	r3, 8008168 <xQueueGenericSend+0x42>
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	b672      	cpsid	i
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	b662      	cpsie	i
 8008166:	e7fe      	b.n	8008166 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008168:	2f02      	cmp	r7, #2
 800816a:	d10d      	bne.n	8008188 <xQueueGenericSend+0x62>
 800816c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d00a      	beq.n	8008188 <xQueueGenericSend+0x62>
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	b672      	cpsid	i
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	b662      	cpsie	i
 8008186:	e7fe      	b.n	8008186 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008188:	f001 f88c 	bl	80092a4 <xTaskGetSchedulerState>
 800818c:	4606      	mov	r6, r0
 800818e:	b960      	cbnz	r0, 80081aa <xQueueGenericSend+0x84>
 8008190:	9b01      	ldr	r3, [sp, #4]
 8008192:	b15b      	cbz	r3, 80081ac <xQueueGenericSend+0x86>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	b672      	cpsid	i
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	b662      	cpsie	i
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericSend+0x82>
 80081aa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80081ac:	f04f 0900 	mov.w	r9, #0
 80081b0:	e037      	b.n	8008222 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80081b2:	9d01      	ldr	r5, [sp, #4]
 80081b4:	b91d      	cbnz	r5, 80081be <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80081b6:	f7ff fd09 	bl	8007bcc <vPortExitCritical>
			return errQUEUE_FULL;
 80081ba:	2000      	movs	r0, #0
 80081bc:	e052      	b.n	8008264 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80081be:	b916      	cbnz	r6, 80081c6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c0:	a802      	add	r0, sp, #8
 80081c2:	f001 f817 	bl	80091f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80081c6:	f7ff fd01 	bl	8007bcc <vPortExitCritical>
		vTaskSuspendAll();
 80081ca:	f000 fd9b 	bl	8008d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ce:	f7ff fcd9 	bl	8007b84 <vPortEnterCritical>
 80081d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80081d6:	2bff      	cmp	r3, #255	; 0xff
 80081d8:	d101      	bne.n	80081de <xQueueGenericSend+0xb8>
 80081da:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80081de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80081e2:	2bff      	cmp	r3, #255	; 0xff
 80081e4:	d101      	bne.n	80081ea <xQueueGenericSend+0xc4>
 80081e6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80081ea:	f7ff fcef 	bl	8007bcc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081ee:	a901      	add	r1, sp, #4
 80081f0:	a802      	add	r0, sp, #8
 80081f2:	f001 f80b 	bl	800920c <xTaskCheckForTimeOut>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d14a      	bne.n	8008290 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081fa:	f7ff fcc3 	bl	8007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008202:	429a      	cmp	r2, r3
 8008204:	d131      	bne.n	800826a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008206:	f7ff fce1 	bl	8007bcc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800820a:	9901      	ldr	r1, [sp, #4]
 800820c:	f104 0010 	add.w	r0, r4, #16
 8008210:	f000 ff6e 	bl	80090f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff fe3c 	bl	8007e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800821a:	f000 fe19 	bl	8008e50 <xTaskResumeAll>
 800821e:	b360      	cbz	r0, 800827a <xQueueGenericSend+0x154>
 8008220:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008222:	f7ff fcaf 	bl	8007b84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008226:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800822a:	429a      	cmp	r2, r3
 800822c:	d301      	bcc.n	8008232 <xQueueGenericSend+0x10c>
 800822e:	2f02      	cmp	r7, #2
 8008230:	d1bf      	bne.n	80081b2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008232:	463a      	mov	r2, r7
 8008234:	4641      	mov	r1, r8
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff fde1 	bl	8007dfe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823e:	b11b      	cbz	r3, 8008248 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008240:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008244:	f000 ff90 	bl	8009168 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008248:	b148      	cbz	r0, 800825e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800824a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008252:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800825e:	f7ff fcb5 	bl	8007bcc <vPortExitCritical>
				return pdPASS;
 8008262:	2001      	movs	r0, #1
}
 8008264:	b005      	add	sp, #20
 8008266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800826a:	f7ff fcaf 	bl	8007bcc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800826e:	4620      	mov	r0, r4
 8008270:	f7ff fe0f 	bl	8007e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008274:	f000 fdec 	bl	8008e50 <xTaskResumeAll>
 8008278:	e7d2      	b.n	8008220 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800827a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	e7c7      	b.n	8008220 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8008290:	4620      	mov	r0, r4
 8008292:	f7ff fdfe 	bl	8007e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008296:	f000 fddb 	bl	8008e50 <xTaskResumeAll>
 800829a:	e78e      	b.n	80081ba <xQueueGenericSend+0x94>

0800829c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800829c:	2200      	movs	r2, #0
	{
 800829e:	460b      	mov	r3, r1
 80082a0:	b513      	push	{r0, r1, r4, lr}
 80082a2:	4611      	mov	r1, r2
 80082a4:	9000      	str	r0, [sp, #0]
 80082a6:	2001      	movs	r0, #1
 80082a8:	f7ff fe6c 	bl	8007f84 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 80082ac:	4604      	mov	r4, r0
 80082ae:	b138      	cbz	r0, 80082c0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80082b0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082b2:	461a      	mov	r2, r3
 80082b4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80082b6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80082b8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80082ba:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082bc:	f7ff ff33 	bl	8008126 <xQueueGenericSend>
	}
 80082c0:	4620      	mov	r0, r4
 80082c2:	b002      	add	sp, #8
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <xQueueGiveMutexRecursive>:
	{
 80082c6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80082c8:	4604      	mov	r4, r0
 80082ca:	b950      	cbnz	r0, 80082e2 <xQueueGiveMutexRecursive+0x1c>
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	b672      	cpsid	i
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	b662      	cpsie	i
 80082e0:	e7fe      	b.n	80082e0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80082e2:	6885      	ldr	r5, [r0, #8]
 80082e4:	f000 ffd8 	bl	8009298 <xTaskGetCurrentTaskHandle>
 80082e8:	4285      	cmp	r5, r0
 80082ea:	d10a      	bne.n	8008302 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80082ec:	68e3      	ldr	r3, [r4, #12]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80082f2:	b923      	cbnz	r3, 80082fe <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80082f4:	461a      	mov	r2, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7ff ff14 	bl	8008126 <xQueueGenericSend>
			xReturn = pdPASS;
 80082fe:	2001      	movs	r0, #1
		return xReturn;
 8008300:	e000      	b.n	8008304 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8008302:	2000      	movs	r0, #0
	}
 8008304:	bd38      	pop	{r3, r4, r5, pc}

08008306 <xQueueCreateMutex>:
	{
 8008306:	b570      	push	{r4, r5, r6, lr}
 8008308:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800830a:	2050      	movs	r0, #80	; 0x50
 800830c:	f7ff fabc 	bl	8007888 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008310:	4604      	mov	r4, r0
 8008312:	b198      	cbz	r0, 800833c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008314:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008316:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008318:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800831a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800831e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008322:	f7ff fdee 	bl	8007f02 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008326:	462b      	mov	r3, r5
 8008328:	462a      	mov	r2, r5
 800832a:	4629      	mov	r1, r5
 800832c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800832e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008332:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008334:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008336:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008338:	f7ff fef5 	bl	8008126 <xQueueGenericSend>
	}
 800833c:	4620      	mov	r0, r4
 800833e:	bd70      	pop	{r4, r5, r6, pc}

08008340 <xQueueGenericSendFromISR>:
{
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	4689      	mov	r9, r1
 8008346:	4690      	mov	r8, r2
 8008348:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800834a:	4604      	mov	r4, r0
 800834c:	b950      	cbnz	r0, 8008364 <xQueueGenericSendFromISR+0x24>
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	b672      	cpsid	i
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	b662      	cpsie	i
 8008362:	e7fe      	b.n	8008362 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008364:	b961      	cbnz	r1, 8008380 <xQueueGenericSendFromISR+0x40>
 8008366:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008368:	b153      	cbz	r3, 8008380 <xQueueGenericSendFromISR+0x40>
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	b672      	cpsid	i
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	b662      	cpsie	i
 800837e:	e7fe      	b.n	800837e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008380:	2f02      	cmp	r7, #2
 8008382:	d10d      	bne.n	80083a0 <xQueueGenericSendFromISR+0x60>
 8008384:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d00a      	beq.n	80083a0 <xQueueGenericSendFromISR+0x60>
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	b672      	cpsid	i
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	b662      	cpsie	i
 800839e:	e7fe      	b.n	800839e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083a0:	f7ff fcf0 	bl	8007d84 <vPortValidateInterruptPriority>
	__asm volatile
 80083a4:	f3ef 8611 	mrs	r6, BASEPRI
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d301      	bcc.n	80083c8 <xQueueGenericSendFromISR+0x88>
 80083c4:	2f02      	cmp	r7, #2
 80083c6:	d122      	bne.n	800840e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80083c8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083cc:	463a      	mov	r2, r7
 80083ce:	4649      	mov	r1, r9
 80083d0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80083d2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d4:	f7ff fd13 	bl	8007dfe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80083d8:	1c6b      	adds	r3, r5, #1
 80083da:	d113      	bne.n	8008404 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083de:	b90b      	cbnz	r3, 80083e4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 80083e0:	2001      	movs	r0, #1
 80083e2:	e00b      	b.n	80083fc <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083e8:	f000 febe 	bl	8009168 <xTaskRemoveFromEventList>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d0f7      	beq.n	80083e0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	d0f4      	beq.n	80083e0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083f6:	2001      	movs	r0, #1
 80083f8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80083fc:	f386 8811 	msr	BASEPRI, r6
}
 8008400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008404:	3501      	adds	r5, #1
 8008406:	b26d      	sxtb	r5, r5
 8008408:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800840c:	e7e8      	b.n	80083e0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800840e:	2000      	movs	r0, #0
 8008410:	e7f4      	b.n	80083fc <xQueueGenericSendFromISR+0xbc>

08008412 <xQueueGiveFromISR>:
{
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008416:	4604      	mov	r4, r0
 8008418:	b950      	cbnz	r0, 8008430 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	b672      	cpsid	i
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	b662      	cpsie	i
 800842e:	e7fe      	b.n	800842e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008430:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008432:	b153      	cbz	r3, 800844a <xQueueGiveFromISR+0x38>
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	b672      	cpsid	i
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	b662      	cpsie	i
 8008448:	e7fe      	b.n	8008448 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800844a:	6803      	ldr	r3, [r0, #0]
 800844c:	b963      	cbnz	r3, 8008468 <xQueueGiveFromISR+0x56>
 800844e:	6883      	ldr	r3, [r0, #8]
 8008450:	b153      	cbz	r3, 8008468 <xQueueGiveFromISR+0x56>
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	b672      	cpsid	i
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	b662      	cpsie	i
 8008466:	e7fe      	b.n	8008466 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008468:	f7ff fc8c 	bl	8007d84 <vPortValidateInterruptPriority>
	__asm volatile
 800846c:	f3ef 8611 	mrs	r6, BASEPRI
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	b672      	cpsid	i
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008484:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008486:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008488:	4293      	cmp	r3, r2
 800848a:	d91c      	bls.n	80084c6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800848c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008490:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008492:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008494:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008496:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008498:	d110      	bne.n	80084bc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800849a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800849c:	b90b      	cbnz	r3, 80084a2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800849e:	2001      	movs	r0, #1
 80084a0:	e009      	b.n	80084b6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084a6:	f000 fe5f 	bl	8009168 <xTaskRemoveFromEventList>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d0f7      	beq.n	800849e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	d0f5      	beq.n	800849e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084b2:	2001      	movs	r0, #1
 80084b4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80084b6:	f386 8811 	msr	BASEPRI, r6
}
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084bc:	3301      	adds	r3, #1
 80084be:	b25b      	sxtb	r3, r3
 80084c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084c4:	e7eb      	b.n	800849e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80084c6:	2000      	movs	r0, #0
 80084c8:	e7f5      	b.n	80084b6 <xQueueGiveFromISR+0xa4>

080084ca <xQueueReceive>:
{
 80084ca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80084ce:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80084d0:	4604      	mov	r4, r0
{
 80084d2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80084d4:	b950      	cbnz	r0, 80084ec <xQueueReceive+0x22>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	b672      	cpsid	i
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	b662      	cpsie	i
 80084ea:	e7fe      	b.n	80084ea <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ec:	b961      	cbnz	r1, 8008508 <xQueueReceive+0x3e>
 80084ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80084f0:	b153      	cbz	r3, 8008508 <xQueueReceive+0x3e>
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	b672      	cpsid	i
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	b662      	cpsie	i
 8008506:	e7fe      	b.n	8008506 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008508:	f000 fecc 	bl	80092a4 <xTaskGetSchedulerState>
 800850c:	4606      	mov	r6, r0
 800850e:	b960      	cbnz	r0, 800852a <xQueueReceive+0x60>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	b15b      	cbz	r3, 800852c <xQueueReceive+0x62>
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	b672      	cpsid	i
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	b662      	cpsie	i
 8008528:	e7fe      	b.n	8008528 <xQueueReceive+0x5e>
 800852a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800852c:	f04f 0800 	mov.w	r8, #0
 8008530:	e03d      	b.n	80085ae <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008532:	9d01      	ldr	r5, [sp, #4]
 8008534:	b91d      	cbnz	r5, 800853e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8008536:	f7ff fb49 	bl	8007bcc <vPortExitCritical>
				return errQUEUE_EMPTY;
 800853a:	2000      	movs	r0, #0
 800853c:	e056      	b.n	80085ec <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800853e:	b916      	cbnz	r6, 8008546 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008540:	a802      	add	r0, sp, #8
 8008542:	f000 fe57 	bl	80091f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008546:	f7ff fb41 	bl	8007bcc <vPortExitCritical>
		vTaskSuspendAll();
 800854a:	f000 fbdb 	bl	8008d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800854e:	f7ff fb19 	bl	8007b84 <vPortEnterCritical>
 8008552:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008556:	2bff      	cmp	r3, #255	; 0xff
 8008558:	d101      	bne.n	800855e <xQueueReceive+0x94>
 800855a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800855e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008562:	2bff      	cmp	r3, #255	; 0xff
 8008564:	d101      	bne.n	800856a <xQueueReceive+0xa0>
 8008566:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800856a:	f7ff fb2f 	bl	8007bcc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800856e:	a901      	add	r1, sp, #4
 8008570:	a802      	add	r0, sp, #8
 8008572:	f000 fe4b 	bl	800920c <xTaskCheckForTimeOut>
 8008576:	2800      	cmp	r0, #0
 8008578:	d141      	bne.n	80085fe <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff fc34 	bl	8007de8 <prvIsQueueEmpty>
 8008580:	b3b8      	cbz	r0, 80085f2 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008582:	9901      	ldr	r1, [sp, #4]
 8008584:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008588:	f000 fdb2 	bl	80090f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800858c:	4620      	mov	r0, r4
 800858e:	f7ff fc80 	bl	8007e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008592:	f000 fc5d 	bl	8008e50 <xTaskResumeAll>
 8008596:	b948      	cbnz	r0, 80085ac <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8008598:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80085ae:	f7ff fae9 	bl	8007b84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b4:	2d00      	cmp	r5, #0
 80085b6:	d0bc      	beq.n	8008532 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085b8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ba:	4639      	mov	r1, r7
 80085bc:	4620      	mov	r0, r4
 80085be:	f7ff fc53 	bl	8007e68 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085c2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	b173      	cbz	r3, 80085e6 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085c8:	f104 0010 	add.w	r0, r4, #16
 80085cc:	f000 fdcc 	bl	8009168 <xTaskRemoveFromEventList>
 80085d0:	b148      	cbz	r0, 80085e6 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 80085d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80085e6:	f7ff faf1 	bl	8007bcc <vPortExitCritical>
				return pdPASS;
 80085ea:	2001      	movs	r0, #1
}
 80085ec:	b004      	add	sp, #16
 80085ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff fc4d 	bl	8007e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085f8:	f000 fc2a 	bl	8008e50 <xTaskResumeAll>
 80085fc:	e7d6      	b.n	80085ac <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 80085fe:	4620      	mov	r0, r4
 8008600:	f7ff fc47 	bl	8007e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008604:	f000 fc24 	bl	8008e50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008608:	4620      	mov	r0, r4
 800860a:	f7ff fbed 	bl	8007de8 <prvIsQueueEmpty>
 800860e:	2800      	cmp	r0, #0
 8008610:	d0cc      	beq.n	80085ac <xQueueReceive+0xe2>
 8008612:	e792      	b.n	800853a <xQueueReceive+0x70>

08008614 <xQueueSemaphoreTake>:
{
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008618:	4604      	mov	r4, r0
{
 800861a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800861c:	b950      	cbnz	r0, 8008634 <xQueueSemaphoreTake+0x20>
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	b672      	cpsid	i
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	b662      	cpsie	i
 8008632:	e7fe      	b.n	8008632 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008634:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008636:	b155      	cbz	r5, 800864e <xQueueSemaphoreTake+0x3a>
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	b672      	cpsid	i
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	b662      	cpsie	i
 800864c:	e7fe      	b.n	800864c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800864e:	f000 fe29 	bl	80092a4 <xTaskGetSchedulerState>
 8008652:	4606      	mov	r6, r0
 8008654:	b960      	cbnz	r0, 8008670 <xQueueSemaphoreTake+0x5c>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	b16b      	cbz	r3, 8008676 <xQueueSemaphoreTake+0x62>
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	b672      	cpsid	i
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	b662      	cpsie	i
 800866e:	e7fe      	b.n	800866e <xQueueSemaphoreTake+0x5a>
 8008670:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008672:	2700      	movs	r7, #0
 8008674:	e055      	b.n	8008722 <xQueueSemaphoreTake+0x10e>
 8008676:	4605      	mov	r5, r0
 8008678:	e7fb      	b.n	8008672 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	b973      	cbnz	r3, 800869c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800867e:	b155      	cbz	r5, 8008696 <xQueueSemaphoreTake+0x82>
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	b672      	cpsid	i
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	b662      	cpsie	i
 8008694:	e7fe      	b.n	8008694 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8008696:	f7ff fa99 	bl	8007bcc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800869a:	e062      	b.n	8008762 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800869c:	b916      	cbnz	r6, 80086a4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800869e:	a802      	add	r0, sp, #8
 80086a0:	f000 fda8 	bl	80091f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80086a4:	f7ff fa92 	bl	8007bcc <vPortExitCritical>
		vTaskSuspendAll();
 80086a8:	f000 fb2c 	bl	8008d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ac:	f7ff fa6a 	bl	8007b84 <vPortEnterCritical>
 80086b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80086b4:	2bff      	cmp	r3, #255	; 0xff
 80086b6:	d101      	bne.n	80086bc <xQueueSemaphoreTake+0xa8>
 80086b8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80086bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80086c0:	2bff      	cmp	r3, #255	; 0xff
 80086c2:	d101      	bne.n	80086c8 <xQueueSemaphoreTake+0xb4>
 80086c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086c8:	f7ff fa80 	bl	8007bcc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086cc:	a901      	add	r1, sp, #4
 80086ce:	a802      	add	r0, sp, #8
 80086d0:	f000 fd9c 	bl	800920c <xTaskCheckForTimeOut>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d14d      	bne.n	8008774 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086d8:	4620      	mov	r0, r4
 80086da:	f7ff fb85 	bl	8007de8 <prvIsQueueEmpty>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d042      	beq.n	8008768 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	b93b      	cbnz	r3, 80086f6 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 80086e6:	f7ff fa4d 	bl	8007b84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086ea:	68a0      	ldr	r0, [r4, #8]
 80086ec:	f000 fdea 	bl	80092c4 <xTaskPriorityInherit>
 80086f0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80086f2:	f7ff fa6b 	bl	8007bcc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086f6:	9901      	ldr	r1, [sp, #4]
 80086f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80086fc:	f000 fcf8 	bl	80090f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fbc6 	bl	8007e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008706:	f000 fba3 	bl	8008e50 <xTaskResumeAll>
 800870a:	b948      	cbnz	r0, 8008720 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800870c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008714:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008722:	f7ff fa2f 	bl	8007b84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0a6      	beq.n	800867a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800872c:	3b01      	subs	r3, #1
 800872e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	b913      	cbnz	r3, 800873a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008734:	f000 fea4 	bl	8009480 <pvTaskIncrementMutexHeldCount>
 8008738:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800873a:	6923      	ldr	r3, [r4, #16]
 800873c:	b173      	cbz	r3, 800875c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800873e:	f104 0010 	add.w	r0, r4, #16
 8008742:	f000 fd11 	bl	8009168 <xTaskRemoveFromEventList>
 8008746:	b148      	cbz	r0, 800875c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8008748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008750:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800875c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800875e:	f7ff fa35 	bl	8007bcc <vPortExitCritical>
}
 8008762:	4628      	mov	r0, r5
 8008764:	b005      	add	sp, #20
 8008766:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8008768:	4620      	mov	r0, r4
 800876a:	f7ff fb92 	bl	8007e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800876e:	f000 fb6f 	bl	8008e50 <xTaskResumeAll>
 8008772:	e7d5      	b.n	8008720 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8008774:	4620      	mov	r0, r4
 8008776:	f7ff fb8c 	bl	8007e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800877a:	f000 fb69 	bl	8008e50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800877e:	4620      	mov	r0, r4
 8008780:	f7ff fb32 	bl	8007de8 <prvIsQueueEmpty>
 8008784:	2800      	cmp	r0, #0
 8008786:	d0cb      	beq.n	8008720 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8008788:	2d00      	cmp	r5, #0
 800878a:	d0ea      	beq.n	8008762 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800878c:	f7ff f9fa 	bl	8007b84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008790:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008792:	b119      	cbz	r1, 800879c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008796:	6819      	ldr	r1, [r3, #0]
 8008798:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800879c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800879e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80087a0:	f000 fe18 	bl	80093d4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80087a4:	f7ff fa12 	bl	8007bcc <vPortExitCritical>
 80087a8:	e7db      	b.n	8008762 <xQueueSemaphoreTake+0x14e>

080087aa <xQueueTakeMutexRecursive>:
	{
 80087aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 80087ac:	4604      	mov	r4, r0
 80087ae:	b950      	cbnz	r0, 80087c6 <xQueueTakeMutexRecursive+0x1c>
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	b672      	cpsid	i
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	b662      	cpsie	i
 80087c4:	e7fe      	b.n	80087c4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80087c6:	6885      	ldr	r5, [r0, #8]
 80087c8:	9101      	str	r1, [sp, #4]
 80087ca:	f000 fd65 	bl	8009298 <xTaskGetCurrentTaskHandle>
 80087ce:	4285      	cmp	r5, r0
 80087d0:	9901      	ldr	r1, [sp, #4]
 80087d2:	d105      	bne.n	80087e0 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80087d4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80087d6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80087d8:	3301      	adds	r3, #1
 80087da:	60e3      	str	r3, [r4, #12]
	}
 80087dc:	b003      	add	sp, #12
 80087de:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff ff17 	bl	8008614 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d0f8      	beq.n	80087dc <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80087f0:	e7f4      	b.n	80087dc <xQueueTakeMutexRecursive+0x32>

080087f2 <xQueueReceiveFromISR>:
{
 80087f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f6:	4689      	mov	r9, r1
 80087f8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80087fa:	4605      	mov	r5, r0
 80087fc:	b950      	cbnz	r0, 8008814 <xQueueReceiveFromISR+0x22>
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	b672      	cpsid	i
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	b662      	cpsie	i
 8008812:	e7fe      	b.n	8008812 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008814:	b961      	cbnz	r1, 8008830 <xQueueReceiveFromISR+0x3e>
 8008816:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008818:	b153      	cbz	r3, 8008830 <xQueueReceiveFromISR+0x3e>
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	b672      	cpsid	i
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	b662      	cpsie	i
 800882e:	e7fe      	b.n	800882e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008830:	f7ff faa8 	bl	8007d84 <vPortValidateInterruptPriority>
	__asm volatile
 8008834:	f3ef 8711 	mrs	r7, BASEPRI
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	b672      	cpsid	i
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800884c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800884e:	b31c      	cbz	r4, 8008898 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008850:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008854:	4649      	mov	r1, r9
 8008856:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008858:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800885a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800885c:	f7ff fb04 	bl	8007e68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008860:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008862:	1c73      	adds	r3, r6, #1
 8008864:	d113      	bne.n	800888e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008866:	692b      	ldr	r3, [r5, #16]
 8008868:	b90b      	cbnz	r3, 800886e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800886a:	2001      	movs	r0, #1
 800886c:	e00b      	b.n	8008886 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800886e:	f105 0010 	add.w	r0, r5, #16
 8008872:	f000 fc79 	bl	8009168 <xTaskRemoveFromEventList>
 8008876:	2800      	cmp	r0, #0
 8008878:	d0f7      	beq.n	800886a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800887a:	f1b8 0f00 	cmp.w	r8, #0
 800887e:	d0f4      	beq.n	800886a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008880:	2001      	movs	r0, #1
 8008882:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008886:	f387 8811 	msr	BASEPRI, r7
}
 800888a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800888e:	3601      	adds	r6, #1
 8008890:	b276      	sxtb	r6, r6
 8008892:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008896:	e7e8      	b.n	800886a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8008898:	4620      	mov	r0, r4
 800889a:	e7f4      	b.n	8008886 <xQueueReceiveFromISR+0x94>

0800889c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800889c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800889e:	4a07      	ldr	r2, [pc, #28]	; (80088bc <vQueueAddToRegistry+0x20>)
	{
 80088a0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088a2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80088a6:	b92c      	cbnz	r4, 80088b4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088b0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088b2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088b4:	3301      	adds	r3, #1
 80088b6:	2b08      	cmp	r3, #8
 80088b8:	d1f3      	bne.n	80088a2 <vQueueAddToRegistry+0x6>
 80088ba:	e7fa      	b.n	80088b2 <vQueueAddToRegistry+0x16>
 80088bc:	20014b9c 	.word	0x20014b9c

080088c0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088c0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088c2:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <vQueueUnregisterQueue+0x24>)
	{
 80088c4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088c6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80088ca:	684c      	ldr	r4, [r1, #4]
 80088cc:	4284      	cmp	r4, r0
 80088ce:	d104      	bne.n	80088da <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088d0:	2000      	movs	r0, #0
 80088d2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088d6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088d8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088da:	3301      	adds	r3, #1
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d1f2      	bne.n	80088c6 <vQueueUnregisterQueue+0x6>
 80088e0:	e7fa      	b.n	80088d8 <vQueueUnregisterQueue+0x18>
 80088e2:	bf00      	nop
 80088e4:	20014b9c 	.word	0x20014b9c

080088e8 <vQueueDelete>:
{
 80088e8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80088ea:	4604      	mov	r4, r0
 80088ec:	b950      	cbnz	r0, 8008904 <vQueueDelete+0x1c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	b672      	cpsid	i
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	b662      	cpsie	i
 8008902:	e7fe      	b.n	8008902 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8008904:	f7ff ffdc 	bl	80088c0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008908:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800890c:	b923      	cbnz	r3, 8008918 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800890e:	4620      	mov	r0, r4
}
 8008910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008914:	f7ff b84e 	b.w	80079b4 <vPortFree>
}
 8008918:	bd10      	pop	{r4, pc}

0800891a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800891a:	b570      	push	{r4, r5, r6, lr}
 800891c:	4604      	mov	r4, r0
 800891e:	460d      	mov	r5, r1
 8008920:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008922:	f7ff f92f 	bl	8007b84 <vPortEnterCritical>
 8008926:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800892a:	2bff      	cmp	r3, #255	; 0xff
 800892c:	d102      	bne.n	8008934 <vQueueWaitForMessageRestricted+0x1a>
 800892e:	2300      	movs	r3, #0
 8008930:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008934:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008938:	2bff      	cmp	r3, #255	; 0xff
 800893a:	d102      	bne.n	8008942 <vQueueWaitForMessageRestricted+0x28>
 800893c:	2300      	movs	r3, #0
 800893e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008942:	f7ff f943 	bl	8007bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008948:	b92b      	cbnz	r3, 8008956 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800894a:	4632      	mov	r2, r6
 800894c:	4629      	mov	r1, r5
 800894e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008952:	f000 fbe9 	bl	8009128 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008956:	4620      	mov	r0, r4
	}
 8008958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800895c:	f7ff ba99 	b.w	8007e92 <prvUnlockQueue>

08008960 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008966:	f7ff f90d 	bl	8007b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800896a:	4b2f      	ldr	r3, [pc, #188]	; (8008a28 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800896c:	4e2f      	ldr	r6, [pc, #188]	; (8008a2c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4f2f      	ldr	r7, [pc, #188]	; (8008a30 <prvAddNewTaskToReadyList+0xd0>)
 8008972:	3201      	adds	r2, #1
 8008974:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008976:	6835      	ldr	r5, [r6, #0]
 8008978:	2d00      	cmp	r5, #0
 800897a:	d14a      	bne.n	8008a12 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800897c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d11f      	bne.n	80089c4 <prvAddNewTaskToReadyList+0x64>
 8008984:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008986:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008988:	4640      	mov	r0, r8
 800898a:	f7ff f84f 	bl	8007a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800898e:	f108 0814 	add.w	r8, r8, #20
 8008992:	2d38      	cmp	r5, #56	; 0x38
 8008994:	d1f7      	bne.n	8008986 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008996:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008a58 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800899a:	4d26      	ldr	r5, [pc, #152]	; (8008a34 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800899c:	4640      	mov	r0, r8
 800899e:	f7ff f845 	bl	8007a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089a2:	4628      	mov	r0, r5
 80089a4:	f7ff f842 	bl	8007a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089a8:	4823      	ldr	r0, [pc, #140]	; (8008a38 <prvAddNewTaskToReadyList+0xd8>)
 80089aa:	f7ff f83f 	bl	8007a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089ae:	4823      	ldr	r0, [pc, #140]	; (8008a3c <prvAddNewTaskToReadyList+0xdc>)
 80089b0:	f7ff f83c 	bl	8007a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089b4:	4822      	ldr	r0, [pc, #136]	; (8008a40 <prvAddNewTaskToReadyList+0xe0>)
 80089b6:	f7ff f839 	bl	8007a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089ba:	4b22      	ldr	r3, [pc, #136]	; (8008a44 <prvAddNewTaskToReadyList+0xe4>)
 80089bc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089c0:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <prvAddNewTaskToReadyList+0xe8>)
 80089c2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80089c4:	4a21      	ldr	r2, [pc, #132]	; (8008a4c <prvAddNewTaskToReadyList+0xec>)
 80089c6:	6813      	ldr	r3, [r2, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80089cc:	4a20      	ldr	r2, [pc, #128]	; (8008a50 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089ce:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089d4:	428b      	cmp	r3, r1
 80089d6:	d900      	bls.n	80089da <prvAddNewTaskToReadyList+0x7a>
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	2014      	movs	r0, #20
 80089dc:	1d21      	adds	r1, r4, #4
 80089de:	fb00 7003 	mla	r0, r0, r3, r7
 80089e2:	f7ff f831 	bl	8007a48 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80089e6:	f7ff f8f1 	bl	8007bcc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80089ea:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <prvAddNewTaskToReadyList+0xf4>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	b173      	cbz	r3, 8008a0e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d209      	bcs.n	8008a0e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80089fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80089fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	f3bf 8f6f 	isb	sy
}
 8008a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <prvAddNewTaskToReadyList+0xf4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1d4      	bne.n	80089c4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a1a:	6833      	ldr	r3, [r6, #0]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d8cf      	bhi.n	80089c4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008a24:	6034      	str	r4, [r6, #0]
 8008a26:	e7cd      	b.n	80089c4 <prvAddNewTaskToReadyList+0x64>
 8008a28:	20015048 	.word	0x20015048
 8008a2c:	20014bdc 	.word	0x20014bdc
 8008a30:	20014be8 	.word	0x20014be8
 8008a34:	20015074 	.word	0x20015074
 8008a38:	20015090 	.word	0x20015090
 8008a3c:	200150bc 	.word	0x200150bc
 8008a40:	200150a8 	.word	0x200150a8
 8008a44:	20014be0 	.word	0x20014be0
 8008a48:	20014be4 	.word	0x20014be4
 8008a4c:	20015058 	.word	0x20015058
 8008a50:	2001505c 	.word	0x2001505c
 8008a54:	200150a4 	.word	0x200150a4
 8008a58:	20015060 	.word	0x20015060

08008a5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008a60:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a62:	4e15      	ldr	r6, [pc, #84]	; (8008ab8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008a64:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008a66:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a68:	6830      	ldr	r0, [r6, #0]
 8008a6a:	3004      	adds	r0, #4
 8008a6c:	f7ff f80f 	bl	8007a8e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a70:	1c63      	adds	r3, r4, #1
 8008a72:	d107      	bne.n	8008a84 <prvAddCurrentTaskToDelayedList+0x28>
 8008a74:	b137      	cbz	r7, 8008a84 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a76:	6831      	ldr	r1, [r6, #0]
 8008a78:	4810      	ldr	r0, [pc, #64]	; (8008abc <prvAddCurrentTaskToDelayedList+0x60>)
 8008a7a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a80:	f7fe bfe2 	b.w	8007a48 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a84:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a86:	6833      	ldr	r3, [r6, #0]
 8008a88:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a8a:	d307      	bcc.n	8008a9c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a8c:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <prvAddCurrentTaskToDelayedList+0x64>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	6831      	ldr	r1, [r6, #0]
}
 8008a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a96:	3104      	adds	r1, #4
 8008a98:	f7fe bfe2 	b.w	8007a60 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0x68>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	6831      	ldr	r1, [r6, #0]
 8008aa2:	3104      	adds	r1, #4
 8008aa4:	f7fe ffdc 	bl	8007a60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	42a2      	cmp	r2, r4
 8008aae:	d900      	bls.n	8008ab2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8008ab0:	601c      	str	r4, [r3, #0]
}
 8008ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab4:	200150d0 	.word	0x200150d0
 8008ab8:	20014bdc 	.word	0x20014bdc
 8008abc:	200150a8 	.word	0x200150a8
 8008ac0:	20014be4 	.word	0x20014be4
 8008ac4:	20014be0 	.word	0x20014be0
 8008ac8:	20015088 	.word	0x20015088

08008acc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008acc:	4a06      	ldr	r2, [pc, #24]	; (8008ae8 <prvResetNextTaskUnblockTime+0x1c>)
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	6819      	ldr	r1, [r3, #0]
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <prvResetNextTaskUnblockTime+0x20>)
 8008ad4:	b919      	cbnz	r1, 8008ade <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ada:	601a      	str	r2, [r3, #0]
}
 8008adc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ade:	6812      	ldr	r2, [r2, #0]
 8008ae0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ae2:	68d2      	ldr	r2, [r2, #12]
 8008ae4:	6852      	ldr	r2, [r2, #4]
 8008ae6:	e7f8      	b.n	8008ada <prvResetNextTaskUnblockTime+0xe>
 8008ae8:	20014be0 	.word	0x20014be0
 8008aec:	20015088 	.word	0x20015088

08008af0 <prvDeleteTCB>:
	{
 8008af0:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008af2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008af6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008af8:	b93b      	cbnz	r3, 8008b0a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008afa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008afc:	f7fe ff5a 	bl	80079b4 <vPortFree>
				vPortFree( pxTCB );
 8008b00:	4620      	mov	r0, r4
	}
 8008b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008b06:	f7fe bf55 	b.w	80079b4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d0f9      	beq.n	8008b02 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d00a      	beq.n	8008b28 <prvDeleteTCB+0x38>
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	b672      	cpsid	i
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	b662      	cpsie	i
 8008b26:	e7fe      	b.n	8008b26 <prvDeleteTCB+0x36>
	}
 8008b28:	bd10      	pop	{r4, pc}
	...

08008b2c <prvIdleTask>:
{
 8008b2c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b2e:	4c14      	ldr	r4, [pc, #80]	; (8008b80 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b30:	4f14      	ldr	r7, [pc, #80]	; (8008b84 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008b32:	4d15      	ldr	r5, [pc, #84]	; (8008b88 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	b983      	cbnz	r3, 8008b5a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b38:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <prvIdleTask+0x60>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d909      	bls.n	8008b54 <prvIdleTask+0x28>
				taskYIELD();
 8008b40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008b54:	f7f8 f94c 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008b58:	e7eb      	b.n	8008b32 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008b5a:	f7ff f813 	bl	8007b84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b62:	1d30      	adds	r0, r6, #4
 8008b64:	f7fe ff93 	bl	8007a8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008b74:	f7ff f82a 	bl	8007bcc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff ffb9 	bl	8008af0 <prvDeleteTCB>
 8008b7e:	e7d9      	b.n	8008b34 <prvIdleTask+0x8>
 8008b80:	2001504c 	.word	0x2001504c
 8008b84:	200150bc 	.word	0x200150bc
 8008b88:	20015048 	.word	0x20015048
 8008b8c:	20014be8 	.word	0x20014be8

08008b90 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b94:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b98:	4606      	mov	r6, r0
 8008b9a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b9c:	21a5      	movs	r1, #165	; 0xa5
 8008b9e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008ba0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ba2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008ba6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008baa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008bac:	f020 fe8a 	bl	80298c4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008bb2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bb4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008bb8:	b3b5      	cbz	r5, 8008c28 <prvInitialiseNewTask.constprop.0+0x98>
 8008bba:	1e6b      	subs	r3, r5, #1
 8008bbc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008bc0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bc2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008bc6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8008bca:	b108      	cbz	r0, 8008bd0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bcc:	42ab      	cmp	r3, r5
 8008bce:	d1f8      	bne.n	8008bc2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bd6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008bd8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bdc:	1d20      	adds	r0, r4, #4
 8008bde:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008be0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008be4:	bf28      	it	cs
 8008be6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008be8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008bea:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bec:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bf0:	f7fe ff27 	bl	8007a42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bf4:	f104 0018 	add.w	r0, r4, #24
 8008bf8:	f7fe ff23 	bl	8007a42 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008bfc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c00:	463a      	mov	r2, r7
 8008c02:	4631      	mov	r1, r6
 8008c04:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c06:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c08:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c0a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008c0c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c10:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c14:	f7fe ff8e 	bl	8007b34 <pxPortInitialiseStack>
 8008c18:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008c1a:	f1b8 0f00 	cmp.w	r8, #0
 8008c1e:	d001      	beq.n	8008c24 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c20:	f8c8 4000 	str.w	r4, [r8]
}
 8008c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008c2c:	e7d3      	b.n	8008bd6 <prvInitialiseNewTask.constprop.0+0x46>

08008c2e <xTaskCreateStatic>:
	{
 8008c2e:	b570      	push	{r4, r5, r6, lr}
 8008c30:	b086      	sub	sp, #24
 8008c32:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008c36:	b955      	cbnz	r5, 8008c4e <xTaskCreateStatic+0x20>
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	b672      	cpsid	i
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	b662      	cpsie	i
 8008c4c:	e7fe      	b.n	8008c4c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008c4e:	b954      	cbnz	r4, 8008c66 <xTaskCreateStatic+0x38>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	b672      	cpsid	i
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	b662      	cpsie	i
 8008c64:	e7fe      	b.n	8008c64 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c66:	2660      	movs	r6, #96	; 0x60
 8008c68:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c6a:	9e05      	ldr	r6, [sp, #20]
 8008c6c:	2e60      	cmp	r6, #96	; 0x60
 8008c6e:	d00a      	beq.n	8008c86 <xTaskCreateStatic+0x58>
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	b672      	cpsid	i
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	b662      	cpsie	i
 8008c84:	e7fe      	b.n	8008c84 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c86:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c88:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c8a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c8c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c90:	ad04      	add	r5, sp, #16
 8008c92:	9402      	str	r4, [sp, #8]
 8008c94:	9501      	str	r5, [sp, #4]
 8008c96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c98:	9500      	str	r5, [sp, #0]
 8008c9a:	f7ff ff79 	bl	8008b90 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f7ff fe5e 	bl	8008960 <prvAddNewTaskToReadyList>
	}
 8008ca4:	9804      	ldr	r0, [sp, #16]
 8008ca6:	b006      	add	sp, #24
 8008ca8:	bd70      	pop	{r4, r5, r6, pc}

08008caa <xTaskCreate>:
	{
 8008caa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cae:	4607      	mov	r7, r0
 8008cb0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cb2:	0090      	lsls	r0, r2, #2
	{
 8008cb4:	4688      	mov	r8, r1
 8008cb6:	4616      	mov	r6, r2
 8008cb8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cba:	f7fe fde5 	bl	8007888 <pvPortMalloc>
			if( pxStack != NULL )
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b1e8      	cbz	r0, 8008cfe <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cc2:	2060      	movs	r0, #96	; 0x60
 8008cc4:	f7fe fde0 	bl	8007888 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008cc8:	4604      	mov	r4, r0
 8008cca:	b1a8      	cbz	r0, 8008cf8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ccc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008cce:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cd4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cda:	9002      	str	r0, [sp, #8]
 8008cdc:	4638      	mov	r0, r7
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	f7ff ff53 	bl	8008b90 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cea:	4620      	mov	r0, r4
 8008cec:	f7ff fe38 	bl	8008960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cf0:	2001      	movs	r0, #1
	}
 8008cf2:	b005      	add	sp, #20
 8008cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f7fe fe5b 	bl	80079b4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008d02:	e7f6      	b.n	8008cf2 <xTaskCreate+0x48>

08008d04 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008d04:	4a02      	ldr	r2, [pc, #8]	; (8008d10 <vTaskSuspendAll+0xc>)
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	6013      	str	r3, [r2, #0]
}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20015054 	.word	0x20015054

08008d14 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008d14:	4b01      	ldr	r3, [pc, #4]	; (8008d1c <xTaskGetTickCount+0x8>)
 8008d16:	6818      	ldr	r0, [r3, #0]
}
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	200150d0 	.word	0x200150d0

08008d20 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d20:	4b40      	ldr	r3, [pc, #256]	; (8008e24 <xTaskIncrementTick+0x104>)
 8008d22:	681b      	ldr	r3, [r3, #0]
{
 8008d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d174      	bne.n	8008e16 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d2c:	4b3e      	ldr	r3, [pc, #248]	; (8008e28 <xTaskIncrementTick+0x108>)
 8008d2e:	681d      	ldr	r5, [r3, #0]
 8008d30:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008d32:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d34:	b9cd      	cbnz	r5, 8008d6a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008d36:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <xTaskIncrementTick+0x10c>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	b152      	cbz	r2, 8008d54 <xTaskIncrementTick+0x34>
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	b672      	cpsid	i
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	b662      	cpsie	i
 8008d52:	e7fe      	b.n	8008d52 <xTaskIncrementTick+0x32>
 8008d54:	4a36      	ldr	r2, [pc, #216]	; (8008e30 <xTaskIncrementTick+0x110>)
 8008d56:	6819      	ldr	r1, [r3, #0]
 8008d58:	6810      	ldr	r0, [r2, #0]
 8008d5a:	6018      	str	r0, [r3, #0]
 8008d5c:	6011      	str	r1, [r2, #0]
 8008d5e:	4a35      	ldr	r2, [pc, #212]	; (8008e34 <xTaskIncrementTick+0x114>)
 8008d60:	6813      	ldr	r3, [r2, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	f7ff feb1 	bl	8008acc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d6a:	4e33      	ldr	r6, [pc, #204]	; (8008e38 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008d6c:	2400      	movs	r4, #0
 8008d6e:	4f33      	ldr	r7, [pc, #204]	; (8008e3c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d70:	6833      	ldr	r3, [r6, #0]
 8008d72:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008e48 <xTaskIncrementTick+0x128>
 8008d76:	42ab      	cmp	r3, r5
 8008d78:	d911      	bls.n	8008d9e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d7e:	2214      	movs	r2, #20
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	4353      	muls	r3, r2
 8008d84:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	bf28      	it	cs
 8008d8a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008d8c:	4b2c      	ldr	r3, [pc, #176]	; (8008e40 <xTaskIncrementTick+0x120>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008d90:	2b00      	cmp	r3, #0
}
 8008d92:	bf0c      	ite	eq
 8008d94:	4620      	moveq	r0, r4
 8008d96:	2001      	movne	r0, #1
 8008d98:	b003      	add	sp, #12
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d9e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008e2c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008da2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008e4c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da6:	f8d9 3000 	ldr.w	r3, [r9]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	b91b      	cbnz	r3, 8008db6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dae:	f04f 33ff 	mov.w	r3, #4294967295
 8008db2:	6033      	str	r3, [r6, #0]
					break;
 8008db4:	e7e1      	b.n	8008d7a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db6:	f8d9 3000 	ldr.w	r3, [r9]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dc0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008dc4:	4295      	cmp	r5, r2
 8008dc6:	d201      	bcs.n	8008dcc <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008dc8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dca:	e7d6      	b.n	8008d7a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dcc:	f10b 0104 	add.w	r1, fp, #4
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	9101      	str	r1, [sp, #4]
 8008dd4:	f7fe fe5b 	bl	8007a8e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dd8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008ddc:	9901      	ldr	r1, [sp, #4]
 8008dde:	b122      	cbz	r2, 8008dea <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008de0:	f10b 0018 	add.w	r0, fp, #24
 8008de4:	f7fe fe53 	bl	8007a8e <uxListRemove>
 8008de8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008dea:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008dee:	f8da 2000 	ldr.w	r2, [sl]
 8008df2:	4290      	cmp	r0, r2
 8008df4:	d901      	bls.n	8008dfa <xTaskIncrementTick+0xda>
 8008df6:	f8ca 0000 	str.w	r0, [sl]
 8008dfa:	2314      	movs	r3, #20
 8008dfc:	fb03 7000 	mla	r0, r3, r0, r7
 8008e00:	f7fe fe22 	bl	8007a48 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e04:	f8d8 1000 	ldr.w	r1, [r8]
 8008e08:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008e0c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	bf28      	it	cs
 8008e12:	2401      	movcs	r4, #1
 8008e14:	e7c7      	b.n	8008da6 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8008e16:	4a0b      	ldr	r2, [pc, #44]	; (8008e44 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008e18:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e7b4      	b.n	8008d8c <xTaskIncrementTick+0x6c>
 8008e22:	bf00      	nop
 8008e24:	20015054 	.word	0x20015054
 8008e28:	200150d0 	.word	0x200150d0
 8008e2c:	20014be0 	.word	0x20014be0
 8008e30:	20014be4 	.word	0x20014be4
 8008e34:	2001508c 	.word	0x2001508c
 8008e38:	20015088 	.word	0x20015088
 8008e3c:	20014be8 	.word	0x20014be8
 8008e40:	200150d4 	.word	0x200150d4
 8008e44:	20015050 	.word	0x20015050
 8008e48:	20014bdc 	.word	0x20014bdc
 8008e4c:	2001505c 	.word	0x2001505c

08008e50 <xTaskResumeAll>:
{
 8008e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008e52:	4c32      	ldr	r4, [pc, #200]	; (8008f1c <xTaskResumeAll+0xcc>)
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	b953      	cbnz	r3, 8008e6e <xTaskResumeAll+0x1e>
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	b672      	cpsid	i
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	b662      	cpsie	i
 8008e6c:	e7fe      	b.n	8008e6c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8008e6e:	f7fe fe89 	bl	8007b84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e78:	6824      	ldr	r4, [r4, #0]
 8008e7a:	b12c      	cbz	r4, 8008e88 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008e7c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008e7e:	f7fe fea5 	bl	8007bcc <vPortExitCritical>
}
 8008e82:	4620      	mov	r0, r4
 8008e84:	b003      	add	sp, #12
 8008e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e88:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <xTaskResumeAll+0xd0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f5      	beq.n	8008e7c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e90:	4d24      	ldr	r5, [pc, #144]	; (8008f24 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008e92:	4e25      	ldr	r6, [pc, #148]	; (8008f28 <xTaskResumeAll+0xd8>)
 8008e94:	4f25      	ldr	r7, [pc, #148]	; (8008f2c <xTaskResumeAll+0xdc>)
 8008e96:	e01e      	b.n	8008ed6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e98:	68eb      	ldr	r3, [r5, #12]
 8008e9a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e9c:	f104 0018 	add.w	r0, r4, #24
 8008ea0:	f7fe fdf5 	bl	8007a8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ea4:	1d21      	adds	r1, r4, #4
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	9101      	str	r1, [sp, #4]
 8008eaa:	f7fe fdf0 	bl	8007a8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008eb0:	6832      	ldr	r2, [r6, #0]
 8008eb2:	9901      	ldr	r1, [sp, #4]
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d900      	bls.n	8008eba <xTaskResumeAll+0x6a>
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	2014      	movs	r0, #20
 8008ebc:	fb00 7003 	mla	r0, r0, r3, r7
 8008ec0:	f7fe fdc2 	bl	8007a48 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <xTaskResumeAll+0xe0>)
 8008ec6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d302      	bcc.n	8008ed6 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8008ed0:	4b18      	ldr	r3, [pc, #96]	; (8008f34 <xTaskResumeAll+0xe4>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1dd      	bne.n	8008e98 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008edc:	b10c      	cbz	r4, 8008ee2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8008ede:	f7ff fdf5 	bl	8008acc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ee2:	4d15      	ldr	r5, [pc, #84]	; (8008f38 <xTaskResumeAll+0xe8>)
 8008ee4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ee6:	b144      	cbz	r4, 8008efa <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8008ee8:	4e12      	ldr	r6, [pc, #72]	; (8008f34 <xTaskResumeAll+0xe4>)
 8008eea:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008eec:	f7ff ff18 	bl	8008d20 <xTaskIncrementTick>
 8008ef0:	b100      	cbz	r0, 8008ef4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8008ef2:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ef4:	3c01      	subs	r4, #1
 8008ef6:	d1f9      	bne.n	8008eec <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8008ef8:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008efa:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <xTaskResumeAll+0xe4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0bc      	beq.n	8008e7c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8008f02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008f16:	2401      	movs	r4, #1
 8008f18:	e7b1      	b.n	8008e7e <xTaskResumeAll+0x2e>
 8008f1a:	bf00      	nop
 8008f1c:	20015054 	.word	0x20015054
 8008f20:	20015048 	.word	0x20015048
 8008f24:	20015090 	.word	0x20015090
 8008f28:	2001505c 	.word	0x2001505c
 8008f2c:	20014be8 	.word	0x20014be8
 8008f30:	20014bdc 	.word	0x20014bdc
 8008f34:	200150d4 	.word	0x200150d4
 8008f38:	20015050 	.word	0x20015050

08008f3c <vTaskDelay>:
	{
 8008f3c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f3e:	b950      	cbnz	r0, 8008f56 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008f40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	f3bf 8f6f 	isb	sy
	}
 8008f54:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008f56:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <vTaskDelay+0x48>)
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	b151      	cbz	r1, 8008f72 <vTaskDelay+0x36>
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	b672      	cpsid	i
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	b662      	cpsie	i
 8008f70:	e7fe      	b.n	8008f70 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8008f72:	f7ff fec7 	bl	8008d04 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f76:	f7ff fd71 	bl	8008a5c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008f7a:	f7ff ff69 	bl	8008e50 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d0de      	beq.n	8008f40 <vTaskDelay+0x4>
 8008f82:	e7e7      	b.n	8008f54 <vTaskDelay+0x18>
 8008f84:	20015054 	.word	0x20015054

08008f88 <vTaskSetApplicationTaskTag>:
	{
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	460d      	mov	r5, r1
		if( xTask == NULL )
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	b908      	cbnz	r0, 8008f94 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8008f90:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <vTaskSetApplicationTaskTag+0x1c>)
 8008f92:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8008f94:	f7fe fdf6 	bl	8007b84 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8008f98:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8008f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8008f9e:	f7fe be15 	b.w	8007bcc <vPortExitCritical>
 8008fa2:	bf00      	nop
 8008fa4:	20014bdc 	.word	0x20014bdc

08008fa8 <xTaskCallApplicationTaskHook>:
	{
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4608      	mov	r0, r1
		if( xTask == NULL )
 8008fac:	b90b      	cbnz	r3, 8008fb2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8008fae:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <xTaskCallApplicationTaskHook+0x14>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8008fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb4:	b103      	cbz	r3, 8008fb8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8008fb6:	4718      	bx	r3
	}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	4770      	bx	lr
 8008fbc:	20014bdc 	.word	0x20014bdc

08008fc0 <vTaskStartScheduler>:
{
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fc4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fc6:	aa07      	add	r2, sp, #28
 8008fc8:	a906      	add	r1, sp, #24
 8008fca:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fcc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fd0:	f7fe fc1e 	bl	8007810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fd4:	9b05      	ldr	r3, [sp, #20]
 8008fd6:	9a07      	ldr	r2, [sp, #28]
 8008fd8:	9302      	str	r3, [sp, #8]
 8008fda:	9b06      	ldr	r3, [sp, #24]
 8008fdc:	491b      	ldr	r1, [pc, #108]	; (800904c <vTaskStartScheduler+0x8c>)
 8008fde:	481c      	ldr	r0, [pc, #112]	; (8009050 <vTaskStartScheduler+0x90>)
 8008fe0:	e9cd 4300 	strd	r4, r3, [sp]
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	f7ff fe22 	bl	8008c2e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008fea:	b360      	cbz	r0, 8009046 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 8008fec:	f000 faa6 	bl	800953c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008ff0:	2801      	cmp	r0, #1
 8008ff2:	d11b      	bne.n	800902c <vTaskStartScheduler+0x6c>
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	b672      	cpsid	i
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8009008:	f04f 32ff 	mov.w	r2, #4294967295
 800900c:	4b11      	ldr	r3, [pc, #68]	; (8009054 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 800900e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8009010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009012:	4b11      	ldr	r3, [pc, #68]	; (8009058 <vTaskStartScheduler+0x98>)
 8009014:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <vTaskStartScheduler+0x9c>)
 8009018:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800901a:	4b11      	ldr	r3, [pc, #68]	; (8009060 <vTaskStartScheduler+0xa0>)
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f7ff ffc3 	bl	8008fa8 <xTaskCallApplicationTaskHook>
}
 8009022:	b008      	add	sp, #32
 8009024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009028:	f7fe be46 	b.w	8007cb8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800902c:	3001      	adds	r0, #1
 800902e:	d10a      	bne.n	8009046 <vTaskStartScheduler+0x86>
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	b672      	cpsid	i
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	b662      	cpsie	i
 8009044:	e7fe      	b.n	8009044 <vTaskStartScheduler+0x84>
}
 8009046:	b008      	add	sp, #32
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	0802cfdc 	.word	0x0802cfdc
 8009050:	08008b2d 	.word	0x08008b2d
 8009054:	20015088 	.word	0x20015088
 8009058:	200150a4 	.word	0x200150a4
 800905c:	200150d0 	.word	0x200150d0
 8009060:	20014bdc 	.word	0x20014bdc

08009064 <vTaskSwitchContext>:
{
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009066:	4b1d      	ldr	r3, [pc, #116]	; (80090dc <vTaskSwitchContext+0x78>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <vTaskSwitchContext+0x7c>)
 800906c:	b112      	cbz	r2, 8009074 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800906e:	2201      	movs	r2, #1
 8009070:	601a      	str	r2, [r3, #0]
}
 8009072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8009074:	4c1b      	ldr	r4, [pc, #108]	; (80090e4 <vTaskSwitchContext+0x80>)
 8009076:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009078:	4e1b      	ldr	r6, [pc, #108]	; (80090e8 <vTaskSwitchContext+0x84>)
 800907a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800907c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	f7ff ff92 	bl	8008fa8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009084:	6832      	ldr	r2, [r6, #0]
 8009086:	4919      	ldr	r1, [pc, #100]	; (80090ec <vTaskSwitchContext+0x88>)
 8009088:	fb07 f302 	mul.w	r3, r7, r2
 800908c:	58cd      	ldr	r5, [r1, r3]
 800908e:	18c8      	adds	r0, r1, r3
 8009090:	b1ad      	cbz	r5, 80090be <vTaskSwitchContext+0x5a>
 8009092:	6845      	ldr	r5, [r0, #4]
 8009094:	3308      	adds	r3, #8
 8009096:	686d      	ldr	r5, [r5, #4]
 8009098:	440b      	add	r3, r1
 800909a:	429d      	cmp	r5, r3
 800909c:	6045      	str	r5, [r0, #4]
 800909e:	bf04      	itt	eq
 80090a0:	686b      	ldreq	r3, [r5, #4]
 80090a2:	6043      	streq	r3, [r0, #4]
 80090a4:	2314      	movs	r3, #20
 80090a6:	fb03 1102 	mla	r1, r3, r2, r1
 80090aa:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 80090ac:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80090b4:	6820      	ldr	r0, [r4, #0]
}
 80090b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80090ba:	f7ff bf75 	b.w	8008fa8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090be:	b952      	cbnz	r2, 80090d6 <vTaskSwitchContext+0x72>
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	b672      	cpsid	i
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	b662      	cpsie	i
 80090d4:	e7fe      	b.n	80090d4 <vTaskSwitchContext+0x70>
 80090d6:	3a01      	subs	r2, #1
 80090d8:	e7d6      	b.n	8009088 <vTaskSwitchContext+0x24>
 80090da:	bf00      	nop
 80090dc:	20015054 	.word	0x20015054
 80090e0:	200150d4 	.word	0x200150d4
 80090e4:	20014bdc 	.word	0x20014bdc
 80090e8:	2001505c 	.word	0x2001505c
 80090ec:	20014be8 	.word	0x20014be8

080090f0 <vTaskPlaceOnEventList>:
{
 80090f0:	b510      	push	{r4, lr}
 80090f2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80090f4:	b950      	cbnz	r0, 800910c <vTaskPlaceOnEventList+0x1c>
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	b672      	cpsid	i
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	b662      	cpsie	i
 800910a:	e7fe      	b.n	800910a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <vTaskPlaceOnEventList+0x34>)
 800910e:	6819      	ldr	r1, [r3, #0]
 8009110:	3118      	adds	r1, #24
 8009112:	f7fe fca5 	bl	8007a60 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009116:	4620      	mov	r0, r4
 8009118:	2101      	movs	r1, #1
}
 800911a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800911e:	f7ff bc9d 	b.w	8008a5c <prvAddCurrentTaskToDelayedList>
 8009122:	bf00      	nop
 8009124:	20014bdc 	.word	0x20014bdc

08009128 <vTaskPlaceOnEventListRestricted>:
	{
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	460d      	mov	r5, r1
 800912c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800912e:	b950      	cbnz	r0, 8009146 <vTaskPlaceOnEventListRestricted+0x1e>
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	b672      	cpsid	i
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	b662      	cpsie	i
 8009144:	e7fe      	b.n	8009144 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <vTaskPlaceOnEventListRestricted+0x3c>)
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	3118      	adds	r1, #24
 800914c:	f7fe fc7c 	bl	8007a48 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009150:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009152:	4621      	mov	r1, r4
 8009154:	bf0c      	ite	eq
 8009156:	4628      	moveq	r0, r5
 8009158:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800915c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009160:	f7ff bc7c 	b.w	8008a5c <prvAddCurrentTaskToDelayedList>
 8009164:	20014bdc 	.word	0x20014bdc

08009168 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009168:	68c3      	ldr	r3, [r0, #12]
{
 800916a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800916c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800916e:	b954      	cbnz	r4, 8009186 <xTaskRemoveFromEventList+0x1e>
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	b672      	cpsid	i
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	b662      	cpsie	i
 8009184:	e7fe      	b.n	8009184 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009186:	f104 0118 	add.w	r1, r4, #24
 800918a:	4608      	mov	r0, r1
 800918c:	9101      	str	r1, [sp, #4]
 800918e:	f7fe fc7e 	bl	8007a8e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009192:	4b12      	ldr	r3, [pc, #72]	; (80091dc <xTaskRemoveFromEventList+0x74>)
 8009194:	9901      	ldr	r1, [sp, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	b9e3      	cbnz	r3, 80091d4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800919a:	1d21      	adds	r1, r4, #4
 800919c:	4608      	mov	r0, r1
 800919e:	9101      	str	r1, [sp, #4]
 80091a0:	f7fe fc75 	bl	8007a8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091a4:	4a0e      	ldr	r2, [pc, #56]	; (80091e0 <xTaskRemoveFromEventList+0x78>)
 80091a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80091a8:	6810      	ldr	r0, [r2, #0]
 80091aa:	9901      	ldr	r1, [sp, #4]
 80091ac:	4283      	cmp	r3, r0
 80091ae:	d900      	bls.n	80091b2 <xTaskRemoveFromEventList+0x4a>
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	4a0c      	ldr	r2, [pc, #48]	; (80091e4 <xTaskRemoveFromEventList+0x7c>)
 80091b4:	2014      	movs	r0, #20
 80091b6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ba:	f7fe fc45 	bl	8007a48 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091be:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <xTaskRemoveFromEventList+0x80>)
 80091c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d906      	bls.n	80091d8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80091ca:	2001      	movs	r0, #1
 80091cc:	4b07      	ldr	r3, [pc, #28]	; (80091ec <xTaskRemoveFromEventList+0x84>)
 80091ce:	6018      	str	r0, [r3, #0]
}
 80091d0:	b002      	add	sp, #8
 80091d2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091d4:	4806      	ldr	r0, [pc, #24]	; (80091f0 <xTaskRemoveFromEventList+0x88>)
 80091d6:	e7f0      	b.n	80091ba <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80091d8:	2000      	movs	r0, #0
	return xReturn;
 80091da:	e7f9      	b.n	80091d0 <xTaskRemoveFromEventList+0x68>
 80091dc:	20015054 	.word	0x20015054
 80091e0:	2001505c 	.word	0x2001505c
 80091e4:	20014be8 	.word	0x20014be8
 80091e8:	20014bdc 	.word	0x20014bdc
 80091ec:	200150d4 	.word	0x200150d4
 80091f0:	20015090 	.word	0x20015090

080091f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091f4:	4b03      	ldr	r3, [pc, #12]	; (8009204 <vTaskInternalSetTimeOutState+0x10>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091fa:	4b03      	ldr	r3, [pc, #12]	; (8009208 <vTaskInternalSetTimeOutState+0x14>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6043      	str	r3, [r0, #4]
}
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	2001508c 	.word	0x2001508c
 8009208:	200150d0 	.word	0x200150d0

0800920c <xTaskCheckForTimeOut>:
{
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009210:	4605      	mov	r5, r0
 8009212:	b950      	cbnz	r0, 800922a <xTaskCheckForTimeOut+0x1e>
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	b672      	cpsid	i
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	b662      	cpsie	i
 8009228:	e7fe      	b.n	8009228 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800922a:	b951      	cbnz	r1, 8009242 <xTaskCheckForTimeOut+0x36>
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	b672      	cpsid	i
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	b662      	cpsie	i
 8009240:	e7fe      	b.n	8009240 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8009242:	f7fe fc9f 	bl	8007b84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <xTaskCheckForTimeOut+0x78>)
 8009248:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	d010      	beq.n	8009272 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009250:	480d      	ldr	r0, [pc, #52]	; (8009288 <xTaskCheckForTimeOut+0x7c>)
 8009252:	682e      	ldr	r6, [r5, #0]
 8009254:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009256:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009258:	4286      	cmp	r6, r0
 800925a:	d001      	beq.n	8009260 <xTaskCheckForTimeOut+0x54>
 800925c:	428a      	cmp	r2, r1
 800925e:	d90f      	bls.n	8009280 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009260:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009262:	4283      	cmp	r3, r0
 8009264:	d90a      	bls.n	800927c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8009266:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009268:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800926a:	4413      	add	r3, r2
 800926c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800926e:	f7ff ffc1 	bl	80091f4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009272:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009274:	f7fe fcaa 	bl	8007bcc <vPortExitCritical>
}
 8009278:	4620      	mov	r0, r4
 800927a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009280:	2401      	movs	r4, #1
 8009282:	e7f7      	b.n	8009274 <xTaskCheckForTimeOut+0x68>
 8009284:	200150d0 	.word	0x200150d0
 8009288:	2001508c 	.word	0x2001508c

0800928c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800928c:	4b01      	ldr	r3, [pc, #4]	; (8009294 <vTaskMissedYield+0x8>)
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
}
 8009292:	4770      	bx	lr
 8009294:	200150d4 	.word	0x200150d4

08009298 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009298:	4b01      	ldr	r3, [pc, #4]	; (80092a0 <xTaskGetCurrentTaskHandle+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
	}
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20014bdc 	.word	0x20014bdc

080092a4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <xTaskGetSchedulerState+0x18>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	b133      	cbz	r3, 80092b8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <xTaskGetSchedulerState+0x1c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bf0c      	ite	eq
 80092b2:	2002      	moveq	r0, #2
 80092b4:	2000      	movne	r0, #0
 80092b6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092b8:	2001      	movs	r0, #1
	}
 80092ba:	4770      	bx	lr
 80092bc:	200150a4 	.word	0x200150a4
 80092c0:	20015054 	.word	0x20015054

080092c4 <xTaskPriorityInherit>:
	{
 80092c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80092c6:	4604      	mov	r4, r0
 80092c8:	b340      	cbz	r0, 800931c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092ca:	4d1b      	ldr	r5, [pc, #108]	; (8009338 <xTaskPriorityInherit+0x74>)
 80092cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80092ce:	682a      	ldr	r2, [r5, #0]
 80092d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d228      	bcs.n	8009328 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092d6:	6982      	ldr	r2, [r0, #24]
 80092d8:	2a00      	cmp	r2, #0
 80092da:	db04      	blt.n	80092e6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092dc:	682a      	ldr	r2, [r5, #0]
 80092de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092e0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80092e4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092e6:	2214      	movs	r2, #20
 80092e8:	4e14      	ldr	r6, [pc, #80]	; (800933c <xTaskPriorityInherit+0x78>)
 80092ea:	fb02 6303 	mla	r3, r2, r3, r6
 80092ee:	6962      	ldr	r2, [r4, #20]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d115      	bne.n	8009320 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f4:	1d21      	adds	r1, r4, #4
 80092f6:	4608      	mov	r0, r1
 80092f8:	9101      	str	r1, [sp, #4]
 80092fa:	f7fe fbc8 	bl	8007a8e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092fe:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009300:	4a0f      	ldr	r2, [pc, #60]	; (8009340 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009304:	6810      	ldr	r0, [r2, #0]
 8009306:	9901      	ldr	r1, [sp, #4]
 8009308:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800930a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800930c:	d900      	bls.n	8009310 <xTaskPriorityInherit+0x4c>
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	2014      	movs	r0, #20
 8009312:	fb00 6003 	mla	r0, r0, r3, r6
 8009316:	f7fe fb97 	bl	8007a48 <vListInsertEnd>
				xReturn = pdTRUE;
 800931a:	2001      	movs	r0, #1
	}
 800931c:	b002      	add	sp, #8
 800931e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009326:	e7f8      	b.n	800931a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800932c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800932e:	42a0      	cmp	r0, r4
 8009330:	bf2c      	ite	cs
 8009332:	2000      	movcs	r0, #0
 8009334:	2001      	movcc	r0, #1
 8009336:	e7f1      	b.n	800931c <xTaskPriorityInherit+0x58>
 8009338:	20014bdc 	.word	0x20014bdc
 800933c:	20014be8 	.word	0x20014be8
 8009340:	2001505c 	.word	0x2001505c

08009344 <xTaskPriorityDisinherit>:
	{
 8009344:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8009346:	b910      	cbnz	r0, 800934e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009348:	2000      	movs	r0, #0
	}
 800934a:	b002      	add	sp, #8
 800934c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800934e:	4b1e      	ldr	r3, [pc, #120]	; (80093c8 <xTaskPriorityDisinherit+0x84>)
 8009350:	681c      	ldr	r4, [r3, #0]
 8009352:	4284      	cmp	r4, r0
 8009354:	d00a      	beq.n	800936c <xTaskPriorityDisinherit+0x28>
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	b672      	cpsid	i
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	b662      	cpsie	i
 800936a:	e7fe      	b.n	800936a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800936c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800936e:	b953      	cbnz	r3, 8009386 <xTaskPriorityDisinherit+0x42>
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	b672      	cpsid	i
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	b662      	cpsie	i
 8009384:	e7fe      	b.n	8009384 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009386:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009388:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800938a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800938c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800938e:	4291      	cmp	r1, r2
 8009390:	d0da      	beq.n	8009348 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1d8      	bne.n	8009348 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009396:	1d21      	adds	r1, r4, #4
 8009398:	4608      	mov	r0, r1
 800939a:	9101      	str	r1, [sp, #4]
 800939c:	f7fe fb77 	bl	8007a8e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80093a2:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093aa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80093ac:	4a07      	ldr	r2, [pc, #28]	; (80093cc <xTaskPriorityDisinherit+0x88>)
 80093ae:	6810      	ldr	r0, [r2, #0]
 80093b0:	4283      	cmp	r3, r0
 80093b2:	d900      	bls.n	80093b6 <xTaskPriorityDisinherit+0x72>
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	4a06      	ldr	r2, [pc, #24]	; (80093d0 <xTaskPriorityDisinherit+0x8c>)
 80093b8:	2014      	movs	r0, #20
 80093ba:	fb00 2003 	mla	r0, r0, r3, r2
 80093be:	f7fe fb43 	bl	8007a48 <vListInsertEnd>
					xReturn = pdTRUE;
 80093c2:	2001      	movs	r0, #1
		return xReturn;
 80093c4:	e7c1      	b.n	800934a <xTaskPriorityDisinherit+0x6>
 80093c6:	bf00      	nop
 80093c8:	20014bdc 	.word	0x20014bdc
 80093cc:	2001505c 	.word	0x2001505c
 80093d0:	20014be8 	.word	0x20014be8

080093d4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80093d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80093d6:	4604      	mov	r4, r0
 80093d8:	2800      	cmp	r0, #0
 80093da:	d048      	beq.n	800946e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 80093dc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80093de:	b952      	cbnz	r2, 80093f6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	e7fe      	b.n	80093f4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80093f8:	4299      	cmp	r1, r3
 80093fa:	bf38      	it	cc
 80093fc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009400:	428b      	cmp	r3, r1
 8009402:	d034      	beq.n	800946e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009404:	2a01      	cmp	r2, #1
 8009406:	d132      	bne.n	800946e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8009408:	4a1a      	ldr	r2, [pc, #104]	; (8009474 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	4282      	cmp	r2, r0
 800940e:	d10a      	bne.n	8009426 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	b672      	cpsid	i
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	b662      	cpsie	i
 8009424:	e7fe      	b.n	8009424 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009426:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009428:	4d13      	ldr	r5, [pc, #76]	; (8009478 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800942a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800942c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8009430:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009432:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009436:	bfa8      	it	ge
 8009438:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800943c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943e:	bfa8      	it	ge
 8009440:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009442:	429a      	cmp	r2, r3
 8009444:	d113      	bne.n	800946e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009446:	1d01      	adds	r1, r0, #4
 8009448:	4608      	mov	r0, r1
 800944a:	9101      	str	r1, [sp, #4]
 800944c:	f7fe fb1f 	bl	8007a8e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8009452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009454:	6810      	ldr	r0, [r2, #0]
 8009456:	9901      	ldr	r1, [sp, #4]
 8009458:	4283      	cmp	r3, r0
 800945a:	d900      	bls.n	800945e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	2014      	movs	r0, #20
 8009460:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8009464:	b003      	add	sp, #12
 8009466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800946a:	f7fe baed 	b.w	8007a48 <vListInsertEnd>
	}
 800946e:	b003      	add	sp, #12
 8009470:	bd30      	pop	{r4, r5, pc}
 8009472:	bf00      	nop
 8009474:	20014bdc 	.word	0x20014bdc
 8009478:	20014be8 	.word	0x20014be8
 800947c:	2001505c 	.word	0x2001505c

08009480 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <pvTaskIncrementMutexHeldCount+0x14>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	b11a      	cbz	r2, 800948e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009486:	6819      	ldr	r1, [r3, #0]
 8009488:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800948a:	3201      	adds	r2, #1
 800948c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800948e:	6818      	ldr	r0, [r3, #0]
	}
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20014bdc 	.word	0x20014bdc

08009498 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800949a:	4c11      	ldr	r4, [pc, #68]	; (80094e0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800949c:	f7fe fb72 	bl	8007b84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80094a0:	6825      	ldr	r5, [r4, #0]
 80094a2:	b9bd      	cbnz	r5, 80094d4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80094a4:	4f0f      	ldr	r7, [pc, #60]	; (80094e4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80094a6:	4e10      	ldr	r6, [pc, #64]	; (80094e8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7fe fabf 	bl	8007a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7fe fabc 	bl	8007a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094b6:	4a0e      	ldr	r2, [pc, #56]	; (80094f0 <prvCheckForValidListAndQueue+0x58>)
 80094b8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80094ba:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094bc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80094be:	4b0d      	ldr	r3, [pc, #52]	; (80094f4 <prvCheckForValidListAndQueue+0x5c>)
 80094c0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <prvCheckForValidListAndQueue+0x60>)
 80094c4:	9500      	str	r5, [sp, #0]
 80094c6:	f7fe fda9 	bl	800801c <xQueueGenericCreateStatic>
 80094ca:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094cc:	b110      	cbz	r0, 80094d4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094ce:	490b      	ldr	r1, [pc, #44]	; (80094fc <prvCheckForValidListAndQueue+0x64>)
 80094d0:	f7ff f9e4 	bl	800889c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80094d4:	b003      	add	sp, #12
 80094d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80094da:	f7fe bb77 	b.w	8007bcc <vPortExitCritical>
 80094de:	bf00      	nop
 80094e0:	200151fc 	.word	0x200151fc
 80094e4:	20015180 	.word	0x20015180
 80094e8:	20015194 	.word	0x20015194
 80094ec:	200150d8 	.word	0x200150d8
 80094f0:	200150e0 	.word	0x200150e0
 80094f4:	200150dc 	.word	0x200150dc
 80094f8:	200151ac 	.word	0x200151ac
 80094fc:	0802cfe1 	.word	0x0802cfe1

08009500 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009500:	4291      	cmp	r1, r2
{
 8009502:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009504:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009506:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009508:	d80a      	bhi.n	8009520 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	6983      	ldr	r3, [r0, #24]
 800950e:	429a      	cmp	r2, r3
 8009510:	d20d      	bcs.n	800952e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009512:	1d01      	adds	r1, r0, #4
 8009514:	4b07      	ldr	r3, [pc, #28]	; (8009534 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	f7fe faa2 	bl	8007a60 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800951c:	2000      	movs	r0, #0
}
 800951e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009520:	429a      	cmp	r2, r3
 8009522:	d201      	bcs.n	8009528 <prvInsertTimerInActiveList+0x28>
 8009524:	4299      	cmp	r1, r3
 8009526:	d202      	bcs.n	800952e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009528:	1d01      	adds	r1, r0, #4
 800952a:	4b03      	ldr	r3, [pc, #12]	; (8009538 <prvInsertTimerInActiveList+0x38>)
 800952c:	e7f3      	b.n	8009516 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800952e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009530:	e7f5      	b.n	800951e <prvInsertTimerInActiveList+0x1e>
 8009532:	bf00      	nop
 8009534:	200150dc 	.word	0x200150dc
 8009538:	200150d8 	.word	0x200150d8

0800953c <xTimerCreateTimerTask>:
{
 800953c:	b510      	push	{r4, lr}
 800953e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009540:	f7ff ffaa 	bl	8009498 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <xTimerCreateTimerTask+0x58>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	b1b3      	cbz	r3, 8009578 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800954a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800954c:	aa07      	add	r2, sp, #28
 800954e:	a906      	add	r1, sp, #24
 8009550:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009552:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009556:	f7fe f967 	bl	8007828 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800955a:	9b05      	ldr	r3, [sp, #20]
 800955c:	9a07      	ldr	r2, [sp, #28]
 800955e:	9302      	str	r3, [sp, #8]
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	490d      	ldr	r1, [pc, #52]	; (8009598 <xTimerCreateTimerTask+0x5c>)
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2302      	movs	r3, #2
 8009568:	480c      	ldr	r0, [pc, #48]	; (800959c <xTimerCreateTimerTask+0x60>)
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	4623      	mov	r3, r4
 800956e:	f7ff fb5e 	bl	8008c2e <xTaskCreateStatic>
 8009572:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <xTimerCreateTimerTask+0x64>)
 8009574:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009576:	b950      	cbnz	r0, 800958e <xTimerCreateTimerTask+0x52>
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	b672      	cpsid	i
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	b662      	cpsie	i
	configASSERT( xReturn );
 800958c:	e7fe      	b.n	800958c <xTimerCreateTimerTask+0x50>
}
 800958e:	2001      	movs	r0, #1
 8009590:	b008      	add	sp, #32
 8009592:	bd10      	pop	{r4, pc}
 8009594:	200151fc 	.word	0x200151fc
 8009598:	0802cfe6 	.word	0x0802cfe6
 800959c:	080096ad 	.word	0x080096ad
 80095a0:	20015200 	.word	0x20015200

080095a4 <xTimerGenericCommand>:
{
 80095a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095a6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80095a8:	4604      	mov	r4, r0
{
 80095aa:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80095ac:	b950      	cbnz	r0, 80095c4 <xTimerGenericCommand+0x20>
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	b672      	cpsid	i
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	b662      	cpsie	i
 80095c2:	e7fe      	b.n	80095c2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 80095c4:	4d0c      	ldr	r5, [pc, #48]	; (80095f8 <xTimerGenericCommand+0x54>)
 80095c6:	6828      	ldr	r0, [r5, #0]
 80095c8:	b178      	cbz	r0, 80095ea <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095ca:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095cc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095ce:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095d2:	dc0c      	bgt.n	80095ee <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095d4:	f7ff fe66 	bl	80092a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095d8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095da:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095dc:	4669      	mov	r1, sp
 80095de:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095e0:	bf0c      	ite	eq
 80095e2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095e4:	461a      	movne	r2, r3
 80095e6:	f7fe fd9e 	bl	8008126 <xQueueGenericSend>
}
 80095ea:	b004      	add	sp, #16
 80095ec:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095ee:	2300      	movs	r3, #0
 80095f0:	4669      	mov	r1, sp
 80095f2:	f7fe fea5 	bl	8008340 <xQueueGenericSendFromISR>
 80095f6:	e7f8      	b.n	80095ea <xTimerGenericCommand+0x46>
 80095f8:	200151fc 	.word	0x200151fc

080095fc <prvSampleTimeNow>:
{
 80095fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009600:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80096a8 <prvSampleTimeNow+0xac>
{
 8009604:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009606:	f7ff fb85 	bl	8008d14 <xTaskGetTickCount>
 800960a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800960c:	f8d8 3000 	ldr.w	r3, [r8]
 8009610:	4283      	cmp	r3, r0
 8009612:	d942      	bls.n	800969a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009614:	4f22      	ldr	r7, [pc, #136]	; (80096a0 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009616:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	b95a      	cbnz	r2, 8009638 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009620:	4a20      	ldr	r2, [pc, #128]	; (80096a4 <prvSampleTimeNow+0xa8>)
 8009622:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009624:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009626:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8009628:	6039      	str	r1, [r7, #0]
}
 800962a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800962c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800962e:	f8c8 5000 	str.w	r5, [r8]
}
 8009632:	b004      	add	sp, #16
 8009634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009638:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800963c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009640:	1d21      	adds	r1, r4, #4
 8009642:	4608      	mov	r0, r1
 8009644:	9103      	str	r1, [sp, #12]
 8009646:	f7fe fa22 	bl	8007a8e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800964a:	6a23      	ldr	r3, [r4, #32]
 800964c:	4620      	mov	r0, r4
 800964e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009650:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009654:	9903      	ldr	r1, [sp, #12]
 8009656:	f013 0f04 	tst.w	r3, #4
 800965a:	d0de      	beq.n	800961a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800965c:	69a3      	ldr	r3, [r4, #24]
 800965e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009660:	459a      	cmp	sl, r3
 8009662:	d205      	bcs.n	8009670 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009664:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009666:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009668:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800966a:	f7fe f9f9 	bl	8007a60 <vListInsert>
 800966e:	e7d4      	b.n	800961a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009670:	2300      	movs	r3, #0
 8009672:	4652      	mov	r2, sl
 8009674:	4620      	mov	r0, r4
 8009676:	f8cd 9000 	str.w	r9, [sp]
 800967a:	4619      	mov	r1, r3
 800967c:	f7ff ff92 	bl	80095a4 <xTimerGenericCommand>
				configASSERT( xResult );
 8009680:	2800      	cmp	r0, #0
 8009682:	d1ca      	bne.n	800961a <prvSampleTimeNow+0x1e>
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	b672      	cpsid	i
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	b662      	cpsie	i
 8009698:	e7fe      	b.n	8009698 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	e7c5      	b.n	800962a <prvSampleTimeNow+0x2e>
 800969e:	bf00      	nop
 80096a0:	200150d8 	.word	0x200150d8
 80096a4:	200150dc 	.word	0x200150dc
 80096a8:	200151a8 	.word	0x200151a8

080096ac <prvTimerTask>:
{
 80096ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b0:	4d71      	ldr	r5, [pc, #452]	; (8009878 <prvTimerTask+0x1cc>)
{
 80096b2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096b4:	4e71      	ldr	r6, [pc, #452]	; (800987c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	f8d3 8000 	ldr.w	r8, [r3]
 80096bc:	f1b8 0f00 	cmp.w	r8, #0
 80096c0:	d037      	beq.n	8009732 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096c4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80096ca:	f7ff fb1b 	bl	8008d04 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ce:	a804      	add	r0, sp, #16
 80096d0:	f7ff ff94 	bl	80095fc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80096d4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d16b      	bne.n	80097b4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096dc:	2c00      	cmp	r4, #0
 80096de:	d14e      	bne.n	800977e <prvTimerTask+0xd2>
 80096e0:	4540      	cmp	r0, r8
 80096e2:	d352      	bcc.n	800978a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 80096e4:	f7ff fbb4 	bl	8008e50 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ee:	1d38      	adds	r0, r7, #4
 80096f0:	f7fe f9cd 	bl	8007a8e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096f8:	0758      	lsls	r0, r3, #29
 80096fa:	d51c      	bpl.n	8009736 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	4643      	mov	r3, r8
 8009700:	464a      	mov	r2, r9
 8009702:	4638      	mov	r0, r7
 8009704:	4441      	add	r1, r8
 8009706:	f7ff fefb 	bl	8009500 <prvInsertTimerInActiveList>
 800970a:	b1c0      	cbz	r0, 800973e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800970c:	4623      	mov	r3, r4
 800970e:	4642      	mov	r2, r8
 8009710:	4621      	mov	r1, r4
 8009712:	4638      	mov	r0, r7
 8009714:	9400      	str	r4, [sp, #0]
 8009716:	f7ff ff45 	bl	80095a4 <xTimerGenericCommand>
			configASSERT( xResult );
 800971a:	b980      	cbnz	r0, 800973e <prvTimerTask+0x92>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	b672      	cpsid	i
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	b662      	cpsie	i
 8009730:	e7fe      	b.n	8009730 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009732:	2401      	movs	r4, #1
 8009734:	e7c9      	b.n	80096ca <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009736:	f023 0301 	bic.w	r3, r3, #1
 800973a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	4638      	mov	r0, r7
 8009742:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009744:	2200      	movs	r2, #0
 8009746:	a904      	add	r1, sp, #16
 8009748:	6830      	ldr	r0, [r6, #0]
 800974a:	f7fe febe 	bl	80084ca <xQueueReceive>
 800974e:	2800      	cmp	r0, #0
 8009750:	d0b1      	beq.n	80096b6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009752:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009754:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009756:	2b00      	cmp	r3, #0
 8009758:	db2f      	blt.n	80097ba <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800975a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800975c:	6963      	ldr	r3, [r4, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d132      	bne.n	80097c8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009762:	a803      	add	r0, sp, #12
 8009764:	f7ff ff4a 	bl	80095fc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009768:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800976a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800976c:	2b09      	cmp	r3, #9
 800976e:	d8e9      	bhi.n	8009744 <prvTimerTask+0x98>
 8009770:	e8df f003 	tbb	[pc, r3]
 8009774:	592e2e2e 	.word	0x592e2e2e
 8009778:	2e2e7a60 	.word	0x2e2e7a60
 800977c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800977e:	4b40      	ldr	r3, [pc, #256]	; (8009880 <prvTimerTask+0x1d4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681c      	ldr	r4, [r3, #0]
 8009784:	fab4 f484 	clz	r4, r4
 8009788:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800978a:	4622      	mov	r2, r4
 800978c:	eba8 0109 	sub.w	r1, r8, r9
 8009790:	6830      	ldr	r0, [r6, #0]
 8009792:	f7ff f8c2 	bl	800891a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009796:	f7ff fb5b 	bl	8008e50 <xTaskResumeAll>
 800979a:	2800      	cmp	r0, #0
 800979c:	d1d2      	bne.n	8009744 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800979e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	e7c7      	b.n	8009744 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 80097b4:	f7ff fb4c 	bl	8008e50 <xTaskResumeAll>
}
 80097b8:	e7c4      	b.n	8009744 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097ba:	9b05      	ldr	r3, [sp, #20]
 80097bc:	9907      	ldr	r1, [sp, #28]
 80097be:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097c0:	9b04      	ldr	r3, [sp, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dbbe      	blt.n	8009744 <prvTimerTask+0x98>
 80097c6:	e7c8      	b.n	800975a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c8:	1d20      	adds	r0, r4, #4
 80097ca:	f7fe f960 	bl	8007a8e <uxListRemove>
 80097ce:	e7c8      	b.n	8009762 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097d4:	4620      	mov	r0, r4
 80097d6:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097d8:	f043 0301 	orr.w	r3, r3, #1
 80097dc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097e0:	9b05      	ldr	r3, [sp, #20]
 80097e2:	4419      	add	r1, r3
 80097e4:	f7ff fe8c 	bl	8009500 <prvInsertTimerInActiveList>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0ab      	beq.n	8009744 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ec:	6a23      	ldr	r3, [r4, #32]
 80097ee:	4620      	mov	r0, r4
 80097f0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80097f6:	0759      	lsls	r1, r3, #29
 80097f8:	d5a4      	bpl.n	8009744 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097fa:	69a2      	ldr	r2, [r4, #24]
 80097fc:	2300      	movs	r3, #0
 80097fe:	9905      	ldr	r1, [sp, #20]
 8009800:	4620      	mov	r0, r4
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	440a      	add	r2, r1
 8009806:	4619      	mov	r1, r3
 8009808:	f7ff fecc 	bl	80095a4 <xTimerGenericCommand>
							configASSERT( xResult );
 800980c:	2800      	cmp	r0, #0
 800980e:	d199      	bne.n	8009744 <prvTimerTask+0x98>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	b672      	cpsid	i
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	b662      	cpsie	i
 8009824:	e7fe      	b.n	8009824 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009826:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800982a:	f023 0301 	bic.w	r3, r3, #1
 800982e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009832:	e787      	b.n	8009744 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009834:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009840:	9905      	ldr	r1, [sp, #20]
 8009842:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009844:	b951      	cbnz	r1, 800985c <prvTimerTask+0x1b0>
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	b672      	cpsid	i
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	b662      	cpsie	i
 800985a:	e7fe      	b.n	800985a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800985c:	4603      	mov	r3, r0
 800985e:	4401      	add	r1, r0
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff fe4d 	bl	8009500 <prvInsertTimerInActiveList>
					break;
 8009866:	e76d      	b.n	8009744 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009868:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800986c:	079a      	lsls	r2, r3, #30
 800986e:	d4dc      	bmi.n	800982a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8009870:	4620      	mov	r0, r4
 8009872:	f7fe f89f 	bl	80079b4 <vPortFree>
 8009876:	e765      	b.n	8009744 <prvTimerTask+0x98>
 8009878:	200150d8 	.word	0x200150d8
 800987c:	200151fc 	.word	0x200151fc
 8009880:	200150dc 	.word	0x200150dc

08009884 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009884:	6843      	ldr	r3, [r0, #4]
{
 8009886:	b510      	push	{r4, lr}
 8009888:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800988a:	b14b      	cbz	r3, 80098a0 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	2101      	movs	r1, #1
 8009890:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	b12b      	cbz	r3, 80098a2 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8009896:	23c8      	movs	r3, #200	; 0xc8
 8009898:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 80098a0:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 80098a2:	2364      	movs	r3, #100	; 0x64
 80098a4:	6163      	str	r3, [r4, #20]
 80098a6:	e7fb      	b.n	80098a0 <jpeg_abort+0x1c>

080098a8 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 80098a8:	6843      	ldr	r3, [r0, #4]
{
 80098aa:	b510      	push	{r4, lr}
 80098ac:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 80098ae:	b10b      	cbz	r3, 80098b4 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 80098b4:	2300      	movs	r3, #0
 80098b6:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 80098b8:	6163      	str	r3, [r4, #20]
}
 80098ba:	bd10      	pop	{r4, pc}

080098bc <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 80098bc:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 80098be:	6843      	ldr	r3, [r0, #4]
 80098c0:	2284      	movs	r2, #132	; 0x84
 80098c2:	2100      	movs	r1, #0
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 80098ce:	bd08      	pop	{r3, pc}

080098d0 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 80098d0:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 80098d2:	6843      	ldr	r3, [r0, #4]
 80098d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80098d8:	2100      	movs	r1, #0
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 80098e4:	bd08      	pop	{r3, pc}

080098e6 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80098e6:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 80098e8:	2950      	cmp	r1, #80	; 0x50
{
 80098ea:	b570      	push	{r4, r5, r6, lr}
 80098ec:	4604      	mov	r4, r0
 80098ee:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80098f0:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 80098f2:	d007      	beq.n	8009904 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 80098f4:	6803      	ldr	r3, [r0, #0]
 80098f6:	260d      	movs	r6, #13
 80098f8:	2250      	movs	r2, #80	; 0x50
 80098fa:	61d9      	str	r1, [r3, #28]
 80098fc:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8009904:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8009908:	d009      	beq.n	800991e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	2116      	movs	r1, #22
 800990e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009912:	4620      	mov	r0, r4
 8009914:	61dd      	str	r5, [r3, #28]
 8009916:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800991e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009922:	2100      	movs	r1, #0
 8009924:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8009926:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8009928:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800992a:	f01f ffcb 	bl	80298c4 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800992e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009930:	4620      	mov	r0, r4
    cinfo->err = err;
 8009932:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8009934:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8009936:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009938:	f00b feac 	bl	8015694 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800993c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800993e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009940:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009942:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009944:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009948:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800994c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009950:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009954:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009958:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800995c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009960:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8009964:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8009968:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 800996c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8009970:	f005 f8ba 	bl	800eae8 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8009974:	4620      	mov	r0, r4
 8009976:	f003 fdbd 	bl	800d4f4 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800997a:	23c8      	movs	r3, #200	; 0xc8
 800997c:	6163      	str	r3, [r4, #20]
}
 800997e:	bd70      	pop	{r4, r5, r6, pc}

08009980 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8009980:	f7ff bf92 	b.w	80098a8 <jpeg_destroy>

08009984 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009984:	6942      	ldr	r2, [r0, #20]
 8009986:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 800998a:	b570      	push	{r4, r5, r6, lr}
 800998c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800998e:	2b0a      	cmp	r3, #10
 8009990:	f200 80a5 	bhi.w	8009ade <jpeg_consume_input+0x15a>
 8009994:	e8df f003 	tbb	[pc, r3]
 8009998:	9dab1006 	.word	0x9dab1006
 800999c:	9d9d9d9d 	.word	0x9d9d9d9d
 80099a0:	a39d      	.short	0xa39d
 80099a2:	9d          	.byte	0x9d
 80099a3:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 80099a4:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 80099ac:	69a3      	ldr	r3, [r4, #24]
 80099ae:	4620      	mov	r0, r4
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 80099b4:	23c9      	movs	r3, #201	; 0xc9
 80099b6:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80099b8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80099bc:	4620      	mov	r0, r4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80099c2:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80099c4:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80099c6:	d146      	bne.n	8009a56 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 80099c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099ca:	2d03      	cmp	r5, #3
 80099cc:	d007      	beq.n	80099de <jpeg_consume_input+0x5a>
 80099ce:	2d04      	cmp	r5, #4
 80099d0:	d064      	beq.n	8009a9c <jpeg_consume_input+0x118>
 80099d2:	2d01      	cmp	r5, #1
 80099d4:	d17b      	bne.n	8009ace <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 80099d6:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 80099da:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 80099dc:	e01c      	b.n	8009a18 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 80099de:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80099e2:	b10b      	cbz	r3, 80099e8 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80099e4:	2303      	movs	r3, #3
 80099e6:	e056      	b.n	8009a96 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 80099e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d034      	beq.n	8009a5a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 80099f0:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d04d      	beq.n	8009a94 <jpeg_consume_input+0x110>
 80099f8:	2a01      	cmp	r2, #1
 80099fa:	d008      	beq.n	8009a0e <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	2174      	movs	r1, #116	; 0x74
 8009a00:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009a02:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f04f 31ff 	mov.w	r1, #4294967295
 8009a0c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009a0e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8009a12:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8009a14:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009a18:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 8009a1c:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 8009a1e:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009a20:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009a24:	4b33      	ldr	r3, [pc, #204]	; (8009af4 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 8009a26:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8009a2a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8009a2e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009a30:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009a32:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8009a36:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8009a3a:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8009a3c:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8009a3e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009a42:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009a44:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009a48:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8009a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009a50:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009a52:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009a54:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8009a56:	4630      	mov	r0, r6
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 8009a5a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009a5e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009a60:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009a62:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009a64:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009a68:	d10e      	bne.n	8009a88 <jpeg_consume_input+0x104>
 8009a6a:	2902      	cmp	r1, #2
 8009a6c:	d101      	bne.n	8009a72 <jpeg_consume_input+0xee>
 8009a6e:	2a03      	cmp	r2, #3
 8009a70:	d0b8      	beq.n	80099e4 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	621a      	str	r2, [r3, #32]
 8009a76:	2271      	movs	r2, #113	; 0x71
 8009a78:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8009a7c:	615a      	str	r2, [r3, #20]
 8009a7e:	2101      	movs	r1, #1
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	4620      	mov	r0, r4
 8009a84:	4798      	blx	r3
 8009a86:	e7ad      	b.n	80099e4 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8009a88:	2852      	cmp	r0, #82	; 0x52
 8009a8a:	d1f2      	bne.n	8009a72 <jpeg_consume_input+0xee>
 8009a8c:	2947      	cmp	r1, #71	; 0x47
 8009a8e:	d1f0      	bne.n	8009a72 <jpeg_consume_input+0xee>
 8009a90:	2a42      	cmp	r2, #66	; 0x42
 8009a92:	d1ee      	bne.n	8009a72 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8009a94:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009a96:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009a9a:	e7ba      	b.n	8009a12 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 8009a9c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009aa0:	b193      	cbz	r3, 8009ac8 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8009aa2:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009aa6:	b17a      	cbz	r2, 8009ac8 <jpeg_consume_input+0x144>
 8009aa8:	2a02      	cmp	r2, #2
 8009aaa:	d008      	beq.n	8009abe <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	2174      	movs	r1, #116	; 0x74
 8009ab0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009ab2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8009abc:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 8009abe:	2305      	movs	r3, #5
 8009ac0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	e7a5      	b.n	8009a14 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 8009ac8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8009acc:	e7fa      	b.n	8009ac4 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e783      	b.n	80099da <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009ad2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8009ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009ade:	6803      	ldr	r3, [r0, #0]
 8009ae0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009ae2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009ae4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4798      	blx	r3
 8009aec:	e7b3      	b.n	8009a56 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 8009aee:	2601      	movs	r6, #1
  return retcode;
 8009af0:	e7b1      	b.n	8009a56 <jpeg_consume_input+0xd2>
 8009af2:	bf00      	nop
 8009af4:	3ff00000 	.word	0x3ff00000

08009af8 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8009af8:	6942      	ldr	r2, [r0, #20]
 8009afa:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8009afe:	2b01      	cmp	r3, #1
{
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4604      	mov	r4, r0
 8009b04:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8009b06:	d905      	bls.n	8009b14 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009b08:	6803      	ldr	r3, [r0, #0]
 8009b0a:	2115      	movs	r1, #21
 8009b0c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009b14:	4620      	mov	r0, r4
 8009b16:	f7ff ff35 	bl	8009984 <jpeg_consume_input>
  switch (retcode) {
 8009b1a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8009b1c:	4605      	mov	r5, r0
  switch (retcode) {
 8009b1e:	d00b      	beq.n	8009b38 <jpeg_read_header+0x40>
 8009b20:	2802      	cmp	r0, #2
 8009b22:	d109      	bne.n	8009b38 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009b24:	b12e      	cbz	r6, 8009b32 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	2235      	movs	r2, #53	; 0x35
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	615a      	str	r2, [r3, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff fea6 	bl	8009884 <jpeg_abort>
}
 8009b38:	4628      	mov	r0, r5
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}

08009b3c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009b3c:	6943      	ldr	r3, [r0, #20]
 8009b3e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009b42:	2a01      	cmp	r2, #1
{
 8009b44:	b510      	push	{r4, lr}
 8009b46:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009b48:	d81f      	bhi.n	8009b8a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8009b4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009b4c:	bb0a      	cbnz	r2, 8009b92 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009b4e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009b52:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d204      	bcs.n	8009b62 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009b58:	6803      	ldr	r3, [r0, #0]
 8009b5a:	2245      	movs	r2, #69	; 0x45
 8009b5c:	615a      	str	r2, [r3, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009b62:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009b66:	4620      	mov	r0, r4
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8009b6c:	23d2      	movs	r3, #210	; 0xd2
 8009b6e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8009b70:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	b1a2      	cbz	r2, 8009ba2 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8009b78:	69a3      	ldr	r3, [r4, #24]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009b80:	4620      	mov	r0, r4
 8009b82:	f7ff fe7f 	bl	8009884 <jpeg_abort>
  return TRUE;
 8009b86:	2001      	movs	r0, #1
 8009b88:	e010      	b.n	8009bac <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8009b8a:	2bcf      	cmp	r3, #207	; 0xcf
 8009b8c:	d0ee      	beq.n	8009b6c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8009b8e:	2bd2      	cmp	r3, #210	; 0xd2
 8009b90:	d0ee      	beq.n	8009b70 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	2115      	movs	r1, #21
 8009b96:	4620      	mov	r0, r4
 8009b98:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	4798      	blx	r3
 8009ba0:	e7e6      	b.n	8009b70 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4798      	blx	r3
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d1e1      	bne.n	8009b70 <jpeg_finish_decompress+0x34>
}
 8009bac:	bd10      	pop	{r4, pc}

08009bae <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009bae:	6943      	ldr	r3, [r0, #20]
 8009bb0:	2bcc      	cmp	r3, #204	; 0xcc
{
 8009bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb6:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009bb8:	d008      	beq.n	8009bcc <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009bba:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8009bc8:	23cc      	movs	r3, #204	; 0xcc
 8009bca:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009bcc:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009bd0:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009bd2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	b9f3      	cbnz	r3, 8009c18 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8009bdc:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bf14      	ite	ne
 8009be2:	23ce      	movne	r3, #206	; 0xce
 8009be4:	23cd      	moveq	r3, #205	; 0xcd
 8009be6:	6163      	str	r3, [r4, #20]
}
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	b123      	cbz	r3, 8009bfa <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009bf0:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009bf2:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009bfa:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009c02:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009c06:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009c10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c14:	42bb      	cmp	r3, r7
 8009c16:	d011      	beq.n	8009c3c <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009c18:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009c1c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	d3e4      	bcc.n	8009bec <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009c22:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009c26:	4620      	mov	r0, r4
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009c2c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009c30:	4620      	mov	r0, r4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009c36:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8009c3a:	e7ca      	b.n	8009bd2 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e7d3      	b.n	8009be8 <output_pass_setup+0x3a>

08009c40 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009c40:	6943      	ldr	r3, [r0, #20]
 8009c42:	2bca      	cmp	r3, #202	; 0xca
{
 8009c44:	b510      	push	{r4, lr}
 8009c46:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8009c48:	d109      	bne.n	8009c5e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 8009c4a:	f005 f8f7 	bl	800ee3c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c50:	b11b      	cbz	r3, 8009c5a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009c52:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009c54:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009c56:	6163      	str	r3, [r4, #20]
}
 8009c58:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8009c5a:	23cb      	movs	r3, #203	; 0xcb
 8009c5c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009c5e:	6962      	ldr	r2, [r4, #20]
 8009c60:	2acb      	cmp	r2, #203	; 0xcb
 8009c62:	d12c      	bne.n	8009cbe <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009c64:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	b1fb      	cbz	r3, 8009cac <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	b113      	cbz	r3, 8009c76 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4620      	mov	r0, r4
 8009c74:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009c76:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d0e9      	beq.n	8009c58 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009c84:	2802      	cmp	r0, #2
 8009c86:	d011      	beq.n	8009cac <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009c88:	68a3      	ldr	r3, [r4, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0ee      	beq.n	8009c6c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8009c8e:	f020 0002 	bic.w	r0, r0, #2
 8009c92:	2801      	cmp	r0, #1
 8009c94:	d1ea      	bne.n	8009c6c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	6899      	ldr	r1, [r3, #8]
 8009c9a:	3201      	adds	r2, #1
 8009c9c:	428a      	cmp	r2, r1
 8009c9e:	605a      	str	r2, [r3, #4]
 8009ca0:	dbe4      	blt.n	8009c6c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009ca2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009ca6:	440a      	add	r2, r1
 8009ca8:	609a      	str	r2, [r3, #8]
 8009caa:	e7df      	b.n	8009c6c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 8009cac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009cb0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009cb4:	4620      	mov	r0, r4
}
 8009cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 8009cba:	f7ff bf78 	b.w	8009bae <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8009cbe:	2acc      	cmp	r2, #204	; 0xcc
 8009cc0:	d0f8      	beq.n	8009cb4 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	2115      	movs	r1, #21
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4798      	blx	r3
 8009cd0:	e7f0      	b.n	8009cb4 <jpeg_start_decompress+0x74>

08009cd2 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cd4:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009cd6:	6942      	ldr	r2, [r0, #20]
{
 8009cd8:	4604      	mov	r4, r0
 8009cda:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8009cdc:	2acd      	cmp	r2, #205	; 0xcd
 8009cde:	d005      	beq.n	8009cec <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009ce0:	6803      	ldr	r3, [r0, #0]
 8009ce2:	2115      	movs	r1, #21
 8009ce4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009cec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009cf0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d30a      	bcc.n	8009d0c <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	227e      	movs	r2, #126	; 0x7e
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8009d00:	615a      	str	r2, [r3, #20]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	4798      	blx	r3
    return 0;
 8009d06:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8009d08:	b003      	add	sp, #12
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009d0c:	68a0      	ldr	r0, [r4, #8]
 8009d0e:	b120      	cbz	r0, 8009d1a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009d10:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009d14:	6803      	ldr	r3, [r0, #0]
 8009d16:	4620      	mov	r0, r4
 8009d18:	4798      	blx	r3
  row_ctr = 0;
 8009d1a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	aa01      	add	r2, sp, #4
 8009d20:	4629      	mov	r1, r5
  row_ctr = 0;
 8009d22:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009d24:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009d28:	685f      	ldr	r7, [r3, #4]
 8009d2a:	4633      	mov	r3, r6
 8009d2c:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009d2e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009d32:	9801      	ldr	r0, [sp, #4]
 8009d34:	4403      	add	r3, r0
 8009d36:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 8009d3a:	e7e5      	b.n	8009d08 <jpeg_read_scanlines+0x36>

08009d3c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009d3c:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8009d3e:	6984      	ldr	r4, [r0, #24]
{
 8009d40:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	b943      	cbnz	r3, 8009d58 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 8009d46:	68e3      	ldr	r3, [r4, #12]
 8009d48:	4798      	blx	r3
 8009d4a:	b928      	cbnz	r0, 8009d58 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	2219      	movs	r2, #25
 8009d50:	4628      	mov	r0, r5
 8009d52:	615a      	str	r2, [r3, #20]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4798      	blx	r3
  src->bytes_in_buffer--;
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	6022      	str	r2, [r4, #0]
}
 8009d64:	7818      	ldrb	r0, [r3, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}

08009d68 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8009d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009d70:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009d74:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 8009d78:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 8009d7c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009d80:	db20      	blt.n	8009dc4 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009d82:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009d84:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <arith_decode+0xd8>)
 8009d86:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8009d8a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8009d8e:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 8009d90:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009d94:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8009d98:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009d9c:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009da0:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 8009da2:	428d      	cmp	r5, r1
 8009da4:	db3c      	blt.n	8009e20 <arith_decode+0xb8>
    e->c -= temp;
 8009da6:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009da8:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009daa:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 8009dae:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 8009db2:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009db4:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 8009db6:	dd2e      	ble.n	8009e16 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009db8:	ea85 050e 	eor.w	r5, r5, lr
 8009dbc:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 8009dbe:	09c0      	lsrs	r0, r0, #7
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 8009dc4:	3901      	subs	r1, #1
 8009dc6:	2900      	cmp	r1, #0
 8009dc8:	6121      	str	r1, [r4, #16]
 8009dca:	da1a      	bge.n	8009e02 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8009dcc:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8009dd0:	b96b      	cbnz	r3, 8009dee <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	f7ff ffb2 	bl	8009d3c <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009dd8:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8009dda:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009ddc:	d108      	bne.n	8009df0 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 8009dde:	4640      	mov	r0, r8
 8009de0:	f7ff ffac 	bl	8009d3c <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009de4:	28ff      	cmp	r0, #255	; 0xff
 8009de6:	d0fa      	beq.n	8009dde <arith_decode+0x76>
	  if (data == 0)
 8009de8:	b110      	cbz	r0, 8009df0 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8009dea:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8009dee:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009df0:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009df2:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009df4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009df8:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009dfc:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009dfe:	d404      	bmi.n	8009e0a <arith_decode+0xa2>
 8009e00:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	60e3      	str	r3, [r4, #12]
 8009e08:	e7b6      	b.n	8009d78 <arith_decode+0x10>
	if (++e->ct == 0)
 8009e0a:	3309      	adds	r3, #9
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f7      	bne.n	8009e02 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009e12:	60e7      	str	r7, [r4, #12]
 8009e14:	e7f5      	b.n	8009e02 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009e16:	407d      	eors	r5, r7
 8009e18:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009e1a:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8009e1e:	e7ce      	b.n	8009dbe <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8009e20:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009e24:	dacb      	bge.n	8009dbe <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009e26:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 8009e2a:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009e2c:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8009e2e:	dd02      	ble.n	8009e36 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009e30:	407b      	eors	r3, r7
 8009e32:	7033      	strb	r3, [r6, #0]
 8009e34:	e7f1      	b.n	8009e1a <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009e36:	ea83 030e 	eor.w	r3, r3, lr
 8009e3a:	7033      	strb	r3, [r6, #0]
 8009e3c:	e7bf      	b.n	8009dbe <arith_decode+0x56>
 8009e3e:	bf00      	nop
 8009e40:	0802cff0 	.word	0x0802cff0

08009e44 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8009e48:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8009e4c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 8009e50:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009e52:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009e56:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 8009e5a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 808a 	beq.w	8009f76 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 8009e62:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8009e66:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8009e6a:	b95a      	cbnz	r2, 8009e84 <start_pass+0x40>
      if (cinfo->Se != 0)
 8009e6c:	b1a1      	cbz	r1, 8009e98 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	2611      	movs	r6, #17
 8009e72:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8009e76:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009e7a:	6258      	str	r0, [r3, #36]	; 0x24
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4798      	blx	r3
 8009e82:	e00f      	b.n	8009ea4 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8009e84:	428a      	cmp	r2, r1
 8009e86:	dcf2      	bgt.n	8009e6e <start_pass+0x2a>
 8009e88:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	dbee      	blt.n	8009e6e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 8009e90:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d1ea      	bne.n	8009e6e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 8009e98:	b117      	cbz	r7, 8009ea0 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8009e9a:	1e7b      	subs	r3, r7, #1
 8009e9c:	4283      	cmp	r3, r0
 8009e9e:	d1e6      	bne.n	8009e6e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8009ea0:	280d      	cmp	r0, #13
 8009ea2:	dce4      	bgt.n	8009e6e <start_pass+0x2a>
 8009ea4:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 8009ea8:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009eac:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009eb0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009eb4:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009eb8:	454b      	cmp	r3, r9
 8009eba:	dc1d      	bgt.n	8009ef8 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8009ebc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d153      	bne.n	8009f6c <start_pass+0x128>
      if (cinfo->Ss == 0)
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	d14f      	bne.n	8009f68 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8009ec8:	4b63      	ldr	r3, [pc, #396]	; (800a058 <start_pass+0x214>)
{
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	f105 0914 	add.w	r9, r5, #20
 8009ed2:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009ed4:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 8009ed6:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ed8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009edc:	4543      	cmp	r3, r8
 8009ede:	dc63      	bgt.n	8009fa8 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8009ee0:	2300      	movs	r3, #0
  entropy->a = 0;
 8009ee2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009ee6:	f06f 030f 	mvn.w	r3, #15
 8009eea:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8009eec:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009ef0:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009ef2:	b003      	add	sp, #12
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009ef8:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009efc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009f00:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009f02:	0230      	lsls	r0, r6, #8
 8009f04:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009f08:	b162      	cbz	r2, 8009f24 <start_pass+0xe0>
 8009f0a:	580a      	ldr	r2, [r1, r0]
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	da09      	bge.n	8009f24 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009f10:	6822      	ldr	r2, [r4, #0]
 8009f12:	2300      	movs	r3, #0
 8009f14:	f04f 31ff 	mov.w	r1, #4294967295
 8009f18:	4620      	mov	r0, r4
 8009f1a:	61d3      	str	r3, [r2, #28]
 8009f1c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009f20:	6852      	ldr	r2, [r2, #4]
 8009f22:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009f24:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8009f28:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8009f2c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009f30:	42ba      	cmp	r2, r7
 8009f32:	da02      	bge.n	8009f3a <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f34:	f109 0901 	add.w	r9, r9, #1
 8009f38:	e7ba      	b.n	8009eb0 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009f3a:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8009f3e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009f42:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 8009f46:	4291      	cmp	r1, r2
 8009f48:	d008      	beq.n	8009f5c <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8009f4a:	6822      	ldr	r2, [r4, #0]
 8009f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8009f50:	4620      	mov	r0, r4
 8009f52:	61d7      	str	r7, [r2, #28]
 8009f54:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009f58:	6852      	ldr	r2, [r2, #4]
 8009f5a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8009f5c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009f60:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 8009f62:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009f66:	e7e1      	b.n	8009f2c <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8009f68:	4b3c      	ldr	r3, [pc, #240]	; (800a05c <start_pass+0x218>)
 8009f6a:	e7ae      	b.n	8009eca <start_pass+0x86>
      if (cinfo->Ss == 0)
 8009f6c:	b90a      	cbnz	r2, 8009f72 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8009f6e:	4b3c      	ldr	r3, [pc, #240]	; (800a060 <start_pass+0x21c>)
 8009f70:	e7ab      	b.n	8009eca <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8009f72:	4b3c      	ldr	r3, [pc, #240]	; (800a064 <start_pass+0x220>)
 8009f74:	e7a9      	b.n	8009eca <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009f76:	b96a      	cbnz	r2, 8009f94 <start_pass+0x150>
 8009f78:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8009f7c:	b953      	cbnz	r3, 8009f94 <start_pass+0x150>
 8009f7e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8009f82:	b93b      	cbnz	r3, 8009f94 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009f84:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009f88:	2b3f      	cmp	r3, #63	; 0x3f
 8009f8a:	dc0b      	bgt.n	8009fa4 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009f8c:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d007      	beq.n	8009fa4 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	227d      	movs	r2, #125	; 0x7d
 8009f98:	f04f 31ff 	mov.w	r1, #4294967295
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	615a      	str	r2, [r3, #20]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 8009fa4:	4b30      	ldr	r3, [pc, #192]	; (800a068 <start_pass+0x224>)
 8009fa6:	e790      	b.n	8009eca <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009fa8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009fac:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009fb0:	b133      	cbz	r3, 8009fc0 <start_pass+0x17c>
 8009fb2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009fb6:	bb43      	cbnz	r3, 800a00a <start_pass+0x1c6>
 8009fb8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d13a      	bne.n	800a036 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 8009fc0:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009fc4:	2f0f      	cmp	r7, #15
 8009fc6:	d906      	bls.n	8009fd6 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	2232      	movs	r2, #50	; 0x32
 8009fcc:	4620      	mov	r0, r4
 8009fce:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8009fd6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	b933      	cbnz	r3, 8009fec <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009fde:	6863      	ldr	r3, [r4, #4]
 8009fe0:	2240      	movs	r2, #64	; 0x40
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4798      	blx	r3
 8009fea:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8009fec:	2240      	movs	r2, #64	; 0x40
 8009fee:	2100      	movs	r1, #0
 8009ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ff2:	f01f fc67 	bl	80298c4 <memset>
      entropy->last_dc_val[ci] = 0;
 8009ff6:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8009ffa:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009ffe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a002:	b9eb      	cbnz	r3, 800a040 <start_pass+0x1fc>
 800a004:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a008:	b1ab      	cbz	r3, 800a036 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 800a00a:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a00e:	2f0f      	cmp	r7, #15
 800a010:	d819      	bhi.n	800a046 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 800a012:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a018:	b93b      	cbnz	r3, 800a02a <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a01a:	6863      	ldr	r3, [r4, #4]
 800a01c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a020:	2101      	movs	r1, #1
 800a022:	4620      	mov	r0, r4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4798      	blx	r3
 800a028:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a02a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a02e:	2100      	movs	r1, #0
 800a030:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a032:	f01f fc47 	bl	80298c4 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a036:	f108 0801 	add.w	r8, r8, #1
 800a03a:	f109 0904 	add.w	r9, r9, #4
 800a03e:	e74b      	b.n	8009ed8 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a040:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a044:	e7e0      	b.n	800a008 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	2232      	movs	r2, #50	; 0x32
 800a04a:	4620      	mov	r0, r4
 800a04c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4798      	blx	r3
 800a054:	e7dd      	b.n	800a012 <start_pass+0x1ce>
 800a056:	bf00      	nop
 800a058:	0800a60f 	.word	0x0800a60f
 800a05c:	0800a4db 	.word	0x0800a4db
 800a060:	0800a489 	.word	0x0800a489
 800a064:	0800a363 	.word	0x0800a363
 800a068:	0800a10f 	.word	0x0800a10f

0800a06c <process_restart>:
{
 800a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a070:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800a074:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	4798      	blx	r3
 800a07a:	b928      	cbnz	r0, 800a088 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	2219      	movs	r2, #25
 800a080:	4620      	mov	r0, r4
 800a082:	615a      	str	r2, [r3, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4798      	blx	r3
{
 800a088:	2600      	movs	r6, #0
 800a08a:	f105 0714 	add.w	r7, r5, #20
 800a08e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a092:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a094:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a098:	42b3      	cmp	r3, r6
 800a09a:	dc0a      	bgt.n	800a0b2 <process_restart+0x46>
  entropy->c = 0;
 800a09c:	2300      	movs	r3, #0
  entropy->a = 0;
 800a09e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a0a2:	f06f 030f 	mvn.w	r3, #15
 800a0a6:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a0a8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a0ac:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a0b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a0b6:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a0ba:	b12b      	cbz	r3, 800a0c8 <process_restart+0x5c>
 800a0bc:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a0c0:	b9ab      	cbnz	r3, 800a0ee <process_restart+0x82>
 800a0c2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a0c6:	b9e3      	cbnz	r3, 800a102 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800a0c8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a0cc:	2240      	movs	r2, #64	; 0x40
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	330e      	adds	r3, #14
 800a0d2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a0d6:	f01f fbf5 	bl	80298c4 <memset>
      entropy->last_dc_val[ci] = 0;
 800a0da:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800a0de:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a0e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a0e6:	b97b      	cbnz	r3, 800a108 <process_restart+0x9c>
 800a0e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a0ec:	b14b      	cbz	r3, 800a102 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a0ee:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a0f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	331e      	adds	r3, #30
 800a0fa:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a0fe:	f01f fbe1 	bl	80298c4 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a102:	3601      	adds	r6, #1
 800a104:	3704      	adds	r7, #4
 800a106:	e7c5      	b.n	800a094 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a108:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a10c:	e7ee      	b.n	800a0ec <process_restart+0x80>

0800a10e <decode_mcu>:
{
 800a10e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a112:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a116:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a118:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800a11c:	ed2d 8b02 	vpush	{d8}
 800a120:	b087      	sub	sp, #28
 800a122:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a124:	b133      	cbz	r3, 800a134 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800a126:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a128:	b90b      	cbnz	r3, 800a12e <decode_mcu+0x20>
      process_restart(cinfo);
 800a12a:	f7ff ff9f 	bl	800a06c <process_restart>
    entropy->restarts_to_go--;
 800a12e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a130:	3b01      	subs	r3, #1
 800a132:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a134:	692b      	ldr	r3, [r5, #16]
 800a136:	3301      	adds	r3, #1
 800a138:	f000 809f 	beq.w	800a27a <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 800a13c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a140:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800a142:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a144:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800a148:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a14a:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800a14e:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a152:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a156:	42bb      	cmp	r3, r7
 800a158:	f340 808f 	ble.w	800a27a <decode_mcu+0x16c>
    block = MCU_data[blkn];
 800a15c:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800a15e:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a160:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800a162:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a166:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800a168:	f852 3b04 	ldr.w	r3, [r2], #4
 800a16c:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800a16e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a172:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800a176:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a17a:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800a17e:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800a180:	6952      	ldr	r2, [r2, #20]
 800a182:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800a186:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a188:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800a18c:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800a18e:	4631      	mov	r1, r6
 800a190:	f7ff fdea 	bl	8009d68 <arith_decode>
 800a194:	bb68      	cbnz	r0, 800a1f2 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800a196:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800a19a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a19e:	9a00      	ldr	r2, [sp, #0]
 800a1a0:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800a1a2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80c4 	beq.w	800a334 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 800a1ac:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800a1ae:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800a1b0:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800a1b2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a1b6:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800a1ba:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800a1be:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a1c2:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800a1c4:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	f7ff fdcd 	bl	8009d68 <arith_decode>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f040 80b0 	bne.w	800a334 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800a1d4:	f109 0101 	add.w	r1, r9, #1
 800a1d8:	4620      	mov	r0, r4
	k++;
 800a1da:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800a1dc:	f7ff fdc4 	bl	8009d68 <arith_decode>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d16e      	bne.n	800a2c2 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800a1e4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800a1e8:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800a1ec:	42b2      	cmp	r2, r6
 800a1ee:	dcf1      	bgt.n	800a1d4 <decode_mcu+0xc6>
 800a1f0:	e038      	b.n	800a264 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800a1f2:	1c71      	adds	r1, r6, #1
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f7ff fdb7 	bl	8009d68 <arith_decode>
      st += 2; st += sign;
 800a1fa:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a1fc:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a1fe:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a200:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a204:	4651      	mov	r1, sl
 800a206:	f7ff fdaf 	bl	8009d68 <arith_decode>
 800a20a:	4606      	mov	r6, r0
 800a20c:	b140      	cbz	r0, 800a220 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a20e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a212:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800a216:	4651      	mov	r1, sl
 800a218:	4620      	mov	r0, r4
 800a21a:	f7ff fda5 	bl	8009d68 <arith_decode>
 800a21e:	b9e8      	cbnz	r0, 800a25c <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a220:	9b02      	ldr	r3, [sp, #8]
 800a222:	4423      	add	r3, r4
 800a224:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a228:	4699      	mov	r9, r3
 800a22a:	2301      	movs	r3, #1
 800a22c:	fa03 f202 	lsl.w	r2, r3, r2
 800a230:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800a234:	da2a      	bge.n	800a28c <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a236:	2200      	movs	r2, #0
      st += 14;
 800a238:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800a23c:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a23e:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800a242:	1076      	asrs	r6, r6, #1
 800a244:	d130      	bne.n	800a2a8 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800a246:	f1b8 0f00 	cmp.w	r8, #0
 800a24a:	d137      	bne.n	800a2bc <decode_mcu+0x1ae>
 800a24c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a250:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a254:	444a      	add	r2, r9
 800a256:	f8cb 2014 	str.w	r2, [fp, #20]
 800a25a:	e79e      	b.n	800a19a <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800a25c:	0076      	lsls	r6, r6, #1
 800a25e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a262:	d110      	bne.n	800a286 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	2275      	movs	r2, #117	; 0x75
 800a268:	f04f 31ff 	mov.w	r1, #4294967295
 800a26c:	4620      	mov	r0, r4
 800a26e:	615a      	str	r2, [r3, #20]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a274:	f04f 33ff 	mov.w	r3, #4294967295
 800a278:	612b      	str	r3, [r5, #16]
}
 800a27a:	2001      	movs	r0, #1
 800a27c:	b007      	add	sp, #28
 800a27e:	ecbd 8b02 	vpop	{d8}
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a286:	f10a 0a01 	add.w	sl, sl, #1
 800a28a:	e7c4      	b.n	800a216 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a28c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a290:	2301      	movs	r3, #1
 800a292:	fa03 f202 	lsl.w	r2, r3, r2
 800a296:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a29a:	bfcc      	ite	gt
 800a29c:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a2a0:	f108 0201 	addle.w	r2, r8, #1
 800a2a4:	0092      	lsls	r2, r2, #2
 800a2a6:	e7c7      	b.n	800a238 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	9102      	str	r1, [sp, #8]
 800a2ac:	f7ff fd5c 	bl	8009d68 <arith_decode>
 800a2b0:	9902      	ldr	r1, [sp, #8]
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0c5      	beq.n	800a242 <decode_mcu+0x134>
 800a2b6:	ea49 0906 	orr.w	r9, r9, r6
 800a2ba:	e7c2      	b.n	800a242 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800a2bc:	ea6f 0909 	mvn.w	r9, r9
 800a2c0:	e7c6      	b.n	800a250 <decode_mcu+0x142>
      st += 2;
 800a2c2:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a2c6:	ee18 1a10 	vmov	r1, s16
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f7ff fd4c 	bl	8009d68 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a2d0:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a2d2:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f7ff fd47 	bl	8009d68 <arith_decode>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	b1a8      	cbz	r0, 800a30a <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7ff fd41 	bl	8009d68 <arith_decode>
 800a2e6:	b180      	cbz	r0, 800a30a <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a2e8:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800a2ec:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800a2f0:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a2f4:	42b1      	cmp	r1, r6
 800a2f6:	bfac      	ite	ge
 800a2f8:	21bd      	movge	r1, #189	; 0xbd
 800a2fa:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800a2fc:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800a300:	4649      	mov	r1, r9
 800a302:	4620      	mov	r0, r4
 800a304:	f7ff fd30 	bl	8009d68 <arith_decode>
 800a308:	b9b0      	cbnz	r0, 800a338 <decode_mcu+0x22a>
      st += 14;
 800a30a:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800a30e:	46c1      	mov	r9, r8
      while (m >>= 1)
 800a310:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a314:	d118      	bne.n	800a348 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	bb03      	cbnz	r3, 800a35c <decode_mcu+0x24e>
 800a31a:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	9900      	ldr	r1, [sp, #0]
 800a322:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a326:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800a32a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a32e:	42b3      	cmp	r3, r6
 800a330:	f73f af43 	bgt.w	800a1ba <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a334:	3701      	adds	r7, #1
 800a336:	e70c      	b.n	800a152 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800a338:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a33c:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800a340:	d090      	beq.n	800a264 <decode_mcu+0x156>
	    st += 1;
 800a342:	f109 0901 	add.w	r9, r9, #1
 800a346:	e7db      	b.n	800a300 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800a348:	4620      	mov	r0, r4
 800a34a:	9102      	str	r1, [sp, #8]
 800a34c:	f7ff fd0c 	bl	8009d68 <arith_decode>
 800a350:	9902      	ldr	r1, [sp, #8]
 800a352:	2800      	cmp	r0, #0
 800a354:	d0dc      	beq.n	800a310 <decode_mcu+0x202>
 800a356:	ea49 0908 	orr.w	r9, r9, r8
 800a35a:	e7d9      	b.n	800a310 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800a35c:	ea6f 0209 	mvn.w	r2, r9
 800a360:	e7dd      	b.n	800a31e <decode_mcu+0x210>

0800a362 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800a362:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a36e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a372:	ed2d 8b02 	vpush	{d8}
 800a376:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800a378:	b133      	cbz	r3, 800a388 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800a37a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a37c:	b90b      	cbnz	r3, 800a382 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800a37e:	f7ff fe75 	bl	800a06c <process_restart>
    entropy->restarts_to_go--;
 800a382:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a384:	3b01      	subs	r3, #1
 800a386:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a388:	6933      	ldr	r3, [r6, #16]
 800a38a:	3301      	adds	r3, #1
 800a38c:	d076      	beq.n	800a47c <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a38e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a392:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a394:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800a398:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a39c:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a39e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800a3a2:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a3a6:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800a3a8:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a3ac:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a3b0:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a3b2:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800a3b4:	2f00      	cmp	r7, #0
 800a3b6:	dc37      	bgt.n	800a428 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a3b8:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a3bc:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a3c0:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a3c2:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800a3c6:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a3ca:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a3ce:	42ab      	cmp	r3, r5
 800a3d0:	db54      	blt.n	800a47c <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a3d2:	1e6b      	subs	r3, r5, #1
 800a3d4:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800a3d6:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a3d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a3dc:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a3e0:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800a3e4:	dd05      	ble.n	800a3f2 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a3e6:	4651      	mov	r1, sl
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff fcbd 	bl	8009d68 <arith_decode>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d144      	bne.n	800a47c <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800a3f2:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800a3f6:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800a3f8:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800a3fc:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a400:	b1d1      	cbz	r1, 800a438 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800a402:	f10a 0102 	add.w	r1, sl, #2
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff fcae 	bl	8009d68 <arith_decode>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d0dc      	beq.n	800a3ca <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800a410:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800a414:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800a418:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800a41a:	bfb4      	ite	lt
 800a41c:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800a41e:	9a01      	ldrge	r2, [sp, #4]
 800a420:	4413      	add	r3, r2
 800a422:	f8a8 3000 	strh.w	r3, [r8]
 800a426:	e7d0      	b.n	800a3ca <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800a428:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a42c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1c1      	bne.n	800a3b8 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a434:	3f01      	subs	r7, #1
 800a436:	e7bd      	b.n	800a3b4 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a438:	f10a 0101 	add.w	r1, sl, #1
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff fc93 	bl	8009d68 <arith_decode>
 800a442:	b150      	cbz	r0, 800a45a <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a444:	ee18 1a10 	vmov	r1, s16
 800a448:	4620      	mov	r0, r4
 800a44a:	f7ff fc8d 	bl	8009d68 <arith_decode>
	  *thiscoef = m1;
 800a44e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800a452:	2800      	cmp	r0, #0
 800a454:	bf18      	it	ne
 800a456:	4613      	movne	r3, r2
 800a458:	e7e3      	b.n	800a422 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800a45a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a45e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800a462:	42aa      	cmp	r2, r5
 800a464:	dac5      	bge.n	800a3f2 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	2275      	movs	r2, #117	; 0x75
 800a46a:	f04f 31ff 	mov.w	r1, #4294967295
 800a46e:	4620      	mov	r0, r4
 800a470:	615a      	str	r2, [r3, #20]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	6133      	str	r3, [r6, #16]
}
 800a47c:	2001      	movs	r0, #1
 800a47e:	b005      	add	sp, #20
 800a480:	ecbd 8b02 	vpop	{d8}
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a488 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800a488:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a494:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a498:	b133      	cbz	r3, 800a4a8 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800a49a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a49c:	b90b      	cbnz	r3, 800a4a2 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800a49e:	f7ff fde5 	bl	800a06c <process_restart>
    entropy->restarts_to_go--;
 800a4a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a4a8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800a4ac:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a4ae:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a4b0:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a4b2:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a4b4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	dc02      	bgt.n	800a4c2 <decode_mcu_DC_refine+0x3a>
}
 800a4bc:	2001      	movs	r0, #1
 800a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff fc4f 	bl	8009d68 <arith_decode>
 800a4ca:	b120      	cbz	r0, 800a4d6 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800a4cc:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800a4d0:	8813      	ldrh	r3, [r2, #0]
 800a4d2:	433b      	orrs	r3, r7
 800a4d4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a4d6:	3501      	adds	r5, #1
 800a4d8:	e7ec      	b.n	800a4b4 <decode_mcu_DC_refine+0x2c>

0800a4da <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800a4da:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a4de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	b087      	sub	sp, #28
 800a4e6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a4e8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a4ec:	b133      	cbz	r3, 800a4fc <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a4ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a4f0:	b90b      	cbnz	r3, 800a4f6 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800a4f2:	f7ff fdbb 	bl	800a06c <process_restart>
    entropy->restarts_to_go--;
 800a4f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a4fc:	6933      	ldr	r3, [r6, #16]
 800a4fe:	3301      	adds	r3, #1
 800a500:	d01d      	beq.n	800a53e <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800a502:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a504:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800a508:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800a50c:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a50e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a512:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800a51c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a51e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a522:	42ab      	cmp	r3, r5
 800a524:	db0b      	blt.n	800a53e <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a526:	1e69      	subs	r1, r5, #1
 800a528:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a52c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a52e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a532:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a536:	4641      	mov	r1, r8
 800a538:	f7ff fc16 	bl	8009d68 <arith_decode>
 800a53c:	b1b0      	cbz	r0, 800a56c <decode_mcu_AC_first+0x92>
}
 800a53e:	2001      	movs	r0, #1
 800a540:	b007      	add	sp, #28
 800a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a546:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a548:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a54c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a550:	42aa      	cmp	r2, r5
 800a552:	da0b      	bge.n	800a56c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	2275      	movs	r2, #117	; 0x75
 800a558:	f04f 31ff 	mov.w	r1, #4294967295
 800a55c:	4620      	mov	r0, r4
 800a55e:	615a      	str	r2, [r3, #20]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a564:	f04f 33ff 	mov.w	r3, #4294967295
 800a568:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a56a:	e7e8      	b.n	800a53e <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a56c:	f108 0101 	add.w	r1, r8, #1
 800a570:	4620      	mov	r0, r4
 800a572:	f7ff fbf9 	bl	8009d68 <arith_decode>
 800a576:	2800      	cmp	r0, #0
 800a578:	d0e5      	beq.n	800a546 <decode_mcu_AC_first+0x6c>
    st += 2;
 800a57a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a57e:	4659      	mov	r1, fp
 800a580:	4620      	mov	r0, r4
 800a582:	f7ff fbf1 	bl	8009d68 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a586:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a588:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7ff fbec 	bl	8009d68 <arith_decode>
 800a590:	4607      	mov	r7, r0
 800a592:	b1b0      	cbz	r0, 800a5c2 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a594:	4641      	mov	r1, r8
 800a596:	4620      	mov	r0, r4
 800a598:	f7ff fbe6 	bl	8009d68 <arith_decode>
 800a59c:	b188      	cbz	r0, 800a5c2 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a59e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a5a0:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a5a2:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a5a6:	18e1      	adds	r1, r4, r3
 800a5a8:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a5ac:	42a9      	cmp	r1, r5
 800a5ae:	bfac      	ite	ge
 800a5b0:	21bd      	movge	r1, #189	; 0xbd
 800a5b2:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a5b4:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff fbd4 	bl	8009d68 <arith_decode>
 800a5c0:	b988      	cbnz	r0, 800a5e6 <decode_mcu_AC_first+0x10c>
    st += 14;
 800a5c2:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a5c6:	463a      	mov	r2, r7
    while (m >>= 1)
 800a5c8:	107f      	asrs	r7, r7, #1
 800a5ca:	d113      	bne.n	800a5f4 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	b9e3      	cbnz	r3, 800a60a <decode_mcu_AC_first+0x130>
 800a5d0:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a5d2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a5d6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a5da:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a5dc:	408a      	lsls	r2, r1
 800a5de:	9902      	ldr	r1, [sp, #8]
 800a5e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a5e4:	e79b      	b.n	800a51e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a5e6:	007f      	lsls	r7, r7, #1
 800a5e8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a5ec:	d0b2      	beq.n	800a554 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a5ee:	f108 0801 	add.w	r8, r8, #1
 800a5f2:	e7e1      	b.n	800a5b8 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a5fa:	f7ff fbb5 	bl	8009d68 <arith_decode>
 800a5fe:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a602:	2800      	cmp	r0, #0
 800a604:	d0e0      	beq.n	800a5c8 <decode_mcu_AC_first+0xee>
 800a606:	433a      	orrs	r2, r7
 800a608:	e7de      	b.n	800a5c8 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a60a:	43d2      	mvns	r2, r2
 800a60c:	e7e1      	b.n	800a5d2 <decode_mcu_AC_first+0xf8>

0800a60e <decode_mcu_DC_first>:
{
 800a60e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a612:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a616:	b085      	sub	sp, #20
 800a618:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a61a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a61e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a620:	b133      	cbz	r3, 800a630 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a622:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a624:	b90b      	cbnz	r3, 800a62a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a626:	f7ff fd21 	bl	800a06c <process_restart>
    entropy->restarts_to_go--;
 800a62a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a62c:	3b01      	subs	r3, #1
 800a62e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a630:	6933      	ldr	r3, [r6, #16]
 800a632:	3301      	adds	r3, #1
 800a634:	d073      	beq.n	800a71e <decode_mcu_DC_first+0x110>
 800a636:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a63a:	f04f 0800 	mov.w	r8, #0
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a644:	4543      	cmp	r3, r8
 800a646:	dd6a      	ble.n	800a71e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800a648:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a64a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a64c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a64e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a652:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a654:	f852 3b04 	ldr.w	r3, [r2], #4
 800a658:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a65a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a65e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a662:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a666:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a66a:	6952      	ldr	r2, [r2, #20]
 800a66c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800a670:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a672:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800a676:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a678:	4629      	mov	r1, r5
 800a67a:	f7ff fb75 	bl	8009d68 <arith_decode>
 800a67e:	b958      	cbnz	r0, 800a698 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a680:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a684:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a688:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a68c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a690:	4093      	lsls	r3, r2
 800a692:	9a02      	ldr	r2, [sp, #8]
 800a694:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a696:	e7d3      	b.n	800a640 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a698:	1c69      	adds	r1, r5, #1
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7ff fb64 	bl	8009d68 <arith_decode>
      st += 2; st += sign;
 800a6a0:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a6a2:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a6a4:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a6a6:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a6aa:	4659      	mov	r1, fp
 800a6ac:	f7ff fb5c 	bl	8009d68 <arith_decode>
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	b140      	cbz	r0, 800a6c6 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a6b4:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a6b8:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a6bc:	4659      	mov	r1, fp
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff fb52 	bl	8009d68 <arith_decode>
 800a6c4:	b9e0      	cbnz	r0, 800a700 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	4423      	add	r3, r4
 800a6ca:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a6ce:	4699      	mov	r9, r3
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	fa03 f202 	lsl.w	r2, r3, r2
 800a6d6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a6da:	da27      	bge.n	800a72c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800a6e2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a6e6:	46a9      	mov	r9, r5
 800a6e8:	106d      	asrs	r5, r5, #1
 800a6ea:	d12d      	bne.n	800a748 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	d135      	bne.n	800a75c <decode_mcu_DC_first+0x14e>
 800a6f0:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a6f4:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a6f8:	444a      	add	r2, r9
 800a6fa:	f8ca 2014 	str.w	r2, [sl, #20]
 800a6fe:	e7c1      	b.n	800a684 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a700:	006d      	lsls	r5, r5, #1
 800a702:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a706:	d10e      	bne.n	800a726 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	2275      	movs	r2, #117	; 0x75
 800a70c:	f04f 31ff 	mov.w	r1, #4294967295
 800a710:	4620      	mov	r0, r4
 800a712:	615a      	str	r2, [r3, #20]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
 800a71c:	6133      	str	r3, [r6, #16]
}
 800a71e:	2001      	movs	r0, #1
 800a720:	b005      	add	sp, #20
 800a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a726:	f10b 0b01 	add.w	fp, fp, #1
 800a72a:	e7c7      	b.n	800a6bc <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a72c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a730:	2301      	movs	r3, #1
 800a732:	fa03 f202 	lsl.w	r2, r3, r2
 800a736:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a73a:	bfcc      	ite	gt
 800a73c:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a73e:	1c7a      	addle	r2, r7, #1
 800a740:	0092      	lsls	r2, r2, #2
 800a742:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800a746:	e7cc      	b.n	800a6e2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800a748:	4620      	mov	r0, r4
 800a74a:	9100      	str	r1, [sp, #0]
 800a74c:	f7ff fb0c 	bl	8009d68 <arith_decode>
 800a750:	9900      	ldr	r1, [sp, #0]
 800a752:	2800      	cmp	r0, #0
 800a754:	d0c8      	beq.n	800a6e8 <decode_mcu_DC_first+0xda>
 800a756:	ea49 0905 	orr.w	r9, r9, r5
 800a75a:	e7c5      	b.n	800a6e8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800a75c:	ea6f 0909 	mvn.w	r9, r9
 800a760:	e7c8      	b.n	800a6f4 <decode_mcu_DC_first+0xe6>
	...

0800a764 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a764:	6843      	ldr	r3, [r0, #4]
 800a766:	22bc      	movs	r2, #188	; 0xbc
 800a768:	2101      	movs	r1, #1
 800a76a:	681b      	ldr	r3, [r3, #0]
{
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a770:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800a772:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a774:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800a776:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800a77a:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800a77c:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800a780:	2100      	movs	r1, #0
 800a782:	f01f f89f 	bl	80298c4 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800a786:	2371      	movs	r3, #113	; 0x71
 800a788:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800a78c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a790:	b17b      	cbz	r3, 800a7b2 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a792:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a794:	2101      	movs	r1, #1
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	4620      	mov	r0, r4
 800a79a:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a79c:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4798      	blx	r3
 800a7a2:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800a7a4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7aa:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800a7ae:	42ab      	cmp	r3, r5
 800a7b0:	dc00      	bgt.n	800a7b4 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800a7b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7b8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a7ba:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800a7bc:	f01f f882 	bl	80298c4 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a7c0:	e7f2      	b.n	800a7a8 <jinit_arith_decoder+0x44>
 800a7c2:	bf00      	nop
 800a7c4:	08009e45 	.word	0x08009e45

0800a7c8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800a7c8:	4770      	bx	lr
	...

0800a7cc <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a7cc:	6803      	ldr	r3, [r0, #0]
 800a7ce:	227b      	movs	r2, #123	; 0x7b
 800a7d0:	f04f 31ff 	mov.w	r1, #4294967295
{
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a7d8:	615a      	str	r2, [r3, #20]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800a7de:	69a3      	ldr	r3, [r4, #24]
 800a7e0:	4a02      	ldr	r2, [pc, #8]	; (800a7ec <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800a7e2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800a7e4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	605a      	str	r2, [r3, #4]
}
 800a7ea:	bd10      	pop	{r4, pc}
 800a7ec:	0802d1b8 	.word	0x0802d1b8

0800a7f0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a7f0:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a7f2:	1e0c      	subs	r4, r1, #0
{
 800a7f4:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a7f6:	dd08      	ble.n	800a80a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a7f8:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a7fa:	6869      	ldr	r1, [r5, #4]
 800a7fc:	42a1      	cmp	r1, r4
 800a7fe:	db05      	blt.n	800a80c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a800:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a802:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800a804:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a806:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a808:	602b      	str	r3, [r5, #0]
  }
}
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800a80c:	68eb      	ldr	r3, [r5, #12]
 800a80e:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800a810:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800a812:	4798      	blx	r3
 800a814:	e7f1      	b.n	800a7fa <skip_input_data+0xa>

0800a816 <term_source>:
 800a816:	4770      	bx	lr

0800a818 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800a81e:	460d      	mov	r5, r1
 800a820:	b101      	cbz	r1, 800a824 <jpeg_mem_src+0xc>
 800a822:	b92a      	cbnz	r2, 800a830 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	222b      	movs	r2, #43	; 0x2b
 800a828:	4620      	mov	r0, r4
 800a82a:	615a      	str	r2, [r3, #20]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800a830:	69a1      	ldr	r1, [r4, #24]
 800a832:	b929      	cbnz	r1, 800a840 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a834:	6863      	ldr	r3, [r4, #4]
 800a836:	221c      	movs	r2, #28
 800a838:	4620      	mov	r0, r4
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800a83e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800a840:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800a842:	4a06      	ldr	r2, [pc, #24]	; (800a85c <jpeg_mem_src+0x44>)
 800a844:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800a846:	4a06      	ldr	r2, [pc, #24]	; (800a860 <jpeg_mem_src+0x48>)
 800a848:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800a84a:	4a06      	ldr	r2, [pc, #24]	; (800a864 <jpeg_mem_src+0x4c>)
 800a84c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800a84e:	4a06      	ldr	r2, [pc, #24]	; (800a868 <jpeg_mem_src+0x50>)
 800a850:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800a852:	4a06      	ldr	r2, [pc, #24]	; (800a86c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800a854:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800a858:	619a      	str	r2, [r3, #24]
}
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	0800a7c9 	.word	0x0800a7c9
 800a860:	0800a7cd 	.word	0x0800a7cd
 800a864:	0800a7f1 	.word	0x0800a7f1
 800a868:	0800ea49 	.word	0x0800ea49
 800a86c:	0800a817 	.word	0x0800a817

0800a870 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800a870:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a874:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800a878:	2a01      	cmp	r2, #1
 800a87a:	dd05      	ble.n	800a888 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800a87c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a87e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800a880:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800a882:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800a886:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a888:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a88c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a890:	3a01      	subs	r2, #1
 800a892:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800a896:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a898:	bf34      	ite	cc
 800a89a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a89c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800a89e:	e7ee      	b.n	800a87e <start_iMCU_row+0xe>

0800a8a0 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800a8a6:	f7ff bfe3 	b.w	800a870 <start_iMCU_row>

0800a8aa <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	4770      	bx	lr

0800a8ae <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800a8ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b2:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800a8b6:	b08f      	sub	sp, #60	; 0x3c
 800a8b8:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a8ba:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a8be:	465f      	mov	r7, fp
 800a8c0:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a8c2:	f04f 0801 	mov.w	r8, #1
 800a8c6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a8ca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a8ce:	42b3      	cmp	r3, r6
 800a8d0:	dc13      	bgt.n	800a8fa <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a8d2:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a8d4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a8d8:	69eb      	ldr	r3, [r5, #28]
 800a8da:	42b3      	cmp	r3, r6
 800a8dc:	dc22      	bgt.n	800a924 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a8de:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a8e2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a8ee:	d270      	bcs.n	800a9d2 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f7ff ffbd 	bl	800a870 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a8f6:	2003      	movs	r0, #3
 800a8f8:	e044      	b.n	800a984 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800a8fa:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a8fe:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800a900:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a902:	6849      	ldr	r1, [r1, #4]
 800a904:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a908:	3112      	adds	r1, #18
 800a90a:	f8cd 8000 	str.w	r8, [sp]
 800a90e:	435a      	muls	r2, r3
 800a910:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800a914:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a918:	4620      	mov	r0, r4
 800a91a:	47d0      	blx	sl
 800a91c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a920:	3601      	adds	r6, #1
 800a922:	e7d2      	b.n	800a8ca <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800a924:	00b3      	lsls	r3, r6, #2
 800a926:	696f      	ldr	r7, [r5, #20]
 800a928:	9308      	str	r3, [sp, #32]
 800a92a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800a92e:	42bb      	cmp	r3, r7
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	d94a      	bls.n	800a9cc <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a936:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a93a:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800a93c:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a93e:	9206      	str	r2, [sp, #24]
 800a940:	e013      	b.n	800a96a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800a942:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a946:	f04f 0c00 	mov.w	ip, #0
 800a94a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a94e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800a952:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a954:	fb07 f20e 	mul.w	r2, r7, lr
 800a958:	01d2      	lsls	r2, r2, #7
 800a95a:	9204      	str	r2, [sp, #16]
 800a95c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800a960:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a962:	9a05      	ldr	r2, [sp, #20]
 800a964:	4562      	cmp	r2, ip
 800a966:	dc10      	bgt.n	800a98a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a968:	3301      	adds	r3, #1
 800a96a:	9a06      	ldr	r2, [sp, #24]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	dce8      	bgt.n	800a942 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a970:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a974:	f105 0120 	add.w	r1, r5, #32
 800a978:	4620      	mov	r0, r4
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4798      	blx	r3
 800a97e:	bb18      	cbnz	r0, 800a9c8 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800a980:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800a984:	b00f      	add	sp, #60	; 0x3c
 800a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a98a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800a98e:	9904      	ldr	r1, [sp, #16]
 800a990:	f852 2008 	ldr.w	r2, [r2, r8]
 800a994:	440a      	add	r2, r1
 800a996:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a998:	9a03      	ldr	r2, [sp, #12]
 800a99a:	f102 0108 	add.w	r1, r2, #8
 800a99e:	2200      	movs	r2, #0
 800a9a0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800a9a4:	9807      	ldr	r0, [sp, #28]
 800a9a6:	4596      	cmp	lr, r2
 800a9a8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800a9ac:	dc08      	bgt.n	800a9c0 <consume_data+0x112>
 800a9ae:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a9b0:	f10c 0c01 	add.w	ip, ip, #1
 800a9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b6:	f108 0804 	add.w	r8, r8, #4
 800a9ba:	4411      	add	r1, r2
 800a9bc:	9103      	str	r1, [sp, #12]
 800a9be:	e7d0      	b.n	800a962 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a9c0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800a9c2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a9c6:	e7ed      	b.n	800a9a4 <consume_data+0xf6>
	 MCU_col_num++) {
 800a9c8:	3701      	adds	r7, #1
 800a9ca:	e7ae      	b.n	800a92a <consume_data+0x7c>
       yoffset++) {
 800a9cc:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800a9ce:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a9d0:	e782      	b.n	800a8d8 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a9d2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a9dc:	2004      	movs	r0, #4
 800a9de:	e7d1      	b.n	800a984 <consume_data+0xd6>

0800a9e0 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	b089      	sub	sp, #36	; 0x24
 800a9e8:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a9ea:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a9ee:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a9f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a9f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	db1d      	blt.n	800aa3a <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800a9fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800aa02:	d103      	bne.n	800aa0c <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800aa04:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d916      	bls.n	800aa3a <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800aa0c:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aa0e:	2600      	movs	r6, #0
 800aa10:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800aa14:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800aa16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800aa1a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aa1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800aa1e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aa22:	42b3      	cmp	r3, r6
 800aa24:	dc13      	bgt.n	800aa4e <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800aa26:	1c50      	adds	r0, r2, #1
 800aa28:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800aa2c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800aa30:	4290      	cmp	r0, r2
 800aa32:	bf2c      	ite	cs
 800aa34:	2004      	movcs	r0, #4
 800aa36:	2003      	movcc	r0, #3
 800aa38:	e006      	b.n	800aa48 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800aa3a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800aa3e:	4620      	mov	r0, r4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4798      	blx	r3
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d1d4      	bne.n	800a9f2 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800aa48:	b009      	add	sp, #36	; 0x24
 800aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800aa4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aa50:	b913      	cbnz	r3, 800aa58 <decompress_data+0x78>
       ci++, compptr++) {
 800aa52:	3601      	adds	r6, #1
 800aa54:	3558      	adds	r5, #88	; 0x58
 800aa56:	e7e1      	b.n	800aa1c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800aa58:	6861      	ldr	r1, [r4, #4]
 800aa5a:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800aa5c:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800aa5e:	9000      	str	r0, [sp, #0]
 800aa60:	4620      	mov	r0, r4
 800aa62:	6a0f      	ldr	r7, [r1, #32]
 800aa64:	435a      	muls	r2, r3
 800aa66:	9906      	ldr	r1, [sp, #24]
 800aa68:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800aa6c:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800aa6e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800aa72:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800aa74:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	68eb      	ldr	r3, [r5, #12]
 800aa7a:	d221      	bcs.n	800aac0 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800aa7c:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800aa7e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800aa82:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800aa84:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800aa8c:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800aa90:	9202      	str	r2, [sp, #8]
 800aa92:	9a02      	ldr	r2, [sp, #8]
 800aa94:	4552      	cmp	r2, sl
 800aa96:	dadc      	bge.n	800aa52 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800aa98:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800aa9a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800aa9e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800aaa0:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800aaa2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aaa6:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800aaa8:	69e9      	ldr	r1, [r5, #28]
 800aaaa:	9a05      	ldr	r2, [sp, #20]
 800aaac:	4541      	cmp	r1, r8
 800aaae:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800aab2:	d80f      	bhi.n	800aad4 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800aab4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800aab6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800aaba:	9a02      	ldr	r2, [sp, #8]
 800aabc:	3201      	adds	r2, #1
 800aabe:	e7e7      	b.n	800aa90 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800aac0:	6a2a      	ldr	r2, [r5, #32]
 800aac2:	fbb2 f1f3 	udiv	r1, r2, r3
 800aac6:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800aaca:	f1ba 0f00 	cmp.w	sl, #0
 800aace:	bf08      	it	eq
 800aad0:	469a      	moveq	sl, r3
 800aad2:	e7d4      	b.n	800aa7e <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800aad4:	f8cd 9000 	str.w	r9, [sp]
 800aad8:	4629      	mov	r1, r5
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	4620      	mov	r0, r4
 800aade:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800aae0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800aae2:	f108 0801 	add.w	r8, r8, #1
 800aae6:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800aae8:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800aaea:	e7dd      	b.n	800aaa8 <decompress_data+0xc8>

0800aaec <start_output_pass>:
{
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800aaf0:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800aaf4:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800aaf6:	692b      	ldr	r3, [r5, #16]
 800aaf8:	b323      	cbz	r3, 800ab44 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800aafa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d04b      	beq.n	800ab98 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800ab00:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d047      	beq.n	800ab98 <start_output_pass+0xac>
 800ab08:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d043      	beq.n	800ab98 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800ab10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ab12:	b93b      	cbnz	r3, 800ab24 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab14:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ab16:	2118      	movs	r1, #24
 800ab18:	6843      	ldr	r3, [r0, #4]
 800ab1a:	434a      	muls	r2, r1
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800ab22:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab24:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800ab26:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab2a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800ab2e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800ab32:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab36:	fb0e c703 	mla	r7, lr, r3, ip
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	db07      	blt.n	800ab4e <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800ab3e:	b359      	cbz	r1, 800ab98 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800ab40:	4b16      	ldr	r3, [pc, #88]	; (800ab9c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800ab42:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800ab4e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ab50:	b312      	cbz	r2, 800ab98 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800ab52:	8816      	ldrh	r6, [r2, #0]
 800ab54:	b306      	cbz	r6, 800ab98 <start_output_pass+0xac>
 800ab56:	8856      	ldrh	r6, [r2, #2]
 800ab58:	b1f6      	cbz	r6, 800ab98 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800ab5a:	8a16      	ldrh	r6, [r2, #16]
 800ab5c:	b1e6      	cbz	r6, 800ab98 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800ab5e:	8c16      	ldrh	r6, [r2, #32]
 800ab60:	b1d6      	cbz	r6, 800ab98 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800ab62:	8a56      	ldrh	r6, [r2, #18]
 800ab64:	b1c6      	cbz	r6, 800ab98 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800ab66:	8892      	ldrh	r2, [r2, #4]
 800ab68:	b1b2      	cbz	r2, 800ab98 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800ab6a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800ab6e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800ab70:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800ab72:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	db0e      	blt.n	800ab98 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800ab7a:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ab7c:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800ab80:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ab82:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800ab86:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800ab8a:	bf18      	it	ne
 800ab8c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800ab8e:	2a06      	cmp	r2, #6
 800ab90:	d1f4      	bne.n	800ab7c <start_output_pass+0x90>
       ci++, compptr++) {
 800ab92:	3301      	adds	r3, #1
 800ab94:	3058      	adds	r0, #88	; 0x58
 800ab96:	e7cd      	b.n	800ab34 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800ab98:	4b01      	ldr	r3, [pc, #4]	; (800aba0 <start_output_pass+0xb4>)
 800ab9a:	e7d2      	b.n	800ab42 <start_output_pass+0x56>
 800ab9c:	0800ad23 	.word	0x0800ad23
 800aba0:	0800a9e1 	.word	0x0800a9e1

0800aba4 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800aba4:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800abac:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800abae:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800abb2:	4604      	mov	r4, r0
 800abb4:	ed2d 8b02 	vpush	{d8}
 800abb8:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800abba:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800abbc:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800abc0:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800abc2:	3b01      	subs	r3, #1
 800abc4:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800abc6:	69ab      	ldr	r3, [r5, #24]
 800abc8:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800abca:	f105 0320 	add.w	r3, r5, #32
 800abce:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800abd2:	69eb      	ldr	r3, [r5, #28]
 800abd4:	9a03      	ldr	r2, [sp, #12]
 800abd6:	4293      	cmp	r3, r2
 800abd8:	dc13      	bgt.n	800ac02 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800abda:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800abde:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800abe2:	3301      	adds	r3, #1
 800abe4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800abe8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800abec:	3301      	adds	r3, #1
 800abee:	4293      	cmp	r3, r2
 800abf0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800abf4:	f080 808e 	bcs.w	800ad14 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7ff fe39 	bl	800a870 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800abfe:	2003      	movs	r0, #3
 800ac00:	e02a      	b.n	800ac58 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800ac02:	696f      	ldr	r7, [r5, #20]
 800ac04:	9b08      	ldr	r3, [sp, #32]
 800ac06:	429f      	cmp	r7, r3
 800ac08:	d905      	bls.n	800ac16 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	3301      	adds	r3, #1
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	e7dd      	b.n	800abd2 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800ac16:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800ac1a:	b133      	cbz	r3, 800ac2a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800ac1c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800ac20:	2100      	movs	r1, #0
 800ac22:	6a28      	ldr	r0, [r5, #32]
 800ac24:	01d2      	lsls	r2, r2, #7
 800ac26:	f01e fe4d 	bl	80298c4 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800ac2a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800ac2e:	ee18 1a10 	vmov	r1, s16
 800ac32:	4620      	mov	r0, r4
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4798      	blx	r3
 800ac38:	b158      	cbz	r0, 800ac52 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ac3a:	f04f 0b00 	mov.w	fp, #0
 800ac3e:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800ac42:	46da      	mov	sl, fp
 800ac44:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ac46:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ac4a:	455b      	cmp	r3, fp
 800ac4c:	dc09      	bgt.n	800ac62 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800ac4e:	3701      	adds	r7, #1
 800ac50:	e7d8      	b.n	800ac04 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800ac52:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800ac54:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800ac58:	b00f      	add	sp, #60	; 0x3c
 800ac5a:	ecbd 8b02 	vpop	{d8}
 800ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800ac62:	9b05      	ldr	r3, [sp, #20]
 800ac64:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac68:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800ac6a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ac6c:	b923      	cbnz	r3, 800ac78 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800ac6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac70:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ac72:	f10b 0b01 	add.w	fp, fp, #1
 800ac76:	e7e6      	b.n	800ac46 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ac78:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ac7a:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ac7e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800ac82:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ac84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800ac8c:	9b08      	ldr	r3, [sp, #32]
 800ac8e:	429f      	cmp	r7, r3
 800ac90:	bf34      	ite	cc
 800ac92:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800ac94:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800ac96:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800ac98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ac9a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800ac9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ac9e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800aca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800aca6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800aca8:	437a      	muls	r2, r7
 800acaa:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800acac:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800acae:	4542      	cmp	r2, r8
 800acb0:	dddf      	ble.n	800ac72 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800acb2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800acb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acb8:	4282      	cmp	r2, r0
 800acba:	d304      	bcc.n	800acc6 <decompress_onepass+0x122>
 800acbc:	9a03      	ldr	r2, [sp, #12]
 800acbe:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800acc0:	4442      	add	r2, r8
 800acc2:	4290      	cmp	r0, r2
 800acc4:	dd0b      	ble.n	800acde <decompress_onepass+0x13a>
 800acc6:	f10a 0908 	add.w	r9, sl, #8
 800acca:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800acce:	f04f 0900 	mov.w	r9, #0
 800acd2:	9207      	str	r2, [sp, #28]
 800acd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acd6:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800acd8:	9a06      	ldr	r2, [sp, #24]
 800acda:	4591      	cmp	r9, r2
 800acdc:	db07      	blt.n	800acee <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800acde:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ace0:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800ace4:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800ace6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800ace8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800acec:	e7de      	b.n	800acac <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800acee:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800acf0:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800acf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800acf8:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800acfa:	9804      	ldr	r0, [sp, #16]
 800acfc:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800ad00:	9000      	str	r0, [sp, #0]
 800ad02:	4620      	mov	r0, r4
 800ad04:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800ad06:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad08:	9b04      	ldr	r3, [sp, #16]
 800ad0a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800ad0c:	4413      	add	r3, r2
 800ad0e:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800ad10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad12:	e7e1      	b.n	800acd8 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800ad14:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ad18:	4620      	mov	r0, r4
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800ad1e:	2004      	movs	r0, #4
 800ad20:	e79a      	b.n	800ac58 <decompress_onepass+0xb4>

0800ad22 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800ad22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ad26:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800ad2a:	b0c5      	sub	sp, #276	; 0x114
 800ad2c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ad2e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800ad32:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ad34:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800ad36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ad3a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800ad3e:	428b      	cmp	r3, r1
 800ad40:	dc03      	bgt.n	800ad4a <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800ad42:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800ad46:	6950      	ldr	r0, [r2, #20]
 800ad48:	b1a8      	cbz	r0, 800ad76 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ad4a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad4c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ad50:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad52:	2300      	movs	r3, #0
 800ad54:	9303      	str	r3, [sp, #12]
 800ad56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad58:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800ad5a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad5e:	428b      	cmp	r3, r1
 800ad60:	dc1e      	bgt.n	800ada0 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800ad62:	3201      	adds	r2, #1
 800ad64:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800ad68:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800ad6c:	4282      	cmp	r2, r0
 800ad6e:	bf2c      	ite	cs
 800ad70:	2004      	movcs	r0, #4
 800ad72:	2003      	movcc	r0, #3
 800ad74:	e011      	b.n	800ad9a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800ad76:	428b      	cmp	r3, r1
 800ad78:	d10a      	bne.n	800ad90 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800ad7a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800ad7e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ad82:	2900      	cmp	r1, #0
 800ad84:	bf08      	it	eq
 800ad86:	3301      	addeq	r3, #1
 800ad88:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d8dc      	bhi.n	800ad4a <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800ad90:	6813      	ldr	r3, [r2, #0]
 800ad92:	4620      	mov	r0, r4
 800ad94:	4798      	blx	r3
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d1cd      	bne.n	800ad36 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800ad9a:	b045      	add	sp, #276	; 0x114
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800ada0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ada2:	b923      	cbnz	r3, 800adae <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	3558      	adds	r5, #88	; 0x58
 800ada8:	3301      	adds	r3, #1
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	e7d3      	b.n	800ad56 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800adae:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800adb0:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800adb2:	4293      	cmp	r3, r2
 800adb4:	f240 815a 	bls.w	800b06c <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800adb8:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800adba:	4681      	mov	r9, r0
      last_row = FALSE;
 800adbc:	2100      	movs	r1, #0
      last_row = TRUE;
 800adbe:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800adc0:	6861      	ldr	r1, [r4, #4]
 800adc2:	9e03      	ldr	r6, [sp, #12]
 800adc4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800adc8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800adca:	3148      	adds	r1, #72	; 0x48
 800adcc:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800add0:	2a00      	cmp	r2, #0
 800add2:	f000 8159 	beq.w	800b088 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800add6:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800add8:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800adda:	4403      	add	r3, r0
 800addc:	4342      	muls	r2, r0
 800adde:	4620      	mov	r0, r4
 800ade0:	9600      	str	r6, [sp, #0]
 800ade2:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800ade4:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800ade6:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800ade8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800adec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800adee:	2218      	movs	r2, #24
 800adf0:	9903      	ldr	r1, [sp, #12]
 800adf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800adf4:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800adf6:	fb02 3301 	mla	r3, r2, r1, r3
 800adfa:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800adfc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800adfe:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800ae00:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800ae04:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800ae08:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800ae0a:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800ae0c:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800ae0e:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ae10:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800ae14:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800ae1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae1e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800ae22:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800ae24:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800ae28:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae2a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800ae2e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800ae30:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800ae34:	9315      	str	r3, [sp, #84]	; 0x54
 800ae36:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800ae3a:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800ae3c:	01f3      	lsls	r3, r6, #7
 800ae3e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae40:	0233      	lsls	r3, r6, #8
 800ae42:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800ae44:	01cb      	lsls	r3, r1, #7
 800ae46:	9319      	str	r3, [sp, #100]	; 0x64
 800ae48:	020b      	lsls	r3, r1, #8
 800ae4a:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800ae4c:	01d3      	lsls	r3, r2, #7
 800ae4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae50:	0213      	lsls	r3, r2, #8
 800ae52:	931c      	str	r3, [sp, #112]	; 0x70
 800ae54:	1f03      	subs	r3, r0, #4
 800ae56:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ae58:	2300      	movs	r3, #0
 800ae5a:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800ae5c:	f109 33ff 	add.w	r3, r9, #4294967295
 800ae60:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ae62:	9b04      	ldr	r3, [sp, #16]
 800ae64:	454b      	cmp	r3, r9
 800ae66:	da9d      	bge.n	800ada4 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800ae68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800ae6e:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800ae70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae72:	b11b      	cbz	r3, 800ae7c <decompress_smooth_data+0x15a>
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 810c 	beq.w	800b094 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800ae7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae7e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ae82:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800ae84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae86:	b123      	cbz	r3, 800ae92 <decompress_smooth_data+0x170>
 800ae88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae8a:	9a04      	ldr	r2, [sp, #16]
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	f000 8104 	beq.w	800b09a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800ae92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ae98:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800ae9a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800ae9c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ae9e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800aea2:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800aea4:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800aea6:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800aeaa:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800aeac:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800aeae:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800aeb0:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800aeb2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800aeb6:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800aeba:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800aebc:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800aebe:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800aec2:	2201      	movs	r2, #1
 800aec4:	a924      	add	r1, sp, #144	; 0x90
 800aec6:	4640      	mov	r0, r8
 800aec8:	930a      	str	r3, [sp, #40]	; 0x28
 800aeca:	f00b fe0e 	bl	8016aea <jcopy_block_row>
	if (block_num < last_block_column) {
 800aece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aed2:	4293      	cmp	r3, r2
 800aed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed6:	f240 80ea 	bls.w	800b0ae <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800aeda:	9a07      	ldr	r2, [sp, #28]
 800aedc:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800aee0:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800aee2:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800aee6:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800aee8:	9a08      	ldr	r2, [sp, #32]
 800aeea:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800aeee:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800aef0:	9a05      	ldr	r2, [sp, #20]
 800aef2:	6851      	ldr	r1, [r2, #4]
 800aef4:	b1c1      	cbz	r1, 800af28 <decompress_smooth_data+0x206>
 800aef6:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800aefa:	b9aa      	cbnz	r2, 800af28 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800aefc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aefe:	1a3a      	subs	r2, r7, r0
 800af00:	9806      	ldr	r0, [sp, #24]
 800af02:	4342      	muls	r2, r0
	  if (num >= 0) {
 800af04:	2024      	movs	r0, #36	; 0x24
 800af06:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800af08:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800af0a:	f100 80d7 	bmi.w	800b0bc <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800af0e:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af10:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800af12:	9814      	ldr	r0, [sp, #80]	; 0x50
 800af14:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af18:	dd04      	ble.n	800af24 <decompress_smooth_data+0x202>
 800af1a:	fa06 f101 	lsl.w	r1, r6, r1
 800af1e:	4291      	cmp	r1, r2
 800af20:	dc00      	bgt.n	800af24 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800af22:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800af24:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800af28:	9a05      	ldr	r2, [sp, #20]
 800af2a:	6891      	ldr	r1, [r2, #8]
 800af2c:	b1c9      	cbz	r1, 800af62 <decompress_smooth_data+0x240>
 800af2e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800af32:	b9b2      	cbnz	r2, 800af62 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800af34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af36:	9806      	ldr	r0, [sp, #24]
 800af38:	ebab 0202 	sub.w	r2, fp, r2
 800af3c:	4342      	muls	r2, r0
	  if (num >= 0) {
 800af3e:	2024      	movs	r0, #36	; 0x24
 800af40:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800af42:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800af44:	f100 80c8 	bmi.w	800b0d8 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800af48:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af4a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800af4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800af4e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af52:	dd04      	ble.n	800af5e <decompress_smooth_data+0x23c>
 800af54:	fa06 f101 	lsl.w	r1, r6, r1
 800af58:	4291      	cmp	r1, r2
 800af5a:	dc00      	bgt.n	800af5e <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800af5c:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800af5e:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800af62:	9a05      	ldr	r2, [sp, #20]
 800af64:	68d1      	ldr	r1, [r2, #12]
 800af66:	b1d1      	cbz	r1, 800af9e <decompress_smooth_data+0x27c>
 800af68:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800af6c:	b9ba      	cbnz	r2, 800af9e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800af6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af70:	9806      	ldr	r0, [sp, #24]
 800af72:	445a      	add	r2, fp
 800af74:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800af78:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800af7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800af7c:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800af80:	f100 80b8 	bmi.w	800b0f4 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800af84:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af86:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800af88:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af8a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af8e:	dd04      	ble.n	800af9a <decompress_smooth_data+0x278>
 800af90:	fa06 f101 	lsl.w	r1, r6, r1
 800af94:	4291      	cmp	r1, r2
 800af96:	dc00      	bgt.n	800af9a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800af98:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800af9a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800af9e:	9a05      	ldr	r2, [sp, #20]
 800afa0:	6912      	ldr	r2, [r2, #16]
 800afa2:	b1e2      	cbz	r2, 800afde <decompress_smooth_data+0x2bc>
 800afa4:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800afa8:	b9c9      	cbnz	r1, 800afde <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800afaa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800afac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800afae:	1a09      	subs	r1, r1, r0
 800afb0:	1acb      	subs	r3, r1, r3
 800afb2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afb4:	440b      	add	r3, r1
 800afb6:	9906      	ldr	r1, [sp, #24]
 800afb8:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800afba:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800afbc:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800afc0:	f100 80a6 	bmi.w	800b110 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800afc4:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800afc6:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800afc8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800afca:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800afce:	dd04      	ble.n	800afda <decompress_smooth_data+0x2b8>
 800afd0:	fa06 f202 	lsl.w	r2, r6, r2
 800afd4:	429a      	cmp	r2, r3
 800afd6:	dc00      	bgt.n	800afda <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800afd8:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800afda:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	695a      	ldr	r2, [r3, #20]
 800afe2:	b1da      	cbz	r2, 800b01c <decompress_smooth_data+0x2fa>
 800afe4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800afe8:	b9c3      	cbnz	r3, 800b01c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800afea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800afec:	463b      	mov	r3, r7
 800afee:	440b      	add	r3, r1
 800aff0:	9906      	ldr	r1, [sp, #24]
 800aff2:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800aff6:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800aff8:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800affa:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800affe:	f100 8095 	bmi.w	800b12c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b002:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b004:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b006:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b008:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b00c:	dd04      	ble.n	800b018 <decompress_smooth_data+0x2f6>
 800b00e:	fa06 f202 	lsl.w	r2, r6, r2
 800b012:	429a      	cmp	r2, r3
 800b014:	dc00      	bgt.n	800b018 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800b016:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800b018:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b01e:	aa24      	add	r2, sp, #144	; 0x90
 800b020:	4629      	mov	r1, r5
 800b022:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	4620      	mov	r0, r4
 800b028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b02a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b02e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b030:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800b032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b034:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b036:	3380      	adds	r3, #128	; 0x80
 800b038:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800b03c:	9307      	str	r3, [sp, #28]
 800b03e:	9b08      	ldr	r3, [sp, #32]
 800b040:	3380      	adds	r3, #128	; 0x80
 800b042:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800b044:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b046:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b048:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800b04a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b04c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b04e:	3301      	adds	r3, #1
 800b050:	930c      	str	r3, [sp, #48]	; 0x30
 800b052:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b056:	428a      	cmp	r2, r1
 800b058:	d222      	bcs.n	800b0a0 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800b05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b05c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b05e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b062:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	3301      	adds	r3, #1
 800b068:	9304      	str	r3, [sp, #16]
 800b06a:	e6fa      	b.n	800ae62 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b06c:	6a2b      	ldr	r3, [r5, #32]
 800b06e:	fbb3 f1f0 	udiv	r1, r3, r0
 800b072:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b076:	f1b9 0f00 	cmp.w	r9, #0
 800b07a:	d103      	bne.n	800b084 <decompress_smooth_data+0x362>
 800b07c:	4603      	mov	r3, r0
 800b07e:	4681      	mov	r9, r0
      last_row = TRUE;
 800b080:	2101      	movs	r1, #1
 800b082:	e69c      	b.n	800adbe <decompress_smooth_data+0x9c>
 800b084:	464b      	mov	r3, r9
 800b086:	e7fb      	b.n	800b080 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800b088:	4620      	mov	r0, r4
 800b08a:	9200      	str	r2, [sp, #0]
 800b08c:	47c0      	blx	r8
      first_row = TRUE;
 800b08e:	2301      	movs	r3, #1
 800b090:	931d      	str	r3, [sp, #116]	; 0x74
 800b092:	e6ab      	b.n	800adec <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800b094:	f8cd 801c 	str.w	r8, [sp, #28]
 800b098:	e6f4      	b.n	800ae84 <decompress_smooth_data+0x162>
 800b09a:	f8cd 8020 	str.w	r8, [sp, #32]
 800b09e:	e6fb      	b.n	800ae98 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800b0a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800b0a2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800b0a6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800b0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ac:	e709      	b.n	800aec2 <decompress_smooth_data+0x1a0>
 800b0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b0b4:	9211      	str	r2, [sp, #68]	; 0x44
 800b0b6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800b0ba:	e719      	b.n	800aef0 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b0bc:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b0be:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b0c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b0c2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b0c6:	dd05      	ble.n	800b0d4 <decompress_smooth_data+0x3b2>
 800b0c8:	fa06 f101 	lsl.w	r1, r6, r1
 800b0cc:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b0ce:	bfd8      	it	le
 800b0d0:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b0d4:	4252      	negs	r2, r2
 800b0d6:	e725      	b.n	800af24 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b0d8:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b0da:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b0dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b0de:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b0e2:	dd05      	ble.n	800b0f0 <decompress_smooth_data+0x3ce>
 800b0e4:	fa06 f101 	lsl.w	r1, r6, r1
 800b0e8:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b0ea:	bfd8      	it	le
 800b0ec:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b0f0:	4252      	negs	r2, r2
 800b0f2:	e734      	b.n	800af5e <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b0f4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b0f6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b0f8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b0fa:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b0fe:	dd05      	ble.n	800b10c <decompress_smooth_data+0x3ea>
 800b100:	fa06 f101 	lsl.w	r1, r6, r1
 800b104:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b106:	bfd8      	it	le
 800b108:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b10c:	4252      	negs	r2, r2
 800b10e:	e744      	b.n	800af9a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b110:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b112:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b114:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b116:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b11a:	dd05      	ble.n	800b128 <decompress_smooth_data+0x406>
 800b11c:	fa06 f202 	lsl.w	r2, r6, r2
 800b120:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b122:	bfd8      	it	le
 800b124:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b128:	425b      	negs	r3, r3
 800b12a:	e756      	b.n	800afda <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b12c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b12e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b130:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b132:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b136:	dd05      	ble.n	800b144 <decompress_smooth_data+0x422>
 800b138:	fa06 f202 	lsl.w	r2, r6, r2
 800b13c:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b13e:	bfd8      	it	le
 800b140:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b144:	425b      	negs	r3, r3
 800b146:	e767      	b.n	800b018 <decompress_smooth_data+0x2f6>

0800b148 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b148:	6843      	ldr	r3, [r0, #4]
 800b14a:	2274      	movs	r2, #116	; 0x74
{
 800b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b150:	681b      	ldr	r3, [r3, #0]
{
 800b152:	b085      	sub	sp, #20
 800b154:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b156:	2101      	movs	r1, #1
{
 800b158:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b15a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800b15c:	4b2c      	ldr	r3, [pc, #176]	; (800b210 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800b15e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800b160:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b164:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800b166:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800b168:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800b16c:	4b29      	ldr	r3, [pc, #164]	; (800b214 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800b16e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800b170:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800b172:	b37e      	cbz	r6, 800b1d4 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b174:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800b178:	46ca      	mov	sl, r9
 800b17a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b17c:	42bb      	cmp	r3, r7
 800b17e:	dc07      	bgt.n	800b190 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800b180:	4b25      	ldr	r3, [pc, #148]	; (800b218 <jinit_d_coef_controller+0xd0>)
 800b182:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800b184:	4b25      	ldr	r3, [pc, #148]	; (800b21c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800b186:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800b18a:	b005      	add	sp, #20
 800b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800b190:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800b194:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800b198:	b10b      	cbz	r3, 800b19e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800b19a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b19e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800b1a0:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b1a2:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800b1a4:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b1a6:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b1aa:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b1ae:	f00b fc82 	bl	8016ab6 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b1b2:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b1b6:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b1b8:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800b1bc:	f00b fc7b 	bl	8016ab6 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	e9cd 0800 	strd	r0, r8, [sp]
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47d8      	blx	fp
 800b1ce:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800b1d2:	e7d2      	b.n	800b17a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b1d4:	686b      	ldr	r3, [r5, #4]
 800b1d6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4628      	mov	r0, r5
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b1e2:	f104 0320 	add.w	r3, r4, #32
 800b1e6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800b1e8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b1ec:	454b      	cmp	r3, r9
 800b1ee:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800b1f2:	d1f9      	bne.n	800b1e8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800b1f4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800b1f8:	b919      	cbnz	r1, 800b202 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800b1fa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b1fe:	f01e fb61 	bl	80298c4 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800b202:	4b07      	ldr	r3, [pc, #28]	; (800b220 <jinit_d_coef_controller+0xd8>)
 800b204:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800b206:	4b07      	ldr	r3, [pc, #28]	; (800b224 <jinit_d_coef_controller+0xdc>)
 800b208:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800b20a:	2300      	movs	r3, #0
 800b20c:	6123      	str	r3, [r4, #16]
}
 800b20e:	e7bc      	b.n	800b18a <jinit_d_coef_controller+0x42>
 800b210:	0800a8a1 	.word	0x0800a8a1
 800b214:	0800aaed 	.word	0x0800aaed
 800b218:	0800a8af 	.word	0x0800a8af
 800b21c:	0800a9e1 	.word	0x0800a9e1
 800b220:	0800a8ab 	.word	0x0800a8ab
 800b224:	0800aba5 	.word	0x0800aba5

0800b228 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b228:	6843      	ldr	r3, [r0, #4]
 800b22a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b22e:	2101      	movs	r1, #1
 800b230:	681b      	ldr	r3, [r3, #0]
{
 800b232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b238:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b23c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b23e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800b246:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b248:	4620      	mov	r0, r4
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b24e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800b250:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2101      	movs	r1, #1
 800b25a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b25c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800b2dc <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b260:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b262:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800b264:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b266:	2101      	movs	r1, #1
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b270:	4f17      	ldr	r7, [pc, #92]	; (800b2d0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b272:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b274:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800b276:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b278:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b27a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800b2e0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b27e:	4915      	ldr	r1, [pc, #84]	; (800b2d4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800b280:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b284:	4d14      	ldr	r5, [pc, #80]	; (800b2d8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b286:	fb08 e203 	mla	r2, r8, r3, lr
 800b28a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800b28c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b290:	fb07 f203 	mul.w	r2, r7, r3
 800b294:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800b298:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800b29c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800b29e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b2a2:	fb05 f203 	mul.w	r2, r5, r3
 800b2a6:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800b2aa:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800b2ae:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b2b2:	fb01 f203 	mul.w	r2, r1, r3
 800b2b6:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800b2ba:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b2be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c8:	d1dd      	bne.n	800b286 <build_ycc_rgb_table+0x5e>
  }
}
 800b2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ce:	bf00      	nop
 800b2d0:	0001c5a2 	.word	0x0001c5a2
 800b2d4:	ffffa7e6 	.word	0xffffa7e6
 800b2d8:	ffff492e 	.word	0xffff492e
 800b2dc:	000166e9 	.word	0x000166e9
 800b2e0:	ff4d0b80 	.word	0xff4d0b80

0800b2e4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b2e8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b2ec:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b2ee:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b2f0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b2f4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b2f8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b2fc:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800b2fe:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800b300:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b302:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800b306:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b308:	6920      	ldr	r0, [r4, #16]
 800b30a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b30c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b30e:	3a01      	subs	r2, #1
 800b310:	9210      	str	r2, [sp, #64]	; 0x40
 800b312:	d502      	bpl.n	800b31a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b314:	b007      	add	sp, #28
 800b316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b31a:	9a05      	ldr	r2, [sp, #20]
 800b31c:	680c      	ldr	r4, [r1, #0]
 800b31e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800b320:	f853 0b04 	ldr.w	r0, [r3], #4
 800b324:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800b328:	684c      	ldr	r4, [r1, #4]
 800b32a:	5964      	ldr	r4, [r4, r5]
 800b32c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800b330:	688c      	ldr	r4, [r1, #8]
 800b332:	5967      	ldr	r7, [r4, r5]
 800b334:	9c01      	ldr	r4, [sp, #4]
 800b336:	3f01      	subs	r7, #1
 800b338:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800b33c:	45d0      	cmp	r8, sl
 800b33e:	f100 0003 	add.w	r0, r0, #3
 800b342:	d0e3      	beq.n	800b30c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b344:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800b348:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b34c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800b34e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b352:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800b356:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b358:	fa0f fb8b 	sxth.w	fp, fp
 800b35c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b35e:	5d65      	ldrb	r5, [r4, r5]
 800b360:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b364:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800b368:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800b36c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b36e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b370:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800b372:	5d65      	ldrb	r5, [r4, r5]
 800b374:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b378:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800b37c:	5d64      	ldrb	r4, [r4, r5]
 800b37e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800b382:	e7db      	b.n	800b33c <ycc_rgb_convert+0x58>

0800b384 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b388:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800b38c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800b390:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b392:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b394:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b396:	3d01      	subs	r5, #1
 800b398:	d501      	bpl.n	800b39e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b39e:	189c      	adds	r4, r3, r2
 800b3a0:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800b3a2:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800b3a6:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800b3aa:	6848      	ldr	r0, [r1, #4]
 800b3ac:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800b3b0:	6888      	ldr	r0, [r1, #8]
 800b3b2:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	42b8      	cmp	r0, r7
 800b3ba:	d0ec      	beq.n	800b396 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800b3bc:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800b3c0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800b3c4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800b3c8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800b3cc:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800b3d0:	4454      	add	r4, sl
 800b3d2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800b3d6:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800b3da:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800b3de:	4454      	add	r4, sl
		 >> SCALEBITS);
 800b3e0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800b3e2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	e7e6      	b.n	800b3b8 <rgb_gray_convert+0x34>

0800b3ea <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800b3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ee:	9d06      	ldr	r5, [sp, #24]
 800b3f0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b3f4:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b3f6:	3d01      	subs	r5, #1
 800b3f8:	d501      	bpl.n	800b3fe <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800b3fe:	1898      	adds	r0, r3, r2
 800b400:	680c      	ldr	r4, [r1, #0]
 800b402:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800b404:	684c      	ldr	r4, [r1, #4]
 800b406:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800b40a:	688c      	ldr	r4, [r1, #8]
 800b40c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800b410:	2000      	movs	r0, #0
 800b412:	f853 4b04 	ldr.w	r4, [r3], #4
 800b416:	42b0      	cmp	r0, r6
 800b418:	f104 0403 	add.w	r4, r4, #3
 800b41c:	d0eb      	beq.n	800b3f6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800b41e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800b422:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800b426:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800b42a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800b42e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800b432:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800b434:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800b438:	e7ed      	b.n	800b416 <rgb_convert+0x2c>

0800b43a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800b43a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b43e:	9e07      	ldr	r6, [sp, #28]
 800b440:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800b444:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800b446:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800b44a:	3e01      	subs	r6, #1
 800b44c:	d418      	bmi.n	800b480 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800b44e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800b452:	2000      	movs	r0, #0
 800b454:	e00a      	b.n	800b46c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800b456:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b45a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800b45e:	681c      	ldr	r4, [r3, #0]
 800b460:	eb05 080e 	add.w	r8, r5, lr
 800b464:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800b466:	4545      	cmp	r5, r8
 800b468:	d104      	bne.n	800b474 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800b46a:	3001      	adds	r0, #1
 800b46c:	42b8      	cmp	r0, r7
 800b46e:	dbf2      	blt.n	800b456 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800b470:	3304      	adds	r3, #4
 800b472:	e7ea      	b.n	800b44a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800b474:	f815 9b01 	ldrb.w	r9, [r5], #1
 800b478:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800b47c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800b47e:	e7f2      	b.n	800b466 <null_convert+0x2c>
  }
}
 800b480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b484 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b486:	9d05      	ldr	r5, [sp, #20]
 800b488:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b48c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b48e:	3d01      	subs	r5, #1
 800b490:	d500      	bpl.n	800b494 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800b494:	6808      	ldr	r0, [r1, #0]
 800b496:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800b498:	f853 0b04 	ldr.w	r0, [r3], #4
 800b49c:	58a4      	ldr	r4, [r4, r2]
 800b49e:	eb04 0c07 	add.w	ip, r4, r7
 800b4a2:	4564      	cmp	r4, ip
 800b4a4:	f100 0003 	add.w	r0, r0, #3
 800b4a8:	d0f1      	beq.n	800b48e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800b4aa:	f814 6b01 	ldrb.w	r6, [r4], #1
 800b4ae:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b4b2:	f800 6c02 	strb.w	r6, [r0, #-2]
 800b4b6:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800b4ba:	e7f2      	b.n	800b4a2 <gray_rgb_convert+0x1e>

0800b4bc <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b4c0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b4c4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b4c6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b4c8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b4cc:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b4d0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800b4d4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b4d6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800b4da:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b4dc:	6920      	ldr	r0, [r4, #16]
 800b4de:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b4e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4e2:	3a01      	subs	r2, #1
 800b4e4:	9210      	str	r2, [sp, #64]	; 0x40
 800b4e6:	d502      	bpl.n	800b4ee <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800b4e8:	b007      	add	sp, #28
 800b4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b4ee:	eb03 0008 	add.w	r0, r3, r8
 800b4f2:	680a      	ldr	r2, [r1, #0]
 800b4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4f8:	5812      	ldr	r2, [r2, r0]
 800b4fa:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800b4fc:	684a      	ldr	r2, [r1, #4]
 800b4fe:	5812      	ldr	r2, [r2, r0]
 800b500:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800b502:	688a      	ldr	r2, [r1, #8]
 800b504:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800b508:	68ca      	ldr	r2, [r1, #12]
 800b50a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800b50e:	2200      	movs	r2, #0
 800b510:	9800      	ldr	r0, [sp, #0]
 800b512:	3504      	adds	r5, #4
 800b514:	4282      	cmp	r2, r0
 800b516:	d0e3      	beq.n	800b4e0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b518:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800b51c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800b51e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b520:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b524:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b526:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b52a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b52e:	4404      	add	r4, r0
 800b530:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b534:	5d34      	ldrb	r4, [r6, r4]
 800b536:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b53a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b53e:	9405      	str	r4, [sp, #20]
 800b540:	9c02      	ldr	r4, [sp, #8]
 800b542:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b546:	9c05      	ldr	r4, [sp, #20]
 800b548:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b54a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b54e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b552:	5d34      	ldrb	r4, [r6, r4]
 800b554:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b558:	9c01      	ldr	r4, [sp, #4]
 800b55a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b55e:	4420      	add	r0, r4
 800b560:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b564:	5c30      	ldrb	r0, [r6, r0]
 800b566:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b56a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b56e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b570:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b574:	e7cc      	b.n	800b510 <ycck_cmyk_convert+0x54>

0800b576 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b576:	4770      	bx	lr

0800b578 <grayscale_convert>:
{
 800b578:	b513      	push	{r0, r1, r4, lr}
 800b57a:	460c      	mov	r4, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b580:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b582:	6820      	ldr	r0, [r4, #0]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	9b04      	ldr	r3, [sp, #16]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	f00b fa9b 	bl	8016ac6 <jcopy_sample_rows>
}
 800b590:	b002      	add	sp, #8
 800b592:	bd10      	pop	{r4, pc}

0800b594 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b594:	6843      	ldr	r3, [r0, #4]
 800b596:	221c      	movs	r2, #28
 800b598:	2101      	movs	r1, #1
 800b59a:	681b      	ldr	r3, [r3, #0]
{
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b5a0:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b5a2:	4b4a      	ldr	r3, [pc, #296]	; (800b6cc <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b5a4:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b5a6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b5aa:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b5ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b5b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d821      	bhi.n	800b5fa <jinit_color_deconverter+0x66>
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d82d      	bhi.n	800b616 <jinit_color_deconverter+0x82>
 800b5ba:	d023      	beq.n	800b604 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	dd23      	ble.n	800b608 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b5c0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b5c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800b5c8:	2902      	cmp	r1, #2
 800b5ca:	d055      	beq.n	800b678 <jinit_color_deconverter+0xe4>
 800b5cc:	2904      	cmp	r1, #4
 800b5ce:	d066      	beq.n	800b69e <jinit_color_deconverter+0x10a>
 800b5d0:	2901      	cmp	r1, #1
 800b5d2:	d16d      	bne.n	800b6b0 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b5d4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b5d8:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b5da:	2a01      	cmp	r2, #1
 800b5dc:	d124      	bne.n	800b628 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b5de:	4b3c      	ldr	r3, [pc, #240]	; (800b6d0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b5e0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b5e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b5e4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b5e6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b5e8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	dc15      	bgt.n	800b61a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b5ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d169      	bne.n	800b6c8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b5f4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b5f6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b5fa:	3b04      	subs	r3, #4
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d8dd      	bhi.n	800b5bc <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b600:	2a04      	cmp	r2, #4
 800b602:	e000      	b.n	800b606 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b604:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b606:	d0db      	beq.n	800b5c0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	220b      	movs	r2, #11
 800b60c:	4620      	mov	r0, r4
 800b60e:	615a      	str	r2, [r3, #20]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4798      	blx	r3
 800b614:	e7d4      	b.n	800b5c0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b616:	2a03      	cmp	r2, #3
 800b618:	e7f5      	b.n	800b606 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b61a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b61e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b622:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b624:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b626:	e7e0      	b.n	800b5ea <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d146      	bne.n	800b6ba <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b62c:	4b29      	ldr	r3, [pc, #164]	; (800b6d4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b62e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b632:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b634:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b638:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b63a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b63c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b644:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b646:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b648:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b64c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b64e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b652:	fb06 f203 	mul.w	r2, r6, r3
 800b656:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b65a:	fb05 f203 	mul.w	r2, r5, r3
 800b65e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b662:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b666:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b668:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b66c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b670:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b674:	d1ed      	bne.n	800b652 <jinit_color_deconverter+0xbe>
 800b676:	e7ba      	b.n	800b5ee <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b678:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b67a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b67c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b67e:	d105      	bne.n	800b68c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b680:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b682:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b684:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b686:	f7ff fdcf 	bl	800b228 <build_ycc_rgb_table>
 800b68a:	e7b0      	b.n	800b5ee <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d102      	bne.n	800b696 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b690:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b692:	606b      	str	r3, [r5, #4]
 800b694:	e7ab      	b.n	800b5ee <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b696:	2b02      	cmp	r3, #2
 800b698:	d10f      	bne.n	800b6ba <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b69a:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <jinit_color_deconverter+0x14c>)
 800b69c:	e7f9      	b.n	800b692 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b69e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b6a0:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b6a2:	d101      	bne.n	800b6a8 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <jinit_color_deconverter+0x150>)
 800b6a6:	e7ec      	b.n	800b682 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d106      	bne.n	800b6ba <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <jinit_color_deconverter+0x154>)
 800b6ae:	e7f0      	b.n	800b692 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b6b0:	4299      	cmp	r1, r3
 800b6b2:	d102      	bne.n	800b6ba <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b6b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6b6:	67a3      	str	r3, [r4, #120]	; 0x78
 800b6b8:	e7f8      	b.n	800b6ac <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	221c      	movs	r2, #28
 800b6be:	4620      	mov	r0, r4
 800b6c0:	615a      	str	r2, [r3, #20]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4798      	blx	r3
 800b6c6:	e792      	b.n	800b5ee <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e794      	b.n	800b5f6 <jinit_color_deconverter+0x62>
 800b6cc:	0800b577 	.word	0x0800b577
 800b6d0:	0800b579 	.word	0x0800b579
 800b6d4:	0800b385 	.word	0x0800b385
 800b6d8:	0800b2e5 	.word	0x0800b2e5
 800b6dc:	0800b485 	.word	0x0800b485
 800b6e0:	0800b3eb 	.word	0x0800b3eb
 800b6e4:	0800b4bd 	.word	0x0800b4bd
 800b6e8:	0800b43b 	.word	0x0800b43b

0800b6ec <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b6f4:	2500      	movs	r5, #0
{
 800b6f6:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b6f8:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800b6fc:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800b700:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b702:	46ab      	mov	fp, r5
{
 800b704:	ed2d 8b04 	vpush	{d8-d9}
 800b708:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	455b      	cmp	r3, fp
 800b70e:	dc04      	bgt.n	800b71a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b710:	b007      	add	sp, #28
 800b712:	ecbd 8b04 	vpop	{d8-d9}
 800b716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b71a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800b71e:	f240 700e 	movw	r0, #1806	; 0x70e
 800b722:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b726:	4283      	cmp	r3, r0
 800b728:	f000 80d9 	beq.w	800b8de <start_pass+0x1f2>
 800b72c:	dc5a      	bgt.n	800b7e4 <start_pass+0xf8>
 800b72e:	f240 4004 	movw	r0, #1028	; 0x404
 800b732:	4283      	cmp	r3, r0
 800b734:	f000 80d6 	beq.w	800b8e4 <start_pass+0x1f8>
 800b738:	dc2f      	bgt.n	800b79a <start_pass+0xae>
 800b73a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b73e:	f000 80d3 	beq.w	800b8e8 <start_pass+0x1fc>
 800b742:	dc1a      	bgt.n	800b77a <start_pass+0x8e>
 800b744:	f240 2001 	movw	r0, #513	; 0x201
 800b748:	4283      	cmp	r3, r0
 800b74a:	f000 80cf 	beq.w	800b8ec <start_pass+0x200>
 800b74e:	dc0e      	bgt.n	800b76e <start_pass+0x82>
 800b750:	f240 1001 	movw	r0, #257	; 0x101
 800b754:	4283      	cmp	r3, r0
 800b756:	f000 80cb 	beq.w	800b8f0 <start_pass+0x204>
 800b75a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b75e:	f000 80c9 	beq.w	800b8f4 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2007      	movs	r0, #7
 800b766:	61da      	str	r2, [r3, #28]
 800b768:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800b76c:	e0b3      	b.n	800b8d6 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b76e:	f240 2002 	movw	r0, #514	; 0x202
 800b772:	4283      	cmp	r3, r0
 800b774:	d1f5      	bne.n	800b762 <start_pass+0x76>
 800b776:	4d9e      	ldr	r5, [pc, #632]	; (800b9f0 <start_pass+0x304>)
 800b778:	e0b2      	b.n	800b8e0 <start_pass+0x1f4>
 800b77a:	f240 3006 	movw	r0, #774	; 0x306
 800b77e:	4283      	cmp	r3, r0
 800b780:	f000 80ba 	beq.w	800b8f8 <start_pass+0x20c>
 800b784:	f240 4002 	movw	r0, #1026	; 0x402
 800b788:	4283      	cmp	r3, r0
 800b78a:	f000 80b7 	beq.w	800b8fc <start_pass+0x210>
 800b78e:	f240 3003 	movw	r0, #771	; 0x303
 800b792:	4283      	cmp	r3, r0
 800b794:	d1e5      	bne.n	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800b796:	4d97      	ldr	r5, [pc, #604]	; (800b9f4 <start_pass+0x308>)
 800b798:	e0a2      	b.n	800b8e0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b79a:	f240 6003 	movw	r0, #1539	; 0x603
 800b79e:	4283      	cmp	r3, r0
 800b7a0:	f000 80ae 	beq.w	800b900 <start_pass+0x214>
 800b7a4:	dc0e      	bgt.n	800b7c4 <start_pass+0xd8>
 800b7a6:	f240 5005 	movw	r0, #1285	; 0x505
 800b7aa:	4283      	cmp	r3, r0
 800b7ac:	f000 80aa 	beq.w	800b904 <start_pass+0x218>
 800b7b0:	f240 500a 	movw	r0, #1290	; 0x50a
 800b7b4:	4283      	cmp	r3, r0
 800b7b6:	f000 80a7 	beq.w	800b908 <start_pass+0x21c>
 800b7ba:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800b7be:	d1d0      	bne.n	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800b7c0:	4d8d      	ldr	r5, [pc, #564]	; (800b9f8 <start_pass+0x30c>)
 800b7c2:	e08d      	b.n	800b8e0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b7c4:	f240 600c 	movw	r0, #1548	; 0x60c
 800b7c8:	4283      	cmp	r3, r0
 800b7ca:	f000 809f 	beq.w	800b90c <start_pass+0x220>
 800b7ce:	f240 7007 	movw	r0, #1799	; 0x707
 800b7d2:	4283      	cmp	r3, r0
 800b7d4:	f000 809c 	beq.w	800b910 <start_pass+0x224>
 800b7d8:	f240 6006 	movw	r0, #1542	; 0x606
 800b7dc:	4283      	cmp	r3, r0
 800b7de:	d1c0      	bne.n	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800b7e0:	4d86      	ldr	r5, [pc, #536]	; (800b9fc <start_pass+0x310>)
 800b7e2:	e07d      	b.n	800b8e0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b7e4:	f640 4006 	movw	r0, #3078	; 0xc06
 800b7e8:	4283      	cmp	r3, r0
 800b7ea:	f000 8093 	beq.w	800b914 <start_pass+0x228>
 800b7ee:	dc21      	bgt.n	800b834 <start_pass+0x148>
 800b7f0:	f640 1009 	movw	r0, #2313	; 0x909
 800b7f4:	4283      	cmp	r3, r0
 800b7f6:	f000 808f 	beq.w	800b918 <start_pass+0x22c>
 800b7fa:	dc0d      	bgt.n	800b818 <start_pass+0x12c>
 800b7fc:	f640 0008 	movw	r0, #2056	; 0x808
 800b800:	4283      	cmp	r3, r0
 800b802:	d039      	beq.n	800b878 <start_pass+0x18c>
 800b804:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b808:	f000 8088 	beq.w	800b91c <start_pass+0x230>
 800b80c:	f640 0004 	movw	r0, #2052	; 0x804
 800b810:	4283      	cmp	r3, r0
 800b812:	d1a6      	bne.n	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800b814:	4d7a      	ldr	r5, [pc, #488]	; (800ba00 <start_pass+0x314>)
 800b816:	e063      	b.n	800b8e0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b818:	f640 200a 	movw	r0, #2570	; 0xa0a
 800b81c:	4283      	cmp	r3, r0
 800b81e:	d07f      	beq.n	800b920 <start_pass+0x234>
 800b820:	f640 300b 	movw	r0, #2827	; 0xb0b
 800b824:	4283      	cmp	r3, r0
 800b826:	d07d      	beq.n	800b924 <start_pass+0x238>
 800b828:	f640 2005 	movw	r0, #2565	; 0xa05
 800b82c:	4283      	cmp	r3, r0
 800b82e:	d198      	bne.n	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800b830:	4d74      	ldr	r5, [pc, #464]	; (800ba04 <start_pass+0x318>)
 800b832:	e055      	b.n	800b8e0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b834:	f640 600e 	movw	r0, #3598	; 0xe0e
 800b838:	4283      	cmp	r3, r0
 800b83a:	d075      	beq.n	800b928 <start_pass+0x23c>
 800b83c:	dc0d      	bgt.n	800b85a <start_pass+0x16e>
 800b83e:	f640 500d 	movw	r0, #3341	; 0xd0d
 800b842:	4283      	cmp	r3, r0
 800b844:	d072      	beq.n	800b92c <start_pass+0x240>
 800b846:	f640 6007 	movw	r0, #3591	; 0xe07
 800b84a:	4283      	cmp	r3, r0
 800b84c:	d070      	beq.n	800b930 <start_pass+0x244>
 800b84e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800b852:	4283      	cmp	r3, r0
 800b854:	d185      	bne.n	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800b856:	4d6c      	ldr	r5, [pc, #432]	; (800ba08 <start_pass+0x31c>)
 800b858:	e042      	b.n	800b8e0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b85a:	f241 0008 	movw	r0, #4104	; 0x1008
 800b85e:	4283      	cmp	r3, r0
 800b860:	d068      	beq.n	800b934 <start_pass+0x248>
 800b862:	f241 0010 	movw	r0, #4112	; 0x1010
 800b866:	4283      	cmp	r3, r0
 800b868:	d066      	beq.n	800b938 <start_pass+0x24c>
 800b86a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800b86e:	4283      	cmp	r3, r0
 800b870:	f47f af77 	bne.w	800b762 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800b874:	4d65      	ldr	r5, [pc, #404]	; (800ba0c <start_pass+0x320>)
 800b876:	e033      	b.n	800b8e0 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800b878:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d827      	bhi.n	800b8d0 <start_pass+0x1e4>
 800b880:	461c      	mov	r4, r3
 800b882:	4b63      	ldr	r3, [pc, #396]	; (800ba10 <start_pass+0x324>)
 800b884:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b888:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800b88c:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b890:	b1cb      	cbz	r3, 800b8c6 <start_pass+0x1da>
 800b892:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b896:	42a3      	cmp	r3, r4
 800b898:	d015      	beq.n	800b8c6 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800b89a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800b89e:	b196      	cbz	r6, 800b8c6 <start_pass+0x1da>
    switch (method) {
 800b8a0:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800b8a2:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800b8a6:	d049      	beq.n	800b93c <start_pass+0x250>
 800b8a8:	2c02      	cmp	r4, #2
 800b8aa:	d05a      	beq.n	800b962 <start_pass+0x276>
 800b8ac:	2c00      	cmp	r4, #0
 800b8ae:	f040 8098 	bne.w	800b9e2 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b8b2:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b8b6:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800b8b8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800b8bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	2b40      	cmp	r3, #64	; 0x40
 800b8c4:	d1f8      	bne.n	800b8b8 <start_pass+0x1cc>
       ci++, compptr++) {
 800b8c6:	f10b 0b01 	add.w	fp, fp, #1
 800b8ca:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800b8ce:	e71c      	b.n	800b70a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2231      	movs	r2, #49	; 0x31
 800b8d4:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4638      	mov	r0, r7
 800b8da:	4798      	blx	r3
      break;
 800b8dc:	e7d4      	b.n	800b888 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800b8de:	4d4d      	ldr	r5, [pc, #308]	; (800ba14 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800b8e0:	2400      	movs	r4, #0
 800b8e2:	e7d1      	b.n	800b888 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800b8e4:	4d4c      	ldr	r5, [pc, #304]	; (800ba18 <start_pass+0x32c>)
 800b8e6:	e7fb      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800b8e8:	4d4c      	ldr	r5, [pc, #304]	; (800ba1c <start_pass+0x330>)
 800b8ea:	e7f9      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800b8ec:	4d4c      	ldr	r5, [pc, #304]	; (800ba20 <start_pass+0x334>)
 800b8ee:	e7f7      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800b8f0:	4d4c      	ldr	r5, [pc, #304]	; (800ba24 <start_pass+0x338>)
 800b8f2:	e7f5      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800b8f4:	4d4c      	ldr	r5, [pc, #304]	; (800ba28 <start_pass+0x33c>)
 800b8f6:	e7f3      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800b8f8:	4d4c      	ldr	r5, [pc, #304]	; (800ba2c <start_pass+0x340>)
 800b8fa:	e7f1      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800b8fc:	4d4c      	ldr	r5, [pc, #304]	; (800ba30 <start_pass+0x344>)
 800b8fe:	e7ef      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800b900:	4d4c      	ldr	r5, [pc, #304]	; (800ba34 <start_pass+0x348>)
 800b902:	e7ed      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800b904:	4d4c      	ldr	r5, [pc, #304]	; (800ba38 <start_pass+0x34c>)
 800b906:	e7eb      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800b908:	4d4c      	ldr	r5, [pc, #304]	; (800ba3c <start_pass+0x350>)
 800b90a:	e7e9      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800b90c:	4d4c      	ldr	r5, [pc, #304]	; (800ba40 <start_pass+0x354>)
 800b90e:	e7e7      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800b910:	4d4c      	ldr	r5, [pc, #304]	; (800ba44 <start_pass+0x358>)
 800b912:	e7e5      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800b914:	4d4c      	ldr	r5, [pc, #304]	; (800ba48 <start_pass+0x35c>)
 800b916:	e7e3      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800b918:	4d4c      	ldr	r5, [pc, #304]	; (800ba4c <start_pass+0x360>)
 800b91a:	e7e1      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800b91c:	4d4c      	ldr	r5, [pc, #304]	; (800ba50 <start_pass+0x364>)
 800b91e:	e7df      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800b920:	4d4c      	ldr	r5, [pc, #304]	; (800ba54 <start_pass+0x368>)
 800b922:	e7dd      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800b924:	4d4c      	ldr	r5, [pc, #304]	; (800ba58 <start_pass+0x36c>)
 800b926:	e7db      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800b928:	4d4c      	ldr	r5, [pc, #304]	; (800ba5c <start_pass+0x370>)
 800b92a:	e7d9      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800b92c:	4d4c      	ldr	r5, [pc, #304]	; (800ba60 <start_pass+0x374>)
 800b92e:	e7d7      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800b930:	4d4c      	ldr	r5, [pc, #304]	; (800ba64 <start_pass+0x378>)
 800b932:	e7d5      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800b934:	4d4c      	ldr	r5, [pc, #304]	; (800ba68 <start_pass+0x37c>)
 800b936:	e7d3      	b.n	800b8e0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800b938:	4d4c      	ldr	r5, [pc, #304]	; (800ba6c <start_pass+0x380>)
 800b93a:	e7d1      	b.n	800b8e0 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800b93c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b940:	2200      	movs	r2, #0
 800b942:	494b      	ldr	r1, [pc, #300]	; (800ba70 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800b944:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800b948:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800b94c:	fb0c f303 	mul.w	r3, ip, r3
 800b950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b954:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800b956:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b95a:	3201      	adds	r2, #1
 800b95c:	2a40      	cmp	r2, #64	; 0x40
 800b95e:	d1f1      	bne.n	800b944 <start_pass+0x258>
 800b960:	e7b1      	b.n	800b8c6 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b962:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800b966:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b96a:	9304      	str	r3, [sp, #16]
 800b96c:	4b41      	ldr	r3, [pc, #260]	; (800ba74 <start_pass+0x388>)
 800b96e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b970:	9b03      	ldr	r3, [sp, #12]
 800b972:	ecb3 7b02 	vldmia	r3!, {d7}
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	eeb0 8a47 	vmov.f32	s16, s14
 800b97c:	eef0 8a67 	vmov.f32	s17, s15
 800b980:	9b04      	ldr	r3, [sp, #16]
 800b982:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	4b3a      	ldr	r3, [pc, #232]	; (800ba74 <start_pass+0x388>)
 800b98a:	9302      	str	r3, [sp, #8]
 800b98c:	f106 0310 	add.w	r3, r6, #16
 800b990:	9305      	str	r3, [sp, #20]
 800b992:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b994:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b998:	ecb3 7b02 	vldmia	r3!, {d7}
 800b99c:	eeb0 9a47 	vmov.f32	s18, s14
 800b9a0:	eef0 9a67 	vmov.f32	s19, s15
 800b9a4:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b9a6:	f7f4 fdc5 	bl	8000534 <__aeabi_ui2d>
 800b9aa:	ec53 2b18 	vmov	r2, r3, d8
 800b9ae:	f7f4 fe3b 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b9b2:	ec53 2b19 	vmov	r2, r3, d9
 800b9b6:	f7f4 fe37 	bl	8000628 <__aeabi_dmul>
 800b9ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f7f4 fe32 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800b9c4:	f7f5 f842 	bl	8000a4c <__aeabi_d2f>
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	f843 0b04 	str.w	r0, [r3], #4
 800b9ce:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800b9d0:	9b05      	ldr	r3, [sp, #20]
 800b9d2:	429e      	cmp	r6, r3
 800b9d4:	d1dd      	bne.n	800b992 <start_pass+0x2a6>
	    i++;
 800b9d6:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800b9da:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800b9de:	d1c7      	bne.n	800b970 <start_pass+0x284>
 800b9e0:	e771      	b.n	800b8c6 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2231      	movs	r2, #49	; 0x31
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	615a      	str	r2, [r3, #20]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4798      	blx	r3
      break;
 800b9ee:	e76a      	b.n	800b8c6 <start_pass+0x1da>
 800b9f0:	08010ba9 	.word	0x08010ba9
 800b9f4:	08010ab5 	.word	0x08010ab5
 800b9f8:	08014a25 	.word	0x08014a25
 800b9fc:	08010655 	.word	0x08010655
 800ba00:	0801397d 	.word	0x0801397d
 800ba04:	08013735 	.word	0x08013735
 800ba08:	08011601 	.word	0x08011601
 800ba0c:	080122d5 	.word	0x080122d5
 800ba10:	0802d1bc 	.word	0x0802d1bc
 800ba14:	080141b9 	.word	0x080141b9
 800ba18:	08010989 	.word	0x08010989
 800ba1c:	08014d8d 	.word	0x08014d8d
 800ba20:	08013d9d 	.word	0x08013d9d
 800ba24:	08010c21 	.word	0x08010c21
 800ba28:	08014e65 	.word	0x08014e65
 800ba2c:	08014c41 	.word	0x08014c41
 800ba30:	08013ccd 	.word	0x08013ccd
 800ba34:	08013b71 	.word	0x08013b71
 800ba38:	08010805 	.word	0x08010805
 800ba3c:	080147f1 	.word	0x080147f1
 800ba40:	08014531 	.word	0x08014531
 800ba44:	080103ad 	.word	0x080103ad
 800ba48:	08013469 	.word	0x08013469
 800ba4c:	08010c45 	.word	0x08010c45
 800ba50:	08013dd5 	.word	0x08013dd5
 800ba54:	08010f11 	.word	0x08010f11
 800ba58:	08011209 	.word	0x08011209
 800ba5c:	08011e81 	.word	0x08011e81
 800ba60:	080119bd 	.word	0x080119bd
 800ba64:	080130e9 	.word	0x080130e9
 800ba68:	08012ca1 	.word	0x08012ca1
 800ba6c:	08012769 	.word	0x08012769
 800ba70:	0802d208 	.word	0x0802d208
 800ba74:	0802d1c8 	.word	0x0802d1c8

0800ba78 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba7a:	6843      	ldr	r3, [r0, #4]
{
 800ba7c:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba7e:	2254      	movs	r2, #84	; 0x54
 800ba80:	2101      	movs	r1, #1
 800ba82:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ba84:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba86:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <jinit_inverse_dct+0x50>)
 800ba8a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ba8c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800ba90:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800ba94:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ba98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba9a:	42b3      	cmp	r3, r6
 800ba9c:	dc00      	bgt.n	800baa0 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800ba9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800baa0:	686b      	ldr	r3, [r5, #4]
 800baa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baa6:	2101      	movs	r1, #1
 800baa8:	4628      	mov	r0, r5
 800baaa:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800baac:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800baae:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bab0:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800bab4:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bab6:	2100      	movs	r1, #0
 800bab8:	f01d ff04 	bl	80298c4 <memset>
    idct->cur_method[ci] = -1;
 800babc:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800bac0:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800bac2:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800bac6:	e7e7      	b.n	800ba98 <jinit_inverse_dct+0x20>
 800bac8:	0800b6ed 	.word	0x0800b6ed

0800bacc <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800bacc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800bad0:	6905      	ldr	r5, [r0, #16]
{
 800bad2:	4607      	mov	r7, r0
 800bad4:	4688      	mov	r8, r1
 800bad6:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bad8:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800badc:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800bade:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bae2:	f1bb 0f00 	cmp.w	fp, #0
 800bae6:	d042      	beq.n	800bb6e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800bae8:	454e      	cmp	r6, r9
 800baea:	da42      	bge.n	800bb72 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800baec:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	b95b      	cbnz	r3, 800bb0c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	2278      	movs	r2, #120	; 0x78
 800baf8:	f04f 31ff 	mov.w	r1, #4294967295
 800bafc:	4628      	mov	r0, r5
 800bafe:	615a      	str	r2, [r3, #20]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800bb04:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bb08:	2201      	movs	r2, #1
 800bb0a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800bb0c:	f1c6 0619 	rsb	r6, r6, #25
 800bb10:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800bb14:	2619      	movs	r6, #25
 800bb16:	e02c      	b.n	800bb72 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800bb18:	f1ba 0f00 	cmp.w	sl, #0
 800bb1c:	d107      	bne.n	800bb2e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bb1e:	69ab      	ldr	r3, [r5, #24]
 800bb20:	4628      	mov	r0, r5
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	4798      	blx	r3
 800bb26:	b350      	cbz	r0, 800bb7e <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800bb28:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bb2a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800bb2e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800bb32:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800bb36:	2aff      	cmp	r2, #255	; 0xff
 800bb38:	d116      	bne.n	800bb68 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800bb3a:	f1ba 0f00 	cmp.w	sl, #0
 800bb3e:	d109      	bne.n	800bb54 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bb40:	69ab      	ldr	r3, [r5, #24]
 800bb42:	4628      	mov	r0, r5
 800bb44:	9201      	str	r2, [sp, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	4798      	blx	r3
 800bb4a:	b1c0      	cbz	r0, 800bb7e <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800bb4c:	69ab      	ldr	r3, [r5, #24]
 800bb4e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bb50:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800bb54:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800bb58:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800bb5c:	2bff      	cmp	r3, #255	; 0xff
 800bb5e:	d0ec      	beq.n	800bb3a <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800bb60:	b113      	cbz	r3, 800bb68 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800bb62:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800bb66:	e7bf      	b.n	800bae8 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800bb68:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800bb6c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800bb6e:	2e18      	cmp	r6, #24
 800bb70:	ddd2      	ble.n	800bb18 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800bb72:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800bb76:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800bb7a:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800bb7e:	4658      	mov	r0, fp
 800bb80:	b003      	add	sp, #12
 800bb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bb88 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	9d06      	ldr	r5, [sp, #24]
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	468c      	mov	ip, r1
 800bb90:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800bb92:	4295      	cmp	r5, r2
{
 800bb94:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800bb96:	dd08      	ble.n	800bbaa <jpeg_huff_decode+0x22>
 800bb98:	462b      	mov	r3, r5
 800bb9a:	f7ff ff97 	bl	800bacc <jpeg_fill_bit_buffer>
 800bb9e:	b910      	cbnz	r0, 800bba6 <jpeg_huff_decode+0x1e>
 800bba0:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800bba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800bba6:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800bbaa:	1b62      	subs	r2, r4, r5
 800bbac:	4b1a      	ldr	r3, [pc, #104]	; (800bc18 <jpeg_huff_decode+0x90>)
 800bbae:	fa4c f002 	asr.w	r0, ip, r2
 800bbb2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bbb6:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800bbb8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800bbbc:	4283      	cmp	r3, r0
 800bbbe:	db0d      	blt.n	800bbdc <jpeg_huff_decode+0x54>
  if (l > 16) {
 800bbc0:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800bbc2:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800bbc6:	dd1e      	ble.n	800bc06 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800bbc8:	6930      	ldr	r0, [r6, #16]
 800bbca:	2279      	movs	r2, #121	; 0x79
 800bbcc:	f04f 31ff 	mov.w	r1, #4294967295
 800bbd0:	6803      	ldr	r3, [r0, #0]
 800bbd2:	615a      	str	r2, [r3, #20]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800bbd8:	2000      	movs	r0, #0
 800bbda:	e7e3      	b.n	800bba4 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800bbdc:	2a00      	cmp	r2, #0
    code <<= 1;
 800bbde:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800bbe2:	dc08      	bgt.n	800bbf6 <jpeg_huff_decode+0x6e>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	4661      	mov	r1, ip
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7ff ff6f 	bl	800bacc <jpeg_fill_bit_buffer>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0d6      	beq.n	800bba0 <jpeg_huff_decode+0x18>
 800bbf2:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800bbf6:	3a01      	subs	r2, #1
    l++;
 800bbf8:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800bbfa:	fa4c f002 	asr.w	r0, ip, r2
 800bbfe:	f000 0001 	and.w	r0, r0, #1
 800bc02:	4320      	orrs	r0, r4
    l++;
 800bc04:	e7d8      	b.n	800bbb8 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800bc06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc0a:	3512      	adds	r5, #18
 800bc0c:	4418      	add	r0, r3
 800bc0e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800bc12:	4410      	add	r0, r2
 800bc14:	7c40      	ldrb	r0, [r0, #17]
 800bc16:	e7c5      	b.n	800bba4 <jpeg_huff_decode+0x1c>
 800bc18:	0802d288 	.word	0x0802d288

0800bc1c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800bc1c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bc1e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800bc22:	2600      	movs	r6, #0
{
 800bc24:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bc26:	68eb      	ldr	r3, [r5, #12]
 800bc28:	6991      	ldr	r1, [r2, #24]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bfb8      	it	lt
 800bc2e:	3307      	addlt	r3, #7
 800bc30:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800bc34:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bc36:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800bc38:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bc3a:	4798      	blx	r3
 800bc3c:	b190      	cbz	r0, 800bc64 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800bc3e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800bc42:	4631      	mov	r1, r6
 800bc44:	f105 0014 	add.w	r0, r5, #20
 800bc48:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800bc4c:	0092      	lsls	r2, r2, #2
 800bc4e:	f01d fe39 	bl	80298c4 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800bc52:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800bc56:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800bc58:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800bc5a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800bc5e:	b903      	cbnz	r3, 800bc62 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800bc60:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800bc62:	2001      	movs	r0, #1
}
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc68 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800bc6c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800bc70:	b091      	sub	sp, #68	; 0x44
 800bc72:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bc74:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800bc78:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bc7a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bc7e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800bc80:	b933      	cbnz	r3, 800bc90 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bc82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc84:	b17e      	cbz	r6, 800bca6 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bc86:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800bc88:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800bc8e:	e007      	b.n	800bca0 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800bc90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1f5      	bne.n	800bc82 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800bc96:	f7ff ffc1 	bl	800bc1c <process_restart>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d1f1      	bne.n	800bc82 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800bc9e:	2000      	movs	r0, #0
}
 800bca0:	b011      	add	sp, #68	; 0x44
 800bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bca6:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800bca8:	f104 0810 	add.w	r8, r4, #16
 800bcac:	af0b      	add	r7, sp, #44	; 0x2c
 800bcae:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	f104 0b10 	add.w	fp, r4, #16
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	9206      	str	r2, [sp, #24]
 800bcbc:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800bcbe:	f8df a118 	ldr.w	sl, [pc, #280]	; 800bdd8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bcc2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800bcc4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bcc8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bccc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800bcce:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bcd4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800bcd8:	42b3      	cmp	r3, r6
 800bcda:	dc0d      	bgt.n	800bcf8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bcdc:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bcde:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bce0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bce2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	9a07      	ldr	r2, [sp, #28]
 800bce8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bcea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bcec:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bcf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bcf2:	6833      	ldr	r3, [r6, #0]
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	e7c6      	b.n	800bc86 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800bcf8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bcfa:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800bcfe:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800bd02:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800bd06:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800bd08:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800bd0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd16:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bd1a:	dc0c      	bgt.n	800bd36 <decode_mcu_DC_first+0xce>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4662      	mov	r2, ip
 800bd20:	4671      	mov	r1, lr
 800bd22:	a806      	add	r0, sp, #24
 800bd24:	f7ff fed2 	bl	800bacc <jpeg_fill_bit_buffer>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0b8      	beq.n	800bc9e <decode_mcu_DC_first+0x36>
 800bd2c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bd30:	f1bc 0f07 	cmp.w	ip, #7
 800bd34:	dd3e      	ble.n	800bdb4 <decode_mcu_DC_first+0x14c>
 800bd36:	f1ac 0308 	sub.w	r3, ip, #8
 800bd3a:	fa4e f303 	asr.w	r3, lr, r3
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bd44:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d042      	beq.n	800bdd2 <decode_mcu_DC_first+0x16a>
 800bd4c:	4443      	add	r3, r8
 800bd4e:	ebac 0c02 	sub.w	ip, ip, r2
 800bd52:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800bd56:	f1b8 0f00 	cmp.w	r8, #0
 800bd5a:	d01b      	beq.n	800bd94 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bd5c:	45e0      	cmp	r8, ip
 800bd5e:	dd09      	ble.n	800bd74 <decode_mcu_DC_first+0x10c>
 800bd60:	4643      	mov	r3, r8
 800bd62:	4662      	mov	r2, ip
 800bd64:	4671      	mov	r1, lr
 800bd66:	a806      	add	r0, sp, #24
 800bd68:	f7ff feb0 	bl	800bacc <jpeg_fill_bit_buffer>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d096      	beq.n	800bc9e <decode_mcu_DC_first+0x36>
 800bd70:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800bd74:	ebac 0c08 	sub.w	ip, ip, r8
 800bd78:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800bd7c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800bd80:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800bd84:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800bd88:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	bfac      	ite	ge
 800bd8e:	eba3 0802 	subge.w	r8, r3, r2
 800bd92:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800bd94:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bd96:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800bd98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800bd9c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800bd9e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800bda2:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800bda4:	fa00 f803 	lsl.w	r8, r0, r3
 800bda8:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800bdaa:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800bdae:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bdb2:	e78f      	b.n	800bcd4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	4662      	mov	r2, ip
 800bdba:	4643      	mov	r3, r8
 800bdbc:	4671      	mov	r1, lr
 800bdbe:	a806      	add	r0, sp, #24
 800bdc0:	f7ff fee2 	bl	800bb88 <jpeg_huff_decode>
 800bdc4:	f1b0 0800 	subs.w	r8, r0, #0
 800bdc8:	f6ff af69 	blt.w	800bc9e <decode_mcu_DC_first+0x36>
 800bdcc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bdd0:	e7c1      	b.n	800bd56 <decode_mcu_DC_first+0xee>
 800bdd2:	2309      	movs	r3, #9
 800bdd4:	e7ef      	b.n	800bdb6 <decode_mcu_DC_first+0x14e>
 800bdd6:	bf00      	nop
 800bdd8:	0802d288 	.word	0x0802d288

0800bddc <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bddc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	4607      	mov	r7, r0
 800bde6:	b08d      	sub	sp, #52	; 0x34
 800bde8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bdea:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bdee:	b933      	cbnz	r3, 800bdfe <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bdf0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdf2:	b17b      	cbz	r3, 800be14 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bdf4:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bdf6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bdfc:	e007      	b.n	800be0e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800bdfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1f5      	bne.n	800bdf0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800be04:	f7ff ff0a 	bl	800bc1c <process_restart>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d1f1      	bne.n	800bdf0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800be0c:	2000      	movs	r0, #0
}
 800be0e:	b00d      	add	sp, #52	; 0x34
 800be10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800be14:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800be16:	b116      	cbz	r6, 800be1e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800be18:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800be1a:	612e      	str	r6, [r5, #16]
 800be1c:	e7ea      	b.n	800bdf4 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800be1e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800be22:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800be26:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800be28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800be2c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800be30:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be32:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800be34:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	9207      	str	r2, [sp, #28]
 800be3e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800be40:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800bf38 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800be44:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be46:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800be48:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be4a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800be4e:	9b03      	ldr	r3, [sp, #12]
 800be50:	4598      	cmp	r8, r3
 800be52:	dc69      	bgt.n	800bf28 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800be54:	2a07      	cmp	r2, #7
 800be56:	dc09      	bgt.n	800be6c <decode_mcu_AC_first+0x90>
 800be58:	2300      	movs	r3, #0
 800be5a:	a807      	add	r0, sp, #28
 800be5c:	f7ff fe36 	bl	800bacc <jpeg_fill_bit_buffer>
 800be60:	2800      	cmp	r0, #0
 800be62:	d0d3      	beq.n	800be0c <decode_mcu_AC_first+0x30>
 800be64:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800be68:	2a07      	cmp	r2, #7
 800be6a:	dd33      	ble.n	800bed4 <decode_mcu_AC_first+0xf8>
 800be6c:	f1a2 0308 	sub.w	r3, r2, #8
 800be70:	fa41 f303 	asr.w	r3, r1, r3
 800be74:	b2db      	uxtb	r3, r3
 800be76:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800be7a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800be7e:	b3a0      	cbz	r0, 800beea <decode_mcu_AC_first+0x10e>
 800be80:	444b      	add	r3, r9
 800be82:	1a12      	subs	r2, r2, r0
 800be84:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800be88:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800be8c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800be90:	d02d      	beq.n	800beee <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800be92:	42a2      	cmp	r2, r4
	  k += r;
 800be94:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800be96:	da07      	bge.n	800bea8 <decode_mcu_AC_first+0xcc>
 800be98:	4623      	mov	r3, r4
 800be9a:	a807      	add	r0, sp, #28
 800be9c:	f7ff fe16 	bl	800bacc <jpeg_fill_bit_buffer>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0b3      	beq.n	800be0c <decode_mcu_AC_first+0x30>
 800bea4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800bea8:	1b12      	subs	r2, r2, r4
 800beaa:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800beae:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800beb0:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800beb4:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800beb8:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800beba:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bebc:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800bebe:	bfa8      	it	ge
 800bec0:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bec2:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800bec6:	40a3      	lsls	r3, r4
 800bec8:	9c05      	ldr	r4, [sp, #20]
 800beca:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bece:	f108 0801 	add.w	r8, r8, #1
 800bed2:	e7bc      	b.n	800be4e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bed4:	2301      	movs	r3, #1
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	a807      	add	r0, sp, #28
 800beda:	464b      	mov	r3, r9
 800bedc:	f7ff fe54 	bl	800bb88 <jpeg_huff_decode>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	db93      	blt.n	800be0c <decode_mcu_AC_first+0x30>
 800bee4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bee8:	e7ce      	b.n	800be88 <decode_mcu_AC_first+0xac>
 800beea:	2309      	movs	r3, #9
 800beec:	e7f3      	b.n	800bed6 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800beee:	2b0f      	cmp	r3, #15
 800bef0:	d102      	bne.n	800bef8 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800bef2:	f108 080f 	add.w	r8, r8, #15
 800bef6:	e7ea      	b.n	800bece <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800bef8:	2601      	movs	r6, #1
 800befa:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800befc:	b19b      	cbz	r3, 800bf26 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800befe:	429a      	cmp	r2, r3
 800bf00:	da09      	bge.n	800bf16 <decode_mcu_AC_first+0x13a>
 800bf02:	a807      	add	r0, sp, #28
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	f7ff fde1 	bl	800bacc <jpeg_fill_bit_buffer>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	f43f af7e 	beq.w	800be0c <decode_mcu_AC_first+0x30>
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	4807      	ldr	r0, [pc, #28]	; (800bf38 <decode_mcu_AC_first+0x15c>)
 800bf1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bf1e:	fa41 f302 	asr.w	r3, r1, r2
 800bf22:	4003      	ands	r3, r0
	      EOBRUN += r;
 800bf24:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800bf26:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	9807      	ldr	r0, [sp, #28]
 800bf2c:	6018      	str	r0, [r3, #0]
 800bf2e:	9808      	ldr	r0, [sp, #32]
 800bf30:	6058      	str	r0, [r3, #4]
 800bf32:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800bf36:	e770      	b.n	800be1a <decode_mcu_AC_first+0x3e>
 800bf38:	0802d288 	.word	0x0802d288

0800bf3c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800bf3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bf40:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800bf44:	2701      	movs	r7, #1
{   
 800bf46:	b087      	sub	sp, #28
 800bf48:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bf4a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bf4c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bf50:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bf52:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bf56:	b9c3      	cbnz	r3, 800bf8a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf58:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf5a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf5c:	9405      	str	r4, [sp, #20]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	9201      	str	r2, [sp, #4]
 800bf64:	9302      	str	r3, [sp, #8]
 800bf66:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf6a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bf6e:	42b3      	cmp	r3, r6
 800bf70:	dc16      	bgt.n	800bfa0 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf72:	69a3      	ldr	r3, [r4, #24]
 800bf74:	9801      	ldr	r0, [sp, #4]
 800bf76:	6018      	str	r0, [r3, #0]
 800bf78:	9802      	ldr	r0, [sp, #8]
 800bf7a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800bf7c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bf7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf80:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf82:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800bf86:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bf88:	e007      	b.n	800bf9a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800bf8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e3      	bne.n	800bf58 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800bf90:	f7ff fe44 	bl	800bc1c <process_restart>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d1df      	bne.n	800bf58 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800bf98:	2000      	movs	r0, #0
}
 800bf9a:	b007      	add	sp, #28
 800bf9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800bfa0:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800bfa2:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800bfa6:	dc07      	bgt.n	800bfb8 <decode_mcu_DC_refine+0x7c>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	a801      	add	r0, sp, #4
 800bfac:	f7ff fd8e 	bl	800bacc <jpeg_fill_bit_buffer>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0f1      	beq.n	800bf98 <decode_mcu_DC_refine+0x5c>
 800bfb4:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800bfb8:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bfba:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800bfbc:	fa41 f302 	asr.w	r3, r1, r2
 800bfc0:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800bfc2:	bf42      	ittt	mi
 800bfc4:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800bfc8:	433b      	orrmi	r3, r7
 800bfca:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bfce:	e7cc      	b.n	800bf6a <decode_mcu_DC_refine+0x2e>

0800bfd0 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bfd0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	4606      	mov	r6, r0
 800bfda:	b0d1      	sub	sp, #324	; 0x144
 800bfdc:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bfde:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bfe2:	b95b      	cbnz	r3, 800bffc <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800bfe4:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800bfe8:	f1bb 0f00 	cmp.w	fp, #0
 800bfec:	d012      	beq.n	800c014 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bfee:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800bff2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bff4:	3b01      	subs	r3, #1
 800bff6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800bffa:	e008      	b.n	800c00e <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800bffc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1ef      	bne.n	800bfe4 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800c004:	f7ff fe0a 	bl	800bc1c <process_restart>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d1eb      	bne.n	800bfe4 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800c00c:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800c00e:	b051      	add	sp, #324	; 0x144
 800c010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800c014:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c018:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c01a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800c01c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800c020:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c022:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800c026:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c02a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c02c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c02e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800c030:	f04f 32ff 	mov.w	r2, #4294967295
 800c034:	fa02 f303 	lsl.w	r3, r2, r3
 800c038:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800c03a:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800c03e:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c040:	69b3      	ldr	r3, [r6, #24]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	602a      	str	r2, [r5, #0]
 800c048:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c04a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c04e:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c052:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800c054:	2b00      	cmp	r3, #0
 800c056:	f040 80bf 	bne.w	800c1d8 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800c05a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800c05e:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800c060:	9b06      	ldr	r3, [sp, #24]
 800c062:	429f      	cmp	r7, r3
 800c064:	dd0a      	ble.n	800c07c <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c066:	69b3      	ldr	r3, [r6, #24]
 800c068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c06a:	6019      	str	r1, [r3, #0]
 800c06c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c06e:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c070:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c072:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c076:	f8c8 3010 	str.w	r3, [r8, #16]
 800c07a:	e7b8      	b.n	800bfee <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c07c:	2a07      	cmp	r2, #7
 800c07e:	dc0a      	bgt.n	800c096 <decode_mcu_AC_refine+0xc6>
 800c080:	2300      	movs	r3, #0
 800c082:	4621      	mov	r1, r4
 800c084:	4628      	mov	r0, r5
 800c086:	f7ff fd21 	bl	800bacc <jpeg_fill_bit_buffer>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d06e      	beq.n	800c16c <decode_mcu_AC_refine+0x19c>
 800c08e:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c092:	2a07      	cmp	r2, #7
 800c094:	dd61      	ble.n	800c15a <decode_mcu_AC_refine+0x18a>
 800c096:	f1a2 0308 	sub.w	r3, r2, #8
 800c09a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c09c:	fa44 f303 	asr.w	r3, r4, r3
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c0a6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	d06b      	beq.n	800c186 <decode_mcu_AC_refine+0x1b6>
 800c0ae:	4403      	add	r3, r0
 800c0b0:	1a52      	subs	r2, r2, r1
 800c0b2:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c0b6:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800c0ba:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	d066      	beq.n	800c190 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d009      	beq.n	800c0da <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800c0c6:	6833      	ldr	r3, [r6, #0]
 800c0c8:	2179      	movs	r1, #121	; 0x79
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	9204      	str	r2, [sp, #16]
 800c0ce:	6159      	str	r1, [r3, #20]
 800c0d0:	f04f 31ff 	mov.w	r1, #4294967295
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	4798      	blx	r3
 800c0d8:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	dc08      	bgt.n	800c0f0 <decode_mcu_AC_refine+0x120>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7ff fcf2 	bl	800bacc <jpeg_fill_bit_buffer>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d03f      	beq.n	800c16c <decode_mcu_AC_refine+0x19c>
 800c0ec:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800c0f0:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800c0f2:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800c0f4:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800c0f8:	f013 0f01 	tst.w	r3, #1
 800c0fc:	9b03      	ldr	r3, [sp, #12]
 800c0fe:	bf08      	it	eq
 800c100:	460b      	moveq	r3, r1
 800c102:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800c104:	9b08      	ldr	r3, [sp, #32]
 800c106:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800c10a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800c10c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d068      	beq.n	800c1e6 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c114:	2a00      	cmp	r2, #0
 800c116:	dc07      	bgt.n	800c128 <decode_mcu_AC_refine+0x158>
 800c118:	2301      	movs	r3, #1
 800c11a:	4621      	mov	r1, r4
 800c11c:	4628      	mov	r0, r5
 800c11e:	f7ff fcd5 	bl	800bacc <jpeg_fill_bit_buffer>
 800c122:	b318      	cbz	r0, 800c16c <decode_mcu_AC_refine+0x19c>
 800c124:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800c128:	3a01      	subs	r2, #1
 800c12a:	fa44 f302 	asr.w	r3, r4, r2
 800c12e:	07d9      	lsls	r1, r3, #31
 800c130:	d50e      	bpl.n	800c150 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800c132:	9b05      	ldr	r3, [sp, #20]
 800c134:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	4219      	tst	r1, r3
 800c13c:	d108      	bne.n	800c150 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800c13e:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800c140:	b28b      	uxth	r3, r1
 800c142:	bfac      	ite	ge
 800c144:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800c146:	9907      	ldrlt	r1, [sp, #28]
 800c148:	440b      	add	r3, r1
 800c14a:	9905      	ldr	r1, [sp, #20]
 800c14c:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800c150:	3701      	adds	r7, #1
	} while (k <= Se);
 800c152:	9b06      	ldr	r3, [sp, #24]
 800c154:	42bb      	cmp	r3, r7
 800c156:	dad5      	bge.n	800c104 <decode_mcu_AC_refine+0x134>
 800c158:	e048      	b.n	800c1ec <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c15a:	2301      	movs	r3, #1
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4621      	mov	r1, r4
 800c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c162:	4628      	mov	r0, r5
 800c164:	f7ff fd10 	bl	800bb88 <jpeg_huff_decode>
 800c168:	2800      	cmp	r0, #0
 800c16a:	da0e      	bge.n	800c18a <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c16c:	ab10      	add	r3, sp, #64	; 0x40
 800c16e:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800c170:	f1bb 0f00 	cmp.w	fp, #0
 800c174:	f43f af4a 	beq.w	800c00c <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c178:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c17c:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800c180:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800c184:	e7f4      	b.n	800c170 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c186:	2309      	movs	r3, #9
 800c188:	e7e8      	b.n	800c15c <decode_mcu_AC_refine+0x18c>
 800c18a:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c18e:	e792      	b.n	800c0b6 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800c190:	f1ba 0f0f 	cmp.w	sl, #15
 800c194:	d0b6      	beq.n	800c104 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800c196:	2301      	movs	r3, #1
 800c198:	fa03 f30a 	lsl.w	r3, r3, sl
 800c19c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800c19e:	f1ba 0f00 	cmp.w	sl, #0
 800c1a2:	d015      	beq.n	800c1d0 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800c1a4:	4552      	cmp	r2, sl
 800c1a6:	da08      	bge.n	800c1ba <decode_mcu_AC_refine+0x1ea>
 800c1a8:	4653      	mov	r3, sl
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	a80b      	add	r0, sp, #44	; 0x2c
 800c1ae:	f7ff fc8d 	bl	800bacc <jpeg_fill_bit_buffer>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d0da      	beq.n	800c16c <decode_mcu_AC_refine+0x19c>
 800c1b6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800c1ba:	4b26      	ldr	r3, [pc, #152]	; (800c254 <decode_mcu_AC_refine+0x284>)
 800c1bc:	eba2 020a 	sub.w	r2, r2, sl
 800c1c0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c1c4:	fa44 f302 	asr.w	r3, r4, r2
 800c1c8:	400b      	ands	r3, r1
	      EOBRUN += r;
 800c1ca:	9902      	ldr	r1, [sp, #8]
 800c1cc:	4419      	add	r1, r3
 800c1ce:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f43f af47 	beq.w	800c066 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800c1d8:	9b06      	ldr	r3, [sp, #24]
 800c1da:	429f      	cmp	r7, r3
 800c1dc:	dd15      	ble.n	800c20a <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800c1de:	9b02      	ldr	r3, [sp, #8]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	e73f      	b.n	800c066 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800c1e6:	f1ba 0a01 	subs.w	sl, sl, #1
 800c1ea:	d2b1      	bcs.n	800c150 <decode_mcu_AC_refine+0x180>
	if (s) {
 800c1ec:	9b04      	ldr	r3, [sp, #16]
 800c1ee:	b153      	cbz	r3, 800c206 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800c1f0:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800c1f2:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800c1f4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800c1f8:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800c1fc:	a910      	add	r1, sp, #64	; 0x40
 800c1fe:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800c202:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800c206:	3701      	adds	r7, #1
 800c208:	e72a      	b.n	800c060 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800c20a:	9b08      	ldr	r3, [sp, #32]
 800c20c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800c210:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800c214:	b1e3      	cbz	r3, 800c250 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c216:	2a00      	cmp	r2, #0
 800c218:	dc08      	bgt.n	800c22c <decode_mcu_AC_refine+0x25c>
 800c21a:	2301      	movs	r3, #1
 800c21c:	4621      	mov	r1, r4
 800c21e:	a80b      	add	r0, sp, #44	; 0x2c
 800c220:	f7ff fc54 	bl	800bacc <jpeg_fill_bit_buffer>
 800c224:	2800      	cmp	r0, #0
 800c226:	d0a1      	beq.n	800c16c <decode_mcu_AC_refine+0x19c>
 800c228:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800c22c:	3a01      	subs	r2, #1
 800c22e:	fa44 f302 	asr.w	r3, r4, r2
 800c232:	07db      	lsls	r3, r3, #31
 800c234:	d50c      	bpl.n	800c250 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800c236:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	4219      	tst	r1, r3
 800c23e:	d107      	bne.n	800c250 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800c240:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800c242:	b28b      	uxth	r3, r1
 800c244:	bfac      	ite	ge
 800c246:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800c248:	9907      	ldrlt	r1, [sp, #28]
 800c24a:	440b      	add	r3, r1
 800c24c:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800c250:	3701      	adds	r7, #1
 800c252:	e7c1      	b.n	800c1d8 <decode_mcu_AC_refine+0x208>
 800c254:	0802d288 	.word	0x0802d288

0800c258 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c25c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c260:	b093      	sub	sp, #76	; 0x4c
 800c262:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c264:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c268:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800c26a:	b933      	cbnz	r3, 800c27a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c26c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c26e:	b17f      	cbz	r7, 800c290 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c270:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c272:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c274:	3b01      	subs	r3, #1
 800c276:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c278:	e007      	b.n	800c28a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800c27a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1f5      	bne.n	800c26c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800c280:	f7ff fccc 	bl	800bc1c <process_restart>
 800c284:	2800      	cmp	r0, #0
 800c286:	d1f1      	bne.n	800c26c <decode_mcu_sub+0x14>
	return FALSE;
 800c288:	2000      	movs	r0, #0
}
 800c28a:	b013      	add	sp, #76	; 0x4c
 800c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800c290:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800c294:	f105 0810 	add.w	r8, r5, #16
 800c298:	ac0d      	add	r4, sp, #52	; 0x34
 800c29a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800c29e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800c2a0:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800c2a4:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c544 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800c2a8:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c2aa:	69b3      	ldr	r3, [r6, #24]
 800c2ac:	960c      	str	r6, [sp, #48]	; 0x30
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	9208      	str	r2, [sp, #32]
 800c2b4:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800c2b6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c2ba:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c2be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c4:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c2c6:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c2ca:	42bb      	cmp	r3, r7
 800c2cc:	dc0e      	bgt.n	800c2ec <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c2ce:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c2d0:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c2d2:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800c2d4:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2dc:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c2de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c2e0:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c2e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2e6:	6833      	ldr	r3, [r6, #0]
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	e7c1      	b.n	800c270 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c2ec:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c2ee:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c2f2:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c2f6:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c2fa:	dc0c      	bgt.n	800c316 <decode_mcu_sub+0xbe>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4662      	mov	r2, ip
 800c300:	4671      	mov	r1, lr
 800c302:	a808      	add	r0, sp, #32
 800c304:	f7ff fbe2 	bl	800bacc <jpeg_fill_bit_buffer>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d0bd      	beq.n	800c288 <decode_mcu_sub+0x30>
 800c30c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c310:	f1bc 0f07 	cmp.w	ip, #7
 800c314:	dd4a      	ble.n	800c3ac <decode_mcu_sub+0x154>
 800c316:	f1ac 0308 	sub.w	r3, ip, #8
 800c31a:	fa4e f303 	asr.w	r3, lr, r3
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c324:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c328:	2a00      	cmp	r2, #0
 800c32a:	d04d      	beq.n	800c3c8 <decode_mcu_sub+0x170>
 800c32c:	4423      	add	r3, r4
 800c32e:	ebac 0c02 	sub.w	ip, ip, r2
 800c332:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c336:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c33a:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c33e:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 80a0 	beq.w	800c486 <decode_mcu_sub+0x22e>
	if (s) {
 800c346:	b1cc      	cbz	r4, 800c37c <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c348:	45a4      	cmp	ip, r4
 800c34a:	da09      	bge.n	800c360 <decode_mcu_sub+0x108>
 800c34c:	4623      	mov	r3, r4
 800c34e:	4662      	mov	r2, ip
 800c350:	4671      	mov	r1, lr
 800c352:	a808      	add	r0, sp, #32
 800c354:	f7ff fbba 	bl	800bacc <jpeg_fill_bit_buffer>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d095      	beq.n	800c288 <decode_mcu_sub+0x30>
 800c35c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800c360:	ebac 0c04 	sub.w	ip, ip, r4
 800c364:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c368:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c36a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c36e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c372:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c374:	4299      	cmp	r1, r3
 800c376:	bfac      	ite	ge
 800c378:	1a9c      	subge	r4, r3, r2
 800c37a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c37c:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c380:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c384:	ab12      	add	r3, sp, #72	; 0x48
 800c386:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c38a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c38e:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c390:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c394:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c398:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	429c      	cmp	r4, r3
 800c39e:	db15      	blt.n	800c3cc <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800c3a0:	9b05      	ldr	r3, [sp, #20]
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	f340 8081 	ble.w	800c4aa <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c3a8:	3701      	adds	r7, #1
 800c3aa:	e78c      	b.n	800c2c6 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	4662      	mov	r2, ip
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	4671      	mov	r1, lr
 800c3b6:	a808      	add	r0, sp, #32
 800c3b8:	f7ff fbe6 	bl	800bb88 <jpeg_huff_decode>
 800c3bc:	1e04      	subs	r4, r0, #0
 800c3be:	f6ff af63 	blt.w	800c288 <decode_mcu_sub+0x30>
 800c3c2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c3c6:	e7b6      	b.n	800c336 <decode_mcu_sub+0xde>
 800c3c8:	2309      	movs	r3, #9
 800c3ca:	e7f0      	b.n	800c3ae <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c3cc:	f1bc 0f07 	cmp.w	ip, #7
 800c3d0:	dc0d      	bgt.n	800c3ee <decode_mcu_sub+0x196>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4662      	mov	r2, ip
 800c3d6:	4671      	mov	r1, lr
 800c3d8:	a808      	add	r0, sp, #32
 800c3da:	f7ff fb77 	bl	800bacc <jpeg_fill_bit_buffer>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f43f af52 	beq.w	800c288 <decode_mcu_sub+0x30>
 800c3e4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c3e8:	f1bc 0f07 	cmp.w	ip, #7
 800c3ec:	dd37      	ble.n	800c45e <decode_mcu_sub+0x206>
 800c3ee:	f1ac 0308 	sub.w	r3, ip, #8
 800c3f2:	fa4e f303 	asr.w	r3, lr, r3
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c3fc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c400:	2a00      	cmp	r2, #0
 800c402:	d03a      	beq.n	800c47a <decode_mcu_sub+0x222>
 800c404:	4443      	add	r3, r8
 800c406:	ebac 0c02 	sub.w	ip, ip, r2
 800c40a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c40e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c412:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c416:	d032      	beq.n	800c47e <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c418:	459c      	cmp	ip, r3
	    k += r;
 800c41a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c41c:	da0b      	bge.n	800c436 <decode_mcu_sub+0x1de>
 800c41e:	4662      	mov	r2, ip
 800c420:	4671      	mov	r1, lr
 800c422:	a808      	add	r0, sp, #32
 800c424:	9307      	str	r3, [sp, #28]
 800c426:	f7ff fb51 	bl	800bacc <jpeg_fill_bit_buffer>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	f43f af2c 	beq.w	800c288 <decode_mcu_sub+0x30>
 800c430:	9b07      	ldr	r3, [sp, #28]
 800c432:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800c436:	ebac 0c03 	sub.w	ip, ip, r3
 800c43a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c43e:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c440:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c444:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c448:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c44a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c44c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800c44e:	bfa8      	it	ge
 800c450:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c452:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c456:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c45a:	3401      	adds	r4, #1
 800c45c:	e79d      	b.n	800c39a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c45e:	2301      	movs	r3, #1
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4662      	mov	r2, ip
 800c464:	4643      	mov	r3, r8
 800c466:	4671      	mov	r1, lr
 800c468:	a808      	add	r0, sp, #32
 800c46a:	f7ff fb8d 	bl	800bb88 <jpeg_huff_decode>
 800c46e:	2800      	cmp	r0, #0
 800c470:	f6ff af0a 	blt.w	800c288 <decode_mcu_sub+0x30>
 800c474:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c478:	e7c9      	b.n	800c40e <decode_mcu_sub+0x1b6>
 800c47a:	2309      	movs	r3, #9
 800c47c:	e7f0      	b.n	800c460 <decode_mcu_sub+0x208>
	    if (r != 15)
 800c47e:	2a0f      	cmp	r2, #15
 800c480:	d192      	bne.n	800c3a8 <decode_mcu_sub+0x150>
	    k += 15;
 800c482:	340f      	adds	r4, #15
 800c484:	e7e9      	b.n	800c45a <decode_mcu_sub+0x202>
	if (s) {
 800c486:	b174      	cbz	r4, 800c4a6 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c488:	45a4      	cmp	ip, r4
 800c48a:	da0a      	bge.n	800c4a2 <decode_mcu_sub+0x24a>
 800c48c:	4623      	mov	r3, r4
 800c48e:	4662      	mov	r2, ip
 800c490:	4671      	mov	r1, lr
 800c492:	a808      	add	r0, sp, #32
 800c494:	f7ff fb1a 	bl	800bacc <jpeg_fill_bit_buffer>
 800c498:	2800      	cmp	r0, #0
 800c49a:	f43f aef5 	beq.w	800c288 <decode_mcu_sub+0x30>
 800c49e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c4a2:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c4a6:	2401      	movs	r4, #1
 800c4a8:	e77a      	b.n	800c3a0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c4aa:	f1bc 0f07 	cmp.w	ip, #7
 800c4ae:	dc0d      	bgt.n	800c4cc <decode_mcu_sub+0x274>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4662      	mov	r2, ip
 800c4b4:	4671      	mov	r1, lr
 800c4b6:	a808      	add	r0, sp, #32
 800c4b8:	f7ff fb08 	bl	800bacc <jpeg_fill_bit_buffer>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f43f aee3 	beq.w	800c288 <decode_mcu_sub+0x30>
 800c4c2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c4c6:	f1bc 0f07 	cmp.w	ip, #7
 800c4ca:	dd25      	ble.n	800c518 <decode_mcu_sub+0x2c0>
 800c4cc:	f1ac 0308 	sub.w	r3, ip, #8
 800c4d0:	fa4e f303 	asr.w	r3, lr, r3
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c4da:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c4de:	b34a      	cbz	r2, 800c534 <decode_mcu_sub+0x2dc>
 800c4e0:	4443      	add	r3, r8
 800c4e2:	ebac 0c02 	sub.w	ip, ip, r2
 800c4e6:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c4ea:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c4ee:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c4f2:	d021      	beq.n	800c538 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c4f4:	45dc      	cmp	ip, fp
	  k += r;
 800c4f6:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c4f8:	da0a      	bge.n	800c510 <decode_mcu_sub+0x2b8>
 800c4fa:	465b      	mov	r3, fp
 800c4fc:	4662      	mov	r2, ip
 800c4fe:	4671      	mov	r1, lr
 800c500:	a808      	add	r0, sp, #32
 800c502:	f7ff fae3 	bl	800bacc <jpeg_fill_bit_buffer>
 800c506:	2800      	cmp	r0, #0
 800c508:	f43f aebe 	beq.w	800c288 <decode_mcu_sub+0x30>
 800c50c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c510:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800c514:	3401      	adds	r4, #1
 800c516:	e743      	b.n	800c3a0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c518:	2301      	movs	r3, #1
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	4662      	mov	r2, ip
 800c51e:	4643      	mov	r3, r8
 800c520:	4671      	mov	r1, lr
 800c522:	a808      	add	r0, sp, #32
 800c524:	f7ff fb30 	bl	800bb88 <jpeg_huff_decode>
 800c528:	2800      	cmp	r0, #0
 800c52a:	f6ff aead 	blt.w	800c288 <decode_mcu_sub+0x30>
 800c52e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c532:	e7da      	b.n	800c4ea <decode_mcu_sub+0x292>
 800c534:	2309      	movs	r3, #9
 800c536:	e7f0      	b.n	800c51a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c538:	2b0f      	cmp	r3, #15
 800c53a:	f47f af35 	bne.w	800c3a8 <decode_mcu_sub+0x150>
	  k += 15;
 800c53e:	340f      	adds	r4, #15
 800c540:	e7e8      	b.n	800c514 <decode_mcu_sub+0x2bc>
 800c542:	bf00      	nop
 800c544:	0802d288 	.word	0x0802d288

0800c548 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c54c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c550:	b091      	sub	sp, #68	; 0x44
 800c552:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c554:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c558:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c55a:	b933      	cbnz	r3, 800c56a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c55c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c55e:	b17f      	cbz	r7, 800c580 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c560:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c562:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c564:	3b01      	subs	r3, #1
 800c566:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c568:	e007      	b.n	800c57a <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c56a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f5      	bne.n	800c55c <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c570:	f7ff fb54 	bl	800bc1c <process_restart>
 800c574:	2800      	cmp	r0, #0
 800c576:	d1f1      	bne.n	800c55c <decode_mcu+0x14>
	return FALSE;
 800c578:	2000      	movs	r0, #0
}
 800c57a:	b011      	add	sp, #68	; 0x44
 800c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c580:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c582:	f105 0810 	add.w	r8, r5, #16
 800c586:	ac0b      	add	r4, sp, #44	; 0x2c
 800c588:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	9206      	str	r2, [sp, #24]
 800c592:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c594:	f8df a290 	ldr.w	sl, [pc, #656]	; 800c828 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c598:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c59a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c59e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c5a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a8:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c5aa:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c5ae:	42bb      	cmp	r3, r7
 800c5b0:	dc0e      	bgt.n	800c5d0 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c5b2:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c5b4:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c5b6:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c5b8:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	9a07      	ldr	r2, [sp, #28]
 800c5c0:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c5c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c5c4:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c5c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5ca:	6833      	ldr	r3, [r6, #0]
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	e7c7      	b.n	800c560 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c5d0:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c5d2:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c5d6:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c5da:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c5de:	dc0c      	bgt.n	800c5fa <decode_mcu+0xb2>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4662      	mov	r2, ip
 800c5e4:	4671      	mov	r1, lr
 800c5e6:	a806      	add	r0, sp, #24
 800c5e8:	f7ff fa70 	bl	800bacc <jpeg_fill_bit_buffer>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d0c3      	beq.n	800c578 <decode_mcu+0x30>
 800c5f0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c5f4:	f1bc 0f07 	cmp.w	ip, #7
 800c5f8:	dd49      	ble.n	800c68e <decode_mcu+0x146>
 800c5fa:	f1ac 0308 	sub.w	r3, ip, #8
 800c5fe:	fa4e f303 	asr.w	r3, lr, r3
 800c602:	b2db      	uxtb	r3, r3
 800c604:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c608:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d04c      	beq.n	800c6aa <decode_mcu+0x162>
 800c610:	4423      	add	r3, r4
 800c612:	ebac 0c02 	sub.w	ip, ip, r2
 800c616:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c61a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c61e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c622:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c624:	2b00      	cmp	r3, #0
 800c626:	f000 809f 	beq.w	800c768 <decode_mcu+0x220>
	if (s) {
 800c62a:	b1cc      	cbz	r4, 800c660 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c62c:	45a4      	cmp	ip, r4
 800c62e:	da09      	bge.n	800c644 <decode_mcu+0xfc>
 800c630:	4623      	mov	r3, r4
 800c632:	4662      	mov	r2, ip
 800c634:	4671      	mov	r1, lr
 800c636:	a806      	add	r0, sp, #24
 800c638:	f7ff fa48 	bl	800bacc <jpeg_fill_bit_buffer>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d09b      	beq.n	800c578 <decode_mcu+0x30>
 800c640:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c644:	ebac 0c04 	sub.w	ip, ip, r4
 800c648:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c64c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c64e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c652:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c656:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c658:	4299      	cmp	r1, r3
 800c65a:	bfac      	ite	ge
 800c65c:	1a9c      	subge	r4, r3, r2
 800c65e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c660:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c664:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c668:	ab10      	add	r3, sp, #64	; 0x40
 800c66a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c66e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c672:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c674:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c678:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c67c:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	429c      	cmp	r4, r3
 800c682:	db14      	blt.n	800c6ae <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c684:	2c3f      	cmp	r4, #63	; 0x3f
 800c686:	f340 8081 	ble.w	800c78c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c68a:	3701      	adds	r7, #1
 800c68c:	e78d      	b.n	800c5aa <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c68e:	2301      	movs	r3, #1
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	4662      	mov	r2, ip
 800c694:	4623      	mov	r3, r4
 800c696:	4671      	mov	r1, lr
 800c698:	a806      	add	r0, sp, #24
 800c69a:	f7ff fa75 	bl	800bb88 <jpeg_huff_decode>
 800c69e:	1e04      	subs	r4, r0, #0
 800c6a0:	f6ff af6a 	blt.w	800c578 <decode_mcu+0x30>
 800c6a4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c6a8:	e7b7      	b.n	800c61a <decode_mcu+0xd2>
 800c6aa:	2309      	movs	r3, #9
 800c6ac:	e7f0      	b.n	800c690 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c6ae:	f1bc 0f07 	cmp.w	ip, #7
 800c6b2:	dc0d      	bgt.n	800c6d0 <decode_mcu+0x188>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4662      	mov	r2, ip
 800c6b8:	4671      	mov	r1, lr
 800c6ba:	a806      	add	r0, sp, #24
 800c6bc:	f7ff fa06 	bl	800bacc <jpeg_fill_bit_buffer>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	f43f af59 	beq.w	800c578 <decode_mcu+0x30>
 800c6c6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c6ca:	f1bc 0f07 	cmp.w	ip, #7
 800c6ce:	dd37      	ble.n	800c740 <decode_mcu+0x1f8>
 800c6d0:	f1ac 0308 	sub.w	r3, ip, #8
 800c6d4:	fa4e f303 	asr.w	r3, lr, r3
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c6de:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c6e2:	2a00      	cmp	r2, #0
 800c6e4:	d03a      	beq.n	800c75c <decode_mcu+0x214>
 800c6e6:	4443      	add	r3, r8
 800c6e8:	ebac 0c02 	sub.w	ip, ip, r2
 800c6ec:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c6f0:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c6f4:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c6f8:	d032      	beq.n	800c760 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c6fa:	459c      	cmp	ip, r3
	    k += r;
 800c6fc:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c6fe:	da0b      	bge.n	800c718 <decode_mcu+0x1d0>
 800c700:	4662      	mov	r2, ip
 800c702:	4671      	mov	r1, lr
 800c704:	a806      	add	r0, sp, #24
 800c706:	9305      	str	r3, [sp, #20]
 800c708:	f7ff f9e0 	bl	800bacc <jpeg_fill_bit_buffer>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f43f af33 	beq.w	800c578 <decode_mcu+0x30>
 800c712:	9b05      	ldr	r3, [sp, #20]
 800c714:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c718:	ebac 0c03 	sub.w	ip, ip, r3
 800c71c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c720:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c722:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c726:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c72a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c72c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c72e:	4b3d      	ldr	r3, [pc, #244]	; (800c824 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c730:	bfa8      	it	ge
 800c732:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c734:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c738:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c73c:	3401      	adds	r4, #1
 800c73e:	e79e      	b.n	800c67e <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c740:	2301      	movs	r3, #1
 800c742:	9300      	str	r3, [sp, #0]
 800c744:	4662      	mov	r2, ip
 800c746:	4643      	mov	r3, r8
 800c748:	4671      	mov	r1, lr
 800c74a:	a806      	add	r0, sp, #24
 800c74c:	f7ff fa1c 	bl	800bb88 <jpeg_huff_decode>
 800c750:	2800      	cmp	r0, #0
 800c752:	f6ff af11 	blt.w	800c578 <decode_mcu+0x30>
 800c756:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c75a:	e7c9      	b.n	800c6f0 <decode_mcu+0x1a8>
 800c75c:	2309      	movs	r3, #9
 800c75e:	e7f0      	b.n	800c742 <decode_mcu+0x1fa>
	    if (r != 15)
 800c760:	2a0f      	cmp	r2, #15
 800c762:	d192      	bne.n	800c68a <decode_mcu+0x142>
	    k += 15;
 800c764:	340f      	adds	r4, #15
 800c766:	e7e9      	b.n	800c73c <decode_mcu+0x1f4>
	if (s) {
 800c768:	b174      	cbz	r4, 800c788 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c76a:	45a4      	cmp	ip, r4
 800c76c:	da0a      	bge.n	800c784 <decode_mcu+0x23c>
 800c76e:	4623      	mov	r3, r4
 800c770:	4662      	mov	r2, ip
 800c772:	4671      	mov	r1, lr
 800c774:	a806      	add	r0, sp, #24
 800c776:	f7ff f9a9 	bl	800bacc <jpeg_fill_bit_buffer>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f43f aefc 	beq.w	800c578 <decode_mcu+0x30>
 800c780:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c784:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c788:	2401      	movs	r4, #1
 800c78a:	e77b      	b.n	800c684 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c78c:	f1bc 0f07 	cmp.w	ip, #7
 800c790:	dc0d      	bgt.n	800c7ae <decode_mcu+0x266>
 800c792:	2300      	movs	r3, #0
 800c794:	4662      	mov	r2, ip
 800c796:	4671      	mov	r1, lr
 800c798:	a806      	add	r0, sp, #24
 800c79a:	f7ff f997 	bl	800bacc <jpeg_fill_bit_buffer>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	f43f aeea 	beq.w	800c578 <decode_mcu+0x30>
 800c7a4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c7a8:	f1bc 0f07 	cmp.w	ip, #7
 800c7ac:	dd25      	ble.n	800c7fa <decode_mcu+0x2b2>
 800c7ae:	f1ac 0308 	sub.w	r3, ip, #8
 800c7b2:	fa4e f303 	asr.w	r3, lr, r3
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c7bc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c7c0:	b34a      	cbz	r2, 800c816 <decode_mcu+0x2ce>
 800c7c2:	4443      	add	r3, r8
 800c7c4:	ebac 0c02 	sub.w	ip, ip, r2
 800c7c8:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c7cc:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c7d0:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c7d4:	d021      	beq.n	800c81a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c7d6:	45dc      	cmp	ip, fp
	  k += r;
 800c7d8:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c7da:	da0a      	bge.n	800c7f2 <decode_mcu+0x2aa>
 800c7dc:	465b      	mov	r3, fp
 800c7de:	4662      	mov	r2, ip
 800c7e0:	4671      	mov	r1, lr
 800c7e2:	a806      	add	r0, sp, #24
 800c7e4:	f7ff f972 	bl	800bacc <jpeg_fill_bit_buffer>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	f43f aec5 	beq.w	800c578 <decode_mcu+0x30>
 800c7ee:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c7f2:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800c7f6:	3401      	adds	r4, #1
 800c7f8:	e744      	b.n	800c684 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	4662      	mov	r2, ip
 800c800:	4643      	mov	r3, r8
 800c802:	4671      	mov	r1, lr
 800c804:	a806      	add	r0, sp, #24
 800c806:	f7ff f9bf 	bl	800bb88 <jpeg_huff_decode>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	f6ff aeb4 	blt.w	800c578 <decode_mcu+0x30>
 800c810:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c814:	e7da      	b.n	800c7cc <decode_mcu+0x284>
 800c816:	2309      	movs	r3, #9
 800c818:	e7f0      	b.n	800c7fc <decode_mcu+0x2b4>
	  if (r != 15)
 800c81a:	2b0f      	cmp	r3, #15
 800c81c:	f47f af35 	bne.w	800c68a <decode_mcu+0x142>
	  k += 15;
 800c820:	340f      	adds	r4, #15
 800c822:	e7e8      	b.n	800c7f6 <decode_mcu+0x2ae>
 800c824:	0802eb60 	.word	0x0802eb60
 800c828:	0802d288 	.word	0x0802d288

0800c82c <jpeg_make_d_derived_tbl>:
{
 800c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c830:	2a03      	cmp	r2, #3
{
 800c832:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800c836:	4604      	mov	r4, r0
 800c838:	4616      	mov	r6, r2
 800c83a:	461f      	mov	r7, r3
 800c83c:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c83e:	d905      	bls.n	800c84c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c840:	6803      	ldr	r3, [r0, #0]
 800c842:	2234      	movs	r2, #52	; 0x34
 800c844:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d044      	beq.n	800c8dc <jpeg_make_d_derived_tbl+0xb0>
 800c852:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c856:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800c85a:	b935      	cbnz	r5, 800c86a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	2234      	movs	r2, #52	; 0x34
 800c860:	4620      	mov	r0, r4
 800c862:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4798      	blx	r3
  if (*pdtbl == NULL)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	b93b      	cbnz	r3, 800c87e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c86e:	6863      	ldr	r3, [r4, #4]
 800c870:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800c874:	2101      	movs	r1, #1
 800c876:	4620      	mov	r0, r4
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800c87c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800c87e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800c882:	2601      	movs	r6, #1
  p = 0;
 800c884:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c886:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800c88a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800c88e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800c892:	46ba      	mov	sl, r7
 800c894:	444f      	add	r7, r9
 800c896:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800c89a:	dd05      	ble.n	800c8a8 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f8c3 b014 	str.w	fp, [r3, #20]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4798      	blx	r3
 800c8a8:	f10a 0318 	add.w	r3, sl, #24
 800c8ac:	446b      	add	r3, sp
    while (i--)
 800c8ae:	f1b9 0901 	subs.w	r9, r9, #1
 800c8b2:	d218      	bcs.n	800c8e6 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800c8b4:	3601      	adds	r6, #1
 800c8b6:	2e11      	cmp	r6, #17
 800c8b8:	d1e9      	bne.n	800c88e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800c8be:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800c8c2:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800c8c6:	55da      	strb	r2, [r3, r7]
  p = 0;
 800c8c8:	4691      	mov	r9, r2
  si = huffsize[0];
 800c8ca:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800c8ce:	ab06      	add	r3, sp, #24
 800c8d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c8d4:	b313      	cbz	r3, 800c91c <jpeg_make_d_derived_tbl+0xf0>
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	1a52      	subs	r2, r2, r1
 800c8da:	e00a      	b.n	800c8f2 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c8dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c8e0:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800c8e4:	e7b9      	b.n	800c85a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800c8e6:	f803 6b01 	strb.w	r6, [r3], #1
 800c8ea:	e7e0      	b.n	800c8ae <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800c8ec:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800c8f0:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800c8f2:	a806      	add	r0, sp, #24
 800c8f4:	1853      	adds	r3, r2, r1
 800c8f6:	4689      	mov	r9, r1
 800c8f8:	5c40      	ldrb	r0, [r0, r1]
 800c8fa:	42b0      	cmp	r0, r6
 800c8fc:	d0f6      	beq.n	800c8ec <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800c8fe:	fa0b f206 	lsl.w	r2, fp, r6
 800c902:	429a      	cmp	r2, r3
 800c904:	dc07      	bgt.n	800c916 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c906:	6822      	ldr	r2, [r4, #0]
 800c908:	2109      	movs	r1, #9
 800c90a:	4620      	mov	r0, r4
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	6151      	str	r1, [r2, #20]
 800c910:	6812      	ldr	r2, [r2, #0]
 800c912:	4790      	blx	r2
 800c914:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800c916:	005a      	lsls	r2, r3, #1
    si++;
 800c918:	3601      	adds	r6, #1
 800c91a:	e7d8      	b.n	800c8ce <jpeg_make_d_derived_tbl+0xa2>
 800c91c:	1c68      	adds	r0, r5, #1
 800c91e:	f108 0204 	add.w	r2, r8, #4
 800c922:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c926:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c92a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800c92c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800c930:	f1b9 0f00 	cmp.w	r9, #0
 800c934:	d029      	beq.n	800c98a <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c936:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c93a:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800c93c:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c93e:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800c940:	1e59      	subs	r1, r3, #1
 800c942:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c946:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800c948:	3204      	adds	r2, #4
 800c94a:	4594      	cmp	ip, r2
 800c94c:	d1ee      	bne.n	800c92c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c94e:	4b2d      	ldr	r3, [pc, #180]	; (800ca04 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c954:	2100      	movs	r1, #0
 800c956:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c95a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c95e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c960:	f01c ffb0 	bl	80298c4 <memset>
  p = 0;
 800c964:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c968:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c96a:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c96c:	2101      	movs	r1, #1
 800c96e:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c970:	9201      	str	r2, [sp, #4]
 800c972:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c976:	fa01 fb02 	lsl.w	fp, r1, r2
 800c97a:	9202      	str	r2, [sp, #8]
 800c97c:	9a01      	ldr	r2, [sp, #4]
 800c97e:	4452      	add	r2, sl
 800c980:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c982:	f105 0211 	add.w	r2, r5, #17
 800c986:	9205      	str	r2, [sp, #20]
 800c988:	e020      	b.n	800c9cc <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c98a:	f8c2 e000 	str.w	lr, [r2]
 800c98e:	e7db      	b.n	800c948 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c990:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c992:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c994:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800c998:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c99a:	9a05      	ldr	r2, [sp, #20]
 800c99c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800c9a0:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800c9a4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c9a8:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800c9ac:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c9b0:	d1fa      	bne.n	800c9a8 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c9b2:	f1bb 0f00 	cmp.w	fp, #0
 800c9b6:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c9ba:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c9be:	bfcc      	ite	gt
 800c9c0:	465a      	movgt	r2, fp
 800c9c2:	2201      	movle	r2, #1
 800c9c4:	4440      	add	r0, r8
 800c9c6:	f01c ff7d 	bl	80298c4 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c9ca:	ab47      	add	r3, sp, #284	; 0x11c
 800c9cc:	9a04      	ldr	r2, [sp, #16]
 800c9ce:	4591      	cmp	r9, r2
 800c9d0:	d1de      	bne.n	800c990 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c9d2:	3601      	adds	r6, #1
 800c9d4:	9a01      	ldr	r2, [sp, #4]
 800c9d6:	2e09      	cmp	r6, #9
 800c9d8:	4492      	add	sl, r2
 800c9da:	d1c6      	bne.n	800c96a <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	b11b      	cbz	r3, 800c9e8 <jpeg_make_d_derived_tbl+0x1bc>
 800c9e0:	3511      	adds	r5, #17
 800c9e2:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800c9e4:	42af      	cmp	r7, r5
 800c9e6:	d103      	bne.n	800c9f0 <jpeg_make_d_derived_tbl+0x1c4>
}
 800c9e8:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800c9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800c9f0:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800c9f4:	2b0f      	cmp	r3, #15
 800c9f6:	d9f5      	bls.n	800c9e4 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	615e      	str	r6, [r3, #20]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800ca02:	e7ef      	b.n	800c9e4 <jpeg_make_d_derived_tbl+0x1b8>
 800ca04:	000fffff 	.word	0x000fffff

0800ca08 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800ca08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800ca0c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800ca10:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ca12:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800ca16:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800ca1a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	f000 80b1 	beq.w	800cb86 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800ca24:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800ca28:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800ca2c:	b962      	cbnz	r2, 800ca48 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800ca2e:	b1a9      	cbz	r1, 800ca5c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800ca30:	f8da 3000 	ldr.w	r3, [sl]
 800ca34:	2711      	movs	r7, #17
 800ca36:	4650      	mov	r0, sl
 800ca38:	625d      	str	r5, [r3, #36]	; 0x24
 800ca3a:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800ca3e:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4798      	blx	r3
 800ca46:	e00f      	b.n	800ca68 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800ca48:	428a      	cmp	r2, r1
 800ca4a:	dcf1      	bgt.n	800ca30 <start_pass_huff_decoder+0x28>
 800ca4c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800ca50:	428b      	cmp	r3, r1
 800ca52:	dbed      	blt.n	800ca30 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800ca54:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d1e9      	bne.n	800ca30 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800ca5c:	b116      	cbz	r6, 800ca64 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800ca5e:	1e73      	subs	r3, r6, #1
 800ca60:	42ab      	cmp	r3, r5
 800ca62:	d1e5      	bne.n	800ca30 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800ca64:	2d0d      	cmp	r5, #13
 800ca66:	dce3      	bgt.n	800ca30 <start_pass_huff_decoder+0x28>
{
 800ca68:	46a1      	mov	r9, r4
 800ca6a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca6c:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800ca70:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca74:	42ba      	cmp	r2, r7
 800ca76:	dc1e      	bgt.n	800cab6 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800ca78:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800ca7c:	2a00      	cmp	r2, #0
 800ca7e:	d158      	bne.n	800cb32 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d154      	bne.n	800cb2e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800ca84:	4bbb      	ldr	r3, [pc, #748]	; (800cd74 <start_pass_huff_decoder+0x36c>)
{
 800ca86:	2600      	movs	r6, #0
 800ca88:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800ca8c:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ca90:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca92:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800ca96:	42b3      	cmp	r3, r6
 800ca98:	dc50      	bgt.n	800cb3c <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800caa0:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800caa2:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800caa6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800caaa:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800caae:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800cab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800cab6:	f859 2b04 	ldr.w	r2, [r9], #4
 800caba:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800cabe:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800cac2:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800cac6:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800caca:	b173      	cbz	r3, 800caea <start_pass_huff_decoder+0xe2>
 800cacc:	5853      	ldr	r3, [r2, r1]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da0b      	bge.n	800caea <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800cad2:	f8da 3000 	ldr.w	r3, [sl]
 800cad6:	2276      	movs	r2, #118	; 0x76
 800cad8:	f04f 31ff 	mov.w	r1, #4294967295
 800cadc:	4650      	mov	r0, sl
 800cade:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800cae2:	2200      	movs	r2, #0
 800cae4:	61da      	str	r2, [r3, #28]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800caea:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800caee:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800caf2:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800caf6:	42ab      	cmp	r3, r5
 800caf8:	da01      	bge.n	800cafe <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cafa:	3701      	adds	r7, #1
 800cafc:	e7b6      	b.n	800ca6c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800cafe:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800cb00:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800cb04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d00a      	beq.n	800cb22 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800cb0c:	f8da 3000 	ldr.w	r3, [sl]
 800cb10:	2276      	movs	r2, #118	; 0x76
 800cb12:	f04f 31ff 	mov.w	r1, #4294967295
 800cb16:	4650      	mov	r0, sl
 800cb18:	61dd      	str	r5, [r3, #28]
 800cb1a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800cb22:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cb26:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800cb28:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cb2c:	e7e1      	b.n	800caf2 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800cb2e:	4b92      	ldr	r3, [pc, #584]	; (800cd78 <start_pass_huff_decoder+0x370>)
 800cb30:	e7a9      	b.n	800ca86 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800cb32:	b90b      	cbnz	r3, 800cb38 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800cb34:	4b91      	ldr	r3, [pc, #580]	; (800cd7c <start_pass_huff_decoder+0x374>)
 800cb36:	e7a6      	b.n	800ca86 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800cb38:	4b91      	ldr	r3, [pc, #580]	; (800cd80 <start_pass_huff_decoder+0x378>)
 800cb3a:	e7a4      	b.n	800ca86 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800cb3c:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800cb40:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800cb44:	b97a      	cbnz	r2, 800cb66 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800cb46:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800cb4a:	b942      	cbnz	r2, 800cb5e <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800cb4c:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cb4e:	2101      	movs	r1, #1
 800cb50:	4650      	mov	r0, sl
 800cb52:	f102 030b 	add.w	r3, r2, #11
 800cb56:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cb5a:	f7ff fe67 	bl	800c82c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cb5e:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cb60:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cb64:	e795      	b.n	800ca92 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800cb66:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	f105 030b 	add.w	r3, r5, #11
 800cb70:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800cb72:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cb76:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cb7a:	f7ff fe57 	bl	800c82c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800cb7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800cb80:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800cb84:	e7eb      	b.n	800cb5e <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800cb86:	b982      	cbnz	r2, 800cbaa <start_pass_huff_decoder+0x1a2>
 800cb88:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800cb8c:	b96b      	cbnz	r3, 800cbaa <start_pass_huff_decoder+0x1a2>
 800cb8e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800cb92:	b953      	cbnz	r3, 800cbaa <start_pass_huff_decoder+0x1a2>
 800cb94:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800cb98:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800cb9c:	b90a      	cbnz	r2, 800cba2 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800cb9e:	2b3f      	cmp	r3, #63	; 0x3f
 800cba0:	dc0c      	bgt.n	800cbbc <start_pass_huff_decoder+0x1b4>
 800cba2:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d008      	beq.n	800cbbc <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800cbaa:	f8da 3000 	ldr.w	r3, [sl]
 800cbae:	227d      	movs	r2, #125	; 0x7d
 800cbb0:	f04f 31ff 	mov.w	r1, #4294967295
 800cbb4:	4650      	mov	r0, sl
 800cbb6:	615a      	str	r2, [r3, #20]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800cbbc:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800cbc0:	2600      	movs	r6, #0
 800cbc2:	4b70      	ldr	r3, [pc, #448]	; (800cd84 <start_pass_huff_decoder+0x37c>)
 800cbc4:	f10b 0714 	add.w	r7, fp, #20
 800cbc8:	4a6f      	ldr	r2, [pc, #444]	; (800cd88 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cbca:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800cbcc:	293f      	cmp	r1, #63	; 0x3f
 800cbce:	bf08      	it	eq
 800cbd0:	4613      	moveq	r3, r2
 800cbd2:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cbd6:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800cbda:	42b3      	cmp	r3, r6
 800cbdc:	dc3c      	bgt.n	800cc58 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cbde:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800cbe2:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800cbe6:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800cbea:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cbee:	4f67      	ldr	r7, [pc, #412]	; (800cd8c <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800cbf0:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cbf4:	42a8      	cmp	r0, r5
 800cbf6:	f77f af53 	ble.w	800caa0 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800cbfa:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800cbfe:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800cc02:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800cc06:	6953      	ldr	r3, [r2, #20]
 800cc08:	3310      	adds	r3, #16
 800cc0a:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cc0e:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800cc12:	6993      	ldr	r3, [r2, #24]
 800cc14:	3314      	adds	r3, #20
 800cc16:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cc1a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800cc1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d052      	beq.n	800ccc8 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800cc22:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800cc26:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800cc28:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800cc2c:	d075      	beq.n	800cd1a <start_pass_huff_decoder+0x312>
 800cc2e:	dc30      	bgt.n	800cc92 <start_pass_huff_decoder+0x28a>
 800cc30:	2c03      	cmp	r4, #3
 800cc32:	d04f      	beq.n	800ccd4 <start_pass_huff_decoder+0x2cc>
 800cc34:	2c08      	cmp	r4, #8
 800cc36:	d05d      	beq.n	800ccf4 <start_pass_huff_decoder+0x2ec>
 800cc38:	2c00      	cmp	r4, #0
 800cc3a:	d047      	beq.n	800cccc <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800cc3c:	1e5c      	subs	r4, r3, #1
 800cc3e:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800cc40:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800cc44:	bf28      	it	cs
 800cc46:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800cc48:	2c08      	cmp	r4, #8
 800cc4a:	bf28      	it	cs
 800cc4c:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cc4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cc52:	4b4f      	ldr	r3, [pc, #316]	; (800cd90 <start_pass_huff_decoder+0x388>)
 800cc54:	3a09      	subs	r2, #9
 800cc56:	e04a      	b.n	800ccee <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800cc58:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cc5c:	2101      	movs	r1, #1
 800cc5e:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800cc60:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cc64:	f102 0310 	add.w	r3, r2, #16
 800cc68:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cc6c:	f7ff fdde 	bl	800c82c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800cc70:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800cc74:	b14b      	cbz	r3, 800cc8a <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800cc76:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	f102 0314 	add.w	r3, r2, #20
 800cc82:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cc86:	f7ff fdd1 	bl	800c82c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc8a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cc8c:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc90:	e7a1      	b.n	800cbd6 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800cc92:	2c23      	cmp	r4, #35	; 0x23
 800cc94:	f103 3eff 	add.w	lr, r3, #4294967295
 800cc98:	f102 39ff 	add.w	r9, r2, #4294967295
 800cc9c:	d04b      	beq.n	800cd36 <start_pass_huff_decoder+0x32e>
 800cc9e:	2c30      	cmp	r4, #48	; 0x30
 800cca0:	d057      	beq.n	800cd52 <start_pass_huff_decoder+0x34a>
 800cca2:	2c18      	cmp	r4, #24
 800cca4:	d1ca      	bne.n	800cc3c <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800cca6:	f1be 0f05 	cmp.w	lr, #5
 800ccaa:	bf28      	it	cs
 800ccac:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800ccae:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800ccb2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800ccb6:	bf28      	it	cs
 800ccb8:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800ccba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ccbe:	3a01      	subs	r2, #1
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ccc6:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800ccc8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ccca:	e001      	b.n	800ccd0 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800cccc:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ccd0:	3501      	adds	r5, #1
 800ccd2:	e78f      	b.n	800cbf4 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800ccd4:	1e5c      	subs	r4, r3, #1
 800ccd6:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800ccd8:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800ccdc:	bf28      	it	cs
 800ccde:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800cce0:	2c02      	cmp	r4, #2
 800cce2:	bf28      	it	cs
 800cce4:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800cce6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800ccea:	4b2a      	ldr	r3, [pc, #168]	; (800cd94 <start_pass_huff_decoder+0x38c>)
 800ccec:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ccee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf2:	e7e8      	b.n	800ccc6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800ccf4:	1e5c      	subs	r4, r3, #1
 800ccf6:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800ccf8:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800ccfc:	bf28      	it	cs
 800ccfe:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800cd00:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cd02:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800cd06:	bf28      	it	cs
 800cd08:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cd0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cd0e:	3a01      	subs	r2, #1
 800cd10:	4413      	add	r3, r2
 800cd12:	4a21      	ldr	r2, [pc, #132]	; (800cd98 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd18:	e7d5      	b.n	800ccc6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800cd1a:	1e5c      	subs	r4, r3, #1
 800cd1c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800cd1e:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800cd22:	bf28      	it	cs
 800cd24:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800cd26:	2c04      	cmp	r4, #4
 800cd28:	bf28      	it	cs
 800cd2a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800cd2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cd30:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <start_pass_huff_decoder+0x394>)
 800cd32:	3a05      	subs	r2, #5
 800cd34:	e7db      	b.n	800ccee <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800cd36:	f1be 0f06 	cmp.w	lr, #6
 800cd3a:	bf28      	it	cs
 800cd3c:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800cd3e:	f1b9 0f06 	cmp.w	r9, #6
 800cd42:	bf28      	it	cs
 800cd44:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800cd46:	3b01      	subs	r3, #1
 800cd48:	3a01      	subs	r2, #1
 800cd4a:	fb0c 2303 	mla	r3, ip, r3, r2
 800cd4e:	4a14      	ldr	r2, [pc, #80]	; (800cda0 <start_pass_huff_decoder+0x398>)
 800cd50:	e7e0      	b.n	800cd14 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800cd52:	f1be 0f07 	cmp.w	lr, #7
 800cd56:	bf28      	it	cs
 800cd58:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800cd5a:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cd5e:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800cd62:	bf28      	it	cs
 800cd64:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cd66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cd6a:	3a01      	subs	r2, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	4a0d      	ldr	r2, [pc, #52]	; (800cda4 <start_pass_huff_decoder+0x39c>)
 800cd70:	e7d0      	b.n	800cd14 <start_pass_huff_decoder+0x30c>
 800cd72:	bf00      	nop
 800cd74:	0800bc69 	.word	0x0800bc69
 800cd78:	0800bddd 	.word	0x0800bddd
 800cd7c:	0800bf3d 	.word	0x0800bf3d
 800cd80:	0800bfd1 	.word	0x0800bfd1
 800cd84:	0800c259 	.word	0x0800c259
 800cd88:	0800c549 	.word	0x0800c549
 800cd8c:	0802d43c 	.word	0x0802d43c
 800cd90:	0802d2c8 	.word	0x0802d2c8
 800cd94:	0802d3c8 	.word	0x0802d3c8
 800cd98:	0802d3d8 	.word	0x0802d3d8
 800cd9c:	0802d3fc 	.word	0x0802d3fc
 800cda0:	0802d4a0 	.word	0x0802d4a0
 800cda4:	0802d530 	.word	0x0802d530

0800cda8 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cdaa:	6843      	ldr	r3, [r0, #4]
 800cdac:	22d8      	movs	r2, #216	; 0xd8
 800cdae:	2101      	movs	r1, #1
{
 800cdb0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cdb6:	4b17      	ldr	r3, [pc, #92]	; (800ce14 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800cdb8:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cdbc:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cdbe:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800cdc0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800cdc4:	b943      	cbnz	r3, 800cdd8 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800cdc6:	6503      	str	r3, [r0, #80]	; 0x50
 800cdc8:	6403      	str	r3, [r0, #64]	; 0x40
 800cdca:	6543      	str	r3, [r0, #84]	; 0x54
 800cdcc:	6443      	str	r3, [r0, #68]	; 0x44
 800cdce:	6583      	str	r3, [r0, #88]	; 0x58
 800cdd0:	6483      	str	r3, [r0, #72]	; 0x48
 800cdd2:	65c3      	str	r3, [r0, #92]	; 0x5c
 800cdd4:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800cdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cdd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800cdda:	2101      	movs	r1, #1
 800cddc:	686b      	ldr	r3, [r5, #4]
 800cdde:	4628      	mov	r0, r5
 800cde0:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cde2:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4798      	blx	r3
 800cde8:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800cdea:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cdee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdf0:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800cdf4:	42b3      	cmp	r3, r6
 800cdf6:	dc05      	bgt.n	800ce04 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800cdfe:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800ce02:	e7e8      	b.n	800cdd6 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800ce04:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce08:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ce0a:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800ce0c:	f01c fd5a 	bl	80298c4 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ce10:	e7ed      	b.n	800cdee <jinit_huff_decoder+0x46>
 800ce12:	bf00      	nop
 800ce14:	0800ca09 	.word	0x0800ca09

0800ce18 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800ce18:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800ce1c:	4a01      	ldr	r2, [pc, #4]	; (800ce24 <finish_input_pass+0xc>)
 800ce1e:	601a      	str	r2, [r3, #0]
}
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	0800cfe1 	.word	0x0800cfe1

0800ce28 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800ce28:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800ce2a:	4a0a      	ldr	r2, [pc, #40]	; (800ce54 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800ce2c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800ce2e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800ce32:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800ce34:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800ce36:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800ce38:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800ce3c:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800ce3e:	6803      	ldr	r3, [r0, #0]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800ce44:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ce48:	4620      	mov	r0, r4
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800ce4e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	0800cfe1 	.word	0x0800cfe1

0800ce58 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800ce58:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800ce5c:	2a01      	cmp	r2, #1
{
 800ce5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800ce68:	d135      	bne.n	800ced6 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800ce6a:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800ce6e:	69d9      	ldr	r1, [r3, #28]
 800ce70:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800ce74:	6a19      	ldr	r1, [r3, #32]
 800ce76:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800ce7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800ce7c:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800ce7e:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800ce82:	68d8      	ldr	r0, [r3, #12]
 800ce84:	fbb1 f5f0 	udiv	r5, r1, r0
 800ce88:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	bf08      	it	eq
 800ce90:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800ce92:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800ce96:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800ce98:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800ce9a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800ce9e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800cea2:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cea4:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800cea6:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ceaa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ceae:	429f      	cmp	r7, r3
 800ceb0:	db71      	blt.n	800cf96 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800ceb2:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800cebc:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800cec0:	4620      	mov	r0, r4
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800cec6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800ceca:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800cece:	6852      	ldr	r2, [r2, #4]
 800ced0:	601a      	str	r2, [r3, #0]
}
 800ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800ced6:	1e53      	subs	r3, r2, #1
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d907      	bls.n	800ceec <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800cedc:	6803      	ldr	r3, [r0, #0]
 800cede:	211b      	movs	r1, #27
 800cee0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cee4:	2204      	movs	r2, #4
 800cee6:	61da      	str	r2, [r3, #28]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ceec:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800cef0:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cef2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cef6:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800cef8:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cefa:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800cefe:	4359      	muls	r1, r3
 800cf00:	f009 fdd4 	bl	8016aac <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cf04:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800cf08:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800cf0c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800cf10:	4359      	muls	r1, r3
 800cf12:	6a20      	ldr	r0, [r4, #32]
 800cf14:	f009 fdca 	bl	8016aac <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800cf18:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800cf1c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cf20:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cf24:	429d      	cmp	r5, r3
 800cf26:	dabc      	bge.n	800cea2 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800cf28:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800cf2c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cf2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800cf30:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cf32:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800cf34:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cf38:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800cf3a:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800cf3c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800cf3e:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800cf40:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800cf42:	fbb2 fcf1 	udiv	ip, r2, r1
 800cf46:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800cf4a:	2a00      	cmp	r2, #0
 800cf4c:	bf08      	it	eq
 800cf4e:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800cf50:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800cf52:	6a1a      	ldr	r2, [r3, #32]
 800cf54:	fbb2 f1f0 	udiv	r1, r2, r0
 800cf58:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	bf08      	it	eq
 800cf60:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800cf62:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800cf64:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800cf68:	443b      	add	r3, r7
 800cf6a:	2b0a      	cmp	r3, #10
 800cf6c:	dd05      	ble.n	800cf7a <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	4620      	mov	r0, r4
 800cf72:	f8c3 9014 	str.w	r9, [r3, #20]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4798      	blx	r3
      while (mcublks-- > 0) {
 800cf7a:	2f00      	cmp	r7, #0
 800cf7c:	dc01      	bgt.n	800cf82 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cf7e:	3501      	adds	r5, #1
 800cf80:	e7ce      	b.n	800cf20 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800cf82:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800cf86:	3f01      	subs	r7, #1
 800cf88:	1c5a      	adds	r2, r3, #1
 800cf8a:	335c      	adds	r3, #92	; 0x5c
 800cf8c:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800cf90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800cf94:	e7f1      	b.n	800cf7a <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800cf96:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800cf9a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cf9c:	b9eb      	cbnz	r3, 800cfda <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800cf9e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800cfa0:	2a03      	cmp	r2, #3
 800cfa2:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800cfa6:	d803      	bhi.n	800cfb0 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800cfa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	b92b      	cbnz	r3, 800cfbc <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfbc:	6863      	ldr	r3, [r4, #4]
 800cfbe:	2284      	movs	r2, #132	; 0x84
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800cfc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfca:	4798      	blx	r3
 800cfcc:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800cfce:	2284      	movs	r2, #132	; 0x84
 800cfd0:	6869      	ldr	r1, [r5, #4]
 800cfd2:	f01c fc69 	bl	80298a8 <memcpy>
    compptr->quant_table = qtbl;
 800cfd6:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cfda:	3701      	adds	r7, #1
 800cfdc:	e765      	b.n	800ceaa <start_input_pass+0x52>
	...

0800cfe0 <consume_markers>:
{
 800cfe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cfe4:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800cfe8:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800cfea:	6973      	ldr	r3, [r6, #20]
 800cfec:	b9eb      	cbnz	r3, 800d02a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800cfee:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800cff2:	4db0      	ldr	r5, [pc, #704]	; (800d2b4 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800cff4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cff8:	4620      	mov	r0, r4
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	4798      	blx	r3
    switch (val) {
 800cffe:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800d000:	4607      	mov	r7, r0
    switch (val) {
 800d002:	d016      	beq.n	800d032 <consume_markers+0x52>
 800d004:	2802      	cmp	r0, #2
 800d006:	d111      	bne.n	800d02c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800d008:	2301      	movs	r3, #1
 800d00a:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800d00c:	69b3      	ldr	r3, [r6, #24]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 8174 	beq.w	800d2fc <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800d014:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	b133      	cbz	r3, 800d02a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800d01c:	6823      	ldr	r3, [r4, #0]
 800d01e:	223d      	movs	r2, #61	; 0x3d
 800d020:	4620      	mov	r0, r4
 800d022:	615a      	str	r2, [r3, #20]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4798      	blx	r3
 800d028:	e000      	b.n	800d02c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800d02a:	2702      	movs	r7, #2
}
 800d02c:	4638      	mov	r0, r7
 800d02e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800d032:	69b3      	ldr	r3, [r6, #24]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8150 	beq.w	800d2da <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	f040 80d8 	bne.w	800d1f0 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800d040:	6a22      	ldr	r2, [r4, #32]
 800d042:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800d046:	429a      	cmp	r2, r3
 800d048:	dc02      	bgt.n	800d050 <consume_markers+0x70>
 800d04a:	69e2      	ldr	r2, [r4, #28]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	dd08      	ble.n	800d062 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	212a      	movs	r1, #42	; 0x2a
 800d054:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800d058:	4620      	mov	r0, r4
 800d05a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800d062:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d066:	2a08      	cmp	r2, #8
 800d068:	d006      	beq.n	800d078 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	2110      	movs	r1, #16
 800d06e:	4620      	mov	r0, r4
 800d070:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800d078:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d07a:	2a0a      	cmp	r2, #10
 800d07c:	dd08      	ble.n	800d090 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	211b      	movs	r1, #27
 800d082:	4620      	mov	r0, r4
 800d084:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d088:	220a      	movs	r2, #10
 800d08a:	61da      	str	r2, [r3, #28]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d090:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d094:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d098:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800d09c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0a2:	459a      	cmp	sl, r3
 800d0a4:	db0d      	blt.n	800d0c2 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800d0a6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d0aa:	b92b      	cbnz	r3, 800d0b8 <consume_markers+0xd8>
 800d0ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d0b0:	b383      	cbz	r3, 800d114 <consume_markers+0x134>
 800d0b2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d0b6:	b36b      	cbz	r3, 800d114 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800d0b8:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800d0ba:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800d0be:	233f      	movs	r3, #63	; 0x3f
 800d0c0:	e071      	b.n	800d1a6 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800d0c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	d804      	bhi.n	800d0d6 <consume_markers+0xf6>
 800d0cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d905      	bls.n	800d0e2 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d0d6:	6823      	ldr	r3, [r4, #0]
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f8c3 b014 	str.w	fp, [r3, #20]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800d0e6:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d0ea:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800d0ee:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	bfac      	ite	ge
 800d0f6:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800d0fa:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800d0fe:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800d102:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800d106:	429a      	cmp	r2, r3
 800d108:	bfac      	ite	ge
 800d10a:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800d10e:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800d112:	e7c5      	b.n	800d0a0 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800d114:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800d118:	2b50      	cmp	r3, #80	; 0x50
 800d11a:	f000 808a 	beq.w	800d232 <consume_markers+0x252>
 800d11e:	dc2b      	bgt.n	800d178 <consume_markers+0x198>
 800d120:	2b18      	cmp	r3, #24
 800d122:	d078      	beq.n	800d216 <consume_markers+0x236>
 800d124:	dc1d      	bgt.n	800d162 <consume_markers+0x182>
 800d126:	2b08      	cmp	r3, #8
 800d128:	d070      	beq.n	800d20c <consume_markers+0x22c>
 800d12a:	dc13      	bgt.n	800d154 <consume_markers+0x174>
 800d12c:	b3bb      	cbz	r3, 800d19e <consume_markers+0x1be>
 800d12e:	2b03      	cmp	r3, #3
 800d130:	d065      	beq.n	800d1fe <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d132:	6822      	ldr	r2, [r4, #0]
 800d134:	2111      	movs	r1, #17
 800d136:	4620      	mov	r0, r4
 800d138:	6151      	str	r1, [r2, #20]
 800d13a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800d13e:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800d142:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800d146:	6213      	str	r3, [r2, #32]
 800d148:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800d14c:	6253      	str	r3, [r2, #36]	; 0x24
 800d14e:	6813      	ldr	r3, [r2, #0]
 800d150:	4798      	blx	r3
      break;
 800d152:	e02a      	b.n	800d1aa <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800d154:	2b0f      	cmp	r3, #15
 800d156:	d1ec      	bne.n	800d132 <consume_markers+0x152>
      cinfo->block_size = 4;
 800d158:	2204      	movs	r2, #4
 800d15a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800d15e:	4a56      	ldr	r2, [pc, #344]	; (800d2b8 <consume_markers+0x2d8>)
 800d160:	e051      	b.n	800d206 <consume_markers+0x226>
    switch (cinfo->Se) {
 800d162:	2b30      	cmp	r3, #48	; 0x30
 800d164:	d05c      	beq.n	800d220 <consume_markers+0x240>
 800d166:	2b3f      	cmp	r3, #63	; 0x3f
 800d168:	d05f      	beq.n	800d22a <consume_markers+0x24a>
 800d16a:	2b23      	cmp	r3, #35	; 0x23
 800d16c:	d1e1      	bne.n	800d132 <consume_markers+0x152>
      cinfo->block_size = 6;
 800d16e:	2206      	movs	r2, #6
 800d170:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800d174:	4a51      	ldr	r2, [pc, #324]	; (800d2bc <consume_markers+0x2dc>)
 800d176:	e046      	b.n	800d206 <consume_markers+0x226>
    switch (cinfo->Se) {
 800d178:	2ba8      	cmp	r3, #168	; 0xa8
 800d17a:	d060      	beq.n	800d23e <consume_markers+0x25e>
 800d17c:	dc07      	bgt.n	800d18e <consume_markers+0x1ae>
 800d17e:	2b78      	cmp	r3, #120	; 0x78
 800d180:	d059      	beq.n	800d236 <consume_markers+0x256>
 800d182:	2b8f      	cmp	r3, #143	; 0x8f
 800d184:	d059      	beq.n	800d23a <consume_markers+0x25a>
 800d186:	2b63      	cmp	r3, #99	; 0x63
 800d188:	d1d3      	bne.n	800d132 <consume_markers+0x152>
      cinfo->block_size = 10;
 800d18a:	230a      	movs	r3, #10
 800d18c:	e795      	b.n	800d0ba <consume_markers+0xda>
    switch (cinfo->Se) {
 800d18e:	2be0      	cmp	r3, #224	; 0xe0
 800d190:	d057      	beq.n	800d242 <consume_markers+0x262>
 800d192:	2bff      	cmp	r3, #255	; 0xff
 800d194:	d057      	beq.n	800d246 <consume_markers+0x266>
 800d196:	2bc3      	cmp	r3, #195	; 0xc3
 800d198:	d1cb      	bne.n	800d132 <consume_markers+0x152>
      cinfo->block_size = 14;
 800d19a:	230e      	movs	r3, #14
 800d19c:	e78d      	b.n	800d0ba <consume_markers+0xda>
      cinfo->block_size = 1;
 800d19e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800d1a2:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d1a6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1aa:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800d1ae:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1b2:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800d1b6:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800d1b8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800d1be:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1c2:	459a      	cmp	sl, r3
 800d1c4:	db41      	blt.n	800d24a <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d1c6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800d1ca:	6a20      	ldr	r0, [r4, #32]
 800d1cc:	4359      	muls	r1, r3
 800d1ce:	f009 fc6d 	bl	8016aac <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800d1d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d1e2:	db03      	blt.n	800d1ec <consume_markers+0x20c>
 800d1e4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d1e8:	2a00      	cmp	r2, #0
 800d1ea:	d071      	beq.n	800d2d0 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800d1ec:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800d1f0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d16d      	bne.n	800d2d4 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	61b3      	str	r3, [r6, #24]
	  break;
 800d1fc:	e6fa      	b.n	800cff4 <consume_markers+0x14>
      cinfo->block_size = 2;
 800d1fe:	2202      	movs	r2, #2
 800d200:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800d204:	4a2e      	ldr	r2, [pc, #184]	; (800d2c0 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800d206:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d20a:	e7cc      	b.n	800d1a6 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800d20c:	2203      	movs	r2, #3
 800d20e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800d212:	4a2c      	ldr	r2, [pc, #176]	; (800d2c4 <consume_markers+0x2e4>)
 800d214:	e7f7      	b.n	800d206 <consume_markers+0x226>
      cinfo->block_size = 5;
 800d216:	2205      	movs	r2, #5
 800d218:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800d21c:	4a2a      	ldr	r2, [pc, #168]	; (800d2c8 <consume_markers+0x2e8>)
 800d21e:	e7f2      	b.n	800d206 <consume_markers+0x226>
      cinfo->block_size = 7;
 800d220:	2207      	movs	r2, #7
 800d222:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800d226:	4a29      	ldr	r2, [pc, #164]	; (800d2cc <consume_markers+0x2ec>)
 800d228:	e7ed      	b.n	800d206 <consume_markers+0x226>
      cinfo->block_size = 8;
 800d22a:	2208      	movs	r2, #8
 800d22c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800d230:	e7b7      	b.n	800d1a2 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800d232:	2309      	movs	r3, #9
 800d234:	e741      	b.n	800d0ba <consume_markers+0xda>
      cinfo->block_size = 11;
 800d236:	230b      	movs	r3, #11
 800d238:	e73f      	b.n	800d0ba <consume_markers+0xda>
      cinfo->block_size = 12;
 800d23a:	230c      	movs	r3, #12
 800d23c:	e73d      	b.n	800d0ba <consume_markers+0xda>
      cinfo->block_size = 13;
 800d23e:	230d      	movs	r3, #13
 800d240:	e73b      	b.n	800d0ba <consume_markers+0xda>
      cinfo->block_size = 15;
 800d242:	230f      	movs	r3, #15
 800d244:	e739      	b.n	800d0ba <consume_markers+0xda>
      cinfo->block_size = 16;
 800d246:	2310      	movs	r3, #16
 800d248:	e737      	b.n	800d0ba <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800d24a:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d24e:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800d252:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d256:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d25a:	69e3      	ldr	r3, [r4, #28]
 800d25c:	4351      	muls	r1, r2
 800d25e:	4358      	muls	r0, r3
 800d260:	f009 fc24 	bl	8016aac <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800d264:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d268:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d26c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d270:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d272:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d276:	4358      	muls	r0, r3
 800d278:	4351      	muls	r1, r2
 800d27a:	f009 fc17 	bl	8016aac <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800d27e:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d282:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d286:	69e3      	ldr	r3, [r4, #28]
 800d288:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800d28c:	4358      	muls	r0, r3
 800d28e:	f009 fc0d 	bl	8016aac <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800d292:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d296:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d29a:	6a23      	ldr	r3, [r4, #32]
 800d29c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800d2a0:	4358      	muls	r0, r3
 800d2a2:	f009 fc03 	bl	8016aac <jdiv_round_up>
    compptr->quant_table = NULL;
 800d2a6:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800d2aa:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800d2ae:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d2b2:	e783      	b.n	800d1bc <consume_markers+0x1dc>
 800d2b4:	0802eb60 	.word	0x0802eb60
 800d2b8:	0802ed54 	.word	0x0802ed54
 800d2bc:	0802ee78 	.word	0x0802ee78
 800d2c0:	0802eca0 	.word	0x0802eca0
 800d2c4:	0802ecf0 	.word	0x0802ecf0
 800d2c8:	0802edd4 	.word	0x0802edd4
 800d2cc:	0802ef48 	.word	0x0802ef48
    cinfo->inputctl->has_multiple_scans = FALSE;
 800d2d0:	611a      	str	r2, [r3, #16]
 800d2d2:	e78d      	b.n	800d1f0 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61b3      	str	r3, [r6, #24]
 800d2d8:	e6a8      	b.n	800d02c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800d2da:	6933      	ldr	r3, [r6, #16]
 800d2dc:	b92b      	cbnz	r3, 800d2ea <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	2224      	movs	r2, #36	; 0x24
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	615a      	str	r2, [r3, #20]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800d2ea:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f43f ae80 	beq.w	800cff4 <consume_markers+0x14>
	start_input_pass(cinfo);
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7ff fdaf 	bl	800ce58 <start_input_pass>
 800d2fa:	e697      	b.n	800d02c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800d2fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d300:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d304:	429a      	cmp	r2, r3
 800d306:	f77f ae90 	ble.w	800d02a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800d30a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d30e:	e68d      	b.n	800d02c <consume_markers+0x4c>

0800d310 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d310:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800d314:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d316:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d318:	434a      	muls	r2, r1
 800d31a:	429a      	cmp	r2, r3
{
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d320:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d322:	d80c      	bhi.n	800d33e <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d324:	f009 fbc2 	bl	8016aac <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d328:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800d32c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d32e:	6a20      	ldr	r0, [r4, #32]
 800d330:	f009 fbbc 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800d334:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800d336:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800d338:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800d33c:	e059      	b.n	800d3f2 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800d33e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d346:	d80c      	bhi.n	800d362 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800d348:	0040      	lsls	r0, r0, #1
 800d34a:	f009 fbaf 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d34e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800d350:	6a20      	ldr	r0, [r4, #32]
 800d352:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d356:	0040      	lsls	r0, r0, #1
 800d358:	f009 fba8 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800d35c:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800d35e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800d360:	e7ea      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800d362:	441d      	add	r5, r3
 800d364:	42aa      	cmp	r2, r5
 800d366:	d80e      	bhi.n	800d386 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800d368:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d36c:	f009 fb9e 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d370:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800d372:	6a20      	ldr	r0, [r4, #32]
 800d374:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d378:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d37c:	f009 fb96 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800d380:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800d382:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800d384:	e7d8      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800d386:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800d38a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800d38e:	d80c      	bhi.n	800d3aa <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800d390:	0080      	lsls	r0, r0, #2
 800d392:	f009 fb8b 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d396:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800d398:	6a20      	ldr	r0, [r4, #32]
 800d39a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d39e:	0080      	lsls	r0, r0, #2
 800d3a0:	f009 fb84 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800d3a4:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800d3a6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800d3a8:	e7c6      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800d3aa:	441d      	add	r5, r3
 800d3ac:	42aa      	cmp	r2, r5
 800d3ae:	d80e      	bhi.n	800d3ce <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800d3b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d3b4:	f009 fb7a 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d3b8:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800d3ba:	6a20      	ldr	r0, [r4, #32]
 800d3bc:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d3c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d3c4:	f009 fb72 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800d3c8:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800d3ca:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800d3cc:	e7b4      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800d3ce:	2506      	movs	r5, #6
 800d3d0:	fb05 f603 	mul.w	r6, r5, r3
 800d3d4:	42b2      	cmp	r2, r6
 800d3d6:	d813      	bhi.n	800d400 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800d3d8:	4368      	muls	r0, r5
 800d3da:	f009 fb67 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d3de:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800d3e0:	6a20      	ldr	r0, [r4, #32]
 800d3e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d3e6:	4368      	muls	r0, r5
 800d3e8:	f009 fb60 	bl	8016aac <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800d3ec:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800d3ee:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3f2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3fa:	4291      	cmp	r1, r2
 800d3fc:	dc6f      	bgt.n	800d4de <jpeg_core_output_dimensions+0x1ce>
}
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800d400:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d404:	00dd      	lsls	r5, r3, #3
 800d406:	42b2      	cmp	r2, r6
 800d408:	d80e      	bhi.n	800d428 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800d40a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d40e:	f009 fb4d 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d412:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800d414:	6a20      	ldr	r0, [r4, #32]
 800d416:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d41a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d41e:	f009 fb45 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800d422:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800d424:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800d426:	e787      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800d428:	42aa      	cmp	r2, r5
 800d42a:	d80c      	bhi.n	800d446 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800d42c:	00c0      	lsls	r0, r0, #3
 800d42e:	f009 fb3d 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d432:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800d434:	6a20      	ldr	r0, [r4, #32]
 800d436:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d43a:	00c0      	lsls	r0, r0, #3
 800d43c:	f009 fb36 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800d440:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800d442:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800d444:	e778      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800d446:	441d      	add	r5, r3
 800d448:	42aa      	cmp	r2, r5
 800d44a:	d80e      	bhi.n	800d46a <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800d44c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d450:	f009 fb2c 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d454:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800d456:	6a20      	ldr	r0, [r4, #32]
 800d458:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d45c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d460:	f009 fb24 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800d464:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800d466:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800d468:	e766      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800d46a:	250a      	movs	r5, #10
 800d46c:	fb05 f603 	mul.w	r6, r5, r3
 800d470:	42b2      	cmp	r2, r6
 800d472:	d9b1      	bls.n	800d3d8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800d474:	250b      	movs	r5, #11
 800d476:	fb05 f603 	mul.w	r6, r5, r3
 800d47a:	42b2      	cmp	r2, r6
 800d47c:	d9ac      	bls.n	800d3d8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800d47e:	250c      	movs	r5, #12
 800d480:	fb05 f603 	mul.w	r6, r5, r3
 800d484:	42b2      	cmp	r2, r6
 800d486:	d9a7      	bls.n	800d3d8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800d488:	250d      	movs	r5, #13
 800d48a:	fb05 f603 	mul.w	r6, r5, r3
 800d48e:	42b2      	cmp	r2, r6
 800d490:	d9a2      	bls.n	800d3d8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800d492:	250e      	movs	r5, #14
 800d494:	fb05 f603 	mul.w	r6, r5, r3
 800d498:	42b2      	cmp	r2, r6
 800d49a:	d99d      	bls.n	800d3d8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800d49c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800d4a6:	d80d      	bhi.n	800d4c4 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800d4a8:	1a18      	subs	r0, r3, r0
 800d4aa:	f009 faff 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d4ae:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800d4b0:	6a20      	ldr	r0, [r4, #32]
 800d4b2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d4b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800d4ba:	f009 faf7 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800d4be:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800d4c0:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800d4c2:	e739      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f009 faf1 	bl	8016aac <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d4ca:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800d4cc:	6a20      	ldr	r0, [r4, #32]
 800d4ce:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d4d2:	0100      	lsls	r0, r0, #4
 800d4d4:	f009 faea 	bl	8016aac <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800d4d8:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800d4da:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800d4dc:	e72c      	b.n	800d338 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d4de:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800d4e2:	3201      	adds	r2, #1
 800d4e4:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d4e6:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800d4ea:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800d4ee:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800d4f2:	e782      	b.n	800d3fa <jpeg_core_output_dimensions+0xea>

0800d4f4 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d4f4:	6843      	ldr	r3, [r0, #4]
 800d4f6:	221c      	movs	r2, #28
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	681b      	ldr	r3, [r3, #0]
{
 800d4fc:	b510      	push	{r4, lr}
 800d4fe:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d500:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800d502:	4b08      	ldr	r3, [pc, #32]	; (800d524 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800d504:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800d508:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800d50a:	4b07      	ldr	r3, [pc, #28]	; (800d528 <jinit_input_controller+0x34>)
 800d50c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800d50e:	4b07      	ldr	r3, [pc, #28]	; (800d52c <jinit_input_controller+0x38>)
 800d510:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800d512:	4b07      	ldr	r3, [pc, #28]	; (800d530 <jinit_input_controller+0x3c>)
 800d514:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d516:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800d518:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800d51c:	2301      	movs	r3, #1
 800d51e:	6183      	str	r3, [r0, #24]
}
 800d520:	bd10      	pop	{r4, pc}
 800d522:	bf00      	nop
 800d524:	0800cfe1 	.word	0x0800cfe1
 800d528:	0800ce29 	.word	0x0800ce29
 800d52c:	0800ce59 	.word	0x0800ce59
 800d530:	0800ce19 	.word	0x0800ce19

0800d534 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d538:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d53c:	4602      	mov	r2, r0

  switch (pass_mode) {
 800d53e:	b149      	cbz	r1, 800d554 <start_pass_main+0x20>
 800d540:	2902      	cmp	r1, #2
 800d542:	d070      	beq.n	800d626 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d544:	6803      	ldr	r3, [r0, #0]
 800d546:	2203      	movs	r2, #3
 800d548:	615a      	str	r2, [r3, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800d54c:	b003      	add	sp, #12
 800d54e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d552:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d554:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d558:	6880      	ldr	r0, [r0, #8]
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d060      	beq.n	800d620 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800d55e:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800d562:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d566:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d56a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d56c:	482f      	ldr	r0, [pc, #188]	; (800d62c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d56e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d570:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800d572:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d574:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d576:	9a00      	ldr	r2, [sp, #0]
 800d578:	4291      	cmp	r1, r2
 800d57a:	db09      	blt.n	800d590 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d57c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d57e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d582:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d584:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d586:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d58a:	b003      	add	sp, #12
 800d58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d590:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800d592:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d594:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d596:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d598:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d59a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800d59e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d5a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5a4:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800d5a8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d5ac:	fb02 f905 	mul.w	r9, r2, r5
 800d5b0:	2500      	movs	r5, #0
 800d5b2:	454d      	cmp	r5, r9
 800d5b4:	db1c      	blt.n	800d5f0 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d5b6:	fb02 fb07 	mul.w	fp, r2, r7
 800d5ba:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d5be:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d5c2:	fb05 b502 	mla	r5, r5, r2, fp
 800d5c6:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d5ca:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d5ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d5d2:	2400      	movs	r4, #0
 800d5d4:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d5d8:	4554      	cmp	r4, sl
 800d5da:	db11      	blt.n	800d600 <start_pass_main+0xcc>
 800d5dc:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d5e0:	2400      	movs	r4, #0
 800d5e2:	fb00 c502 	mla	r5, r0, r2, ip
 800d5e6:	42a2      	cmp	r2, r4
 800d5e8:	dc14      	bgt.n	800d614 <start_pass_main+0xe0>
       ci++, compptr++) {
 800d5ea:	3101      	adds	r1, #1
 800d5ec:	3658      	adds	r6, #88	; 0x58
 800d5ee:	e7c2      	b.n	800d576 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d5f0:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d5f4:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d5f8:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d5fc:	3501      	adds	r5, #1
 800d5fe:	e7d8      	b.n	800d5b2 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d600:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d604:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d606:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d60a:	f855 bb04 	ldr.w	fp, [r5], #4
 800d60e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d612:	e7e1      	b.n	800d5d8 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800d614:	f8dc 0000 	ldr.w	r0, [ip]
 800d618:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d61c:	3401      	adds	r4, #1
 800d61e:	e7e2      	b.n	800d5e6 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800d620:	4a03      	ldr	r2, [pc, #12]	; (800d630 <start_pass_main+0xfc>)
 800d622:	605a      	str	r2, [r3, #4]
 800d624:	e7ae      	b.n	800d584 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800d626:	4a03      	ldr	r2, [pc, #12]	; (800d634 <start_pass_main+0x100>)
 800d628:	605a      	str	r2, [r3, #4]
    break;
 800d62a:	e7ae      	b.n	800d58a <start_pass_main+0x56>
 800d62c:	0800d691 	.word	0x0800d691
 800d630:	0800d639 	.word	0x0800d639
 800d634:	0800d885 	.word	0x0800d885

0800d638 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d63c:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d640:	4698      	mov	r8, r3
 800d642:	460e      	mov	r6, r1
 800d644:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d646:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d648:	4605      	mov	r5, r0
 800d64a:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d64c:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d650:	b943      	cbnz	r3, 800d664 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d652:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d656:	9105      	str	r1, [sp, #20]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	4798      	blx	r3
 800d65c:	b1a8      	cbz	r0, 800d68a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d65e:	2301      	movs	r3, #1
 800d660:	9905      	ldr	r1, [sp, #20]
 800d662:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d664:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d668:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d66c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d670:	4628      	mov	r0, r5
 800d672:	9600      	str	r6, [sp, #0]
 800d674:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d678:	685e      	ldr	r6, [r3, #4]
 800d67a:	464b      	mov	r3, r9
 800d67c:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d67e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d680:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d682:	bf24      	itt	cs
 800d684:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d686:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d68a:	b007      	add	sp, #28
 800d68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d690 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d694:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d698:	4698      	mov	r8, r3
 800d69a:	b08b      	sub	sp, #44	; 0x2c
 800d69c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d69e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d6a0:	4689      	mov	r9, r1
 800d6a2:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d6a4:	b973      	cbnz	r3, 800d6c4 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d6a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6a8:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d6ac:	330e      	adds	r3, #14
 800d6ae:	68d2      	ldr	r2, [r2, #12]
 800d6b0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d6b4:	4790      	blx	r2
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d05a      	beq.n	800d770 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d6be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d6c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d011      	beq.n	800d6ee <process_data_context_main+0x5e>
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d036      	beq.n	800d73c <process_data_context_main+0xac>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d14e      	bne.n	800d770 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d6d2:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d6d6:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d6d8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d6da:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800d6de:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d6e0:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d6e2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d045      	beq.n	800d776 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d6ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6f0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f103 010e 	add.w	r1, r3, #14
 800d6fa:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d6fe:	f8cd 9000 	str.w	r9, [sp]
 800d702:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d706:	685e      	ldr	r6, [r3, #4]
 800d708:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d70c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d70e:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d710:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d712:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d714:	429a      	cmp	r2, r3
 800d716:	d32b      	bcc.n	800d770 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d718:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800d71a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d063      	beq.n	800d7ea <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d724:	f083 0301 	eor.w	r3, r3, #1
 800d728:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d72a:	2300      	movs	r3, #0
 800d72c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d72e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d730:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d732:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d734:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d736:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d738:	6463      	str	r3, [r4, #68]	; 0x44
 800d73a:	e019      	b.n	800d770 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d73c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d73e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d742:	4628      	mov	r0, r5
 800d744:	f103 010e 	add.w	r1, r3, #14
 800d748:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d74c:	f8cd 9000 	str.w	r9, [sp]
 800d750:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d754:	685e      	ldr	r6, [r3, #4]
 800d756:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d75a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d75c:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d75e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d760:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d762:	429a      	cmp	r2, r3
 800d764:	d304      	bcc.n	800d770 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d766:	2300      	movs	r3, #0
 800d768:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	4543      	cmp	r3, r8
 800d76e:	d3b0      	bcc.n	800d6d2 <process_data_context_main+0x42>
  }
}
 800d770:	b00b      	add	sp, #44	; 0x2c
 800d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d776:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d778:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d77c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d780:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800d784:	9206      	str	r2, [sp, #24]
 800d786:	9a06      	ldr	r2, [sp, #24]
 800d788:	4296      	cmp	r6, r2
 800d78a:	daae      	bge.n	800d6ea <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d78c:	68d8      	ldr	r0, [r3, #12]
 800d78e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d790:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d792:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d794:	fbb0 fbf2 	udiv	fp, r0, r2
 800d798:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d79c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	bf08      	it	eq
 800d7a4:	4610      	moveq	r0, r2
    if (ci == 0) {
 800d7a6:	b926      	cbnz	r6, 800d7b2 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d7a8:	1e42      	subs	r2, r0, #1
 800d7aa:	fb92 f2fa 	sdiv	r2, r2, sl
 800d7ae:	3201      	adds	r2, #1
 800d7b0:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800d7b2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d7b4:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800d7b6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800d7ba:	320e      	adds	r2, #14
 800d7bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d7c0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d7c4:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	4658      	mov	r0, fp
 800d7cc:	3004      	adds	r0, #4
 800d7ce:	9205      	str	r2, [sp, #20]
 800d7d0:	9a05      	ldr	r2, [sp, #20]
 800d7d2:	4552      	cmp	r2, sl
 800d7d4:	db02      	blt.n	800d7dc <process_data_context_main+0x14c>
       ci++, compptr++) {
 800d7d6:	3601      	adds	r6, #1
 800d7d8:	3358      	adds	r3, #88	; 0x58
 800d7da:	e7d4      	b.n	800d786 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d7dc:	f8db 2000 	ldr.w	r2, [fp]
 800d7e0:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d7e4:	9a05      	ldr	r2, [sp, #20]
 800d7e6:	3201      	adds	r2, #1
 800d7e8:	e7f1      	b.n	800d7ce <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7ea:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d7ee:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7f2:	9305      	str	r3, [sp, #20]
 800d7f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7f6:	2500      	movs	r5, #0
 800d7f8:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d7fa:	1c43      	adds	r3, r0, #1
 800d7fc:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7fe:	9b08      	ldr	r3, [sp, #32]
 800d800:	429d      	cmp	r5, r3
 800d802:	da8e      	bge.n	800d722 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d804:	9b05      	ldr	r3, [sp, #20]
 800d806:	68da      	ldr	r2, [r3, #12]
 800d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80a:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800d80c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d810:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d814:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d818:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d81c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d820:	9b07      	ldr	r3, [sp, #28]
 800d822:	4353      	muls	r3, r2
 800d824:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d828:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d82c:	4413      	add	r3, r2
 800d82e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800d830:	2100      	movs	r1, #0
 800d832:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800d836:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d83a:	461e      	mov	r6, r3
 800d83c:	f06f 0303 	mvn.w	r3, #3
 800d840:	fb03 fe02 	mul.w	lr, r3, r2
 800d844:	eb07 030e 	add.w	r3, r7, lr
 800d848:	44e6      	add	lr, ip
 800d84a:	9309      	str	r3, [sp, #36]	; 0x24
 800d84c:	428a      	cmp	r2, r1
 800d84e:	dc04      	bgt.n	800d85a <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800d850:	9b05      	ldr	r3, [sp, #20]
 800d852:	3501      	adds	r5, #1
 800d854:	3358      	adds	r3, #88	; 0x58
 800d856:	9305      	str	r3, [sp, #20]
 800d858:	e7d1      	b.n	800d7fe <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d85a:	9b06      	ldr	r3, [sp, #24]
 800d85c:	f853 bb04 	ldr.w	fp, [r3], #4
 800d860:	9306      	str	r3, [sp, #24]
 800d862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d864:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800d868:	f85a bb04 	ldr.w	fp, [sl], #4
 800d86c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d870:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800d874:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d878:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d87c:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d87e:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800d882:	e7e3      	b.n	800d84c <process_data_context_main+0x1bc>

0800d884 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d886:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800d88a:	9100      	str	r1, [sp, #0]
 800d88c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d890:	2300      	movs	r3, #0
 800d892:	6864      	ldr	r4, [r4, #4]
 800d894:	461a      	mov	r2, r3
 800d896:	4619      	mov	r1, r3
 800d898:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d89a:	b004      	add	sp, #16
 800d89c:	bd10      	pop	{r4, pc}
	...

0800d8a0 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8a4:	6843      	ldr	r3, [r0, #4]
{
 800d8a6:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8a8:	2250      	movs	r2, #80	; 0x50
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	681b      	ldr	r3, [r3, #0]
{
 800d8ae:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8b0:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800d8b2:	4b3a      	ldr	r3, [pc, #232]	; (800d99c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d8b4:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8b8:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800d8ba:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d8bc:	b12d      	cbz	r5, 800d8ca <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	2203      	movs	r2, #3
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	615a      	str	r2, [r3, #20]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d8ca:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d8ce:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	b31b      	cbz	r3, 800d91e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d8d6:	2d01      	cmp	r5, #1
 800d8d8:	dc05      	bgt.n	800d8e6 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	2230      	movs	r2, #48	; 0x30
 800d8de:	4620      	mov	r0, r4
 800d8e0:	615a      	str	r2, [r3, #20]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	6863      	ldr	r3, [r4, #4]
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d8f0:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8f4:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8f6:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800d8fa:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8fe:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d900:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800d902:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d904:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d908:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d90c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d910:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d912:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800d914:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d918:	4598      	cmp	r8, r3
 800d91a:	db0a      	blt.n	800d932 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800d91c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d91e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d922:	3608      	adds	r6, #8
 800d924:	f04f 0800 	mov.w	r8, #0
 800d928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d92a:	4543      	cmp	r3, r8
 800d92c:	dc1d      	bgt.n	800d96a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800d92e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d932:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d934:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d936:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800d938:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d93a:	4353      	muls	r3, r2
 800d93c:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d940:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d942:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d946:	4620      	mov	r0, r4
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d94e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800d952:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800d956:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800d95a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800d95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d960:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800d964:	f108 0801 	add.w	r8, r8, #1
 800d968:	e7d3      	b.n	800d912 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800d96c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d970:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800d972:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d974:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d978:	4353      	muls	r3, r2
 800d97a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d97e:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d980:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d984:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800d988:	436b      	muls	r3, r5
 800d98a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d98e:	4620      	mov	r0, r4
 800d990:	434a      	muls	r2, r1
 800d992:	2101      	movs	r1, #1
 800d994:	47c8      	blx	r9
 800d996:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800d99a:	e7c5      	b.n	800d928 <jinit_d_main_controller+0x88>
 800d99c:	0800d535 	.word	0x0800d535

0800d9a0 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800d9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d9a4:	6986      	ldr	r6, [r0, #24]
{
 800d9a6:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800d9a8:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800d9ac:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800d9b0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9b4:	b93d      	cbnz	r5, 800d9c6 <get_sof+0x26>
 800d9b6:	68f3      	ldr	r3, [r6, #12]
 800d9b8:	4798      	blx	r3
 800d9ba:	b910      	cbnz	r0, 800d9c2 <get_sof+0x22>
 800d9bc:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9c2:	e9d6 c500 	ldrd	ip, r5, [r6]
 800d9c6:	1e6b      	subs	r3, r5, #1
 800d9c8:	f89c 7000 	ldrb.w	r7, [ip]
 800d9cc:	f000 8088 	beq.w	800dae0 <get_sof+0x140>
 800d9d0:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d9d4:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9d6:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d9da:	f000 808a 	beq.w	800daf2 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9de:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d9e0:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d9e2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d9e4:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d9e8:	f000 808c 	beq.w	800db04 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d9ec:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d9ee:	782a      	ldrb	r2, [r5, #0]
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d9f6:	6222      	str	r2, [r4, #32]
 800d9f8:	f000 808d 	beq.w	800db16 <get_sof+0x176>
 800d9fc:	3501      	adds	r5, #1
 800d9fe:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800da00:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800da02:	6a22      	ldr	r2, [r4, #32]
 800da04:	440a      	add	r2, r1
 800da06:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800da08:	f000 808e 	beq.w	800db28 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800da0c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800da0e:	782a      	ldrb	r2, [r5, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800da16:	61e2      	str	r2, [r4, #28]
 800da18:	f000 808f 	beq.w	800db3a <get_sof+0x19a>
 800da1c:	3501      	adds	r5, #1
 800da1e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800da20:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800da22:	69e2      	ldr	r2, [r4, #28]
 800da24:	440a      	add	r2, r1
 800da26:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800da28:	f000 8090 	beq.w	800db4c <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800da2c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800da2e:	f103 39ff 	add.w	r9, r3, #4294967295
 800da32:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800da36:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800da3a:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800da3c:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800da3e:	4620      	mov	r0, r4
 800da40:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800da42:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800da46:	619a      	str	r2, [r3, #24]
  length -= 8;
 800da48:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800da4c:	69e2      	ldr	r2, [r4, #28]
 800da4e:	61da      	str	r2, [r3, #28]
 800da50:	6a22      	ldr	r2, [r4, #32]
 800da52:	621a      	str	r2, [r3, #32]
 800da54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800da56:	625a      	str	r2, [r3, #36]	; 0x24
 800da58:	2266      	movs	r2, #102	; 0x66
 800da5a:	615a      	str	r2, [r3, #20]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800da60:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	b12b      	cbz	r3, 800da74 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	223c      	movs	r2, #60	; 0x3c
 800da6c:	4620      	mov	r0, r4
 800da6e:	615a      	str	r2, [r3, #20]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800da74:	6a23      	ldr	r3, [r4, #32]
 800da76:	b123      	cbz	r3, 800da82 <get_sof+0xe2>
 800da78:	69e3      	ldr	r3, [r4, #28]
 800da7a:	b113      	cbz	r3, 800da82 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800da7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da7e:	2b00      	cmp	r3, #0
 800da80:	dc05      	bgt.n	800da8e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	2221      	movs	r2, #33	; 0x21
 800da86:	4620      	mov	r0, r4
 800da88:	615a      	str	r2, [r3, #20]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800da8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800da94:	4543      	cmp	r3, r8
 800da96:	d005      	beq.n	800daa4 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	220c      	movs	r2, #12
 800da9c:	4620      	mov	r0, r4
 800da9e:	615a      	str	r2, [r3, #20]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800daa4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800daa8:	b94b      	cbnz	r3, 800dabe <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800daaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800daac:	2158      	movs	r1, #88	; 0x58
 800daae:	6863      	ldr	r3, [r4, #4]
 800dab0:	4620      	mov	r0, r4
 800dab2:	434a      	muls	r2, r1
 800dab4:	2101      	movs	r1, #1
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4798      	blx	r3
 800daba:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dabe:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800dac2:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dac6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800daca:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dacc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dace:	4543      	cmp	r3, r8
 800dad0:	dc45      	bgt.n	800db5e <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800dad2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dad6:	2001      	movs	r0, #1
 800dad8:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800dada:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800dade:	e76e      	b.n	800d9be <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dae0:	68f3      	ldr	r3, [r6, #12]
 800dae2:	4620      	mov	r0, r4
 800dae4:	4798      	blx	r3
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f43f af68 	beq.w	800d9bc <get_sof+0x1c>
 800daec:	e9d6 5300 	ldrd	r5, r3, [r6]
 800daf0:	e770      	b.n	800d9d4 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800daf2:	68f3      	ldr	r3, [r6, #12]
 800daf4:	4620      	mov	r0, r4
 800daf6:	4798      	blx	r3
 800daf8:	2800      	cmp	r0, #0
 800dafa:	f43f af5f 	beq.w	800d9bc <get_sof+0x1c>
 800dafe:	e9d6 5300 	ldrd	r5, r3, [r6]
 800db02:	e76d      	b.n	800d9e0 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800db04:	68f3      	ldr	r3, [r6, #12]
 800db06:	4620      	mov	r0, r4
 800db08:	4798      	blx	r3
 800db0a:	2800      	cmp	r0, #0
 800db0c:	f43f af56 	beq.w	800d9bc <get_sof+0x1c>
 800db10:	e9d6 5300 	ldrd	r5, r3, [r6]
 800db14:	e76b      	b.n	800d9ee <get_sof+0x4e>
 800db16:	68f3      	ldr	r3, [r6, #12]
 800db18:	4620      	mov	r0, r4
 800db1a:	4798      	blx	r3
 800db1c:	2800      	cmp	r0, #0
 800db1e:	f43f af4d 	beq.w	800d9bc <get_sof+0x1c>
 800db22:	e9d6 5300 	ldrd	r5, r3, [r6]
 800db26:	e76a      	b.n	800d9fe <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800db28:	68f3      	ldr	r3, [r6, #12]
 800db2a:	4620      	mov	r0, r4
 800db2c:	4798      	blx	r3
 800db2e:	2800      	cmp	r0, #0
 800db30:	f43f af44 	beq.w	800d9bc <get_sof+0x1c>
 800db34:	e9d6 5300 	ldrd	r5, r3, [r6]
 800db38:	e769      	b.n	800da0e <get_sof+0x6e>
 800db3a:	68f3      	ldr	r3, [r6, #12]
 800db3c:	4620      	mov	r0, r4
 800db3e:	4798      	blx	r3
 800db40:	2800      	cmp	r0, #0
 800db42:	f43f af3b 	beq.w	800d9bc <get_sof+0x1c>
 800db46:	e9d6 5300 	ldrd	r5, r3, [r6]
 800db4a:	e768      	b.n	800da1e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800db4c:	68f3      	ldr	r3, [r6, #12]
 800db4e:	4620      	mov	r0, r4
 800db50:	4798      	blx	r3
 800db52:	2800      	cmp	r0, #0
 800db54:	f43f af32 	beq.w	800d9bc <get_sof+0x1c>
 800db58:	e9d6 5300 	ldrd	r5, r3, [r6]
 800db5c:	e767      	b.n	800da2e <get_sof+0x8e>
    compptr->component_index = ci;
 800db5e:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800db62:	f1b9 0f00 	cmp.w	r9, #0
 800db66:	d107      	bne.n	800db78 <get_sof+0x1d8>
 800db68:	68f3      	ldr	r3, [r6, #12]
 800db6a:	4620      	mov	r0, r4
 800db6c:	4798      	blx	r3
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f af24 	beq.w	800d9bc <get_sof+0x1c>
 800db74:	e9d6 5900 	ldrd	r5, r9, [r6]
 800db78:	782b      	ldrb	r3, [r5, #0]
 800db7a:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800db7e:	f1b9 0301 	subs.w	r3, r9, #1
 800db82:	d029      	beq.n	800dbd8 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800db84:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800db86:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800db88:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800db8a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800db8e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800db92:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800db96:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800db9a:	d026      	beq.n	800dbea <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800db9c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800db9e:	f103 39ff 	add.w	r9, r3, #4294967295
 800dba2:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dba6:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800dbaa:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dbac:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800dbb4:	f108 0801 	add.w	r8, r8, #1
 800dbb8:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dbba:	619a      	str	r2, [r3, #24]
 800dbbc:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800dbc0:	61da      	str	r2, [r3, #28]
 800dbc2:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800dbc6:	621a      	str	r2, [r3, #32]
 800dbc8:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800dbcc:	f8c3 a014 	str.w	sl, [r3, #20]
 800dbd0:	625a      	str	r2, [r3, #36]	; 0x24
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	4798      	blx	r3
       ci++, compptr++) {
 800dbd6:	e779      	b.n	800dacc <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800dbd8:	68f3      	ldr	r3, [r6, #12]
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4798      	blx	r3
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	f43f aeec 	beq.w	800d9bc <get_sof+0x1c>
 800dbe4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dbe8:	e7cd      	b.n	800db86 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dbea:	68f3      	ldr	r3, [r6, #12]
 800dbec:	4620      	mov	r0, r4
 800dbee:	4798      	blx	r3
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	f43f aee3 	beq.w	800d9bc <get_sof+0x1c>
 800dbf6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dbfa:	e7d0      	b.n	800db9e <get_sof+0x1fe>

0800dbfc <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800dbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800dc00:	2a0d      	cmp	r2, #13
{
 800dc02:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800dc04:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800dc06:	eb02 0603 	add.w	r6, r2, r3
{
 800dc0a:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800dc0c:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800dc0e:	d96d      	bls.n	800dcec <examine_app0+0xf0>
 800dc10:	7822      	ldrb	r2, [r4, #0]
 800dc12:	2a4a      	cmp	r2, #74	; 0x4a
 800dc14:	f040 808f 	bne.w	800dd36 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800dc18:	7862      	ldrb	r2, [r4, #1]
 800dc1a:	2a46      	cmp	r2, #70	; 0x46
 800dc1c:	f040 808b 	bne.w	800dd36 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800dc20:	78a2      	ldrb	r2, [r4, #2]
 800dc22:	2a49      	cmp	r2, #73	; 0x49
 800dc24:	d16a      	bne.n	800dcfc <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800dc26:	78e2      	ldrb	r2, [r4, #3]
 800dc28:	2a46      	cmp	r2, #70	; 0x46
 800dc2a:	d167      	bne.n	800dcfc <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800dc2c:	7922      	ldrb	r2, [r4, #4]
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	d164      	bne.n	800dcfc <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800dc32:	2201      	movs	r2, #1
 800dc34:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800dc38:	7962      	ldrb	r2, [r4, #5]
 800dc3a:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800dc3e:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800dc40:	f894 c006 	ldrb.w	ip, [r4, #6]
 800dc44:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800dc48:	79e7      	ldrb	r7, [r4, #7]
 800dc4a:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800dc4e:	f894 e008 	ldrb.w	lr, [r4, #8]
 800dc52:	7a67      	ldrb	r7, [r4, #9]
 800dc54:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800dc58:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800dc5c:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800dc60:	7ae7      	ldrb	r7, [r4, #11]
 800dc62:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800dc66:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800dc6a:	d007      	beq.n	800dc7c <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800dc6c:	277a      	movs	r7, #122	; 0x7a
 800dc6e:	f8c1 c01c 	str.w	ip, [r1, #28]
 800dc72:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800dc76:	f04f 31ff 	mov.w	r1, #4294967295
 800dc7a:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	2101      	movs	r1, #1
 800dc80:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800dc84:	4628      	mov	r0, r5
 800dc86:	619a      	str	r2, [r3, #24]
 800dc88:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800dc8c:	61da      	str	r2, [r3, #28]
 800dc8e:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800dc92:	621a      	str	r2, [r3, #32]
 800dc94:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800dc98:	625a      	str	r2, [r3, #36]	; 0x24
 800dc9a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800dc9e:	629a      	str	r2, [r3, #40]	; 0x28
 800dca0:	2259      	movs	r2, #89	; 0x59
 800dca2:	615a      	str	r2, [r3, #20]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800dca8:	7b22      	ldrb	r2, [r4, #12]
 800dcaa:	7b63      	ldrb	r3, [r4, #13]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	d00a      	beq.n	800dcc6 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	225c      	movs	r2, #92	; 0x5c
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	615a      	str	r2, [r3, #20]
 800dcba:	7b22      	ldrb	r2, [r4, #12]
 800dcbc:	619a      	str	r2, [r3, #24]
 800dcbe:	7b62      	ldrb	r2, [r4, #13]
 800dcc0:	61da      	str	r2, [r3, #28]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800dcc6:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800dcc8:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800dcca:	7b63      	ldrb	r3, [r4, #13]
 800dccc:	fb12 f203 	smulbb	r2, r2, r3
 800dcd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800dcd4:	42b2      	cmp	r2, r6
 800dcd6:	d030      	beq.n	800dd3a <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800dcd8:	682a      	ldr	r2, [r5, #0]
 800dcda:	235a      	movs	r3, #90	; 0x5a
 800dcdc:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800dce0:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dce2:	4628      	mov	r0, r5
 800dce4:	2101      	movs	r1, #1
  }
}
 800dce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dcea:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800dcec:	2a05      	cmp	r2, #5
 800dcee:	d922      	bls.n	800dd36 <examine_app0+0x13a>
 800dcf0:	7822      	ldrb	r2, [r4, #0]
 800dcf2:	2a4a      	cmp	r2, #74	; 0x4a
 800dcf4:	d11f      	bne.n	800dd36 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800dcf6:	7862      	ldrb	r2, [r4, #1]
 800dcf8:	2a46      	cmp	r2, #70	; 0x46
 800dcfa:	d11c      	bne.n	800dd36 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800dcfc:	78a2      	ldrb	r2, [r4, #2]
 800dcfe:	2a58      	cmp	r2, #88	; 0x58
 800dd00:	d119      	bne.n	800dd36 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800dd02:	78e2      	ldrb	r2, [r4, #3]
 800dd04:	2a58      	cmp	r2, #88	; 0x58
 800dd06:	d116      	bne.n	800dd36 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800dd08:	7922      	ldrb	r2, [r4, #4]
 800dd0a:	b9a2      	cbnz	r2, 800dd36 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800dd0c:	7962      	ldrb	r2, [r4, #5]
 800dd0e:	2a11      	cmp	r2, #17
 800dd10:	d007      	beq.n	800dd22 <examine_app0+0x126>
 800dd12:	2a13      	cmp	r2, #19
 800dd14:	d007      	beq.n	800dd26 <examine_app0+0x12a>
 800dd16:	2a10      	cmp	r2, #16
 800dd18:	d107      	bne.n	800dd2a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800dd1a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dd1c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800dd20:	e7df      	b.n	800dce2 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800dd22:	226f      	movs	r2, #111	; 0x6f
 800dd24:	e7fa      	b.n	800dd1c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800dd26:	2270      	movs	r2, #112	; 0x70
 800dd28:	e7f8      	b.n	800dd1c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800dd2a:	225b      	movs	r2, #91	; 0x5b
 800dd2c:	614a      	str	r2, [r1, #20]
 800dd2e:	7962      	ldrb	r2, [r4, #5]
 800dd30:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800dd34:	e7d5      	b.n	800dce2 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dd36:	224f      	movs	r2, #79	; 0x4f
 800dd38:	e7f0      	b.n	800dd1c <examine_app0+0x120>
}
 800dd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd3e <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800dd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800dd42:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dd44:	6804      	ldr	r4, [r0, #0]
{
 800dd46:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dd48:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800dd4a:	d92b      	bls.n	800dda4 <examine_app14+0x66>
 800dd4c:	780f      	ldrb	r7, [r1, #0]
 800dd4e:	2f41      	cmp	r7, #65	; 0x41
 800dd50:	d128      	bne.n	800dda4 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800dd52:	784f      	ldrb	r7, [r1, #1]
 800dd54:	2f64      	cmp	r7, #100	; 0x64
 800dd56:	d125      	bne.n	800dda4 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800dd58:	788f      	ldrb	r7, [r1, #2]
 800dd5a:	2f6f      	cmp	r7, #111	; 0x6f
 800dd5c:	d122      	bne.n	800dda4 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800dd5e:	78cf      	ldrb	r7, [r1, #3]
 800dd60:	2f62      	cmp	r7, #98	; 0x62
 800dd62:	d11f      	bne.n	800dda4 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800dd64:	790f      	ldrb	r7, [r1, #4]
 800dd66:	2f65      	cmp	r7, #101	; 0x65
 800dd68:	d11c      	bne.n	800dda4 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dd6a:	79cb      	ldrb	r3, [r1, #7]
 800dd6c:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dd6e:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dd70:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dd74:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dd76:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dd7a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800dd7e:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dd80:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dd82:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dd86:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dd8a:	234e      	movs	r3, #78	; 0x4e
 800dd8c:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800dd90:	6163      	str	r3, [r4, #20]
 800dd92:	2101      	movs	r1, #1
 800dd94:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800dd96:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800dd98:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800dd9c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800dda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800dda4:	2150      	movs	r1, #80	; 0x50
 800dda6:	4413      	add	r3, r2
 800dda8:	4628      	mov	r0, r5
 800ddaa:	6161      	str	r1, [r4, #20]
 800ddac:	2101      	movs	r1, #1
 800ddae:	61a3      	str	r3, [r4, #24]
 800ddb0:	4633      	mov	r3, r6
}
 800ddb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800ddb6:	4718      	bx	r3

0800ddb8 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800ddb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800ddbc:	6986      	ldr	r6, [r0, #24]
{
 800ddbe:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800ddc0:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800ddc2:	b39f      	cbz	r7, 800de2c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800ddc4:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ddc6:	7825      	ldrb	r5, [r4, #0]
 800ddc8:	3f01      	subs	r7, #1
 800ddca:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800ddce:	d037      	beq.n	800de40 <get_interesting_appn+0x88>
 800ddd0:	3401      	adds	r4, #1
 800ddd2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ddd6:	3f01      	subs	r7, #1
 800ddd8:	444d      	add	r5, r9
  length -= 2;
 800ddda:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800dddc:	2d0d      	cmp	r5, #13
 800ddde:	dc37      	bgt.n	800de50 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	dd38      	ble.n	800de56 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800dde4:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800dde6:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800ddea:	b92f      	cbnz	r7, 800ddf8 <get_interesting_appn+0x40>
 800ddec:	68f3      	ldr	r3, [r6, #12]
 800ddee:	4640      	mov	r0, r8
 800ddf0:	4798      	blx	r3
 800ddf2:	b1f0      	cbz	r0, 800de32 <get_interesting_appn+0x7a>
 800ddf4:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ddf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ddfc:	3f01      	subs	r7, #1
 800ddfe:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800de02:	f10a 0a01 	add.w	sl, sl, #1
 800de06:	45d1      	cmp	r9, sl
 800de08:	d1ef      	bne.n	800ddea <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800de0a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800de0e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800de12:	2ae0      	cmp	r2, #224	; 0xe0
 800de14:	d022      	beq.n	800de5c <get_interesting_appn+0xa4>
 800de16:	2aee      	cmp	r2, #238	; 0xee
 800de18:	d032      	beq.n	800de80 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800de1a:	f8d8 3000 	ldr.w	r3, [r8]
 800de1e:	2146      	movs	r1, #70	; 0x46
 800de20:	4640      	mov	r0, r8
 800de22:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4798      	blx	r3
    break;
 800de2a:	e01d      	b.n	800de68 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de2c:	68f3      	ldr	r3, [r6, #12]
 800de2e:	4798      	blx	r3
 800de30:	b918      	cbnz	r0, 800de3a <get_interesting_appn+0x82>
 800de32:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800de34:	b004      	add	sp, #16
 800de36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de3a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800de3e:	e7c2      	b.n	800ddc6 <get_interesting_appn+0xe>
 800de40:	68f3      	ldr	r3, [r6, #12]
 800de42:	4640      	mov	r0, r8
 800de44:	4798      	blx	r3
 800de46:	2800      	cmp	r0, #0
 800de48:	d0f3      	beq.n	800de32 <get_interesting_appn+0x7a>
 800de4a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800de4e:	e7c0      	b.n	800ddd2 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800de50:	f04f 090e 	mov.w	r9, #14
 800de54:	e7c7      	b.n	800dde6 <get_interesting_appn+0x2e>
    numtoread = 0;
 800de56:	f04f 0900 	mov.w	r9, #0
 800de5a:	e7d6      	b.n	800de0a <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800de5c:	462b      	mov	r3, r5
 800de5e:	464a      	mov	r2, r9
 800de60:	4669      	mov	r1, sp
 800de62:	4640      	mov	r0, r8
 800de64:	f7ff feca 	bl	800dbfc <examine_app0>
  if (length > 0)
 800de68:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800de6a:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800de6e:	dd05      	ble.n	800de7c <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800de70:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800de74:	4629      	mov	r1, r5
 800de76:	4640      	mov	r0, r8
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	4798      	blx	r3
  return TRUE;
 800de7c:	2001      	movs	r0, #1
 800de7e:	e7d9      	b.n	800de34 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800de80:	462b      	mov	r3, r5
 800de82:	464a      	mov	r2, r9
 800de84:	4669      	mov	r1, sp
 800de86:	4640      	mov	r0, r8
 800de88:	f7ff ff59 	bl	800dd3e <examine_app14>
    break;
 800de8c:	e7ec      	b.n	800de68 <get_interesting_appn+0xb0>

0800de8e <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800de8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800de92:	6984      	ldr	r4, [r0, #24]
{
 800de94:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800de96:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800de98:	b31b      	cbz	r3, 800dee2 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800de9a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de9c:	782e      	ldrb	r6, [r5, #0]
 800de9e:	f1b3 0801 	subs.w	r8, r3, #1
 800dea2:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800dea6:	d025      	beq.n	800def4 <skip_variable+0x66>
 800dea8:	3501      	adds	r5, #1
 800deaa:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800deae:	235d      	movs	r3, #93	; 0x5d
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800deb4:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800deb6:	4638      	mov	r0, r7
 800deb8:	6153      	str	r3, [r2, #20]
  length -= 2;
 800deba:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800debc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800dec0:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800dec4:	6853      	ldr	r3, [r2, #4]
 800dec6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dec8:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800decc:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800dece:	6025      	str	r5, [r4, #0]
 800ded0:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800ded2:	dd04      	ble.n	800dede <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	4631      	mov	r1, r6
 800ded8:	4638      	mov	r0, r7
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	4798      	blx	r3

  return TRUE;
 800dede:	2001      	movs	r0, #1
 800dee0:	e003      	b.n	800deea <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dee2:	68e3      	ldr	r3, [r4, #12]
 800dee4:	4798      	blx	r3
 800dee6:	b910      	cbnz	r0, 800deee <skip_variable+0x60>
 800dee8:	2000      	movs	r0, #0
}
 800deea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800deee:	e9d4 5300 	ldrd	r5, r3, [r4]
 800def2:	e7d3      	b.n	800de9c <skip_variable+0xe>
 800def4:	68e3      	ldr	r3, [r4, #12]
 800def6:	4638      	mov	r0, r7
 800def8:	4798      	blx	r3
 800defa:	2800      	cmp	r0, #0
 800defc:	d0f4      	beq.n	800dee8 <skip_variable+0x5a>
 800defe:	e9d4 5800 	ldrd	r5, r8, [r4]
 800df02:	e7d2      	b.n	800deaa <skip_variable+0x1c>

0800df04 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800df04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800df08:	6986      	ldr	r6, [r0, #24]
{
 800df0a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800df0c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800df10:	b987      	cbnz	r7, 800df34 <next_marker+0x30>
 800df12:	68f3      	ldr	r3, [r6, #12]
 800df14:	4640      	mov	r0, r8
 800df16:	4798      	blx	r3
 800df18:	b950      	cbnz	r0, 800df30 <next_marker+0x2c>
 800df1a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800df20:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800df24:	6993      	ldr	r3, [r2, #24]
 800df26:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800df28:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800df2a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800df2e:	e7ef      	b.n	800df10 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800df30:	e9d6 4700 	ldrd	r4, r7, [r6]
 800df34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df38:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800df3a:	2bff      	cmp	r3, #255	; 0xff
 800df3c:	d1f0      	bne.n	800df20 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800df3e:	b937      	cbnz	r7, 800df4e <next_marker+0x4a>
 800df40:	68f3      	ldr	r3, [r6, #12]
 800df42:	4640      	mov	r0, r8
 800df44:	4798      	blx	r3
 800df46:	2800      	cmp	r0, #0
 800df48:	d0e7      	beq.n	800df1a <next_marker+0x16>
 800df4a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800df4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800df52:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800df54:	2dff      	cmp	r5, #255	; 0xff
 800df56:	d0f2      	beq.n	800df3e <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800df58:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800df5c:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800df5e:	b90d      	cbnz	r5, 800df64 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800df60:	3302      	adds	r3, #2
 800df62:	e7e1      	b.n	800df28 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800df64:	b173      	cbz	r3, 800df84 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800df66:	f8d8 2000 	ldr.w	r2, [r8]
 800df6a:	2177      	movs	r1, #119	; 0x77
 800df6c:	4640      	mov	r0, r8
 800df6e:	61d5      	str	r5, [r2, #28]
 800df70:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800df74:	6853      	ldr	r3, [r2, #4]
 800df76:	f04f 31ff 	mov.w	r1, #4294967295
 800df7a:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800df7c:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800df80:	2200      	movs	r2, #0
 800df82:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800df84:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800df88:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800df8a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800df8e:	e7c5      	b.n	800df1c <next_marker+0x18>

0800df90 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800df90:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800df94:	b510      	push	{r4, lr}
 800df96:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800df98:	b1e3      	cbz	r3, 800dfd4 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800df9a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800df9e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800dfa2:	6959      	ldr	r1, [r3, #20]
 800dfa4:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d119      	bne.n	800dfe0 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	2264      	movs	r2, #100	; 0x64
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	2103      	movs	r1, #3
 800dfba:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800dfc2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800dfc6:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800dfc8:	6953      	ldr	r3, [r2, #20]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	f003 0307 	and.w	r3, r3, #7
 800dfd0:	6153      	str	r3, [r2, #20]
  return TRUE;
 800dfd2:	e004      	b.n	800dfde <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800dfd4:	f7ff ff96 	bl	800df04 <next_marker>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d1de      	bne.n	800df9a <read_restart_marker+0xa>
      return FALSE;
 800dfdc:	2000      	movs	r0, #0
}
 800dfde:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800dfe0:	69a3      	ldr	r3, [r4, #24]
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	4798      	blx	r3
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d1ea      	bne.n	800dfc2 <read_restart_marker+0x32>
 800dfec:	e7f6      	b.n	800dfdc <read_restart_marker+0x4c>

0800dfee <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800dfee:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800dff0:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800dff4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800dff8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800dffc:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800e000:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800e002:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800e006:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800e00a:	4770      	bx	lr

0800e00c <get_dht>:
{
 800e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800e010:	6987      	ldr	r7, [r0, #24]
{
 800e012:	b0c9      	sub	sp, #292	; 0x124
 800e014:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800e016:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e018:	b1fe      	cbz	r6, 800e05a <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800e01a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e01c:	f894 9000 	ldrb.w	r9, [r4]
 800e020:	3e01      	subs	r6, #1
 800e022:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800e026:	d022      	beq.n	800e06e <get_dht+0x62>
 800e028:	3401      	adds	r4, #1
 800e02a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800e02e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e030:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e034:	44c1      	add	r9, r8
  length -= 2;
 800e036:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800e03a:	f1b9 0f10 	cmp.w	r9, #16
 800e03e:	dc1e      	bgt.n	800e07e <get_dht+0x72>
  if (length != 0)
 800e040:	f1b9 0f00 	cmp.w	r9, #0
 800e044:	d005      	beq.n	800e052 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e046:	682b      	ldr	r3, [r5, #0]
 800e048:	220c      	movs	r2, #12
 800e04a:	4628      	mov	r0, r5
 800e04c:	615a      	str	r2, [r3, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4798      	blx	r3
  return TRUE;
 800e052:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e054:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800e058:	e003      	b.n	800e062 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	4798      	blx	r3
 800e05e:	b918      	cbnz	r0, 800e068 <get_dht+0x5c>
 800e060:	2000      	movs	r0, #0
}
 800e062:	b049      	add	sp, #292	; 0x124
 800e064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e068:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e06c:	e7d6      	b.n	800e01c <get_dht+0x10>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	4628      	mov	r0, r5
 800e072:	4798      	blx	r3
 800e074:	2800      	cmp	r0, #0
 800e076:	d0f3      	beq.n	800e060 <get_dht+0x54>
 800e078:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e07c:	e7d5      	b.n	800e02a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e07e:	b936      	cbnz	r6, 800e08e <get_dht+0x82>
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	4628      	mov	r0, r5
 800e084:	4790      	blx	r2
 800e086:	2800      	cmp	r0, #0
 800e088:	d0ea      	beq.n	800e060 <get_dht+0x54>
 800e08a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e08e:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e092:	2152      	movs	r1, #82	; 0x52
 800e094:	682a      	ldr	r2, [r5, #0]
 800e096:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800e098:	f8cd 8000 	str.w	r8, [sp]
 800e09c:	3e01      	subs	r6, #1
    count = 0;
 800e09e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e0a2:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800e0a6:	6852      	ldr	r2, [r2, #4]
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800e0ac:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e0ae:	b946      	cbnz	r6, 800e0c2 <get_dht+0xb6>
 800e0b0:	68f9      	ldr	r1, [r7, #12]
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	9201      	str	r2, [sp, #4]
 800e0b6:	4788      	blx	r1
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d0d1      	beq.n	800e060 <get_dht+0x54>
 800e0bc:	9a01      	ldr	r2, [sp, #4]
 800e0be:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0c6:	3e01      	subs	r6, #1
 800e0c8:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800e0cc:	3201      	adds	r2, #1
      count += bits[i];
 800e0ce:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800e0d0:	2a11      	cmp	r2, #17
 800e0d2:	d1ec      	bne.n	800e0ae <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e0d4:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800e0d6:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e0da:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800e0de:	f04f 0958 	mov.w	r9, #88	; 0x58
 800e0e2:	4628      	mov	r0, r5
    length -= 1 + 16;
 800e0e4:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e0e6:	6191      	str	r1, [r2, #24]
 800e0e8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800e0ec:	f8c2 9014 	str.w	r9, [r2, #20]
 800e0f0:	61d1      	str	r1, [r2, #28]
 800e0f2:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800e0f6:	6211      	str	r1, [r2, #32]
 800e0f8:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800e0fc:	6251      	str	r1, [r2, #36]	; 0x24
 800e0fe:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800e102:	6291      	str	r1, [r2, #40]	; 0x28
 800e104:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800e108:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e10a:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800e10e:	6311      	str	r1, [r2, #48]	; 0x30
 800e110:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800e114:	6351      	str	r1, [r2, #52]	; 0x34
 800e116:	2102      	movs	r1, #2
 800e118:	6852      	ldr	r2, [r2, #4]
 800e11a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e11c:	682a      	ldr	r2, [r5, #0]
 800e11e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800e122:	4628      	mov	r0, r5
 800e124:	f8c2 9014 	str.w	r9, [r2, #20]
 800e128:	6191      	str	r1, [r2, #24]
 800e12a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800e12e:	61d1      	str	r1, [r2, #28]
 800e130:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800e134:	6211      	str	r1, [r2, #32]
 800e136:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800e13a:	6251      	str	r1, [r2, #36]	; 0x24
 800e13c:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800e140:	6291      	str	r1, [r2, #40]	; 0x28
 800e142:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e146:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e148:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800e14c:	6311      	str	r1, [r2, #48]	; 0x30
 800e14e:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800e152:	6351      	str	r1, [r2, #52]	; 0x34
 800e154:	2102      	movs	r1, #2
 800e156:	6852      	ldr	r2, [r2, #4]
 800e158:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800e15a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800e15e:	dc02      	bgt.n	800e166 <get_dht+0x15a>
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	4553      	cmp	r3, sl
 800e164:	da05      	bge.n	800e172 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e166:	682a      	ldr	r2, [r5, #0]
 800e168:	2109      	movs	r1, #9
 800e16a:	4628      	mov	r0, r5
 800e16c:	6151      	str	r1, [r2, #20]
 800e16e:	6812      	ldr	r2, [r2, #0]
 800e170:	4790      	blx	r2
 800e172:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e176:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800e178:	45d1      	cmp	r9, sl
 800e17a:	d13f      	bne.n	800e1fc <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800e17c:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800e186:	bf17      	itett	ne
 800e188:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e18c:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800e190:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800e194:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e196:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e198:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d906      	bls.n	800e1ae <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800e1a0:	682a      	ldr	r2, [r5, #0]
 800e1a2:	211f      	movs	r1, #31
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e1aa:	6812      	ldr	r2, [r2, #0]
 800e1ac:	4790      	blx	r2
    if (*htblptr == NULL)
 800e1ae:	f8d8 2000 	ldr.w	r2, [r8]
 800e1b2:	b922      	cbnz	r2, 800e1be <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f7fb fb8b 	bl	80098d0 <jpeg_alloc_huff_table>
 800e1ba:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800e1be:	2200      	movs	r2, #0
 800e1c0:	46de      	mov	lr, fp
 800e1c2:	f10d 0a1c 	add.w	sl, sp, #28
 800e1c6:	f88b 2000 	strb.w	r2, [fp]
 800e1ca:	f8d8 2000 	ldr.w	r2, [r8]
 800e1ce:	46f4      	mov	ip, lr
 800e1d0:	3208      	adds	r2, #8
 800e1d2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800e1d6:	45d4      	cmp	ip, sl
 800e1d8:	f842 0c08 	str.w	r0, [r2, #-8]
 800e1dc:	f842 1c04 	str.w	r1, [r2, #-4]
 800e1e0:	46e6      	mov	lr, ip
 800e1e2:	d1f4      	bne.n	800e1ce <get_dht+0x1c2>
 800e1e4:	f89c 1000 	ldrb.w	r1, [ip]
 800e1e8:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e1ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1ee:	f8d8 0000 	ldr.w	r0, [r8]
 800e1f2:	a908      	add	r1, sp, #32
 800e1f4:	3011      	adds	r0, #17
 800e1f6:	f01b fb57 	bl	80298a8 <memcpy>
 800e1fa:	e71e      	b.n	800e03a <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e1fc:	b946      	cbnz	r6, 800e210 <get_dht+0x204>
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	4628      	mov	r0, r5
 800e202:	4790      	blx	r2
 800e204:	2800      	cmp	r0, #0
 800e206:	f43f af2b 	beq.w	800e060 <get_dht+0x54>
 800e20a:	a908      	add	r1, sp, #32
 800e20c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e210:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e214:	3e01      	subs	r6, #1
 800e216:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800e21a:	f109 0901 	add.w	r9, r9, #1
 800e21e:	e7ab      	b.n	800e178 <get_dht+0x16c>

0800e220 <read_markers>:
{
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	4604      	mov	r4, r0
 800e226:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800e228:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e22c:	bb2b      	cbnz	r3, 800e27a <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800e22e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d17c      	bne.n	800e332 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800e238:	69a7      	ldr	r7, [r4, #24]
 800e23a:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d06a      	beq.n	800e316 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800e240:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e242:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e244:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e248:	d06c      	beq.n	800e324 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e24a:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e24c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e250:	f103 36ff 	add.w	r6, r3, #4294967295
 800e254:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e258:	d102      	bne.n	800e260 <read_markers+0x40>
 800e25a:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800e25e:	d008      	beq.n	800e272 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	2237      	movs	r2, #55	; 0x37
 800e264:	4620      	mov	r0, r4
 800e266:	f8c3 901c 	str.w	r9, [r3, #28]
 800e26a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800e272:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800e276:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800e27a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e27e:	2b01      	cmp	r3, #1
 800e280:	f000 83c3 	beq.w	800ea0a <read_markers+0x7ea>
 800e284:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800e288:	2a3e      	cmp	r2, #62	; 0x3e
 800e28a:	f200 83cb 	bhi.w	800ea24 <read_markers+0x804>
 800e28e:	2a3e      	cmp	r2, #62	; 0x3e
 800e290:	f200 83c8 	bhi.w	800ea24 <read_markers+0x804>
 800e294:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e298:	009b0092 	.word	0x009b0092
 800e29c:	00a7009e 	.word	0x00a7009e
 800e2a0:	00a70239 	.word	0x00a70239
 800e2a4:	00a700a7 	.word	0x00a700a7
 800e2a8:	00a200a7 	.word	0x00a200a7
 800e2ac:	00a700a4 	.word	0x00a700a4
 800e2b0:	00a701bf 	.word	0x00a701bf
 800e2b4:	00a700a7 	.word	0x00a700a7
 800e2b8:	03b903b9 	.word	0x03b903b9
 800e2bc:	03b903b9 	.word	0x03b903b9
 800e2c0:	03b903b9 	.word	0x03b903b9
 800e2c4:	03b903b9 	.word	0x03b903b9
 800e2c8:	01b30054 	.word	0x01b30054
 800e2cc:	023d00af 	.word	0x023d00af
 800e2d0:	035b03c2 	.word	0x035b03c2
 800e2d4:	03c603c6 	.word	0x03c603c6
 800e2d8:	03ad03ad 	.word	0x03ad03ad
 800e2dc:	03ad03ad 	.word	0x03ad03ad
 800e2e0:	03ad03ad 	.word	0x03ad03ad
 800e2e4:	03ad03ad 	.word	0x03ad03ad
 800e2e8:	03ad03ad 	.word	0x03ad03ad
 800e2ec:	03ad03ad 	.word	0x03ad03ad
 800e2f0:	03ad03ad 	.word	0x03ad03ad
 800e2f4:	03ad03ad 	.word	0x03ad03ad
 800e2f8:	03c603c6 	.word	0x03c603c6
 800e2fc:	03c603c6 	.word	0x03c603c6
 800e300:	03c603c6 	.word	0x03c603c6
 800e304:	03c603c6 	.word	0x03c603c6
 800e308:	03c603c6 	.word	0x03c603c6
 800e30c:	03c603c6 	.word	0x03c603c6
 800e310:	03c603c6 	.word	0x03c603c6
 800e314:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	4620      	mov	r0, r4
 800e31a:	4798      	blx	r3
 800e31c:	b170      	cbz	r0, 800e33c <read_markers+0x11c>
 800e31e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e322:	e78e      	b.n	800e242 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	4620      	mov	r0, r4
 800e328:	4798      	blx	r3
 800e32a:	b138      	cbz	r0, 800e33c <read_markers+0x11c>
 800e32c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e330:	e78c      	b.n	800e24c <read_markers+0x2c>
	if (! next_marker(cinfo))
 800e332:	4620      	mov	r0, r4
 800e334:	f7ff fde6 	bl	800df04 <next_marker>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d19e      	bne.n	800e27a <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800e33c:	2000      	movs	r0, #0
 800e33e:	e0e9      	b.n	800e514 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	2268      	movs	r2, #104	; 0x68
 800e344:	2101      	movs	r1, #1
 800e346:	4620      	mov	r0, r4
 800e348:	615a      	str	r2, [r3, #20]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800e34e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	b12b      	cbz	r3, 800e362 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	223f      	movs	r2, #63	; 0x3f
 800e35a:	4620      	mov	r0, r4
 800e35c:	615a      	str	r2, [r3, #20]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800e362:	2210      	movs	r2, #16
 800e364:	2100      	movs	r1, #0
 800e366:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e36a:	f01b faab 	bl	80298c4 <memset>
    cinfo->arith_dc_U[i] = 1;
 800e36e:	2210      	movs	r2, #16
 800e370:	2101      	movs	r1, #1
 800e372:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800e376:	f01b faa5 	bl	80298c4 <memset>
    cinfo->arith_ac_K[i] = 5;
 800e37a:	2210      	movs	r2, #16
 800e37c:	2105      	movs	r1, #5
 800e37e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800e382:	f01b fa9f 	bl	80298c4 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e386:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e38a:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e38c:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800e390:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e394:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800e398:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800e39c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800e3a0:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800e3a4:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800e3a8:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e3b2:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800e3ba:	e735      	b.n	800e228 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800e3bc:	2300      	movs	r3, #0
 800e3be:	2101      	movs	r1, #1
 800e3c0:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7ff faec 	bl	800d9a0 <get_sof>
      if (! skip_variable(cinfo))
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d1f3      	bne.n	800e3b4 <read_markers+0x194>
 800e3cc:	e7b6      	b.n	800e33c <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800e3ce:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	e001      	b.n	800e3d8 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e3d8:	2100      	movs	r1, #0
 800e3da:	e7f2      	b.n	800e3c2 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e7f7      	b.n	800e3d0 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	e7f8      	b.n	800e3d8 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800e3e6:	6822      	ldr	r2, [r4, #0]
 800e3e8:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e3f0:	6813      	ldr	r3, [r2, #0]
 800e3f2:	4798      	blx	r3
      break;
 800e3f4:	e7de      	b.n	800e3b4 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800e3f6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800e3fa:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800e3fc:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800e3fe:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800e402:	b92b      	cbnz	r3, 800e410 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800e404:	6823      	ldr	r3, [r4, #0]
 800e406:	2240      	movs	r2, #64	; 0x40
 800e408:	4620      	mov	r0, r4
 800e40a:	615a      	str	r2, [r3, #20]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e410:	b936      	cbnz	r6, 800e420 <read_markers+0x200>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4620      	mov	r0, r4
 800e416:	4798      	blx	r3
 800e418:	2800      	cmp	r0, #0
 800e41a:	d08f      	beq.n	800e33c <read_markers+0x11c>
 800e41c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e420:	f895 8000 	ldrb.w	r8, [r5]
 800e424:	3e01      	subs	r6, #1
 800e426:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e42a:	d076      	beq.n	800e51a <read_markers+0x2fa>
 800e42c:	3501      	adds	r5, #1
 800e42e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e430:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e432:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e434:	d07a      	beq.n	800e52c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e436:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e438:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e43c:	2269      	movs	r2, #105	; 0x69
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	2101      	movs	r1, #1
 800e442:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e444:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e446:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800e44e:	f109 0303 	add.w	r3, r9, #3
 800e452:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800e456:	d108      	bne.n	800e46a <read_markers+0x24a>
 800e458:	f1b9 0f04 	cmp.w	r9, #4
 800e45c:	dc05      	bgt.n	800e46a <read_markers+0x24a>
 800e45e:	f1b9 0f00 	cmp.w	r9, #0
 800e462:	d108      	bne.n	800e476 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800e464:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e468:	b92b      	cbnz	r3, 800e476 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	220c      	movs	r2, #12
 800e46e:	4620      	mov	r0, r4
 800e470:	615a      	str	r2, [r3, #20]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800e476:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800e47a:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800e47e:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	45d1      	cmp	r9, sl
 800e486:	dc5a      	bgt.n	800e53e <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e488:	b93e      	cbnz	r6, 800e49a <read_markers+0x27a>
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	4620      	mov	r0, r4
 800e48e:	4798      	blx	r3
 800e490:	2800      	cmp	r0, #0
 800e492:	f43f af53 	beq.w	800e33c <read_markers+0x11c>
 800e496:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e49a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e49c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e49e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4a2:	f000 809a 	beq.w	800e5da <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4a6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4a8:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4aa:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4ac:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4b0:	f000 809c 	beq.w	800e5ec <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4b4:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4b6:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e4ba:	2101      	movs	r1, #1
 800e4bc:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4be:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800e4c0:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800e4c2:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800e4c6:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800e4ca:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e4ce:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	619a      	str	r2, [r3, #24]
 800e4d6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800e4da:	61da      	str	r2, [r3, #28]
 800e4dc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800e4e0:	621a      	str	r2, [r3, #32]
 800e4e2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800e4e6:	625a      	str	r2, [r3, #36]	; 0x24
 800e4e8:	226b      	movs	r2, #107	; 0x6b
 800e4ea:	615a      	str	r2, [r3, #20]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800e4f0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800e4f8:	f1b9 0f00 	cmp.w	r9, #0
 800e4fc:	d004      	beq.n	800e508 <read_markers+0x2e8>
 800e4fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e502:	3301      	adds	r3, #1
 800e504:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800e508:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800e50a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e50c:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800e510:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800e514:	b005      	add	sp, #20
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	4620      	mov	r0, r4
 800e51e:	4798      	blx	r3
 800e520:	2800      	cmp	r0, #0
 800e522:	f43f af0b 	beq.w	800e33c <read_markers+0x11c>
 800e526:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e52a:	e780      	b.n	800e42e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4620      	mov	r0, r4
 800e530:	4798      	blx	r3
 800e532:	2800      	cmp	r0, #0
 800e534:	f43f af02 	beq.w	800e33c <read_markers+0x11c>
 800e538:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e53c:	e77c      	b.n	800e438 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e53e:	b93e      	cbnz	r6, 800e550 <read_markers+0x330>
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	4620      	mov	r0, r4
 800e544:	4798      	blx	r3
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f aef8 	beq.w	800e33c <read_markers+0x11c>
 800e54c:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e550:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e552:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e556:	d02f      	beq.n	800e5b8 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e558:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e55a:	3e01      	subs	r6, #1
 800e55c:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e560:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e564:	2000      	movs	r0, #0
 800e566:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e568:	4290      	cmp	r0, r2
 800e56a:	db2e      	blt.n	800e5ca <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e56c:	6821      	ldr	r1, [r4, #0]
 800e56e:	4620      	mov	r0, r4
 800e570:	9302      	str	r3, [sp, #8]
 800e572:	2304      	movs	r3, #4
 800e574:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e578:	6809      	ldr	r1, [r1, #0]
 800e57a:	4788      	blx	r1
 800e57c:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e57e:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e580:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e582:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e586:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e588:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800e58c:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e590:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e594:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e596:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e59a:	f8c1 b018 	str.w	fp, [r1, #24]
 800e59e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e5a2:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e5a4:	61cb      	str	r3, [r1, #28]
 800e5a6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e5aa:	620b      	str	r3, [r1, #32]
 800e5ac:	236a      	movs	r3, #106	; 0x6a
 800e5ae:	614b      	str	r3, [r1, #20]
 800e5b0:	684b      	ldr	r3, [r1, #4]
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e5b6:	e765      	b.n	800e484 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	4798      	blx	r3
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f43f aebc 	beq.w	800e33c <read_markers+0x11c>
 800e5c4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e5c8:	e7c7      	b.n	800e55a <read_markers+0x33a>
      if (cc == compptr->component_id)
 800e5ca:	f8d8 1000 	ldr.w	r1, [r8]
 800e5ce:	458b      	cmp	fp, r1
 800e5d0:	d0d5      	beq.n	800e57e <read_markers+0x35e>
	 ci++, compptr++) {
 800e5d2:	3001      	adds	r0, #1
 800e5d4:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e5d8:	e7c6      	b.n	800e568 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	4620      	mov	r0, r4
 800e5de:	4798      	blx	r3
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	f43f aeab 	beq.w	800e33c <read_markers+0x11c>
 800e5e6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e5ea:	e75d      	b.n	800e4a8 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	4798      	blx	r3
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f43f aea2 	beq.w	800e33c <read_markers+0x11c>
 800e5f8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e5fc:	e75b      	b.n	800e4b6 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	2257      	movs	r2, #87	; 0x57
 800e602:	4620      	mov	r0, r4
 800e604:	2101      	movs	r1, #1
 800e606:	615a      	str	r2, [r3, #20]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e60c:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e60e:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e610:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e614:	e77e      	b.n	800e514 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800e616:	69a7      	ldr	r7, [r4, #24]
 800e618:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e61a:	b1e6      	cbz	r6, 800e656 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800e61c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e61e:	f895 9000 	ldrb.w	r9, [r5]
 800e622:	3e01      	subs	r6, #1
 800e624:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e628:	d01e      	beq.n	800e668 <read_markers+0x448>
 800e62a:	3501      	adds	r5, #1
 800e62c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e630:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e632:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e636:	4499      	add	r9, r3
  length -= 2;
 800e638:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e63c:	f1b9 0f00 	cmp.w	r9, #0
 800e640:	dc1b      	bgt.n	800e67a <read_markers+0x45a>
  if (length != 0)
 800e642:	d005      	beq.n	800e650 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e644:	6823      	ldr	r3, [r4, #0]
 800e646:	220c      	movs	r2, #12
 800e648:	4620      	mov	r0, r4
 800e64a:	615a      	str	r2, [r3, #20]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e650:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e652:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e654:	e6ae      	b.n	800e3b4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	4620      	mov	r0, r4
 800e65a:	4798      	blx	r3
 800e65c:	2800      	cmp	r0, #0
 800e65e:	f43f ae6d 	beq.w	800e33c <read_markers+0x11c>
 800e662:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e666:	e7da      	b.n	800e61e <read_markers+0x3fe>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4620      	mov	r0, r4
 800e66c:	4798      	blx	r3
 800e66e:	2800      	cmp	r0, #0
 800e670:	f43f ae64 	beq.w	800e33c <read_markers+0x11c>
 800e674:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e678:	e7d8      	b.n	800e62c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e67a:	b93e      	cbnz	r6, 800e68c <read_markers+0x46c>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	4620      	mov	r0, r4
 800e680:	4798      	blx	r3
 800e682:	2800      	cmp	r0, #0
 800e684:	f43f ae5a 	beq.w	800e33c <read_markers+0x11c>
 800e688:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e68c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e68e:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e692:	d01f      	beq.n	800e6d4 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e694:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e696:	6822      	ldr	r2, [r4, #0]
 800e698:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e69a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e69e:	2101      	movs	r1, #1
 800e6a0:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e6a2:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e6a4:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e6a8:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e6ac:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e6b0:	6852      	ldr	r2, [r2, #4]
 800e6b2:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e6b4:	f1b8 0f1f 	cmp.w	r8, #31
 800e6b8:	d905      	bls.n	800e6c6 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e6ba:	6822      	ldr	r2, [r4, #0]
 800e6bc:	4620      	mov	r0, r4
 800e6be:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e6c2:	6812      	ldr	r2, [r2, #0]
 800e6c4:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e6c6:	f1b8 0f0f 	cmp.w	r8, #15
 800e6ca:	44a0      	add	r8, r4
 800e6cc:	dd0b      	ble.n	800e6e6 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e6ce:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e6d2:	e7b3      	b.n	800e63c <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4798      	blx	r3
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	f43f ae2e 	beq.w	800e33c <read_markers+0x11c>
 800e6e0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e6e4:	e7d7      	b.n	800e696 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e6e6:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e6ea:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e6ee:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e6f0:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e6f4:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e6f8:	d9a0      	bls.n	800e63c <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e6fa:	6822      	ldr	r2, [r4, #0]
 800e6fc:	211e      	movs	r1, #30
 800e6fe:	4620      	mov	r0, r4
 800e700:	6813      	ldr	r3, [r2, #0]
 800e702:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e706:	4798      	blx	r3
 800e708:	e798      	b.n	800e63c <read_markers+0x41c>
      if (! get_dht(cinfo))
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff fc7e 	bl	800e00c <get_dht>
 800e710:	e65a      	b.n	800e3c8 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800e712:	69a6      	ldr	r6, [r4, #24]
 800e714:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e716:	b1db      	cbz	r3, 800e750 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800e718:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e71a:	f895 8000 	ldrb.w	r8, [r5]
 800e71e:	3b01      	subs	r3, #1
 800e720:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800e724:	d01d      	beq.n	800e762 <read_markers+0x542>
 800e726:	3501      	adds	r5, #1
 800e728:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e72c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e730:	44b8      	add	r8, r7
  length -= 2;
 800e732:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e736:	f1b8 0f00 	cmp.w	r8, #0
 800e73a:	dc1b      	bgt.n	800e774 <read_markers+0x554>
  if (length != 0)
 800e73c:	d005      	beq.n	800e74a <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e73e:	6822      	ldr	r2, [r4, #0]
 800e740:	210c      	movs	r1, #12
 800e742:	4620      	mov	r0, r4
 800e744:	6151      	str	r1, [r2, #20]
 800e746:	6812      	ldr	r2, [r2, #0]
 800e748:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e74a:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e74e:	e631      	b.n	800e3b4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e750:	68f3      	ldr	r3, [r6, #12]
 800e752:	4620      	mov	r0, r4
 800e754:	4798      	blx	r3
 800e756:	2800      	cmp	r0, #0
 800e758:	f43f adf0 	beq.w	800e33c <read_markers+0x11c>
 800e75c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e760:	e7db      	b.n	800e71a <read_markers+0x4fa>
 800e762:	68f3      	ldr	r3, [r6, #12]
 800e764:	4620      	mov	r0, r4
 800e766:	4798      	blx	r3
 800e768:	2800      	cmp	r0, #0
 800e76a:	f43f ade7 	beq.w	800e33c <read_markers+0x11c>
 800e76e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e772:	e7d9      	b.n	800e728 <read_markers+0x508>
    length--;
 800e774:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800e778:	f1ba 0f00 	cmp.w	sl, #0
 800e77c:	d107      	bne.n	800e78e <read_markers+0x56e>
 800e77e:	68f3      	ldr	r3, [r6, #12]
 800e780:	4620      	mov	r0, r4
 800e782:	4798      	blx	r3
 800e784:	2800      	cmp	r0, #0
 800e786:	f43f add9 	beq.w	800e33c <read_markers+0x11c>
 800e78a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e78e:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e792:	2153      	movs	r1, #83	; 0x53
 800e794:	6822      	ldr	r2, [r4, #0]
 800e796:	4620      	mov	r0, r4
    prec = n >> 4;
 800e798:	ea4f 1329 	mov.w	r3, r9, asr #4
 800e79c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800e7a0:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e7a4:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800e7a6:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e7a8:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e7ac:	6852      	ldr	r2, [r2, #4]
 800e7ae:	2101      	movs	r1, #1
 800e7b0:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800e7b2:	f019 0f0c 	tst.w	r9, #12
 800e7b6:	d006      	beq.n	800e7c6 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e7b8:	6822      	ldr	r2, [r4, #0]
 800e7ba:	2120      	movs	r1, #32
 800e7bc:	4620      	mov	r0, r4
 800e7be:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e7c2:	6812      	ldr	r2, [r2, #0]
 800e7c4:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e7c6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e7ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e7ce:	b922      	cbnz	r2, 800e7da <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f7fb f873 	bl	80098bc <jpeg_alloc_quant_table>
 800e7d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800e7da:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e7dc:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d057      	beq.n	800e894 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800e7e4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800e7e8:	dc6c      	bgt.n	800e8c4 <read_markers+0x6a4>
 800e7ea:	f1ab 0202 	sub.w	r2, fp, #2
 800e7ee:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e7f2:	2001      	movs	r0, #1
 800e7f4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e7f8:	4291      	cmp	r1, r2
 800e7fa:	d1fb      	bne.n	800e7f4 <read_markers+0x5d4>
	count = length >> 1;
 800e7fc:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800e800:	f1b9 0f19 	cmp.w	r9, #25
 800e804:	d062      	beq.n	800e8cc <read_markers+0x6ac>
 800e806:	dc53      	bgt.n	800e8b0 <read_markers+0x690>
 800e808:	f1b9 0f09 	cmp.w	r9, #9
 800e80c:	d060      	beq.n	800e8d0 <read_markers+0x6b0>
 800e80e:	f1b9 0f10 	cmp.w	r9, #16
 800e812:	d05f      	beq.n	800e8d4 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800e814:	4f85      	ldr	r7, [pc, #532]	; (800ea2c <read_markers+0x80c>)
 800e816:	4a86      	ldr	r2, [pc, #536]	; (800ea30 <read_markers+0x810>)
 800e818:	f1b9 0f04 	cmp.w	r9, #4
 800e81c:	bf18      	it	ne
 800e81e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800e820:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800e824:	9302      	str	r3, [sp, #8]
 800e826:	9b02      	ldr	r3, [sp, #8]
 800e828:	42bb      	cmp	r3, r7
 800e82a:	d157      	bne.n	800e8dc <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800e82c:	6822      	ldr	r2, [r4, #0]
 800e82e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e830:	2a01      	cmp	r2, #1
 800e832:	dd26      	ble.n	800e882 <read_markers+0x662>
 800e834:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e838:	275f      	movs	r7, #95	; 0x5f
 800e83a:	f8bb 1000 	ldrh.w	r1, [fp]
 800e83e:	4620      	mov	r0, r4
 800e840:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e842:	f10b 0b10 	add.w	fp, fp, #16
 800e846:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e848:	6191      	str	r1, [r2, #24]
 800e84a:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800e84e:	61d1      	str	r1, [r2, #28]
 800e850:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800e854:	6211      	str	r1, [r2, #32]
 800e856:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800e85a:	6251      	str	r1, [r2, #36]	; 0x24
 800e85c:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800e860:	6291      	str	r1, [r2, #40]	; 0x28
 800e862:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800e866:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e868:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800e86c:	6311      	str	r1, [r2, #48]	; 0x30
 800e86e:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800e872:	6157      	str	r7, [r2, #20]
 800e874:	6351      	str	r1, [r2, #52]	; 0x34
 800e876:	2102      	movs	r1, #2
 800e878:	6852      	ldr	r2, [r2, #4]
 800e87a:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e87c:	9b02      	ldr	r3, [sp, #8]
 800e87e:	459b      	cmp	fp, r3
 800e880:	d1db      	bne.n	800e83a <read_markers+0x61a>
    if (prec) length -= count;
 800e882:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800e884:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f43f af54 	beq.w	800e736 <read_markers+0x516>
 800e88e:	eba8 0809 	sub.w	r8, r8, r9
 800e892:	e750      	b.n	800e736 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800e894:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e898:	dc14      	bgt.n	800e8c4 <read_markers+0x6a4>
 800e89a:	f1ab 0202 	sub.w	r2, fp, #2
 800e89e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e8a8:	4291      	cmp	r1, r2
 800e8aa:	d1fb      	bne.n	800e8a4 <read_markers+0x684>
 800e8ac:	46c1      	mov	r9, r8
 800e8ae:	e7a7      	b.n	800e800 <read_markers+0x5e0>
    switch (count) {
 800e8b0:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e8b4:	d010      	beq.n	800e8d8 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800e8b6:	4f5e      	ldr	r7, [pc, #376]	; (800ea30 <read_markers+0x810>)
 800e8b8:	4b5e      	ldr	r3, [pc, #376]	; (800ea34 <read_markers+0x814>)
 800e8ba:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800e8be:	bf08      	it	eq
 800e8c0:	461f      	moveq	r7, r3
 800e8c2:	e7ad      	b.n	800e820 <read_markers+0x600>
	count = DCTSIZE2;
 800e8c4:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800e8c8:	4f59      	ldr	r7, [pc, #356]	; (800ea30 <read_markers+0x810>)
 800e8ca:	e7a9      	b.n	800e820 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e8cc:	4f5a      	ldr	r7, [pc, #360]	; (800ea38 <read_markers+0x818>)
 800e8ce:	e7a7      	b.n	800e820 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e8d0:	4f5a      	ldr	r7, [pc, #360]	; (800ea3c <read_markers+0x81c>)
 800e8d2:	e7a5      	b.n	800e820 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e8d4:	4f5a      	ldr	r7, [pc, #360]	; (800ea40 <read_markers+0x820>)
 800e8d6:	e7a3      	b.n	800e820 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e8d8:	4f5a      	ldr	r7, [pc, #360]	; (800ea44 <read_markers+0x824>)
 800e8da:	e7a1      	b.n	800e820 <read_markers+0x600>
      if (prec)
 800e8dc:	9b01      	ldr	r3, [sp, #4]
 800e8de:	b333      	cbz	r3, 800e92e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e8e0:	f1ba 0f00 	cmp.w	sl, #0
 800e8e4:	d107      	bne.n	800e8f6 <read_markers+0x6d6>
 800e8e6:	68f3      	ldr	r3, [r6, #12]
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	4798      	blx	r3
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	f43f ad25 	beq.w	800e33c <read_markers+0x11c>
 800e8f2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e8f6:	782a      	ldrb	r2, [r5, #0]
 800e8f8:	f1ba 0301 	subs.w	r3, sl, #1
 800e8fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e900:	d00a      	beq.n	800e918 <read_markers+0x6f8>
 800e902:	3501      	adds	r5, #1
 800e904:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e908:	f103 3aff 	add.w	sl, r3, #4294967295
 800e90c:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e90e:	f857 1b04 	ldr.w	r1, [r7], #4
 800e912:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800e916:	e786      	b.n	800e826 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e918:	68f3      	ldr	r3, [r6, #12]
 800e91a:	4620      	mov	r0, r4
 800e91c:	9203      	str	r2, [sp, #12]
 800e91e:	4798      	blx	r3
 800e920:	2800      	cmp	r0, #0
 800e922:	f43f ad0b 	beq.w	800e33c <read_markers+0x11c>
 800e926:	9a03      	ldr	r2, [sp, #12]
 800e928:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e92c:	e7ea      	b.n	800e904 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e92e:	f1ba 0f00 	cmp.w	sl, #0
 800e932:	d107      	bne.n	800e944 <read_markers+0x724>
 800e934:	68f3      	ldr	r3, [r6, #12]
 800e936:	4620      	mov	r0, r4
 800e938:	4798      	blx	r3
 800e93a:	2800      	cmp	r0, #0
 800e93c:	f43f acfe 	beq.w	800e33c <read_markers+0x11c>
 800e940:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e944:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e948:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e94c:	e7df      	b.n	800e90e <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800e94e:	69a7      	ldr	r7, [r4, #24]
 800e950:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e952:	b353      	cbz	r3, 800e9aa <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800e954:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e956:	782a      	ldrb	r2, [r5, #0]
 800e958:	3b01      	subs	r3, #1
 800e95a:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800e95e:	d02d      	beq.n	800e9bc <read_markers+0x79c>
 800e960:	3501      	adds	r5, #1
 800e962:	782a      	ldrb	r2, [r5, #0]
 800e964:	1e5e      	subs	r6, r3, #1
 800e966:	4442      	add	r2, r8
  if (length != 4)
 800e968:	2a04      	cmp	r2, #4
 800e96a:	d005      	beq.n	800e978 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	220c      	movs	r2, #12
 800e970:	4620      	mov	r0, r4
 800e972:	615a      	str	r2, [r3, #20]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e978:	b34e      	cbz	r6, 800e9ce <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e97a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e97c:	f895 8000 	ldrb.w	r8, [r5]
 800e980:	3e01      	subs	r6, #1
 800e982:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800e986:	d02b      	beq.n	800e9e0 <read_markers+0x7c0>
 800e988:	3501      	adds	r5, #1
 800e98a:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e98e:	2254      	movs	r2, #84	; 0x54
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e994:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e996:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e998:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e99a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800e9a2:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800e9a6:	603d      	str	r5, [r7, #0]
 800e9a8:	e653      	b.n	800e652 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	4798      	blx	r3
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	f43f acc3 	beq.w	800e33c <read_markers+0x11c>
 800e9b6:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e9ba:	e7cc      	b.n	800e956 <read_markers+0x736>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4620      	mov	r0, r4
 800e9c0:	4798      	blx	r3
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f43f acba 	beq.w	800e33c <read_markers+0x11c>
 800e9c8:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e9cc:	e7c9      	b.n	800e962 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	4798      	blx	r3
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	f43f acb1 	beq.w	800e33c <read_markers+0x11c>
 800e9da:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e9de:	e7cd      	b.n	800e97c <read_markers+0x75c>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	4798      	blx	r3
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f43f aca8 	beq.w	800e33c <read_markers+0x11c>
 800e9ec:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e9f0:	e7cb      	b.n	800e98a <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800e9f2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e9f6:	3bd8      	subs	r3, #216	; 0xd8
 800e9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	4798      	blx	r3
 800ea00:	e4e2      	b.n	800e3c8 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800ea02:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ea06:	69db      	ldr	r3, [r3, #28]
 800ea08:	e7f8      	b.n	800e9fc <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800ea0a:	6822      	ldr	r2, [r4, #0]
 800ea0c:	215e      	movs	r1, #94	; 0x5e
 800ea0e:	4620      	mov	r0, r4
 800ea10:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800ea14:	6853      	ldr	r3, [r2, #4]
 800ea16:	2101      	movs	r1, #1
 800ea18:	4798      	blx	r3
      break;
 800ea1a:	e4cb      	b.n	800e3b4 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f7ff fa36 	bl	800de8e <skip_variable>
 800ea22:	e4d1      	b.n	800e3c8 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ea24:	6822      	ldr	r2, [r4, #0]
 800ea26:	2146      	movs	r1, #70	; 0x46
 800ea28:	e4df      	b.n	800e3ea <read_markers+0x1ca>
 800ea2a:	bf00      	nop
 800ea2c:	0802eca0 	.word	0x0802eca0
 800ea30:	0802eb60 	.word	0x0802eb60
 800ea34:	0802ef48 	.word	0x0802ef48
 800ea38:	0802edd4 	.word	0x0802edd4
 800ea3c:	0802ecf0 	.word	0x0802ecf0
 800ea40:	0802ed54 	.word	0x0802ed54
 800ea44:	0802ee78 	.word	0x0802ee78

0800ea48 <jpeg_resync_to_restart>:
{
 800ea48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ea4e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800ea50:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ea54:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ea56:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ea5a:	61d9      	str	r1, [r3, #28]
 800ea5c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800ea60:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ea62:	f008 0807 	and.w	r8, r8, #7
 800ea66:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ea6a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800ea72:	2dbf      	cmp	r5, #191	; 0xbf
 800ea74:	dd2e      	ble.n	800ead4 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800ea76:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800ea7a:	2b07      	cmp	r3, #7
 800ea7c:	d828      	bhi.n	800ead0 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ea7e:	4545      	cmp	r5, r8
 800ea80:	d026      	beq.n	800ead0 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800ea82:	1cbb      	adds	r3, r7, #2
 800ea84:	f003 0307 	and.w	r3, r3, #7
 800ea88:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ea8a:	429d      	cmp	r5, r3
 800ea8c:	d020      	beq.n	800ead0 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800ea8e:	1e7b      	subs	r3, r7, #1
 800ea90:	f003 0307 	and.w	r3, r3, #7
 800ea94:	33d0      	adds	r3, #208	; 0xd0
 800ea96:	429d      	cmp	r5, r3
 800ea98:	d01c      	beq.n	800ead4 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800ea9a:	1ebc      	subs	r4, r7, #2
 800ea9c:	f004 0407 	and.w	r4, r4, #7
 800eaa0:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800eaa2:	42a5      	cmp	r5, r4
 800eaa4:	bf14      	ite	ne
 800eaa6:	2401      	movne	r4, #1
 800eaa8:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800eaaa:	6833      	ldr	r3, [r6, #0]
 800eaac:	2263      	movs	r2, #99	; 0x63
 800eaae:	2104      	movs	r1, #4
 800eab0:	4630      	mov	r0, r6
 800eab2:	61dc      	str	r4, [r3, #28]
 800eab4:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	4798      	blx	r3
    switch (action) {
 800eabc:	2c02      	cmp	r4, #2
 800eabe:	d00b      	beq.n	800ead8 <jpeg_resync_to_restart+0x90>
 800eac0:	2c03      	cmp	r4, #3
 800eac2:	d002      	beq.n	800eaca <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800eaca:	2001      	movs	r0, #1
}
 800eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800ead0:	2403      	movs	r4, #3
 800ead2:	e7ea      	b.n	800eaaa <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800ead4:	2402      	movs	r4, #2
 800ead6:	e7e8      	b.n	800eaaa <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800ead8:	4630      	mov	r0, r6
 800eada:	f7ff fa13 	bl	800df04 <next_marker>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d0f4      	beq.n	800eacc <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800eae2:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800eae6:	e7c4      	b.n	800ea72 <jpeg_resync_to_restart+0x2a>

0800eae8 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800eae8:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800eaea:	6843      	ldr	r3, [r0, #4]
 800eaec:	22ac      	movs	r2, #172	; 0xac
 800eaee:	2100      	movs	r1, #0
{
 800eaf0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800eaf6:	4b11      	ldr	r3, [pc, #68]	; (800eb3c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800eaf8:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800eafc:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800eafe:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800eb00:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800eb04:	4b0e      	ldr	r3, [pc, #56]	; (800eb40 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800eb06:	4a0f      	ldr	r2, [pc, #60]	; (800eb44 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800eb08:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800eb0a:	4b0f      	ldr	r3, [pc, #60]	; (800eb48 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800eb0c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800eb0e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800eb10:	2300      	movs	r3, #0
 800eb12:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800eb14:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800eb18:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800eb1c:	4299      	cmp	r1, r3
 800eb1e:	d1fb      	bne.n	800eb18 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800eb20:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800eb24:	2240      	movs	r2, #64	; 0x40
 800eb26:	2100      	movs	r1, #0
 800eb28:	f01a fecc 	bl	80298c4 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800eb2c:	4b07      	ldr	r3, [pc, #28]	; (800eb4c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800eb2e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800eb30:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800eb32:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800eb34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800eb38:	f7ff ba59 	b.w	800dfee <reset_marker_reader>
 800eb3c:	0800dfef 	.word	0x0800dfef
 800eb40:	0800e221 	.word	0x0800e221
 800eb44:	0800de8f 	.word	0x0800de8f
 800eb48:	0800df91 	.word	0x0800df91
 800eb4c:	0800ddb9 	.word	0x0800ddb9

0800eb50 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800eb50:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800eb52:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800eb56:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800eb58:	68ab      	ldr	r3, [r5, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d02a      	beq.n	800ebb4 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800eb5e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800eb60:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800eb64:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800eb6a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800eb6e:	2102      	movs	r1, #2
 800eb70:	4620      	mov	r0, r4
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800eb76:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800eb7a:	2102      	movs	r1, #2
 800eb7c:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800eb7e:	4620      	mov	r0, r4
 800eb80:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800eb82:	68a2      	ldr	r2, [r4, #8]
 800eb84:	b1aa      	cbz	r2, 800ebb2 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800eb86:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800eb88:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800eb8a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800eb8c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800eb8e:	bf14      	ite	ne
 800eb90:	2102      	movne	r1, #2
 800eb92:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800eb94:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800eb96:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800eb98:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800eb9a:	b151      	cbz	r1, 800ebb2 <prepare_for_output_pass+0x62>
 800eb9c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800eba0:	6949      	ldr	r1, [r1, #20]
 800eba2:	b931      	cbnz	r1, 800ebb2 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800eba4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800eba6:	2900      	cmp	r1, #0
 800eba8:	bf14      	ite	ne
 800ebaa:	2102      	movne	r1, #2
 800ebac:	2101      	moveq	r1, #1
 800ebae:	440b      	add	r3, r1
 800ebb0:	6113      	str	r3, [r2, #16]
    }
  }
}
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800ebb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ebb6:	b16b      	cbz	r3, 800ebd4 <prepare_for_output_pass+0x84>
 800ebb8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ebbc:	b953      	cbnz	r3, 800ebd4 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800ebbe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d037      	beq.n	800ec34 <prepare_for_output_pass+0xe4>
 800ebc4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d034      	beq.n	800ec34 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800ebca:	69ab      	ldr	r3, [r5, #24]
 800ebcc:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800ebd4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800ebd8:	4620      	mov	r0, r4
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800ebde:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800ebe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1c9      	bne.n	800eb82 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800ebee:	692b      	ldr	r3, [r5, #16]
 800ebf0:	b923      	cbnz	r3, 800ebfc <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800ebf2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800ebfc:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800ec00:	4620      	mov	r0, r4
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800ec06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ec08:	b12b      	cbz	r3, 800ec16 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800ec0a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ec0e:	4620      	mov	r0, r4
 800ec10:	68a9      	ldr	r1, [r5, #8]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800ec16:	68aa      	ldr	r2, [r5, #8]
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	bf14      	ite	ne
 800ec24:	2103      	movne	r1, #3
 800ec26:	2100      	moveq	r1, #0
 800ec28:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ec2a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ec2e:	2100      	movs	r1, #0
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	e7a4      	b.n	800eb7e <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800ec34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec36:	b11b      	cbz	r3, 800ec40 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800ec38:	696b      	ldr	r3, [r5, #20]
 800ec3a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800ec3e:	e7c9      	b.n	800ebd4 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800ec40:	6823      	ldr	r3, [r4, #0]
 800ec42:	222f      	movs	r2, #47	; 0x2f
 800ec44:	4620      	mov	r0, r4
 800ec46:	615a      	str	r2, [r3, #20]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4798      	blx	r3
 800ec4c:	e7c2      	b.n	800ebd4 <prepare_for_output_pass+0x84>

0800ec4e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800ec4e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800ec50:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ec52:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800ec56:	b11a      	cbz	r2, 800ec60 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800ec58:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	4798      	blx	r3
  master->pass_number++;
 800ec60:	68e3      	ldr	r3, [r4, #12]
 800ec62:	3301      	adds	r3, #1
 800ec64:	60e3      	str	r3, [r4, #12]
}
 800ec66:	bd10      	pop	{r4, pc}

0800ec68 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ec68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800ec6a:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d143      	bne.n	800ecf8 <use_merged_upsample+0x90>
 800ec70:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800ec74:	2a00      	cmp	r2, #0
 800ec76:	d141      	bne.n	800ecfc <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800ec78:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d139      	bne.n	800ecf4 <use_merged_upsample+0x8c>
 800ec80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d136      	bne.n	800ecf4 <use_merged_upsample+0x8c>
 800ec86:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d132      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800ec8e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ec90:	2b03      	cmp	r3, #3
 800ec92:	d12f      	bne.n	800ecf4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800ec94:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800ec98:	6899      	ldr	r1, [r3, #8]
 800ec9a:	2902      	cmp	r1, #2
 800ec9c:	d12a      	bne.n	800ecf4 <use_merged_upsample+0x8c>
 800ec9e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800eca0:	2901      	cmp	r1, #1
 800eca2:	d127      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800eca4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800eca8:	2901      	cmp	r1, #1
 800ecaa:	d123      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800ecac:	68d9      	ldr	r1, [r3, #12]
 800ecae:	2902      	cmp	r1, #2
 800ecb0:	dc20      	bgt.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800ecb2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ecb4:	2901      	cmp	r1, #1
 800ecb6:	d11d      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800ecb8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ecbc:	2901      	cmp	r1, #1
 800ecbe:	d119      	bne.n	800ecf4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ecc0:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800ecc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ecc6:	42a1      	cmp	r1, r4
 800ecc8:	d114      	bne.n	800ecf4 <use_merged_upsample+0x8c>
 800ecca:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800eccc:	42a1      	cmp	r1, r4
 800ecce:	d111      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ecd0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800ecd4:	42a1      	cmp	r1, r4
 800ecd6:	d10d      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800ecd8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ecdc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ecde:	4281      	cmp	r1, r0
 800ece0:	d108      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800ece2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800ece6:	4281      	cmp	r1, r0
 800ece8:	d104      	bne.n	800ecf4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800ecea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800ecee:	1a53      	subs	r3, r2, r1
 800ecf0:	425a      	negs	r2, r3
 800ecf2:	415a      	adcs	r2, r3
}
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	bd10      	pop	{r4, pc}
    return FALSE;
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	e7fb      	b.n	800ecf4 <use_merged_upsample+0x8c>
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	e7f9      	b.n	800ecf4 <use_merged_upsample+0x8c>

0800ed00 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800ed00:	6942      	ldr	r2, [r0, #20]
 800ed02:	2aca      	cmp	r2, #202	; 0xca
{
 800ed04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed08:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800ed0a:	d005      	beq.n	800ed18 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ed0c:	6803      	ldr	r3, [r0, #0]
 800ed0e:	2115      	movs	r1, #21
 800ed10:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800ed18:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ed1a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800ed1c:	f7fe faf8 	bl	800d310 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ed20:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800ed24:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800ed28:	462b      	mov	r3, r5
 800ed2a:	45b4      	cmp	ip, r6
 800ed2c:	dd6b      	ble.n	800ee06 <jpeg_calc_output_dimensions+0x106>
 800ed2e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800ed30:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800ed32:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	bf14      	ite	ne
 800ed3a:	2708      	movne	r7, #8
 800ed3c:	2704      	moveq	r7, #4
 800ed3e:	e00a      	b.n	800ed56 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800ed40:	689a      	ldr	r2, [r3, #8]
 800ed42:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800ed46:	434a      	muls	r2, r1
 800ed48:	0052      	lsls	r2, r2, #1
 800ed4a:	fb9e f9f2 	sdiv	r9, lr, r2
 800ed4e:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ed52:	b922      	cbnz	r2, 800ed5e <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800ed54:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800ed56:	fb01 f008 	mul.w	r0, r1, r8
 800ed5a:	42b8      	cmp	r0, r7
 800ed5c:	ddf0      	ble.n	800ed40 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800ed5e:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800ed60:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800ed64:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800ed68:	fb08 f109 	mul.w	r1, r8, r9
 800ed6c:	42b9      	cmp	r1, r7
 800ed6e:	dd0b      	ble.n	800ed88 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800ed70:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800ed74:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800ed76:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ed7a:	dc14      	bgt.n	800eda6 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800ed7c:	0042      	lsls	r2, r0, #1
 800ed7e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800ed82:	bfc8      	it	gt
 800ed84:	629a      	strgt	r2, [r3, #40]	; 0x28
 800ed86:	e00f      	b.n	800eda8 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800ed88:	68da      	ldr	r2, [r3, #12]
 800ed8a:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800ed8e:	fb02 f208 	mul.w	r2, r2, r8
 800ed92:	0052      	lsls	r2, r2, #1
 800ed94:	fb9e faf2 	sdiv	sl, lr, r2
 800ed98:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ed9c:	2a00      	cmp	r2, #0
 800ed9e:	d1e7      	bne.n	800ed70 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800eda0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800eda4:	e7e0      	b.n	800ed68 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800eda6:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800eda8:	3601      	adds	r6, #1
 800edaa:	3358      	adds	r3, #88	; 0x58
 800edac:	e7bd      	b.n	800ed2a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800edae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800edb0:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800edb2:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800edb4:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800edb6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800edba:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800edbe:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800edc0:	69e3      	ldr	r3, [r4, #28]
 800edc2:	4351      	muls	r1, r2
 800edc4:	4358      	muls	r0, r3
 800edc6:	f007 fe71 	bl	8016aac <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800edca:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800edce:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800edd2:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800edd6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800edda:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800edde:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800ede0:	6a23      	ldr	r3, [r4, #32]
 800ede2:	4351      	muls	r1, r2
 800ede4:	4358      	muls	r0, r3
 800ede6:	f007 fe61 	bl	8016aac <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800edea:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800edee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800edf0:	42b2      	cmp	r2, r6
 800edf2:	dcdc      	bgt.n	800edae <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800edf4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d806      	bhi.n	800ee0a <jpeg_calc_output_dimensions+0x10a>
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d809      	bhi.n	800ee14 <jpeg_calc_output_dimensions+0x114>
 800ee00:	d009      	beq.n	800ee16 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800ee02:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800ee04:	e008      	b.n	800ee18 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ee06:	2600      	movs	r6, #0
 800ee08:	e7f1      	b.n	800edee <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800ee0a:	3b04      	subs	r3, #4
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d8f8      	bhi.n	800ee02 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800ee10:	2304      	movs	r3, #4
 800ee12:	e000      	b.n	800ee16 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ee14:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800ee16:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ee18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ee1a:	b95b      	cbnz	r3, 800ee34 <jpeg_calc_output_dimensions+0x134>
 800ee1c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800ee1e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ee20:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800ee22:	f7ff ff21 	bl	800ec68 <use_merged_upsample>
 800ee26:	b138      	cbz	r0, 800ee38 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800ee28:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800ee2c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800ee30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ee34:	2301      	movs	r3, #1
 800ee36:	e7f2      	b.n	800ee1e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	e7f7      	b.n	800ee2c <jpeg_calc_output_dimensions+0x12c>

0800ee3c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee3e:	6843      	ldr	r3, [r0, #4]
 800ee40:	221c      	movs	r2, #28
 800ee42:	2101      	movs	r1, #1
{
 800ee44:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee46:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800ee48:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee4a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ee4c:	4b6d      	ldr	r3, [pc, #436]	; (800f004 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800ee4e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee52:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ee54:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800ee56:	4b6c      	ldr	r3, [pc, #432]	; (800f008 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800ee58:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800ee5a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f7ff ff4f 	bl	800ed00 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee62:	6863      	ldr	r3, [r4, #4]
 800ee64:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800ee68:	2101      	movs	r1, #1
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800ee70:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee74:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ee76:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800ee78:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ee7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee80:	f01a fd20 	bl	80298c4 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800ee84:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800ee88:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800ee8a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800ee8e:	3101      	adds	r1, #1
 800ee90:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ee94:	d1f9      	bne.n	800ee8a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800ee96:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ee9a:	21ff      	movs	r1, #255	; 0xff
 800ee9c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800eea0:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800eea2:	f01a fd0f 	bl	80298c4 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800eea6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800eeaa:	2100      	movs	r1, #0
 800eeac:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800eeb0:	f01a fd08 	bl	80298c4 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800eeb4:	2280      	movs	r2, #128	; 0x80
 800eeb6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800eeba:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800eebe:	f01a fcf3 	bl	80298a8 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800eec2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800eec4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800eec6:	f7ff fecf 	bl	800ec68 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800eeca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800eecc:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800eece:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800eed2:	b1b3      	cbz	r3, 800ef02 <jinit_master_decompress+0xc6>
 800eed4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eed6:	b1a2      	cbz	r2, 800ef02 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800eed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d166      	bne.n	800efac <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800eede:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800eee0:	2b03      	cmp	r3, #3
 800eee2:	f04f 0301 	mov.w	r3, #1
 800eee6:	d068      	beq.n	800efba <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800eee8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800eeea:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800eeec:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800eef0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800eef4:	4620      	mov	r0, r4
 800eef6:	f006 fef1 	bl	8015cdc <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800eefa:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800eefe:	616b      	str	r3, [r5, #20]
 800ef00:	e062      	b.n	800efc8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800ef02:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800ef06:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1e5      	bne.n	800eed8 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800ef0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef0e:	b94b      	cbnz	r3, 800ef24 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800ef10:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800ef12:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d069      	beq.n	800efec <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800ef18:	f000 fa1c 	bl	800f354 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800ef1c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f000 fb98 	bl	800f654 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800ef24:	4620      	mov	r0, r4
 800ef26:	f7fc fda7 	bl	800ba78 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800ef2a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800ef2e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d061      	beq.n	800eff8 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800ef34:	f7fb fc16 	bl	800a764 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ef38:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d15d      	bne.n	800effe <jinit_master_decompress+0x1c2>
 800ef42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef44:	3900      	subs	r1, #0
 800ef46:	bf18      	it	ne
 800ef48:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f7fc f8fc 	bl	800b148 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800ef50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef52:	b911      	cbnz	r1, 800ef5a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800ef54:	4620      	mov	r0, r4
 800ef56:	f7fe fca3 	bl	800d8a0 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800ef5a:	6863      	ldr	r3, [r4, #4]
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800ef62:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ef66:	4620      	mov	r0, r4
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ef6c:	68a2      	ldr	r2, [r4, #8]
 800ef6e:	b1e2      	cbz	r2, 800efaa <jinit_master_decompress+0x16e>
 800ef70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef72:	b9d3      	cbnz	r3, 800efaa <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800ef74:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	b1b3      	cbz	r3, 800efaa <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800ef7c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800ef80:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800ef82:	b111      	cbz	r1, 800ef8a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800ef84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ef88:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ef8a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800ef8e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ef90:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800ef92:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800ef94:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800ef98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ef9a:	4283      	cmp	r3, r0
 800ef9c:	bf14      	ite	ne
 800ef9e:	2303      	movne	r3, #3
 800efa0:	2302      	moveq	r3, #2
 800efa2:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800efa4:	68eb      	ldr	r3, [r5, #12]
 800efa6:	3301      	adds	r3, #1
 800efa8:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800efaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	2230      	movs	r2, #48	; 0x30
 800efb0:	4620      	mov	r0, r4
 800efb2:	615a      	str	r2, [r3, #20]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4798      	blx	r3
 800efb8:	e791      	b.n	800eede <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800efba:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800efbe:	b17a      	cbz	r2, 800efe0 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800efc0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800efc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d195      	bne.n	800eef4 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800efc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800efca:	b913      	cbnz	r3, 800efd2 <jinit_master_decompress+0x196>
 800efcc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d09c      	beq.n	800ef0c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800efd2:	4620      	mov	r0, r4
 800efd4:	f007 fcfe 	bl	80169d4 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800efd8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800efdc:	61ab      	str	r3, [r5, #24]
 800efde:	e795      	b.n	800ef0c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800efe0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800efe2:	b10a      	cbz	r2, 800efe8 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800efe4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800efe6:	e7ec      	b.n	800efc2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800efe8:	6663      	str	r3, [r4, #100]	; 0x64
 800efea:	e783      	b.n	800eef4 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800efec:	f7fc fad2 	bl	800b594 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800eff0:	4620      	mov	r0, r4
 800eff2:	f000 fc4f 	bl	800f894 <jinit_upsampler>
 800eff6:	e791      	b.n	800ef1c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800eff8:	f7fd fed6 	bl	800cda8 <jinit_huff_decoder>
 800effc:	e79c      	b.n	800ef38 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800effe:	2101      	movs	r1, #1
 800f000:	e7a3      	b.n	800ef4a <jinit_master_decompress+0x10e>
 800f002:	bf00      	nop
 800f004:	0800eb51 	.word	0x0800eb51
 800f008:	0800ec4f 	.word	0x0800ec4f

0800f00c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f00c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800f010:	2200      	movs	r2, #0
 800f012:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f014:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f016:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f018:	4770      	bx	lr

0800f01a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800f01a:	b570      	push	{r4, r5, r6, lr}
 800f01c:	9d05      	ldr	r5, [sp, #20]
 800f01e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f020:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800f024:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f026:	68de      	ldr	r6, [r3, #12]
 800f028:	9b04      	ldr	r3, [sp, #16]
 800f02a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800f032:	682b      	ldr	r3, [r5, #0]
 800f034:	3301      	adds	r3, #1
 800f036:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	3301      	adds	r3, #1
 800f03c:	6023      	str	r3, [r4, #0]
}
 800f03e:	bd70      	pop	{r4, r5, r6, pc}

0800f040 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f044:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f048:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800f04a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800f04e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f050:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800f054:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800f056:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800f058:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f05a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800f05e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f060:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f062:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f064:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f066:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800f06a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f06c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f06e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f070:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f074:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f078:	9903      	ldr	r1, [sp, #12]
 800f07a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f07c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f07e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f082:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800f086:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800f08a:	9205      	str	r2, [sp, #20]
 800f08c:	9a05      	ldr	r2, [sp, #20]
 800f08e:	3306      	adds	r3, #6
 800f090:	3102      	adds	r1, #2
 800f092:	4295      	cmp	r5, r2
 800f094:	d128      	bne.n	800f0e8 <h2v1_merged_upsample+0xa8>
 800f096:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f098:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800f09a:	fb03 f30e 	mul.w	r3, r3, lr
 800f09e:	07d2      	lsls	r2, r2, #31
 800f0a0:	eb0c 0103 	add.w	r1, ip, r3
 800f0a4:	d51d      	bpl.n	800f0e2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f0a6:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f0a8:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800f0aa:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f0ae:	782a      	ldrb	r2, [r5, #0]
 800f0b0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800f0b4:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800f0b8:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f0ba:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800f0bc:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f0be:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800f0c2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f0c6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800f0ca:	9a03      	ldr	r2, [sp, #12]
 800f0cc:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f0d0:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f0d2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800f0d4:	5dbe      	ldrb	r6, [r7, r6]
 800f0d6:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f0d8:	5c80      	ldrb	r0, [r0, r2]
 800f0da:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f0dc:	5ca2      	ldrb	r2, [r4, r2]
 800f0de:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800f0e2:	b007      	add	sp, #28
 800f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f0e8:	f819 ab01 	ldrb.w	sl, [r9], #1
 800f0ec:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f0ee:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800f0f2:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f0f6:	9a02      	ldr	r2, [sp, #8]
 800f0f8:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800f0fc:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800f100:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f104:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800f106:	9f01      	ldr	r7, [sp, #4]
 800f108:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f10c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f110:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800f114:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f118:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800f11a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f11e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800f122:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f126:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800f12a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800f12e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f132:	f817 700a 	ldrb.w	r7, [r7, sl]
 800f136:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f13a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800f13e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f142:	f816 200a 	ldrb.w	r2, [r6, sl]
 800f146:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f14a:	e79f      	b.n	800f08c <h2v1_merged_upsample+0x4c>

0800f14c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f150:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f154:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f156:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800f15a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f15c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800f160:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800f162:	696e      	ldr	r6, [r5, #20]
 800f164:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f166:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f168:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f16a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f16c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f170:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f174:	686d      	ldr	r5, [r5, #4]
 800f176:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f178:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f17a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f17c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f17e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f180:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f184:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f188:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f18a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f18c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f19a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800f19c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800f19e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800f1a0:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f1a2:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1a6:	3206      	adds	r2, #6
 800f1a8:	3306      	adds	r3, #6
 800f1aa:	f10e 0e02 	add.w	lr, lr, #2
 800f1ae:	4588      	cmp	r8, r1
 800f1b0:	f10c 0c02 	add.w	ip, ip, #2
 800f1b4:	d13a      	bne.n	800f22c <h2v2_merged_upsample+0xe0>
 800f1b6:	2306      	movs	r3, #6
 800f1b8:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f1ba:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f1bc:	437b      	muls	r3, r7
 800f1be:	07c0      	lsls	r0, r0, #31
 800f1c0:	eb02 0103 	add.w	r1, r2, r3
 800f1c4:	9a01      	ldr	r2, [sp, #4]
 800f1c6:	441a      	add	r2, r3
 800f1c8:	d52d      	bpl.n	800f226 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f1ca:	9808      	ldr	r0, [sp, #32]
 800f1cc:	9d03      	ldr	r5, [sp, #12]
 800f1ce:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f1d0:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800f1d4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f1d8:	9d05      	ldr	r5, [sp, #20]
 800f1da:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800f1de:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f1e2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f1e6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800f1e8:	9804      	ldr	r0, [sp, #16]
 800f1ea:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f1ee:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800f1f2:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f1f4:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800f1f6:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f1fa:	f815 e000 	ldrb.w	lr, [r5, r0]
 800f1fe:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f202:	f81c e000 	ldrb.w	lr, [ip, r0]
 800f206:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f20a:	5c21      	ldrb	r1, [r4, r0]
 800f20c:	9800      	ldr	r0, [sp, #0]
 800f20e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800f210:	9907      	ldr	r1, [sp, #28]
 800f212:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f216:	5c68      	ldrb	r0, [r5, r1]
 800f218:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f21a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800f21e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f220:	5c62      	ldrb	r2, [r4, r1]
 800f222:	9901      	ldr	r1, [sp, #4]
 800f224:	54ca      	strb	r2, [r1, r3]
  }
}
 800f226:	b00b      	add	sp, #44	; 0x2c
 800f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f22c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f22e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800f232:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f236:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800f23a:	9102      	str	r1, [sp, #8]
 800f23c:	9903      	ldr	r1, [sp, #12]
 800f23e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f242:	9905      	ldr	r1, [sp, #20]
 800f244:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800f248:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f24c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800f24e:	9e04      	ldr	r6, [sp, #16]
 800f250:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f254:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f258:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f25c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f260:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f262:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f266:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f26a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f26e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f272:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800f276:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f27a:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f27e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f282:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f286:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f28a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f28e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800f292:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f296:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f29a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f29e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f2a2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f2a6:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f2aa:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800f2ae:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f2b2:	f816 6009 	ldrb.w	r6, [r6, r9]
 800f2b6:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f2ba:	f811 1009 	ldrb.w	r1, [r1, r9]
 800f2be:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f2c2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800f2c6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f2ca:	e76b      	b.n	800f1a4 <h2v2_merged_upsample+0x58>

0800f2cc <merged_2v_upsample>:
{
 800f2cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f2d0:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f2d4:	4616      	mov	r6, r2
 800f2d6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800f2da:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f2dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f2e0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800f2e4:	b1dd      	cbz	r5, 800f31e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f2e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f2e8:	2501      	movs	r5, #1
 800f2ea:	f104 0020 	add.w	r0, r4, #32
 800f2ee:	9301      	str	r3, [sp, #4]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	9500      	str	r5, [sp, #0]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	f007 fbe6 	bl	8016ac6 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800f2fe:	f8d8 3000 	ldr.w	r3, [r8]
 800f302:	442b      	add	r3, r5
 800f304:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800f308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f30a:	1b5b      	subs	r3, r3, r5
 800f30c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800f30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f310:	b913      	cbnz	r3, 800f318 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800f312:	6833      	ldr	r3, [r6, #0]
 800f314:	3301      	adds	r3, #1
 800f316:	6033      	str	r3, [r6, #0]
}
 800f318:	b004      	add	sp, #16
 800f31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800f31e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800f320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800f322:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800f324:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f328:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800f32c:	bf28      	it	cs
 800f32e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f330:	9302      	str	r3, [sp, #8]
 800f332:	42bd      	cmp	r5, r7
 800f334:	bf28      	it	cs
 800f336:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f338:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800f33a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800f33c:	bf17      	itett	ne
 800f33e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f340:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800f342:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f344:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f346:	bf0c      	ite	eq
 800f348:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f34a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f34c:	ab02      	add	r3, sp, #8
 800f34e:	6832      	ldr	r2, [r6, #0]
 800f350:	47b8      	blx	r7
 800f352:	e7d4      	b.n	800f2fe <merged_2v_upsample+0x32>

0800f354 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f354:	6843      	ldr	r3, [r0, #4]
 800f356:	2230      	movs	r2, #48	; 0x30
 800f358:	2101      	movs	r1, #1
 800f35a:	681b      	ldr	r3, [r3, #0]
{
 800f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f360:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f362:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f364:	4b37      	ldr	r3, [pc, #220]	; (800f444 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f366:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f368:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f36a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f36c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f370:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800f372:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f376:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800f378:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800f37a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f37c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800f37e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800f380:	d15a      	bne.n	800f438 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800f382:	4b31      	ldr	r3, [pc, #196]	; (800f448 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f384:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800f386:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800f388:	4b30      	ldr	r3, [pc, #192]	; (800f44c <jinit_merged_upsampler+0xf8>)
 800f38a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f38c:	4620      	mov	r0, r4
 800f38e:	6863      	ldr	r3, [r4, #4]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800f394:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f396:	6863      	ldr	r3, [r4, #4]
 800f398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f39c:	2101      	movs	r1, #1
 800f39e:	4620      	mov	r0, r4
 800f3a0:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f3a2:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3a6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3a8:	6863      	ldr	r3, [r4, #4]
 800f3aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800f3ae:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3b0:	2101      	movs	r1, #1
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3b8:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800f3ba:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2101      	movs	r1, #1
 800f3c4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f3c6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f464 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3ca:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3cc:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800f3ce:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f3da:	4f1d      	ldr	r7, [pc, #116]	; (800f450 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3dc:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f3de:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800f3e0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f3e2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f3e4:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f468 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f3e8:	491a      	ldr	r1, [pc, #104]	; (800f454 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800f3ea:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f3ee:	4d1a      	ldr	r5, [pc, #104]	; (800f458 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f3f0:	fb08 e203 	mla	r2, r8, r3, lr
 800f3f4:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800f3f6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f3fa:	fb07 f203 	mul.w	r2, r7, r3
 800f3fe:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800f402:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800f406:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800f408:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f40c:	fb05 f203 	mul.w	r2, r5, r3
 800f410:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800f414:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800f418:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f41c:	fb01 f203 	mul.w	r2, r1, r3
 800f420:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800f424:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800f428:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f42c:	3301      	adds	r3, #1
 800f42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f432:	d1dd      	bne.n	800f3f0 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800f434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800f438:	4a08      	ldr	r2, [pc, #32]	; (800f45c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800f43a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800f43c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800f43e:	4a08      	ldr	r2, [pc, #32]	; (800f460 <jinit_merged_upsampler+0x10c>)
 800f440:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800f442:	e7a8      	b.n	800f396 <jinit_merged_upsampler+0x42>
 800f444:	0800f00d 	.word	0x0800f00d
 800f448:	0800f2cd 	.word	0x0800f2cd
 800f44c:	0800f14d 	.word	0x0800f14d
 800f450:	0001c5a2 	.word	0x0001c5a2
 800f454:	ffffa7e6 	.word	0xffffa7e6
 800f458:	ffff492e 	.word	0xffff492e
 800f45c:	0800f01b 	.word	0x0800f01b
 800f460:	0800f041 	.word	0x0800f041
 800f464:	000166e9 	.word	0x000166e9
 800f468:	ff4d0b80 	.word	0xff4d0b80

0800f46c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800f46c:	2902      	cmp	r1, #2
{
 800f46e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f470:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800f474:	d023      	beq.n	800f4be <start_pass_dpost+0x52>
 800f476:	2903      	cmp	r1, #3
 800f478:	d019      	beq.n	800f4ae <start_pass_dpost+0x42>
 800f47a:	2900      	cmp	r1, #0
 800f47c:	d128      	bne.n	800f4d0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800f47e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f480:	b182      	cbz	r2, 800f4a4 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800f482:	4a16      	ldr	r2, [pc, #88]	; (800f4dc <start_pass_dpost+0x70>)
 800f484:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800f486:	68e2      	ldr	r2, [r4, #12]
 800f488:	b93a      	cbnz	r2, 800f49a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800f48a:	6843      	ldr	r3, [r0, #4]
 800f48c:	2101      	movs	r1, #1
 800f48e:	9100      	str	r1, [sp, #0]
 800f490:	69dd      	ldr	r5, [r3, #28]
 800f492:	68a1      	ldr	r1, [r4, #8]
 800f494:	6923      	ldr	r3, [r4, #16]
 800f496:	47a8      	blx	r5
 800f498:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800f4a0:	b003      	add	sp, #12
 800f4a2:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800f4a4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800f4a8:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800f4aa:	6063      	str	r3, [r4, #4]
    break;
 800f4ac:	e7f5      	b.n	800f49a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800f4ae:	68a2      	ldr	r2, [r4, #8]
 800f4b0:	b91a      	cbnz	r2, 800f4ba <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f4b2:	6803      	ldr	r3, [r0, #0]
 800f4b4:	6159      	str	r1, [r3, #20]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800f4ba:	4b09      	ldr	r3, [pc, #36]	; (800f4e0 <start_pass_dpost+0x74>)
 800f4bc:	e7f5      	b.n	800f4aa <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800f4be:	68a2      	ldr	r2, [r4, #8]
 800f4c0:	b922      	cbnz	r2, 800f4cc <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f4c2:	6803      	ldr	r3, [r0, #0]
 800f4c4:	2203      	movs	r2, #3
 800f4c6:	615a      	str	r2, [r3, #20]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800f4cc:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <start_pass_dpost+0x78>)
 800f4ce:	e7ec      	b.n	800f4aa <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f4d0:	6803      	ldr	r3, [r0, #0]
 800f4d2:	2203      	movs	r2, #3
 800f4d4:	615a      	str	r2, [r3, #20]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4798      	blx	r3
    break;
 800f4da:	e7de      	b.n	800f49a <start_pass_dpost+0x2e>
 800f4dc:	0800f4e9 	.word	0x0800f4e9
 800f4e0:	0800f549 	.word	0x0800f549
 800f4e4:	0800f5d7 	.word	0x0800f5d7

0800f4e8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ec:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f4ee:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800f4f6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f4f8:	682f      	ldr	r7, [r5, #0]
 800f4fa:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800f4fc:	2700      	movs	r7, #0
 800f4fe:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800f500:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800f504:	9705      	str	r7, [sp, #20]
 800f506:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f50a:	42be      	cmp	r6, r7
 800f50c:	bf94      	ite	ls
 800f50e:	9602      	strls	r6, [sp, #8]
 800f510:	9702      	strhi	r7, [sp, #8]
 800f512:	ae07      	add	r6, sp, #28
 800f514:	9601      	str	r6, [sp, #4]
 800f516:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f51a:	9600      	str	r6, [sp, #0]
 800f51c:	9e05      	ldr	r6, [sp, #20]
 800f51e:	6876      	ldr	r6, [r6, #4]
 800f520:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f522:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f524:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f528:	4620      	mov	r0, r4
 800f52a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f52c:	685e      	ldr	r6, [r3, #4]
 800f52e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f532:	9b07      	ldr	r3, [sp, #28]
 800f534:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f538:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	9a07      	ldr	r2, [sp, #28]
 800f53e:	4413      	add	r3, r2
 800f540:	602b      	str	r3, [r5, #0]
}
 800f542:	b008      	add	sp, #32
 800f544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f548 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f54c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f550:	b085      	sub	sp, #20
 800f552:	469a      	mov	sl, r3
 800f554:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f556:	69a3      	ldr	r3, [r4, #24]
{
 800f558:	460e      	mov	r6, r1
 800f55a:	4691      	mov	r9, r2
 800f55c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f560:	b943      	cbnz	r3, 800f574 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f562:	6843      	ldr	r3, [r0, #4]
 800f564:	2201      	movs	r2, #1
 800f566:	9200      	str	r2, [sp, #0]
 800f568:	69df      	ldr	r7, [r3, #28]
 800f56a:	68a1      	ldr	r1, [r4, #8]
 800f56c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f570:	47b8      	blx	r7
 800f572:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f574:	6922      	ldr	r2, [r4, #16]
 800f576:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f578:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f57a:	4628      	mov	r0, r5
 800f57c:	9202      	str	r2, [sp, #8]
 800f57e:	f104 0218 	add.w	r2, r4, #24
 800f582:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f586:	9201      	str	r2, [sp, #4]
 800f588:	68e2      	ldr	r2, [r4, #12]
 800f58a:	9200      	str	r2, [sp, #0]
 800f58c:	464a      	mov	r2, r9
 800f58e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f592:	4653      	mov	r3, sl
 800f594:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f596:	69a6      	ldr	r6, [r4, #24]
 800f598:	42be      	cmp	r6, r7
 800f59a:	d910      	bls.n	800f5be <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f59c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f5a0:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f5a2:	68e1      	ldr	r1, [r4, #12]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	4633      	mov	r3, r6
 800f5ae:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f5b2:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b8:	4433      	add	r3, r6
 800f5ba:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f5be:	6922      	ldr	r2, [r4, #16]
 800f5c0:	69a3      	ldr	r3, [r4, #24]
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d304      	bcc.n	800f5d0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f5c6:	6963      	ldr	r3, [r4, #20]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	61a3      	str	r3, [r4, #24]
  }
}
 800f5d0:	b005      	add	sp, #20
 800f5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5d6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f5d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f5da:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f5de:	4607      	mov	r7, r0
 800f5e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f5e2:	69a3      	ldr	r3, [r4, #24]
 800f5e4:	b93b      	cbnz	r3, 800f5f6 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f5e6:	6842      	ldr	r2, [r0, #4]
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	69d5      	ldr	r5, [r2, #28]
 800f5ec:	68a1      	ldr	r1, [r4, #8]
 800f5ee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f5f2:	47a8      	blx	r5
 800f5f4:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f5f6:	6963      	ldr	r3, [r4, #20]
 800f5f8:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f5fa:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f5fc:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f5fe:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f600:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f602:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f604:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f606:	429d      	cmp	r5, r3
 800f608:	bf28      	it	cs
 800f60a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f60c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f60e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f610:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f614:	429d      	cmp	r5, r3
 800f616:	bf28      	it	cs
 800f618:	461d      	movcs	r5, r3
 800f61a:	68e3      	ldr	r3, [r4, #12]
 800f61c:	9303      	str	r3, [sp, #12]
 800f61e:	9803      	ldr	r0, [sp, #12]
 800f620:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f624:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f628:	4638      	mov	r0, r7
 800f62a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f62e:	462b      	mov	r3, r5
 800f630:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f632:	6833      	ldr	r3, [r6, #0]
 800f634:	442b      	add	r3, r5
 800f636:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f638:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f63a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f63c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f63e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f640:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f642:	d304      	bcc.n	800f64e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f644:	6963      	ldr	r3, [r4, #20]
 800f646:	4413      	add	r3, r2
 800f648:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	61a3      	str	r3, [r4, #24]
  }
}
 800f64e:	b004      	add	sp, #16
 800f650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f654 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f654:	6843      	ldr	r3, [r0, #4]
 800f656:	221c      	movs	r2, #28
{
 800f658:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f65a:	681b      	ldr	r3, [r3, #0]
{
 800f65c:	b085      	sub	sp, #20
 800f65e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f660:	2101      	movs	r1, #1
{
 800f662:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f664:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f666:	4b15      	ldr	r3, [pc, #84]	; (800f6bc <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f668:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f66a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f66e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f670:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f672:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f674:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f678:	b1bb      	cbz	r3, 800f6aa <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f67a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f67e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f680:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f682:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f684:	6861      	ldr	r1, [r4, #4]
 800f686:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800f688:	b18f      	cbz	r7, 800f6ae <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f68a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f68c:	4619      	mov	r1, r3
 800f68e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f690:	9203      	str	r2, [sp, #12]
 800f692:	f007 fa10 	bl	8016ab6 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f696:	692b      	ldr	r3, [r5, #16]
 800f698:	2101      	movs	r1, #1
 800f69a:	9a03      	ldr	r2, [sp, #12]
 800f69c:	e9cd 0300 	strd	r0, r3, [sp]
 800f6a0:	4613      	mov	r3, r2
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	47b8      	blx	r7
 800f6a8:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f6aa:	b005      	add	sp, #20
 800f6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f6ae:	688e      	ldr	r6, [r1, #8]
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	2101      	movs	r1, #1
 800f6b4:	47b0      	blx	r6
 800f6b6:	60e8      	str	r0, [r5, #12]
}
 800f6b8:	e7f7      	b.n	800f6aa <jinit_d_post_controller+0x56>
 800f6ba:	bf00      	nop
 800f6bc:	0800f46d 	.word	0x0800f46d

0800f6c0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f6c0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f6c4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f6c8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f6ca:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f6cc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f6ce:	4770      	bx	lr

0800f6d0 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f6d4:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f6d8:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f6da:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800f6de:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f6e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f6e2:	4683      	mov	fp, r0
 800f6e4:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	db10      	blt.n	800f70c <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f6ea:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f6ee:	2600      	movs	r6, #0
 800f6f0:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f6f4:	9303      	str	r3, [sp, #12]
 800f6f6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f6fa:	9a03      	ldr	r2, [sp, #12]
 800f6fc:	fb0a 2106 	mla	r1, sl, r6, r2
 800f700:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f704:	42b2      	cmp	r2, r6
 800f706:	dc32      	bgt.n	800f76e <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f70e:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f710:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f712:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f71a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800f71e:	1ace      	subs	r6, r1, r3
 800f720:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f722:	428e      	cmp	r6, r1
 800f724:	bf28      	it	cs
 800f726:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f728:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f72c:	4566      	cmp	r6, ip
 800f72e:	bf28      	it	cs
 800f730:	4666      	movcs	r6, ip
 800f732:	9600      	str	r6, [sp, #0]
 800f734:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f738:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f73a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f73e:	f104 010c 	add.w	r1, r4, #12
 800f742:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4433      	add	r3, r6
 800f74c:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f74e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f750:	1b9b      	subs	r3, r3, r6
 800f752:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f754:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f756:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f758:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f75c:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f75e:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f760:	bfa2      	ittt	ge
 800f762:	682b      	ldrge	r3, [r5, #0]
 800f764:	3301      	addge	r3, #1
 800f766:	602b      	strge	r3, [r5, #0]
}
 800f768:	b005      	add	sp, #20
 800f76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f76e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f770:	f103 0904 	add.w	r9, r3, #4
 800f774:	682a      	ldr	r2, [r5, #0]
 800f776:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f778:	f853 0928 	ldr.w	r0, [r3], #-40
 800f77c:	4607      	mov	r7, r0
 800f77e:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800f782:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800f784:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f788:	4658      	mov	r0, fp
 800f78a:	47b8      	blx	r7
	 ci++, compptr++) {
 800f78c:	464b      	mov	r3, r9
 800f78e:	e7b4      	b.n	800f6fa <sep_upsample+0x2a>

0800f790 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800f790:	601a      	str	r2, [r3, #0]
}
 800f792:	4770      	bx	lr

0800f794 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800f794:	2200      	movs	r2, #0
 800f796:	601a      	str	r2, [r3, #0]
}
 800f798:	4770      	bx	lr

0800f79a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f79a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800f79c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800f7a4:	4299      	cmp	r1, r3
 800f7a6:	dc00      	bgt.n	800f7aa <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800f7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800f7aa:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f7ae:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800f7b0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f7b4:	440c      	add	r4, r1
    while (outptr < outend) {
 800f7b6:	42a1      	cmp	r1, r4
 800f7b8:	d301      	bcc.n	800f7be <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	e7f0      	b.n	800f7a0 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f7be:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800f7c2:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800f7c6:	f801 6c01 	strb.w	r6, [r1, #-1]
 800f7ca:	e7f4      	b.n	800f7b6 <h2v1_upsample+0x1c>

0800f7cc <int_upsample>:
{
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800f7d2:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f7d4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800f7d8:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800f7da:	684b      	ldr	r3, [r1, #4]
 800f7dc:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800f7de:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800f7e0:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800f7e2:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800f7e6:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f7ea:	f108 33ff 	add.w	r3, r8, #4294967295
 800f7ee:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800f7f0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	dc02      	bgt.n	800f7fe <int_upsample+0x32>
}
 800f7f8:	b005      	add	sp, #20
 800f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800f7fe:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f802:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f804:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800f808:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800f80c:	454b      	cmp	r3, r9
 800f80e:	d30e      	bcc.n	800f82e <int_upsample+0x62>
    if (v_expand > 1) {
 800f810:	f1b8 0f01 	cmp.w	r8, #1
 800f814:	dd09      	ble.n	800f82a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f816:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f818:	463a      	mov	r2, r7
 800f81a:	4621      	mov	r1, r4
 800f81c:	4638      	mov	r0, r7
 800f81e:	9301      	str	r3, [sp, #4]
 800f820:	9b03      	ldr	r3, [sp, #12]
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	1c63      	adds	r3, r4, #1
 800f826:	f007 f94e 	bl	8016ac6 <jcopy_sample_rows>
    outrow += v_expand;
 800f82a:	4444      	add	r4, r8
 800f82c:	e7e0      	b.n	800f7f0 <int_upsample+0x24>
	*outptr++ = invalue;
 800f82e:	4618      	mov	r0, r3
 800f830:	4652      	mov	r2, sl
 800f832:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800f836:	f01a f845 	bl	80298c4 <memset>
 800f83a:	4603      	mov	r3, r0
 800f83c:	4453      	add	r3, sl
 800f83e:	e7e5      	b.n	800f80c <int_upsample+0x40>

0800f840 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f844:	4605      	mov	r5, r0
 800f846:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800f848:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800f84a:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f84c:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800f850:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f854:	42a3      	cmp	r3, r4
 800f856:	dc02      	bgt.n	800f85e <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800f858:	b002      	add	sp, #8
 800f85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800f85e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f862:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f864:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800f868:	441a      	add	r2, r3
    while (outptr < outend) {
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d30a      	bcc.n	800f884 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f86e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f870:	4621      	mov	r1, r4
 800f872:	4632      	mov	r2, r6
 800f874:	4630      	mov	r0, r6
 800f876:	e9cd 8300 	strd	r8, r3, [sp]
 800f87a:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800f87c:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f87e:	f007 f922 	bl	8016ac6 <jcopy_sample_rows>
    outrow += 2;
 800f882:	e7e5      	b.n	800f850 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f884:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800f888:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800f88c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f890:	e7eb      	b.n	800f86a <h2v2_upsample+0x2a>
	...

0800f894 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800f894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f898:	6843      	ldr	r3, [r0, #4]
 800f89a:	22a0      	movs	r2, #160	; 0xa0
 800f89c:	2101      	movs	r1, #1
{
 800f89e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800f8a4:	4b3f      	ldr	r3, [pc, #252]	; (800f9a4 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f8a6:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8aa:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800f8ac:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800f8ae:	4b3e      	ldr	r3, [pc, #248]	; (800f9a8 <jinit_upsampler+0x114>)
 800f8b0:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800f8b6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f8ba:	b12b      	cbz	r3, 800f8c8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	221a      	movs	r2, #26
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	615a      	str	r2, [r3, #20]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f8c8:	f105 060c 	add.w	r6, r5, #12
 800f8cc:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800f8d0:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800f8d4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800f8d8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800f9b8 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f8dc:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800f8e0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f9bc <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f8e4:	3574      	adds	r5, #116	; 0x74
 800f8e6:	eb05 0308 	add.w	r3, r5, r8
 800f8ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	dc01      	bgt.n	800f8f4 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800f8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f8f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8f6:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f8f8:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f8fc:	4343      	muls	r3, r0
 800f8fe:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f902:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800f906:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f90a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800f90e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800f912:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800f914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f916:	b932      	cbnz	r2, 800f926 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800f918:	4b24      	ldr	r3, [pc, #144]	; (800f9ac <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800f91a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800f91c:	3758      	adds	r7, #88	; 0x58
 800f91e:	3604      	adds	r6, #4
 800f920:	f108 0801 	add.w	r8, r8, #1
 800f924:	e7df      	b.n	800f8e6 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f926:	fb0c f20e 	mul.w	r2, ip, lr
 800f92a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800f92e:	4559      	cmp	r1, fp
 800f930:	d103      	bne.n	800f93a <jinit_upsampler+0xa6>
 800f932:	4283      	cmp	r3, r0
 800f934:	d101      	bne.n	800f93a <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800f936:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <jinit_upsampler+0x11c>)
 800f938:	e7ef      	b.n	800f91a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800f93a:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800f93e:	d119      	bne.n	800f974 <jinit_upsampler+0xe0>
 800f940:	4283      	cmp	r3, r0
 800f942:	d111      	bne.n	800f968 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800f944:	4b1b      	ldr	r3, [pc, #108]	; (800f9b4 <jinit_upsampler+0x120>)
 800f946:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f948:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f94a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800f94e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f950:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f954:	f007 f8af 	bl	8016ab6 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f958:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f95c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f95e:	2101      	movs	r1, #1
 800f960:	4620      	mov	r0, r4
 800f962:	47d8      	blx	fp
 800f964:	6030      	str	r0, [r6, #0]
 800f966:	e7d9      	b.n	800f91c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800f968:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800f96c:	d102      	bne.n	800f974 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800f96e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800f972:	e7e9      	b.n	800f948 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800f974:	fb9b f2f1 	sdiv	r2, fp, r1
 800f978:	fb01 b112 	mls	r1, r1, r2, fp
 800f97c:	b959      	cbnz	r1, 800f996 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800f97e:	fb90 f1f3 	sdiv	r1, r0, r3
 800f982:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800f986:	b933      	cbnz	r3, 800f996 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800f988:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800f98c:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800f990:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800f994:	e7d8      	b.n	800f948 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800f996:	6823      	ldr	r3, [r4, #0]
 800f998:	2227      	movs	r2, #39	; 0x27
 800f99a:	4620      	mov	r0, r4
 800f99c:	615a      	str	r2, [r3, #20]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4798      	blx	r3
    if (need_buffer) {
 800f9a2:	e7d1      	b.n	800f948 <jinit_upsampler+0xb4>
 800f9a4:	0800f6c1 	.word	0x0800f6c1
 800f9a8:	0800f6d1 	.word	0x0800f6d1
 800f9ac:	0800f795 	.word	0x0800f795
 800f9b0:	0800f791 	.word	0x0800f791
 800f9b4:	0800f79b 	.word	0x0800f79b
 800f9b8:	0800f7cd 	.word	0x0800f7cd
 800f9bc:	0800f841 	.word	0x0800f841

0800f9c0 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800f9c0:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800f9c2:	6803      	ldr	r3, [r0, #0]
{
 800f9c4:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	4669      	mov	r1, sp
 800f9ca:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800f9cc:	b033      	add	sp, #204	; 0xcc
 800f9ce:	f85d fb04 	ldr.w	pc, [sp], #4

0800f9d2 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800f9d2:	2900      	cmp	r1, #0
{
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800f9d8:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800f9da:	da0b      	bge.n	800f9f4 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800f9dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800f9de:	b112      	cbz	r2, 800f9e6 <emit_message+0x14>
 800f9e0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f9e2:	2a02      	cmp	r2, #2
 800f9e4:	dd02      	ble.n	800f9ec <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800f9e6:	68a2      	ldr	r2, [r4, #8]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f9ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f9f2:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800f9f4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f9f6:	428b      	cmp	r3, r1
 800f9f8:	dbfb      	blt.n	800f9f2 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800f9fa:	68a3      	ldr	r3, [r4, #8]
}
 800f9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800fa00:	4718      	bx	r3

0800fa02 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800fa02:	6803      	ldr	r3, [r0, #0]
 800fa04:	2200      	movs	r2, #0
 800fa06:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800fa08:	615a      	str	r2, [r3, #20]
}
 800fa0a:	4770      	bx	lr

0800fa0c <format_message>:
{
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800fa10:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800fa12:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fa14:	2b00      	cmp	r3, #0
{
 800fa16:	b530      	push	{r4, r5, lr}
 800fa18:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fa1a:	dd1f      	ble.n	800fa5c <format_message+0x50>
 800fa1c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800fa1e:	4299      	cmp	r1, r3
 800fa20:	db1c      	blt.n	800fa5c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800fa22:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fa24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800fa28:	b911      	cbnz	r1, 800fa30 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800fa2a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800fa2c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fa2e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800fa30:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800fa32:	f813 4b01 	ldrb.w	r4, [r3], #1
 800fa36:	b9fc      	cbnz	r4, 800fa78 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800fa38:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fa3a:	9305      	str	r3, [sp, #20]
 800fa3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800fa3e:	9304      	str	r3, [sp, #16]
 800fa40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fa42:	9303      	str	r3, [sp, #12]
 800fa44:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fa46:	9302      	str	r3, [sp, #8]
 800fa48:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fa4a:	9301      	str	r3, [sp, #4]
 800fa4c:	6a13      	ldr	r3, [r2, #32]
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800fa54:	f01a fb60 	bl	802a118 <siprintf>
}
 800fa58:	b007      	add	sp, #28
 800fa5a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800fa5c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800fa5e:	2c00      	cmp	r4, #0
 800fa60:	d0e3      	beq.n	800fa2a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fa62:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800fa64:	4299      	cmp	r1, r3
 800fa66:	dce0      	bgt.n	800fa2a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fa68:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800fa6c:	429d      	cmp	r5, r3
 800fa6e:	dbdc      	blt.n	800fa2a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800fa70:	1a59      	subs	r1, r3, r1
 800fa72:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800fa76:	e7d7      	b.n	800fa28 <format_message+0x1c>
    if (ch == '%') {
 800fa78:	2c25      	cmp	r4, #37	; 0x25
 800fa7a:	d1da      	bne.n	800fa32 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	2b73      	cmp	r3, #115	; 0x73
 800fa80:	d1da      	bne.n	800fa38 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fa82:	3218      	adds	r2, #24
}
 800fa84:	b007      	add	sp, #28
 800fa86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fa8a:	f01a bb45 	b.w	802a118 <siprintf>

0800fa8e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800fa8e:	6803      	ldr	r3, [r0, #0]
{
 800fa90:	b510      	push	{r4, lr}
 800fa92:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800fa98:	4620      	mov	r0, r4
}
 800fa9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800fa9e:	f7f9 bf03 	b.w	80098a8 <jpeg_destroy>
	...

0800faa4 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800faa4:	4a0a      	ldr	r2, [pc, #40]	; (800fad0 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800faa6:	490b      	ldr	r1, [pc, #44]	; (800fad4 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800faa8:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800faaa:	4a0b      	ldr	r2, [pc, #44]	; (800fad8 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800faac:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800faae:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800fab0:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800fab2:	4a0a      	ldr	r2, [pc, #40]	; (800fadc <jpeg_std_error+0x38>)
 800fab4:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800fab6:	4a0a      	ldr	r2, [pc, #40]	; (800fae0 <jpeg_std_error+0x3c>)
 800fab8:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800faba:	4a0a      	ldr	r2, [pc, #40]	; (800fae4 <jpeg_std_error+0x40>)
 800fabc:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800fabe:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800fac0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800fac4:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800fac6:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800faca:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800face:	4770      	bx	lr
 800fad0:	0800fa8f 	.word	0x0800fa8f
 800fad4:	0802e844 	.word	0x0802e844
 800fad8:	0800f9d3 	.word	0x0800f9d3
 800fadc:	0800f9c1 	.word	0x0800f9c1
 800fae0:	0800fa0d 	.word	0x0800fa0d
 800fae4:	0800fa03 	.word	0x0800fa03

0800fae8 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800faec:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800faf0:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800faf2:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800faf6:	3a02      	subs	r2, #2
 800faf8:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800fafc:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fafe:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800fdf4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fb02:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800fdf8 <jpeg_idct_float+0x310>
 800fb06:	eddf 4abd 	vldr	s9, [pc, #756]	; 800fdfc <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fb0a:	eddf 3abd 	vldr	s7, [pc, #756]	; 800fe00 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fb0e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800fb12:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fb14:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fb18:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800fb1c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fb20:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800fb24:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fb28:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb2c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800fb30:	ecbc 7a01 	vldmia	ip!, {s14}
 800fb34:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fb38:	ea4e 0b09 	orr.w	fp, lr, r9
 800fb3c:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fb44:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb48:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fb4c:	ea41 0b0b 	orr.w	fp, r1, fp
 800fb50:	ea45 0b0b 	orr.w	fp, r5, fp
 800fb54:	ea50 0b0b 	orrs.w	fp, r0, fp
 800fb58:	f040 80c0 	bne.w	800fcdc <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800fb5c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fb60:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fb64:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fb68:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fb6c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fb70:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fb74:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fb78:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fb7c:	45e2      	cmp	sl, ip
 800fb7e:	d1c6      	bne.n	800fb0e <jpeg_idct_float+0x26>
 800fb80:	1f1c      	subs	r4, r3, #4
 800fb82:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800fb86:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fb88:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800fe04 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fb8c:	eddf 4a99 	vldr	s9, [pc, #612]	; 800fdf4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fb90:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800fdf8 <jpeg_idct_float+0x310>
 800fb94:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800fdfc <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fb98:	eddf 3a99 	vldr	s7, [pc, #612]	; 800fe00 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fb9c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fba0:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800fba2:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fba6:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800fbaa:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800fbae:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800fbb2:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800fbb6:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800fbba:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800fbbc:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800fbc0:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800fbc4:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fbc6:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800fbc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fbcc:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fbce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fbd2:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800fbd6:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800fbda:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800fbde:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fbe2:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800fbe6:	ed52 7a03 	vldr	s15, [r2, #-12]
 800fbea:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800fbee:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800fbf2:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800fbf6:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800fbfa:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800fbfe:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800fc02:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800fc06:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800fc0a:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fc0e:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fc12:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fc16:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fc1a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fc1e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800fc22:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800fc26:	eef0 1a67 	vmov.f32	s3, s15
 800fc2a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fc2e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fc32:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fc36:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fc3a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800fc3e:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fc42:	ee12 3a10 	vmov	r3, s4
 800fc46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc4a:	5cf3      	ldrb	r3, [r6, r3]
 800fc4c:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fc4e:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fc52:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fc56:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fc5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fc5e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fc62:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fc64:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fc68:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fc6a:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fc6e:	ee16 3a10 	vmov	r3, s12
 800fc72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc76:	5cf3      	ldrb	r3, [r6, r3]
 800fc78:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fc7a:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fc7e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fc82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc86:	5cf3      	ldrb	r3, [r6, r3]
 800fc88:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fc8a:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fc8e:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fc92:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fc96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fc9a:	5cf3      	ldrb	r3, [r6, r3]
 800fc9c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fc9e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fca2:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fca6:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fcaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fcae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fcb2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fcb4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fcb8:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fcba:	ee17 3a90 	vmov	r3, s15
 800fcbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcc2:	5cf3      	ldrb	r3, [r6, r3]
 800fcc4:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fcc6:	ee17 3a10 	vmov	r3, s14
 800fcca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcce:	5cf3      	ldrb	r3, [r6, r3]
 800fcd0:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fcd2:	f47f af63 	bne.w	800fb9c <jpeg_idct_float+0xb4>
  }
}
 800fcd6:	b041      	add	sp, #260	; 0x104
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fcdc:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fce0:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fce4:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fce8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fcec:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fcf0:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fcf4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fcf8:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fcfc:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fd00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fd04:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd08:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fd0c:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fd10:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800fd14:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fd18:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fd1c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fd20:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fd24:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fd28:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800fd2c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800fd30:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fd34:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fd38:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800fd3c:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800fd40:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fd44:	ee07 ea90 	vmov	s15, lr
 800fd48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd4c:	ee07 8a90 	vmov	s15, r8
 800fd50:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fd54:	ee07 1a90 	vmov	s15, r1
 800fd58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd5c:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fd60:	ee07 0a10 	vmov	s14, r0
 800fd64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd68:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fd6c:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800fd70:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fd74:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800fd78:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800fd7c:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800fd80:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fd84:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fd88:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800fd8c:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fd90:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fd94:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800fd98:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fd9c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fda0:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800fda4:	eeb0 6a67 	vmov.f32	s12, s15
 800fda8:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fdac:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fdb0:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fdb4:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fdb8:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fdbc:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fdc0:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800fdc4:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800fdc8:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fdcc:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800fdd0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fdd4:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800fdd8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fddc:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fde0:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800fde4:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fde8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fdec:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800fdf0:	e6c4      	b.n	800fb7c <jpeg_idct_float+0x94>
 800fdf2:	bf00      	nop
 800fdf4:	3fb504f3 	.word	0x3fb504f3
 800fdf8:	3f8a8bd4 	.word	0x3f8a8bd4
 800fdfc:	3fec835e 	.word	0x3fec835e
 800fe00:	40273d75 	.word	0x40273d75
 800fe04:	43008000 	.word	0x43008000

0800fe08 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800fe0e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fe10:	3a02      	subs	r2, #2
{
 800fe12:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe14:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fe18:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fe1c:	f105 0320 	add.w	r3, r5, #32
 800fe20:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800fe22:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe24:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800fe28:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fe2a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 800fe2e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fe32:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800fe36:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe3a:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fe3e:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe42:	f855 0b04 	ldr.w	r0, [r5], #4
 800fe46:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe4a:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe4c:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe4e:	ea46 000c 	orr.w	r0, r6, ip
 800fe52:	4338      	orrs	r0, r7
 800fe54:	ea4a 0000 	orr.w	r0, sl, r0
 800fe58:	4308      	orrs	r0, r1
 800fe5a:	ea4e 0000 	orr.w	r0, lr, r0
 800fe5e:	ea58 0100 	orrs.w	r1, r8, r0
 800fe62:	d146      	bne.n	800fef2 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 800fe64:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fe68:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fe6a:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fe6c:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fe6e:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fe70:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fe74:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fe78:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fe7c:	9903      	ldr	r1, [sp, #12]
 800fe7e:	42a9      	cmp	r1, r5
 800fe80:	d1d0      	bne.n	800fe24 <jpeg_idct_ifast+0x1c>
 800fe82:	9b02      	ldr	r3, [sp, #8]
 800fe84:	f1a3 0b04 	sub.w	fp, r3, #4
 800fe88:	331c      	adds	r3, #28
 800fe8a:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800fe8c:	ab04      	add	r3, sp, #16
 800fe8e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fe90:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800fe92:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fe96:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 800fe98:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fe9c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fe9e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fea0:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800fea4:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fea6:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800feaa:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800feae:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800feb2:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800feb4:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800feb6:	ea47 0708 	orr.w	r7, r7, r8
 800feba:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800febe:	4327      	orrs	r7, r4
 800fec0:	ea47 070c 	orr.w	r7, r7, ip
 800fec4:	ea57 0502 	orrs.w	r5, r7, r2
 800fec8:	d17e      	bne.n	800ffc8 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 800feca:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 800fece:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fed0:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 800fed4:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800fed8:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800feda:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800fedc:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800fede:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800fee0:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800fee2:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800fee4:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fee6:	9b02      	ldr	r3, [sp, #8]
 800fee8:	455b      	cmp	r3, fp
 800feea:	d1d1      	bne.n	800fe90 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800feec:	b045      	add	sp, #276	; 0x114
 800feee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fef2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fef4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fef8:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fefc:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800fefe:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ff02:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800ff06:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ff0a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800ff0e:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800ff12:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800ff16:	ebac 0000 	sub.w	r0, ip, r0
 800ff1a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800ff1c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800ff20:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 800ff24:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 800ff28:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 800ff2c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ff2e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800ff30:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 800ff34:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ff36:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ff38:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ff3a:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ff3c:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ff3e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800ff42:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800ff44:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800ff48:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800ff4c:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 800ff50:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800ff52:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 800ff56:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800ff58:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 800ff5a:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800ff5e:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800ff62:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ff64:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800ff68:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800ff6a:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800ff6e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ff72:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ff76:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ff78:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ff7a:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ff7e:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800ff80:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ff82:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800ff86:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 800ff8a:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800ff8e:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800ff92:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800ff96:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800ff9a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 800ff9e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800ffa0:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800ffa4:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800ffa8:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800ffaa:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800ffac:	4459      	add	r1, fp
 800ffae:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800ffb0:	9900      	ldr	r1, [sp, #0]
 800ffb2:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800ffb6:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800ffba:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800ffbe:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800ffc2:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800ffc4:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800ffc6:	e759      	b.n	800fe7c <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800ffc8:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ffcc:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800ffd0:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800ffd4:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ffd8:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800ffdc:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ffe0:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800ffe2:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800ffe4:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800ffe6:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ffea:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800ffee:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800fff2:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fff4:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 800fff6:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fffa:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800fffe:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 8010002:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010006:	f240 15d9 	movw	r5, #473	; 0x1d9
 801000a:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801000e:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 8010012:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010014:	9d01      	ldr	r5, [sp, #4]
 8010016:	1b64      	subs	r4, r4, r5
 8010018:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801001c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801001e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010020:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010024:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010028:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801002a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801002c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010030:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 8010032:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010036:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801003a:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 801003e:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 8010042:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 8010046:	44a6      	add	lr, r4
			    & RANGE_MASK];
 8010048:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801004c:	f819 2002 	ldrb.w	r2, [r9, r2]
 8010050:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8010054:	f819 200c 	ldrb.w	r2, [r9, ip]
 8010058:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 801005a:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 801005c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 801005e:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 8010062:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8010066:	f819 2002 	ldrb.w	r2, [r9, r2]
 801006a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 801006c:	f819 3007 	ldrb.w	r3, [r9, r7]
 8010070:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8010072:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010074:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 8010076:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 801007a:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 801007e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010082:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010084:	f819 3001 	ldrb.w	r3, [r9, r1]
 8010088:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801008a:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 801008e:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 8010092:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8010096:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801009a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801009e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 80100a0:	f819 300e 	ldrb.w	r3, [r9, lr]
 80100a4:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80100a6:	e71e      	b.n	800fee6 <jpeg_idct_ifast+0xde>

080100a8 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80100ae:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80100b0:	3a02      	subs	r2, #2
{
 80100b2:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80100b4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80100b6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80100ba:	3380      	adds	r3, #128	; 0x80
 80100bc:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80100be:	f105 0320 	add.w	r3, r5, #32
 80100c2:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80100c4:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80100c8:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80100ca:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80100ce:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80100d2:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80100d6:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80100da:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80100de:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80100e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80100e6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80100ea:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80100ec:	ea4a 030b 	orr.w	r3, sl, fp
 80100f0:	ea4e 0303 	orr.w	r3, lr, r3
 80100f4:	433b      	orrs	r3, r7
 80100f6:	ea48 0303 	orr.w	r3, r8, r3
 80100fa:	4333      	orrs	r3, r6
 80100fc:	ea59 0303 	orrs.w	r3, r9, r3
 8010100:	d145      	bne.n	801018e <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8010102:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8010104:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010108:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 801010a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 801010c:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801010e:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010110:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010114:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010118:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801011c:	9b05      	ldr	r3, [sp, #20]
 801011e:	42ab      	cmp	r3, r5
 8010120:	d1d0      	bne.n	80100c4 <jpeg_idct_islow+0x1c>
 8010122:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8010124:	ad06      	add	r5, sp, #24
 8010126:	f1a3 0904 	sub.w	r9, r3, #4
 801012a:	331c      	adds	r3, #28
 801012c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801012e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8010132:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8010134:	9302      	str	r3, [sp, #8]
 8010136:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010138:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801013c:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 8010140:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010144:	ea4a 0200 	orr.w	r2, sl, r0
 8010148:	ea42 020e 	orr.w	r2, r2, lr
 801014c:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 8010150:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010152:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010156:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801015a:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801015c:	430a      	orrs	r2, r1
 801015e:	ea52 020c 	orrs.w	r2, r2, ip
 8010162:	f040 8098 	bne.w	8010296 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010166:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 8010168:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 801016c:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801016e:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 8010170:	9902      	ldr	r1, [sp, #8]
 8010172:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 8010174:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 8010176:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 8010178:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 801017a:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 801017c:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 801017e:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 8010180:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010182:	9b05      	ldr	r3, [sp, #20]
 8010184:	454b      	cmp	r3, r9
 8010186:	d1d2      	bne.n	801012e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010188:	b047      	add	sp, #284	; 0x11c
 801018a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801018e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8010190:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010194:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8010198:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801019a:	f241 1651 	movw	r6, #4433	; 0x1151
 801019e:	eb0b 0300 	add.w	r3, fp, r0
 80101a2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80101a4:	f641 067e 	movw	r6, #6270	; 0x187e
 80101a8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80101ac:	4e7a      	ldr	r6, [pc, #488]	; (8010398 <jpeg_idct_islow+0x2f0>)
 80101ae:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80101b2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80101b4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80101b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80101ba:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 80101bc:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80101c0:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80101c4:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 80101c8:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101cc:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 80101ce:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 80101d0:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 80101d2:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80101d4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101d8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80101dc:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80101de:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80101e2:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80101e6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80101ea:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80101ee:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80101f0:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 80101f4:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 80101f8:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80101fc:	1930      	adds	r0, r6, r4
 80101fe:	4358      	muls	r0, r3
    z2 += z1;
 8010200:	4b66      	ldr	r3, [pc, #408]	; (801039c <jpeg_idct_islow+0x2f4>)
 8010202:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8010206:	4b66      	ldr	r3, [pc, #408]	; (80103a0 <jpeg_idct_islow+0x2f8>)
 8010208:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801020c:	eb09 040a 	add.w	r4, r9, sl
 8010210:	4b64      	ldr	r3, [pc, #400]	; (80103a4 <jpeg_idct_islow+0x2fc>)
 8010212:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8010214:	f640 138e 	movw	r3, #2446	; 0x98e
 8010218:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801021c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801021e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8010222:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010226:	4b60      	ldr	r3, [pc, #384]	; (80103a8 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8010228:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801022c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8010230:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010234:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010238:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801023a:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801023c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801023e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010242:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8010246:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801024a:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801024e:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010252:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8010254:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010256:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801025a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801025e:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010262:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8010266:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010268:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801026c:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801026e:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010270:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010272:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010274:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010276:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801027a:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801027c:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801027e:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010280:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010282:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010286:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8010288:	9b02      	ldr	r3, [sp, #8]
 801028a:	eba3 0909 	sub.w	r9, r3, r9
 801028e:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8010292:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8010294:	e742      	b.n	801011c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010296:	1842      	adds	r2, r0, r1
 8010298:	f241 1451 	movw	r4, #4433	; 0x1151
 801029c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801029e:	f641 047e 	movw	r4, #6270	; 0x187e
 80102a2:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80102a6:	4c3c      	ldr	r4, [pc, #240]	; (8010398 <jpeg_idct_islow+0x2f0>)
 80102a8:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 80102ac:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80102ae:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 80102b0:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80102b4:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 80102b8:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 80102bc:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80102c0:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 80102c2:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 80102c6:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 80102ca:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80102cc:	f242 52a1 	movw	r2, #9633	; 0x25a1
 80102d0:	1821      	adds	r1, r4, r0
 80102d2:	4351      	muls	r1, r2
    z2 += z1;
 80102d4:	4a31      	ldr	r2, [pc, #196]	; (801039c <jpeg_idct_islow+0x2f4>)
 80102d6:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 80102da:	4a31      	ldr	r2, [pc, #196]	; (80103a0 <jpeg_idct_islow+0x2f8>)
 80102dc:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80102e0:	eb0a 000c 	add.w	r0, sl, ip
 80102e4:	4a2f      	ldr	r2, [pc, #188]	; (80103a4 <jpeg_idct_islow+0x2fc>)
 80102e6:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 80102e8:	f640 128e 	movw	r2, #2446	; 0x98e
 80102ec:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 80102f0:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 80102f2:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 80102f6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80102fa:	4a2b      	ldr	r2, [pc, #172]	; (80103a8 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 80102fc:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010300:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 8010304:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010308:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801030c:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 801030e:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8010310:	4454      	add	r4, sl
 8010312:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010316:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801031a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 801031e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010322:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 8010324:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010328:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801032a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801032e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 8010332:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010336:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 8010338:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801033c:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010340:	9a01      	ldr	r2, [sp, #4]
 8010342:	5dd0      	ldrb	r0, [r2, r7]
 8010344:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010346:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 8010348:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801034c:	5c10      	ldrb	r0, [r2, r0]
 801034e:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010350:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010354:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010356:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010358:	eb02 000b 	add.w	r0, r2, fp
 801035c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 801035e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010362:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010364:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010366:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010368:	eba2 010b 	sub.w	r1, r2, fp
 801036c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 801036e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010372:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010374:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010376:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010378:	9a03      	ldr	r2, [sp, #12]
 801037a:	4462      	add	r2, ip
			    & RANGE_MASK];
 801037c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010380:	5c8a      	ldrb	r2, [r1, r2]
 8010382:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8010384:	9a03      	ldr	r2, [sp, #12]
 8010386:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 801038a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801038e:	f811 200c 	ldrb.w	r2, [r1, ip]
 8010392:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010394:	e6f5      	b.n	8010182 <jpeg_idct_islow+0xda>
 8010396:	bf00      	nop
 8010398:	ffffc4df 	.word	0xffffc4df
 801039c:	ffffc13b 	.word	0xffffc13b
 80103a0:	fffff384 	.word	0xfffff384
 80103a4:	ffffe333 	.word	0xffffe333
 80103a8:	ffffadfd 	.word	0xffffadfd

080103ac <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80103ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b0:	b0b9      	sub	sp, #228	; 0xe4
 80103b2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80103b4:	1e96      	subs	r6, r2, #2
 80103b6:	9304      	str	r3, [sp, #16]
 80103b8:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80103ba:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80103be:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80103c2:	3380      	adds	r3, #128	; 0x80
 80103c4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80103c6:	f102 030c 	add.w	r3, r2, #12
 80103ca:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80103cc:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80103d0:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80103d4:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80103d8:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80103dc:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80103e0:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80103e2:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80103e6:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 80103ea:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 80103ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80103f0:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80103f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80103f4:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80103f6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80103fa:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80103fe:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8010402:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010404:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 8010408:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801040c:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010410:	eba4 010e 	sub.w	r1, r4, lr
 8010414:	f640 2212 	movw	r2, #2578	; 0xa12
 8010418:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801041c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801041e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010422:	eb09 0007 	add.w	r0, r9, r7
 8010426:	4410      	add	r0, r2
 8010428:	4a87      	ldr	r2, [pc, #540]	; (8010648 <jpeg_idct_7x7+0x29c>)
 801042a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801042e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 8010430:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010434:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010438:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801043c:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010440:	fb02 1203 	mla	r2, r2, r3, r1
 8010444:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010448:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 801044c:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010450:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010452:	4b7e      	ldr	r3, [pc, #504]	; (801064c <jpeg_idct_7x7+0x2a0>)
 8010454:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010458:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 801045c:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801045e:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010460:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010464:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010466:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8010468:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801046a:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 801046e:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010472:	eb03 0904 	add.w	r9, r3, r4
 8010476:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801047a:	eba3 0904 	sub.w	r9, r3, r4
 801047e:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010482:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010484:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010486:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801048a:	4a71      	ldr	r2, [pc, #452]	; (8010650 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 801048c:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 8010490:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010492:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010496:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010498:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801049c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 80104a0:	44a1      	add	r9, r4
    tmp0 += z2;
 80104a2:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80104a4:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80104a8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80104aa:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80104ac:	4453      	add	r3, sl
 80104ae:	12db      	asrs	r3, r3, #11
 80104b0:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80104b4:	9b03      	ldr	r3, [sp, #12]
 80104b6:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80104ba:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80104be:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80104c2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80104c4:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80104c8:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80104cc:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80104ce:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80104d0:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80104d2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80104d4:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80104d8:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80104da:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80104de:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80104e2:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80104e4:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80104e8:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80104ec:	ea4f 23ee 	mov.w	r3, lr, asr #11
 80104f0:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80104f4:	9b05      	ldr	r3, [sp, #20]
 80104f6:	42b3      	cmp	r3, r6
 80104f8:	f47f af68 	bne.w	80103cc <jpeg_idct_7x7+0x20>
 80104fc:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 80104fe:	ac07      	add	r4, sp, #28
 8010500:	f1a3 0904 	sub.w	r9, r3, #4
 8010504:	3318      	adds	r3, #24
 8010506:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010508:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801050c:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 801050e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8010510:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8010514:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010516:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 801051a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801051c:	1b51      	subs	r1, r2, r5
 801051e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8010522:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010526:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801052a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801052e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 8010532:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010536:	eba3 0c02 	sub.w	ip, r3, r2
 801053a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801053e:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010540:	4941      	ldr	r1, [pc, #260]	; (8010648 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010542:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010546:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 801054a:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801054e:	eb0e 000c 	add.w	r0, lr, ip
 8010552:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8010556:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801055a:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801055e:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010562:	fb02 f208 	mul.w	r2, r2, r8
 8010566:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801056a:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801056e:	4d37      	ldr	r5, [pc, #220]	; (801064c <jpeg_idct_7x7+0x2a0>)
 8010570:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8010574:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010578:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 801057a:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801057e:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010580:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010584:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010586:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010588:	f641 53ef 	movw	r3, #7663	; 0x1def
 801058c:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010590:	eba2 050a 	sub.w	r5, r2, sl
 8010594:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010598:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801059a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801059c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801059e:	4b2c      	ldr	r3, [pc, #176]	; (8010650 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 80105a0:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 80105a4:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80105a6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80105aa:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105ae:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80105b0:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80105b4:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 80105b8:	4455      	add	r5, sl
    tmp0 += z2;
 80105ba:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80105bc:	fb0b 220e 	mla	r2, fp, lr, r2
 80105c0:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105c2:	eb01 020c 	add.w	r2, r1, ip
 80105c6:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 80105c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105cc:	5c9a      	ldrb	r2, [r3, r2]
 80105ce:	9b04      	ldr	r3, [sp, #16]
 80105d0:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80105d2:	9b02      	ldr	r3, [sp, #8]
 80105d4:	eba3 0c0c 	sub.w	ip, r3, ip
 80105d8:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80105da:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80105de:	f813 200c 	ldrb.w	r2, [r3, ip]
 80105e2:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80105e4:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80105e6:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80105e8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80105ec:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80105f0:	5c9a      	ldrb	r2, [r3, r2]
 80105f2:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80105f4:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80105f6:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80105f8:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80105fa:	eb03 020a 	add.w	r2, r3, sl
 80105fe:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010600:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010604:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010606:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010608:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801060a:	eba3 0a0a 	sub.w	sl, r3, sl
 801060e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010610:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010614:	f813 300a 	ldrb.w	r3, [r3, sl]
 8010618:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 801061a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801061e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010622:	f642 5341 	movw	r3, #11585	; 0x2d41
 8010626:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 801062a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801062c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8010630:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010634:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010638:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801063a:	9b05      	ldr	r3, [sp, #20]
 801063c:	454b      	cmp	r3, r9
 801063e:	f47f af63 	bne.w	8010508 <jpeg_idct_7x7+0x15c>
  }
}
 8010642:	b039      	add	sp, #228	; 0xe4
 8010644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010648:	ffffc515 	.word	0xffffc515
 801064c:	ffffb0f1 	.word	0xffffb0f1
 8010650:	ffffd3e1 	.word	0xffffd3e1

08010654 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010658:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801065c:	b0a7      	sub	sp, #156	; 0x9c
 801065e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010660:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010662:	3080      	adds	r0, #128	; 0x80
 8010664:	320a      	adds	r2, #10
 8010666:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010668:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801066a:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801066c:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801066e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010672:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010676:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801067a:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801067c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010680:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010682:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010686:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801068a:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 801068c:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801068e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010692:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010696:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801069a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801069e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 80106a0:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80106a2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80106a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80106a8:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106ac:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80106b0:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80106b2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 80106b4:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80106b8:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 80106bc:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80106be:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106c2:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80106c4:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80106c8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106cc:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80106d0:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80106d4:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80106d8:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80106dc:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80106e0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80106e4:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80106e8:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80106ec:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80106f0:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106f4:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80106f8:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80106fc:	12d2      	asrs	r2, r2, #11
 80106fe:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010702:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8010706:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010708:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801070c:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010710:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010712:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010716:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801071a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801071c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801071e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010722:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010724:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010726:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010728:	42b2      	cmp	r2, r6
 801072a:	d1a0      	bne.n	801066e <jpeg_idct_6x6+0x1a>
 801072c:	f1a3 0e04 	sub.w	lr, r3, #4
 8010730:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010734:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010736:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801073a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 801073e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010740:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010742:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8010746:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8010748:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801074c:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010750:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010754:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010758:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801075c:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010760:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8010764:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8010768:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 801076c:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010770:	f242 7231 	movw	r2, #10033	; 0x2731
 8010774:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8010778:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 801077c:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8010780:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010784:	eb04 0508 	add.w	r5, r4, r8
 8010788:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801078c:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010790:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010794:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010798:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801079c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801079e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80107a2:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80107a6:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107aa:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80107ae:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80107b2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80107b6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107ba:	5d04      	ldrb	r4, [r0, r4]
 80107bc:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80107be:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80107c2:	9800      	ldr	r0, [sp, #0]
 80107c4:	5d84      	ldrb	r4, [r0, r6]
 80107c6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80107c8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80107cc:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 80107d0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80107d4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80107d8:	5d04      	ldrb	r4, [r0, r4]
 80107da:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80107dc:	f810 3008 	ldrb.w	r3, [r0, r8]
 80107e0:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80107e2:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80107e6:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 80107ea:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80107ee:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80107f2:	5cc3      	ldrb	r3, [r0, r3]
 80107f4:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80107f6:	5d43      	ldrb	r3, [r0, r5]
 80107f8:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 80107fa:	d19c      	bne.n	8010736 <jpeg_idct_6x6+0xe2>
  }
}
 80107fc:	b027      	add	sp, #156	; 0x9c
 80107fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010804 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010808:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801080c:	b09d      	sub	sp, #116	; 0x74
 801080e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010810:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010812:	3080      	adds	r0, #128	; 0x80
 8010814:	3208      	adds	r2, #8
 8010816:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010818:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801081a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801081e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010822:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010824:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010826:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801082a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801082c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010830:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010834:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010836:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010838:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801083c:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801083e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010842:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010844:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010846:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801084a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801084e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010852:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010856:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801085a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801085e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010862:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010864:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010868:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801086c:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 8010870:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010872:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8010876:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801087a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801087e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010882:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010886:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010888:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801088c:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010890:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010892:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010896:	483b      	ldr	r0, [pc, #236]	; (8010984 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010898:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801089a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801089e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80108a2:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80108a6:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80108a8:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80108ac:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80108b0:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80108b4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80108b8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80108bc:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80108c0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80108c4:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80108c8:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80108cc:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80108ce:	d1aa      	bne.n	8010826 <jpeg_idct_5x5+0x22>
 80108d0:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 80108d4:	a903      	add	r1, sp, #12
 80108d6:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80108d8:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80108dc:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80108e0:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80108e2:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80108e6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80108ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80108ec:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 80108ee:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80108f2:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80108f6:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 80108fa:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80108fe:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8010902:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8010906:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801090a:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801090c:	1b1b      	subs	r3, r3, r4
 801090e:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010912:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8010916:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 801091a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 801091c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 801091e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010920:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8010924:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010928:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801092a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 801092e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010932:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010936:	4813      	ldr	r0, [pc, #76]	; (8010984 <jpeg_idct_5x5+0x180>)
 8010938:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801093c:	eb05 0b06 	add.w	fp, r5, r6
 8010940:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010942:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8010944:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010948:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801094c:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010950:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010952:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010956:	9800      	ldr	r0, [sp, #0]
 8010958:	5d45      	ldrb	r5, [r0, r5]
 801095a:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801095c:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801095e:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8010960:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010964:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010968:	5d45      	ldrb	r5, [r0, r5]
 801096a:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801096c:	5c82      	ldrb	r2, [r0, r2]
 801096e:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8010970:	f810 300c 	ldrb.w	r3, [r0, ip]
 8010974:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8010976:	9b01      	ldr	r3, [sp, #4]
 8010978:	4573      	cmp	r3, lr
 801097a:	d1b2      	bne.n	80108e2 <jpeg_idct_5x5+0xde>
  }
}
 801097c:	b01d      	add	sp, #116	; 0x74
 801097e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010982:	bf00      	nop
 8010984:	ffffba5c 	.word	0xffffba5c

08010988 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801098e:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010990:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8010994:	1e96      	subs	r6, r2, #2
 8010996:	3c04      	subs	r4, #4
 8010998:	1d97      	adds	r7, r2, #6
 801099a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801099c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801099e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80109a2:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80109a6:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010ab0 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109aa:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80109ae:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109b0:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80109b4:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80109b8:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109ba:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80109be:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109c0:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80109c4:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80109c8:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80109cc:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80109d0:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109d4:	6a22      	ldr	r2, [r4, #32]
 80109d6:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80109da:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80109dc:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80109e0:	eb0a 020b 	add.w	r2, sl, fp
 80109e4:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80109e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80109ec:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80109f0:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80109f4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80109f8:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 80109fc:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010a00:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010a04:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010a08:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010a0c:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010a10:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010a14:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010a18:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010a1a:	d1c6      	bne.n	80109aa <jpeg_idct_4x4+0x22>
 8010a1c:	1f1e      	subs	r6, r3, #4
 8010a1e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010a22:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010a24:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010a28:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010a2c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010ab0 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010a30:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010a34:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8010a36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a38:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8010a3c:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 8010a3e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010a42:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8010a46:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a4a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8010a4e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010a52:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8010a56:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010a5a:	eb01 020b 	add.w	r2, r1, fp
 8010a5e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010a62:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010a66:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010a6a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010a6e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010a72:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8010a74:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010a78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 8010a7a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010a7e:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8010a82:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010a86:	5c6b      	ldrb	r3, [r5, r1]
 8010a88:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010a8a:	9b01      	ldr	r3, [sp, #4]
 8010a8c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8010a90:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010a94:	5ceb      	ldrb	r3, [r5, r3]
 8010a96:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010a98:	9b01      	ldr	r3, [sp, #4]
 8010a9a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 8010a9e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010aa2:	5cab      	ldrb	r3, [r5, r2]
 8010aa4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8010aa6:	d1c3      	bne.n	8010a30 <jpeg_idct_4x4+0xa8>
  }
}
 8010aa8:	b013      	add	sp, #76	; 0x4c
 8010aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aae:	bf00      	nop
 8010ab0:	ffffc4df 	.word	0xffffc4df

08010ab4 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab8:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010aba:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8010abe:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010ac0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010ac4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010ac6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010aca:	f1a1 0c04 	sub.w	ip, r1, #4
 8010ace:	1d10      	adds	r0, r2, #4
 8010ad0:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010ad2:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010ad6:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ada:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010ade:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ae0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ae4:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010ae8:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010aea:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010aee:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010af2:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010af6:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 8010afa:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010afe:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010b06:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b0a:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 8010b0e:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010b12:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010b16:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010b1a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b1e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b22:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010b26:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b28:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b2c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b30:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b34:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010b36:	d1d0      	bne.n	8010ada <jpeg_idct_3x3+0x26>
 8010b38:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010b3a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 8010b3e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010b40:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010b44:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8010b48:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8010b4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010b4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010b50:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010b52:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b56:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010b5a:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010b5e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b62:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b66:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010b68:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8010b6c:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010b70:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b74:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b78:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8010b7c:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8010b80:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010b84:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010b88:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b8c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010b90:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b94:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8010b98:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8010b9a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8010b9e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010ba0:	d1d0      	bne.n	8010b44 <jpeg_idct_3x3+0x90>
  }
}
 8010ba2:	b00b      	add	sp, #44	; 0x2c
 8010ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ba8 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010bac:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 8010bae:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010bb0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bb4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010bb8:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010bba:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bbc:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bc0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bc2:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010bc4:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bc6:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8010bc8:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010bca:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 8010bcc:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8010bce:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010bd0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010bd4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010bd8:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8010bda:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010bde:	437a      	muls	r2, r7
{
 8010be0:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 8010be2:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 8010be4:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 8010be6:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010bea:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010bec:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010bee:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010bf0:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010bf2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010bf6:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010bfa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010bfe:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010c02:	5d2c      	ldrb	r4, [r5, r4]
 8010c04:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010c08:	5c28      	ldrb	r0, [r5, r0]
 8010c0a:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 8010c0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010c12:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 8010c14:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010c16:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010c18:	5c6b      	ldrb	r3, [r5, r1]
 8010c1a:	7063      	strb	r3, [r4, #1]
}
 8010c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c20 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010c20:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010c22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010c26:	6809      	ldr	r1, [r1, #0]
 8010c28:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010c2a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8010c2e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010c30:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010c34:	440a      	add	r2, r1
 8010c36:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	9b00      	ldr	r3, [sp, #0]
 8010c3e:	54d1      	strb	r1, [r2, r3]
}
 8010c40:	4770      	bx	lr
	...

08010c44 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c48:	b0d1      	sub	sp, #324	; 0x144
 8010c4a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010c4c:	1e96      	subs	r6, r2, #2
 8010c4e:	9306      	str	r3, [sp, #24]
 8010c50:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010c52:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010c56:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010c58:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010c5c:	f102 030e 	add.w	r3, r2, #14
 8010c60:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c62:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010c66:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c68:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c6c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c70:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c74:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c78:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c7e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8010c82:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c84:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c86:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010c8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010c8e:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c92:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010c94:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010c98:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010c9c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 8010c9e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ca0:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010ca4:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ca8:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010caa:	1a8b      	subs	r3, r1, r2
 8010cac:	436b      	muls	r3, r5
 8010cae:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010cb0:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010cb4:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010cb6:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 8010cba:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010cbc:	188b      	adds	r3, r1, r2
 8010cbe:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010cc0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010cc4:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010cc6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010cca:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010ccc:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010cce:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010cd0:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8010cd2:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8010cd4:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010cd6:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 8010cda:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010cdc:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010ce0:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010ce2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ce4:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010ce6:	4b89      	ldr	r3, [pc, #548]	; (8010f0c <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ce8:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010cea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010cec:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010cee:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8010cf2:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010cf6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010cfa:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010cfc:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010d00:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010d04:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010d08:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010d0c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010d10:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010d14:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010d18:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010d1c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010d20:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010d24:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 8010d28:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010d2c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 8010d30:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8010d34:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 8010d38:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010d3a:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d3e:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8010d42:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010d44:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010d46:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d48:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 8010d4a:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d4c:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d50:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010d54:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010d56:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010d58:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010d5a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d5c:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010d5e:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010d60:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010d64:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010d68:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010d6a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d6c:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010d70:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010d74:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010d78:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010d7a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010d7e:	9b05      	ldr	r3, [sp, #20]
 8010d80:	4413      	add	r3, r2
 8010d82:	12db      	asrs	r3, r3, #11
 8010d84:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010d86:	9b05      	ldr	r3, [sp, #20]
 8010d88:	1a9a      	subs	r2, r3, r2
 8010d8a:	12d2      	asrs	r2, r2, #11
 8010d8c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010d90:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010d94:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010d98:	12db      	asrs	r3, r3, #11
 8010d9a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d9c:	9b07      	ldr	r3, [sp, #28]
 8010d9e:	42b3      	cmp	r3, r6
 8010da0:	f47f af5f 	bne.w	8010c62 <jpeg_idct_9x9+0x1e>
 8010da4:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010da6:	aa08      	add	r2, sp, #32
 8010da8:	3b04      	subs	r3, #4
 8010daa:	9301      	str	r3, [sp, #4]
 8010dac:	9b06      	ldr	r3, [sp, #24]
 8010dae:	3320      	adds	r3, #32
 8010db0:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010db2:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010db4:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8010db8:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010dba:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010dbc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 8010dc0:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8010dc4:	9106      	str	r1, [sp, #24]
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	460b      	mov	r3, r1
 8010dca:	995a      	ldr	r1, [sp, #360]	; 0x168
 8010dcc:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010dce:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 8010dd2:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010dd6:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010dda:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8010dde:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010de2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8010de6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010dea:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8010dee:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010df0:	1a43      	subs	r3, r0, r1
 8010df2:	fb0c f303 	mul.w	r3, ip, r3
 8010df6:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010df8:	18f3      	adds	r3, r6, r3
 8010dfa:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010dfc:	1843      	adds	r3, r0, r1
 8010dfe:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010e00:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010e04:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010e06:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010e0a:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010e0c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010e0e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010e10:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 8010e12:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 8010e14:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010e16:	4f3d      	ldr	r7, [pc, #244]	; (8010f0c <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8010e18:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 8010e1a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010e1e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010e20:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8010e24:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010e26:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 8010e2a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010e2e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010e30:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8010e34:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010e38:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010e3c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010e40:	f640 737a 	movw	r3, #3962	; 0xf7a
 8010e44:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010e48:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8010e4c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010e50:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e54:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8010e58:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8010e5c:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e60:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8010e62:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e64:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8010e68:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e6a:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010e6e:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010e72:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8010e76:	448e      	add	lr, r1
			    & RANGE_MASK];
 8010e78:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e7c:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010e80:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8010e82:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010e86:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010e8a:	9b06      	ldr	r3, [sp, #24]
 8010e8c:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010e8e:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010e90:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8010e94:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010e96:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010e9a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010e9e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8010ea0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010ea4:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010ea8:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010eac:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010eae:	f81a 0009 	ldrb.w	r0, [sl, r9]
 8010eb2:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010eb4:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010eb6:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8010eb8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010ebc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010ec0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010ec4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010ec6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010eca:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010ecc:	9b05      	ldr	r3, [sp, #20]
 8010ece:	4473      	add	r3, lr
			    & RANGE_MASK];
 8010ed0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010ed4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010ed8:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010eda:	9b05      	ldr	r3, [sp, #20]
 8010edc:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 8010ee0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010ee4:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 8010ee8:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010eea:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8010eec:	9b02      	ldr	r3, [sp, #8]
 8010eee:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 8010ef2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8010ef6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010efa:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 8010efc:	9b07      	ldr	r3, [sp, #28]
 8010efe:	428b      	cmp	r3, r1
 8010f00:	f47f af57 	bne.w	8010db2 <jpeg_idct_9x9+0x16e>
  }
}
 8010f04:	b051      	add	sp, #324	; 0x144
 8010f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f0a:	bf00      	nop
 8010f0c:	ffffd8cf 	.word	0xffffd8cf

08010f10 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f14:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010f18:	b0d7      	sub	sp, #348	; 0x15c
 8010f1a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010f1c:	f1a2 0b02 	sub.w	fp, r2, #2
 8010f20:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f22:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8010f26:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010f28:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f2a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010f2c:	f102 030e 	add.w	r3, r2, #14
 8010f30:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010f32:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010f36:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010f3a:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010f3e:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f40:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010f44:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f46:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010f4a:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f4e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010f50:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8010f54:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010f56:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010f5a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010f5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010f62:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8010f64:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8010f66:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010f68:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010f6a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010f6e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f72:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010f76:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f7a:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010f7c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8010f80:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010f82:	19f3      	adds	r3, r6, r7
 8010f84:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010f86:	f241 0071 	movw	r0, #4209	; 0x1071
 8010f8a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010f8e:	489d      	ldr	r0, [pc, #628]	; (8011204 <jpeg_idct_10x10+0x2f4>)
 8010f90:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010f94:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8010f98:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f9a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8010f9e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010fa0:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010fa2:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8010fa6:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010fa8:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010faa:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010fae:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010fb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 8010fb2:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010fb4:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010fb8:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010fba:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8010fbe:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010fc2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8010fc6:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8010fc8:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8010fcc:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010fce:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010fd2:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010fd6:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010fda:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 8010fde:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010fe2:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010fe6:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010fea:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010fee:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010ff0:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010ff2:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010ff6:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010ff8:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010ffa:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010ffe:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011002:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011004:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011008:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801100a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801100e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011012:	f241 468c 	movw	r6, #5260	; 0x148c
 8011016:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011018:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801101c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011020:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011024:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011028:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801102a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801102c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801102e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011032:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011036:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801103a:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801103c:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801103e:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011040:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011042:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011046:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011048:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801104a:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 801104c:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801104e:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8011052:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8011056:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801105a:	9b02      	ldr	r3, [sp, #8]
 801105c:	442b      	add	r3, r5
 801105e:	12db      	asrs	r3, r3, #11
 8011060:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011062:	9b02      	ldr	r3, [sp, #8]
 8011064:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011066:	9b01      	ldr	r3, [sp, #4]
 8011068:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801106a:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801106c:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801106e:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011072:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011074:	9b01      	ldr	r3, [sp, #4]
 8011076:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801107a:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801107c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011080:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011082:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011086:	f47f af54 	bne.w	8010f32 <jpeg_idct_10x10+0x22>
 801108a:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 801108c:	a906      	add	r1, sp, #24
 801108e:	f1a3 0b04 	sub.w	fp, r3, #4
 8011092:	3324      	adds	r3, #36	; 0x24
 8011094:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011096:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801109a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 801109e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80110a0:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 80110a2:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80110a6:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80110a8:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80110ac:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80110ae:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80110b2:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80110b6:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80110ba:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80110bc:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80110be:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80110c2:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80110c4:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 80110c8:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80110cc:	006d      	lsls	r5, r5, #1
 80110ce:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 80110d2:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80110d6:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80110d8:	19eb      	adds	r3, r5, r7
 80110da:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80110dc:	f241 0071 	movw	r0, #4209	; 0x1071
 80110e0:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80110e4:	4847      	ldr	r0, [pc, #284]	; (8011204 <jpeg_idct_10x10+0x2f4>)
 80110e6:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 80110ea:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80110ee:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 80110f0:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 80110f4:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80110f6:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80110f8:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80110fa:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 80110fe:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8011100:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8011104:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8011108:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 801110c:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801110e:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8011112:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8011116:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 801111a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 801111e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011122:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8011126:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801112a:	f240 7014 	movw	r0, #1812	; 0x714
 801112e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011132:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011136:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011138:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801113c:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011140:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011144:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011146:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011148:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801114c:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801114e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011152:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011156:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801115a:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801115e:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011160:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011162:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011164:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011166:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801116a:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801116e:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011172:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011176:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8011178:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801117c:	444d      	add	r5, r9
			    & RANGE_MASK];
 801117e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011182:	5c82      	ldrb	r2, [r0, r2]
 8011184:	9804      	ldr	r0, [sp, #16]
 8011186:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011188:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801118a:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801118c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8011190:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011192:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011194:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8011196:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801119a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801119e:	5c82      	ldrb	r2, [r0, r2]
 80111a0:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80111a2:	5dc3      	ldrb	r3, [r0, r7]
 80111a4:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80111a6:	9b01      	ldr	r3, [sp, #4]
 80111a8:	4443      	add	r3, r8
			    & RANGE_MASK];
 80111aa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80111ae:	5cc3      	ldrb	r3, [r0, r3]
 80111b0:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80111b2:	9b01      	ldr	r3, [sp, #4]
 80111b4:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80111b8:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80111bc:	f810 3008 	ldrb.w	r3, [r0, r8]
 80111c0:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80111c2:	9b03      	ldr	r3, [sp, #12]
 80111c4:	442b      	add	r3, r5
			    & RANGE_MASK];
 80111c6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80111ca:	5cc3      	ldrb	r3, [r0, r3]
 80111cc:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80111ce:	9b03      	ldr	r3, [sp, #12]
 80111d0:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 80111d2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80111d6:	5d43      	ldrb	r3, [r0, r5]
 80111d8:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80111da:	9b02      	ldr	r3, [sp, #8]
 80111dc:	4453      	add	r3, sl
			    & RANGE_MASK];
 80111de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80111e2:	5cc3      	ldrb	r3, [r0, r3]
 80111e4:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80111e6:	9b02      	ldr	r3, [sp, #8]
 80111e8:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 80111ec:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80111f0:	f810 300a 	ldrb.w	r3, [r0, sl]
 80111f4:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 80111f6:	9b05      	ldr	r3, [sp, #20]
 80111f8:	455b      	cmp	r3, fp
 80111fa:	f47f af4c 	bne.w	8011096 <jpeg_idct_10x10+0x186>
  }
}
 80111fe:	b057      	add	sp, #348	; 0x15c
 8011200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011204:	ffffba5c 	.word	0xffffba5c

08011208 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	b0e5      	sub	sp, #404	; 0x194
 801120e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011210:	f1a2 0a02 	sub.w	sl, r2, #2
 8011214:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011216:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801121a:	3380      	adds	r3, #128	; 0x80
 801121c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801121e:	1f0b      	subs	r3, r1, #4
 8011220:	9302      	str	r3, [sp, #8]
 8011222:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011226:	aa0c      	add	r2, sp, #48	; 0x30
 8011228:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801122a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801122c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011230:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011234:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011236:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801123a:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801123e:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011240:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011242:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011246:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011248:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801124c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8011250:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011252:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011254:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011258:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801125a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801125e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011260:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011264:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011266:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801126a:	eba4 0b06 	sub.w	fp, r4, r6
 801126e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011272:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8011276:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8011278:	1985      	adds	r5, r0, r6
    z4 -= z2;
 801127a:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801127c:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011280:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 8011284:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011286:	449c      	add	ip, r3
 8011288:	49d0      	ldr	r1, [pc, #832]	; (80115cc <jpeg_idct_11x11+0x3c4>)
 801128a:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801128e:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011292:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011294:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011298:	49cd      	ldr	r1, [pc, #820]	; (80115d0 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801129a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801129c:	fb01 3c00 	mla	ip, r1, r0, r3
 80112a0:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80112a4:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80112a8:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80112ac:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 80112ae:	49c9      	ldr	r1, [pc, #804]	; (80115d4 <jpeg_idct_11x11+0x3cc>)
 80112b0:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80112b4:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 80112b8:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80112bc:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80112c0:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80112c2:	49c5      	ldr	r1, [pc, #788]	; (80115d8 <jpeg_idct_11x11+0x3d0>)
 80112c4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80112c6:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80112ca:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80112ce:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80112d2:	1941      	adds	r1, r0, r5
 80112d4:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80112d6:	9902      	ldr	r1, [sp, #8]
 80112d8:	6a08      	ldr	r0, [r1, #32]
 80112da:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80112de:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80112e0:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80112e4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80112e6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 80112ea:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80112ee:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 80112f2:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 80112f4:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80112f8:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80112fc:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011300:	4435      	add	r5, r6
 8011302:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011304:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8011308:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801130a:	eb09 040c 	add.w	r4, r9, ip
 801130e:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011312:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011316:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801131a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801131e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011320:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011324:	44c6      	add	lr, r8
 8011326:	49ad      	ldr	r1, [pc, #692]	; (80115dc <jpeg_idct_11x11+0x3d4>)
 8011328:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 801132c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011330:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011334:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011338:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801133a:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801133e:	fb01 440c 	mla	r4, r1, ip, r4
 8011342:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011344:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011346:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011348:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801134a:	49a5      	ldr	r1, [pc, #660]	; (80115e0 <jpeg_idct_11x11+0x3d8>)
 801134c:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801134e:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8011352:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011354:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011358:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801135a:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801135c:	f242 000b 	movw	r0, #8203	; 0x200b
 8011360:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011364:	489f      	ldr	r0, [pc, #636]	; (80115e4 <jpeg_idct_11x11+0x3dc>)
 8011366:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801136a:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 801136e:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011372:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011376:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801137a:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801137c:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801137e:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011382:	ea4f 20ee 	mov.w	r0, lr, asr #11
 8011386:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801138a:	eb01 0009 	add.w	r0, r1, r9
 801138e:	12c0      	asrs	r0, r0, #11
 8011390:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011392:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011396:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011398:	12c0      	asrs	r0, r0, #11
 801139a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801139e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80113a0:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80113a2:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80113a4:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80113a6:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80113a8:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80113aa:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80113ae:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80113b2:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80113b6:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80113b8:	12c0      	asrs	r0, r0, #11
 80113ba:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80113bc:	ea4f 20e8 	mov.w	r0, r8, asr #11
 80113c0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80113c4:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80113c6:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80113c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80113ca:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80113cc:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80113ce:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80113d0:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80113d4:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80113d8:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 80113dc:	12db      	asrs	r3, r3, #11
 80113de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80113e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113e4:	4553      	cmp	r3, sl
 80113e6:	f47f af20 	bne.w	801122a <jpeg_idct_11x11+0x22>
 80113ea:	9b08      	ldr	r3, [sp, #32]
 80113ec:	3b04      	subs	r3, #4
 80113ee:	9303      	str	r3, [sp, #12]
 80113f0:	9b08      	ldr	r3, [sp, #32]
 80113f2:	3328      	adds	r3, #40	; 0x28
 80113f4:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 80113f6:	ab0c      	add	r3, sp, #48	; 0x30
 80113f8:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80113fa:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80113fc:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8011400:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011402:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8011406:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801140a:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 801140e:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8011410:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8011412:	9109      	str	r1, [sp, #36]	; 0x24
 8011414:	9303      	str	r3, [sp, #12]
 8011416:	460b      	mov	r3, r1
 8011418:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801141a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 801141c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 801141e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011420:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8011422:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011424:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011428:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801142c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801142e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011432:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011434:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011436:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 801143a:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 801143c:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 801143e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011440:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8011444:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011448:	eb0e 000c 	add.w	r0, lr, ip
 801144c:	4a5f      	ldr	r2, [pc, #380]	; (80115cc <jpeg_idct_11x11+0x3c4>)
 801144e:	4418      	add	r0, r3
 8011450:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011454:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8011458:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801145c:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801145e:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011462:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011464:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011466:	4a5a      	ldr	r2, [pc, #360]	; (80115d0 <jpeg_idct_11x11+0x3c8>)
 8011468:	fb02 3e04 	mla	lr, r2, r4, r3
 801146c:	eb0e 020c 	add.w	r2, lr, ip
 8011470:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8011472:	4a58      	ldr	r2, [pc, #352]	; (80115d4 <jpeg_idct_11x11+0x3cc>)
 8011474:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011478:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 801147c:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011480:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011484:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8011486:	4a54      	ldr	r2, [pc, #336]	; (80115d8 <jpeg_idct_11x11+0x3d0>)
 8011488:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801148a:	fb07 4406 	mla	r4, r7, r6, r4
 801148e:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011490:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011494:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8011496:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8011498:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 801149c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 801149e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 80114a2:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 80114a6:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80114aa:	4a4c      	ldr	r2, [pc, #304]	; (80115dc <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80114ac:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80114b0:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80114b4:	4466      	add	r6, ip
 80114b6:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80114b8:	f641 456a 	movw	r5, #7274	; 0x1c6a
 80114bc:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80114be:	eb07 0508 	add.w	r5, r7, r8
 80114c2:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80114c6:	f640 35b8 	movw	r5, #3000	; 0xbb8
 80114ca:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 80114ce:	eb04 050b 	add.w	r5, r4, fp
 80114d2:	444d      	add	r5, r9
 80114d4:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80114d8:	eb0e 0508 	add.w	r5, lr, r8
 80114dc:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 80114e0:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80114e4:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80114e6:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80114ea:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80114ee:	4a3c      	ldr	r2, [pc, #240]	; (80115e0 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80114f0:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80114f2:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80114f6:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80114f8:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80114fc:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80114fe:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8011500:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011502:	fb0b 440c 	mla	r4, fp, ip, r4
 8011506:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011508:	f242 040b 	movw	r4, #8203	; 0x200b
 801150c:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011510:	4c34      	ldr	r4, [pc, #208]	; (80115e4 <jpeg_idct_11x11+0x3dc>)
 8011512:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011516:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 801151a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801151e:	19d4      	adds	r4, r2, r7
 8011520:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011522:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011526:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011528:	5d14      	ldrb	r4, [r2, r4]
 801152a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801152c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801152e:	9a05      	ldr	r2, [sp, #20]
 8011530:	1bd0      	subs	r0, r2, r7
 8011532:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011534:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011538:	5c10      	ldrb	r0, [r2, r0]
 801153a:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801153c:	9a04      	ldr	r2, [sp, #16]
 801153e:	eb02 000a 	add.w	r0, r2, sl
 8011542:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011544:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011548:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801154a:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801154c:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801154e:	eba2 0a0a 	sub.w	sl, r2, sl
 8011552:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011554:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011558:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801155c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801155e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011560:	1950      	adds	r0, r2, r5
 8011562:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011564:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011568:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801156a:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801156c:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801156e:	1b55      	subs	r5, r2, r5
 8011570:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011572:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011576:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011578:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801157a:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801157c:	eb02 0009 	add.w	r0, r2, r9
 8011580:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011582:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011586:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011588:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801158a:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801158c:	eba2 0909 	sub.w	r9, r2, r9
 8011590:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011592:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011596:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801159a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801159c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801159e:	1990      	adds	r0, r2, r6
 80115a0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80115a2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80115a6:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115a8:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80115aa:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115ac:	1b96      	subs	r6, r2, r6
 80115ae:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80115b0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115b4:	5d90      	ldrb	r0, [r2, r6]
 80115b6:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80115b8:	f645 00ad 	movw	r0, #22701	; 0x58ad
 80115bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115be:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80115c2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80115c4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80115c8:	5cd3      	ldrb	r3, [r2, r3]
 80115ca:	e00d      	b.n	80115e8 <jpeg_idct_11x11+0x3e0>
 80115cc:	ffffc5b4 	.word	0xffffc5b4
 80115d0:	ffffcf91 	.word	0xffffcf91
 80115d4:	ffffdb05 	.word	0xffffdb05
 80115d8:	ffffd37d 	.word	0xffffd37d
 80115dc:	ffffe276 	.word	0xffffe276
 80115e0:	ffffc675 	.word	0xffffc675
 80115e4:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 80115e8:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80115ea:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 80115ec:	9b02      	ldr	r3, [sp, #8]
 80115ee:	3320      	adds	r3, #32
 80115f0:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 80115f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115f4:	4293      	cmp	r3, r2
 80115f6:	f47f af00 	bne.w	80113fa <jpeg_idct_11x11+0x1f2>
  }
}
 80115fa:	b065      	add	sp, #404	; 0x194
 80115fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011600 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	b0eb      	sub	sp, #428	; 0x1ac
 8011606:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011608:	f1a2 0902 	sub.w	r9, r2, #2
 801160c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801160e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011612:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011616:	1f0b      	subs	r3, r1, #4
 8011618:	9300      	str	r3, [sp, #0]
 801161a:	f102 030e 	add.w	r3, r2, #14
 801161e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8011620:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011622:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011624:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011628:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801162c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011630:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011634:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011636:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801163a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801163c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011640:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011644:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011646:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801164a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801164c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801164e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011650:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011652:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011656:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801165a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801165c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011660:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011664:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8011666:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8011668:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801166a:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 801166e:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8011672:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8011674:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 8011678:	eb07 010c 	add.w	r1, r7, ip
 801167c:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 801167e:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8011682:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 8011684:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8011688:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 801168a:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 801168c:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801168e:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8011692:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8011694:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011696:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801169a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801169c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801169e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116a0:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116a4:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 80116a8:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80116aa:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80116ac:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80116ae:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80116b2:	6a12      	ldr	r2, [r2, #32]
 80116b4:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80116b6:	9a00      	ldr	r2, [sp, #0]
 80116b8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80116ba:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116be:	9a00      	ldr	r2, [sp, #0]
 80116c0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80116c4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80116c8:	49b6      	ldr	r1, [pc, #728]	; (80119a4 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116ca:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116cc:	9a00      	ldr	r2, [sp, #0]
 80116ce:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 80116d2:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116d4:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80116d6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80116da:	49b3      	ldr	r1, [pc, #716]	; (80119a8 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80116dc:	eb02 0e06 	add.w	lr, r2, r6
 80116e0:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80116e4:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80116e8:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80116ec:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80116f0:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80116f4:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80116f8:	18ae      	adds	r6, r5, r2
 80116fa:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80116fc:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80116fe:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011700:	49aa      	ldr	r1, [pc, #680]	; (80119ac <jpeg_idct_12x12+0x3ac>)
 8011702:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011706:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8011708:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801170c:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011710:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011712:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8011716:	fb0a 4402 	mla	r4, sl, r2, r4
 801171a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801171c:	49a4      	ldr	r1, [pc, #656]	; (80119b0 <jpeg_idct_12x12+0x3b0>)
 801171e:	fb01 0007 	mla	r0, r1, r7, r0
 8011722:	49a4      	ldr	r1, [pc, #656]	; (80119b4 <jpeg_idct_12x12+0x3b4>)
 8011724:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8011728:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801172a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801172e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011732:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011734:	eb02 0e05 	add.w	lr, r2, r5
 8011738:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801173c:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011740:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011742:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011746:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801174a:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801174e:	12ff      	asrs	r7, r7, #11
 8011750:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011754:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011758:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801175a:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801175e:	188f      	adds	r7, r1, r2
 8011760:	12ff      	asrs	r7, r7, #11
 8011762:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011764:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011766:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011768:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801176a:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801176c:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011770:	12d2      	asrs	r2, r2, #11
 8011772:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011774:	9a05      	ldr	r2, [sp, #20]
 8011776:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011778:	9a06      	ldr	r2, [sp, #24]
 801177a:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801177c:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801177e:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011780:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011784:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011786:	9a06      	ldr	r2, [sp, #24]
 8011788:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801178a:	9a02      	ldr	r2, [sp, #8]
 801178c:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801178e:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011790:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011792:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011796:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011798:	9a02      	ldr	r2, [sp, #8]
 801179a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801179c:	9a04      	ldr	r2, [sp, #16]
 801179e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80117a0:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80117a2:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80117a4:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80117a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80117ac:	9a04      	ldr	r2, [sp, #16]
 80117ae:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80117b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80117b2:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80117b4:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80117b6:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80117ba:	f47f af32 	bne.w	8011622 <jpeg_idct_12x12+0x22>
 80117be:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80117c0:	aa0a      	add	r2, sp, #40	; 0x28
 80117c2:	f1a3 0a04 	sub.w	sl, r3, #4
 80117c6:	332c      	adds	r3, #44	; 0x2c
 80117c8:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80117ca:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80117ce:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 80117d2:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80117d4:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 80117d6:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 80117da:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 80117de:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 80117e0:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117e2:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 80117e6:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 80117e8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 80117ec:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117f0:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 80117f2:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80117f4:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80117f8:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80117fc:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80117fe:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8011802:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8011806:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801180a:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801180c:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8011810:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8011814:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8011818:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801181c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 801181e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8011820:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011824:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8011828:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 801182c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 801182e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 8011830:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 8011834:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011836:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 8011838:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801183c:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801183e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011842:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011846:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801184a:	4956      	ldr	r1, [pc, #344]	; (80119a4 <jpeg_idct_12x12+0x3a4>)
 801184c:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 801184e:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011852:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011854:	eb04 0c06 	add.w	ip, r4, r6
 8011858:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801185c:	f640 0e5b 	movw	lr, #2139	; 0x85b
 8011860:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011864:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011868:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801186c:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011870:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011874:	4b4c      	ldr	r3, [pc, #304]	; (80119a8 <jpeg_idct_12x12+0x3a8>)
 8011876:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801187a:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 801187e:	eb01 0609 	add.w	r6, r1, r9
 8011882:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011886:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801188a:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801188c:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8011890:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011894:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011898:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801189a:	4845      	ldr	r0, [pc, #276]	; (80119b0 <jpeg_idct_12x12+0x3b0>)
 801189c:	fb00 1103 	mla	r1, r0, r3, r1
 80118a0:	4b44      	ldr	r3, [pc, #272]	; (80119b4 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80118a2:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80118a4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 80118a8:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80118ac:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 80118ae:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80118b2:	4461      	add	r1, ip
    z2 -= z3;
 80118b4:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80118b6:	4b40      	ldr	r3, [pc, #256]	; (80119b8 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80118b8:	eb04 0c05 	add.w	ip, r4, r5
 80118bc:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80118c0:	f641 087e 	movw	r8, #6270	; 0x187e
 80118c4:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80118c8:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80118cc:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80118d0:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 80118d4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80118d8:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80118da:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80118de:	f81b c008 	ldrb.w	ip, [fp, r8]
 80118e2:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80118e6:	9b00      	ldr	r3, [sp, #0]
 80118e8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80118ec:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80118ee:	9b01      	ldr	r3, [sp, #4]
 80118f0:	191f      	adds	r7, r3, r4
 80118f2:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80118f4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80118f8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80118fc:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8011904:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011908:	f81b 4008 	ldrb.w	r4, [fp, r8]
 801190c:	9b00      	ldr	r3, [sp, #0]
 801190e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011910:	9b04      	ldr	r3, [sp, #16]
 8011912:	199c      	adds	r4, r3, r6
 8011914:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011916:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801191a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801191e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011920:	9b04      	ldr	r3, [sp, #16]
 8011922:	1b9e      	subs	r6, r3, r6
 8011924:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011926:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801192a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 801192e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011930:	9b05      	ldr	r3, [sp, #20]
 8011932:	eb03 0409 	add.w	r4, r3, r9
 8011936:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011938:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801193c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011940:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011942:	9b05      	ldr	r3, [sp, #20]
 8011944:	eba3 0009 	sub.w	r0, r3, r9
 8011948:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801194a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801194e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011952:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011954:	9b02      	ldr	r3, [sp, #8]
 8011956:	1958      	adds	r0, r3, r5
 8011958:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801195a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801195e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011962:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011964:	9b02      	ldr	r3, [sp, #8]
 8011966:	1b5d      	subs	r5, r3, r5
 8011968:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801196a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801196e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8011972:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011974:	9b03      	ldr	r3, [sp, #12]
 8011976:	1858      	adds	r0, r3, r1
 8011978:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801197a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801197e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011982:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011984:	9b03      	ldr	r3, [sp, #12]
 8011986:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011988:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801198c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011990:	9b00      	ldr	r3, [sp, #0]
 8011992:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011994:	9b07      	ldr	r3, [sp, #28]
 8011996:	4553      	cmp	r3, sl
 8011998:	f47f af17 	bne.w	80117ca <jpeg_idct_12x12+0x1ca>
  }
}
 801199c:	b06b      	add	sp, #428	; 0x1ac
 801199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a2:	bf00      	nop
 80119a4:	ffffeeaf 	.word	0xffffeeaf
 80119a8:	ffffde8b 	.word	0xffffde8b
 80119ac:	ffffd0b0 	.word	0xffffd0b0
 80119b0:	ffffea5c 	.word	0xffffea5c
 80119b4:	ffffc08c 	.word	0xffffc08c
 80119b8:	ffffc4df 	.word	0xffffc4df

080119bc <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	b0f9      	sub	sp, #484	; 0x1e4
 80119c2:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 80119c4:	f1a2 0b02 	sub.w	fp, r2, #2
 80119c8:	930c      	str	r3, [sp, #48]	; 0x30
 80119ca:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80119cc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80119d0:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80119d4:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80119d8:	aa10      	add	r2, sp, #64	; 0x40
 80119da:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119dc:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80119e0:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119e4:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80119e8:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119ec:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80119f0:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119f2:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119f4:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80119f8:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 80119fc:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80119fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a02:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a06:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a0c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011a12:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8011a14:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8011a16:	1a09      	subs	r1, r1, r0
 8011a18:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011a1a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011a1e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011a20:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8011a24:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011a28:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011a2c:	fb00 5004 	mla	r0, r0, r4, r5
 8011a30:	4408      	add	r0, r1
 8011a32:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011a34:	f241 000c 	movw	r0, #4108	; 0x100c
 8011a38:	4360      	muls	r0, r4
 8011a3a:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011a3c:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011a40:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011a42:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011a46:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011a4a:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011a4c:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011a50:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011a52:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011a54:	1a2d      	subs	r5, r5, r0
 8011a56:	440d      	add	r5, r1
 8011a58:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011a5a:	4dd0      	ldr	r5, [pc, #832]	; (8011d9c <jpeg_idct_13x13+0x3e0>)
 8011a5c:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011a60:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011a64:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011a66:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011a68:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011a6a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011a6e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011a70:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011a74:	4371      	muls	r1, r6
 8011a76:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011a78:	48c9      	ldr	r0, [pc, #804]	; (8011da0 <jpeg_idct_13x13+0x3e4>)
 8011a7a:	4360      	muls	r0, r4
 8011a7c:	1ac0      	subs	r0, r0, r3
 8011a7e:	1a40      	subs	r0, r0, r1
 8011a80:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011a82:	48c8      	ldr	r0, [pc, #800]	; (8011da4 <jpeg_idct_13x13+0x3e8>)
 8011a84:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011a88:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011a8c:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a8e:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011a92:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a94:	6a3b      	ldr	r3, [r7, #32]
 8011a96:	434b      	muls	r3, r1
 8011a98:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011a9c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011a9e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011aa0:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8011aa4:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011aa6:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011aaa:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011aac:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011aae:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8011ab2:	4368      	muls	r0, r5
 8011ab4:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011ab6:	f642 2050 	movw	r0, #10832	; 0x2a50
 8011aba:	4370      	muls	r0, r6
 8011abc:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011abe:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8011ac2:	4428      	add	r0, r5
 8011ac4:	f242 553e 	movw	r5, #9534	; 0x253e
 8011ac8:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011aca:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ace:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8011ad2:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ad6:	48b4      	ldr	r0, [pc, #720]	; (8011da8 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011ad8:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011adc:	44d6      	add	lr, sl
 8011ade:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011ae2:	9801      	ldr	r0, [sp, #4]
 8011ae4:	4eb1      	ldr	r6, [pc, #708]	; (8011dac <jpeg_idct_13x13+0x3f0>)
 8011ae6:	1818      	adds	r0, r3, r0
 8011ae8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011aea:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011aee:	fb06 0603 	mla	r6, r6, r3, r0
 8011af2:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011af4:	4eae      	ldr	r6, [pc, #696]	; (8011db0 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011af6:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011af8:	9901      	ldr	r1, [sp, #4]
 8011afa:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 8011afe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011b00:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b02:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011b06:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011b08:	9903      	ldr	r1, [sp, #12]
 8011b0a:	185d      	adds	r5, r3, r1
 8011b0c:	49a9      	ldr	r1, [pc, #676]	; (8011db4 <jpeg_idct_13x13+0x3f8>)
 8011b0e:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b10:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8011b12:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b14:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011b18:	9901      	ldr	r1, [sp, #4]
 8011b1a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b1c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011b1e:	eb01 0a00 	add.w	sl, r1, r0
 8011b22:	49a5      	ldr	r1, [pc, #660]	; (8011db8 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8011b24:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011b26:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011b2a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 8011b2c:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011b2e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011b30:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011b34:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011b38:	f640 2533 	movw	r5, #2611	; 0xa33
 8011b3c:	fb05 9101 	mla	r1, r5, r1, r9
 8011b40:	4d9e      	ldr	r5, [pc, #632]	; (8011dbc <jpeg_idct_13x13+0x400>)
 8011b42:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011b46:	9d01      	ldr	r5, [sp, #4]
 8011b48:	1aeb      	subs	r3, r5, r3
 8011b4a:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011b4e:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011b52:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011b54:	fb03 8805 	mla	r8, r3, r5, r8
 8011b58:	9d03      	ldr	r5, [sp, #12]
 8011b5a:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 8011b5e:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011b62:	9b06      	ldr	r3, [sp, #24]
 8011b64:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011b66:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011b68:	12db      	asrs	r3, r3, #11
 8011b6a:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011b6e:	9b06      	ldr	r3, [sp, #24]
 8011b70:	eba3 0e0e 	sub.w	lr, r3, lr
 8011b74:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8011b78:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011b7c:	9b08      	ldr	r3, [sp, #32]
 8011b7e:	4433      	add	r3, r6
 8011b80:	12db      	asrs	r3, r3, #11
 8011b82:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011b84:	9b08      	ldr	r3, [sp, #32]
 8011b86:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011b88:	9b07      	ldr	r3, [sp, #28]
 8011b8a:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011b8c:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011b8e:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011b90:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011b94:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011b96:	9b07      	ldr	r3, [sp, #28]
 8011b98:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b9c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011b9e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ba0:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011ba2:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ba6:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011baa:	eba3 0a0a 	sub.w	sl, r3, sl
 8011bae:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8011bb2:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bb8:	440b      	add	r3, r1
 8011bba:	12db      	asrs	r3, r3, #11
 8011bbc:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bc0:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bc4:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011bc6:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011bc8:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011bca:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011bce:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011bd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd6:	eba3 0909 	sub.w	r9, r3, r9
 8011bda:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8011bde:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011be2:	9b04      	ldr	r3, [sp, #16]
 8011be4:	1b1c      	subs	r4, r3, r4
 8011be6:	f642 5341 	movw	r3, #11585	; 0x2d41
 8011bea:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011bf0:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011bf2:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011bf4:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011bf8:	f47f aef0 	bne.w	80119dc <jpeg_idct_13x13+0x20>
 8011bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8011bfe:	ac10      	add	r4, sp, #64	; 0x40
 8011c00:	3b04      	subs	r3, #4
 8011c02:	9303      	str	r3, [sp, #12]
 8011c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c06:	3330      	adds	r3, #48	; 0x30
 8011c08:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011c0a:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011c0c:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011c10:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011c12:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8011c16:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011c1a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 8011c1e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011c20:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011c22:	920b      	str	r2, [sp, #44]	; 0x2c
 8011c24:	9303      	str	r3, [sp, #12]
 8011c26:	4613      	mov	r3, r2
 8011c28:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 8011c2a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8011c2e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011c30:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8011c34:	3310      	adds	r3, #16
 8011c36:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8011c38:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8011c3a:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011c3c:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8011c3e:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011c40:	f240 3119 	movw	r1, #793	; 0x319
 8011c44:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011c46:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011c48:	4341      	muls	r1, r0
 8011c4a:	9802      	ldr	r0, [sp, #8]
 8011c4c:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011c50:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011c54:	fb00 500e 	mla	r0, r0, lr, r5
 8011c58:	4408      	add	r0, r1
 8011c5a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011c5c:	f241 000c 	movw	r0, #4108	; 0x100c
 8011c60:	fb00 f00e 	mul.w	r0, r0, lr
 8011c64:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011c66:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011c6a:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011c6c:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011c70:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011c74:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011c76:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011c7a:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011c7e:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011c80:	1a2d      	subs	r5, r5, r0
 8011c82:	440d      	add	r5, r1
 8011c84:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011c86:	4d45      	ldr	r5, [pc, #276]	; (8011d9c <jpeg_idct_13x13+0x3e0>)
 8011c88:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011c8c:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011c90:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011c92:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011c94:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011c96:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011c9a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011c9c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011ca0:	4371      	muls	r1, r6
 8011ca2:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011ca6:	483e      	ldr	r0, [pc, #248]	; (8011da0 <jpeg_idct_13x13+0x3e4>)
 8011ca8:	fb00 f00e 	mul.w	r0, r0, lr
 8011cac:	1ac0      	subs	r0, r0, r3
 8011cae:	1a40      	subs	r0, r0, r1
 8011cb0:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011cb2:	483c      	ldr	r0, [pc, #240]	; (8011da4 <jpeg_idct_13x13+0x3e8>)
 8011cb4:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011cb8:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011cbc:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8011cbe:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011cc2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011cc4:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8011cc6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011cca:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011ccc:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011cd0:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8011cd2:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011cd6:	4834      	ldr	r0, [pc, #208]	; (8011da8 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011cd8:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011cdc:	4e33      	ldr	r6, [pc, #204]	; (8011dac <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011cde:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ce2:	eb0b 0705 	add.w	r7, fp, r5
 8011ce6:	4457      	add	r7, sl
 8011ce8:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011cec:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011cf0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011cf2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8011cf6:	1818      	adds	r0, r3, r0
 8011cf8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011cfa:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011cfe:	fb06 0603 	mla	r6, r6, r3, r0
 8011d02:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011d04:	4e2a      	ldr	r6, [pc, #168]	; (8011db0 <jpeg_idct_13x13+0x3f4>)
 8011d06:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011d0a:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d0e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011d12:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011d14:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011d18:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011d1a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011d1c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 8011d1e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d22:	f244 6b94 	movw	fp, #18068	; 0x4694
 8011d26:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d2a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 8011d2e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d32:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d34:	eb07 0a00 	add.w	sl, r7, r0
 8011d38:	481f      	ldr	r0, [pc, #124]	; (8011db8 <jpeg_idct_13x13+0x3fc>)
 8011d3a:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 8011d3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d40:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011d42:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011d44:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011d48:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011d4c:	f640 2533 	movw	r5, #2611	; 0xa33
 8011d50:	fb05 9101 	mla	r1, r5, r1, r9
 8011d54:	4d19      	ldr	r5, [pc, #100]	; (8011dbc <jpeg_idct_13x13+0x400>)
 8011d56:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011d5a:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d5c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011d60:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d64:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011d68:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d6a:	fb03 8807 	mla	r8, r3, r7, r8
 8011d6e:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011d72:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d74:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011d78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011d7a:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d7c:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011d7e:	442b      	add	r3, r5
 8011d80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8011d82:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011d86:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011d8a:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011d90:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8011d92:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011d96:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8011d9a:	e011      	b.n	8011dc0 <jpeg_idct_13x13+0x404>
 8011d9c:	ffffd7ee 	.word	0xffffd7ee
 8011da0:	fffffa8c 	.word	0xfffffa8c
 8011da4:	ffffe64b 	.word	0xffffe64b
 8011da8:	ffffbf5b 	.word	0xffffbf5b
 8011dac:	fffff52b 	.word	0xfffff52b
 8011db0:	ffffcdb1 	.word	0xffffcdb1
 8011db4:	ffffdac2 	.word	0xffffdac2
 8011db8:	ffffeaf8 	.word	0xffffeaf8
 8011dbc:	fffff116 	.word	0xfffff116
 8011dc0:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011dc2:	9b06      	ldr	r3, [sp, #24]
 8011dc4:	4433      	add	r3, r6
			     & RANGE_MASK];
 8011dc6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011dca:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011dce:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011dd0:	9b06      	ldr	r3, [sp, #24]
 8011dd2:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8011dd4:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011dd8:	f81c 3006 	ldrb.w	r3, [ip, r6]
 8011ddc:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011dde:	9b05      	ldr	r3, [sp, #20]
 8011de0:	4403      	add	r3, r0
			     & RANGE_MASK];
 8011de2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011de6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011dea:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011dec:	9b05      	ldr	r3, [sp, #20]
 8011dee:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8011df0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011df4:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8011df8:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011dfa:	9b08      	ldr	r3, [sp, #32]
 8011dfc:	4453      	add	r3, sl
			     & RANGE_MASK];
 8011dfe:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011e02:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011e06:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e08:	9b08      	ldr	r3, [sp, #32]
 8011e0a:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8011e0e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e12:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8011e16:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e1a:	440b      	add	r3, r1
			     & RANGE_MASK];
 8011e1c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e20:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011e24:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e28:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011e2a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e2e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011e32:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e36:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011e38:	9b07      	ldr	r3, [sp, #28]
 8011e3a:	444b      	add	r3, r9
			     & RANGE_MASK];
 8011e3c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011e40:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011e44:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011e46:	9b07      	ldr	r3, [sp, #28]
 8011e48:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 8011e4c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011e50:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011e54:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011e56:	9b01      	ldr	r3, [sp, #4]
 8011e58:	eba3 030e 	sub.w	r3, r3, lr
 8011e5c:	434b      	muls	r3, r1
 8011e5e:	9902      	ldr	r1, [sp, #8]
 8011e60:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8011e64:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8011e68:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011e6c:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8011e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e70:	9a03      	ldr	r2, [sp, #12]
 8011e72:	4293      	cmp	r3, r2
 8011e74:	f47f aec9 	bne.w	8011c0a <jpeg_idct_13x13+0x24e>
  }
}
 8011e78:	b079      	add	sp, #484	; 0x1e4
 8011e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e7e:	bf00      	nop

08011e80 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e84:	b0ff      	sub	sp, #508	; 0x1fc
 8011e86:	f1a2 0a02 	sub.w	sl, r2, #2
 8011e8a:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011e8c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011e90:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011e92:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011e96:	1f03      	subs	r3, r0, #4
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	f102 030e 	add.w	r3, r2, #14
 8011e9e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8011ea0:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ea2:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011ea4:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ea8:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011eac:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011eb0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011eb4:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011eb6:	9101      	str	r1, [sp, #4]
 8011eb8:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011eba:	9a01      	ldr	r2, [sp, #4]
 8011ebc:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 8011ec0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8011ec4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011ec6:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ec8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011eca:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011ece:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011ed2:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011ed6:	f640 2112 	movw	r1, #2578	; 0xa12
 8011eda:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011ede:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8011ee2:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011ee4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011ee6:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8011ee8:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011eec:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011ef0:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 8011ef2:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011ef4:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ef8:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011efc:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011f00:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011f02:	9a01      	ldr	r2, [sp, #4]
 8011f04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011f06:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011f08:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011f0c:	48d2      	ldr	r0, [pc, #840]	; (8012258 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011f0e:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011f10:	1916      	adds	r6, r2, r4
 8011f12:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011f16:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8011f1a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011f1e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011f22:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011f26:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8011f28:	eb07 000c 	add.w	r0, r7, ip
 8011f2c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8011f2e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011f32:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f36:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 8011f3a:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8011f3c:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f3e:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8011f42:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8011f44:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f46:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8011f4a:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8011f4c:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8011f4e:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011f50:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8011f54:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8011f56:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f58:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011f5a:	48c0      	ldr	r0, [pc, #768]	; (801225c <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f5c:	6a12      	ldr	r2, [r2, #32]
 8011f5e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f60:	9a01      	ldr	r2, [sp, #4]
 8011f62:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011f64:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f66:	9a01      	ldr	r2, [sp, #4]
 8011f68:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011f6c:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f70:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011f72:	9a01      	ldr	r2, [sp, #4]
 8011f74:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8011f78:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011f7c:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011f7e:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8011f82:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011f86:	f242 6152 	movw	r1, #9810	; 0x2652
 8011f8a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011f8e:	49b4      	ldr	r1, [pc, #720]	; (8012260 <jpeg_idct_14x14+0x3e0>)
 8011f90:	eb09 0e05 	add.w	lr, r9, r5
 8011f94:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8011f98:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011f9c:	f641 0114 	movw	r1, #6164	; 0x1814
 8011fa0:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011fa4:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011fa8:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011faa:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 8011fae:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011fb0:	48ac      	ldr	r0, [pc, #688]	; (8012264 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011fb2:	fb08 f804 	mul.w	r8, r8, r4
 8011fb6:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8011fba:	4441      	add	r1, r8
 8011fbc:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011fbe:	19b9      	adds	r1, r7, r6
 8011fc0:	fb0c f101 	mul.w	r1, ip, r1
 8011fc4:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011fc8:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011fcc:	48a6      	ldr	r0, [pc, #664]	; (8012268 <jpeg_idct_14x14+0x3e8>)
 8011fce:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011fd2:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011fd4:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011fd8:	48a4      	ldr	r0, [pc, #656]	; (801226c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011fda:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011fdc:	1bf5      	subs	r5, r6, r7
 8011fde:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011fe2:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8011fe6:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011fe8:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 8011fec:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011fee:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8011ff0:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ff2:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011ff4:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ff6:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011ff8:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011ffc:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011ffe:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012002:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012006:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012008:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801200a:	eba2 0e0e 	sub.w	lr, r2, lr
 801200e:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8012012:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012016:	9a04      	ldr	r2, [sp, #16]
 8012018:	444a      	add	r2, r9
 801201a:	12d2      	asrs	r2, r2, #11
 801201c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801201e:	9a04      	ldr	r2, [sp, #16]
 8012020:	eba2 0909 	sub.w	r9, r2, r9
 8012024:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8012028:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801202c:	9a06      	ldr	r2, [sp, #24]
 801202e:	440a      	add	r2, r1
 8012030:	12d2      	asrs	r2, r2, #11
 8012032:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012034:	9a06      	ldr	r2, [sp, #24]
 8012036:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801203a:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801203e:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012040:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012044:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012048:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801204c:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801204e:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012050:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012052:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012056:	12d2      	asrs	r2, r2, #11
 8012058:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801205a:	9a07      	ldr	r2, [sp, #28]
 801205c:	eba2 0c0c 	sub.w	ip, r2, ip
 8012060:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8012064:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012068:	9a05      	ldr	r2, [sp, #20]
 801206a:	442a      	add	r2, r5
 801206c:	12d2      	asrs	r2, r2, #11
 801206e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012072:	9a05      	ldr	r2, [sp, #20]
 8012074:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012076:	9a03      	ldr	r2, [sp, #12]
 8012078:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801207a:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801207c:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801207e:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012082:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012086:	9a03      	ldr	r2, [sp, #12]
 8012088:	1a52      	subs	r2, r2, r1
 801208a:	12d2      	asrs	r2, r2, #11
 801208c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012092:	4552      	cmp	r2, sl
 8012094:	f47f af05 	bne.w	8011ea2 <jpeg_idct_14x14+0x22>
 8012098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801209a:	3b04      	subs	r3, #4
 801209c:	9302      	str	r3, [sp, #8]
 801209e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120a0:	3334      	adds	r3, #52	; 0x34
 80120a2:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 80120a4:	ab0e      	add	r3, sp, #56	; 0x38
 80120a6:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80120a8:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80120aa:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80120ae:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80120b2:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 80120b6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80120ba:	920c      	str	r2, [sp, #48]	; 0x30
 80120bc:	9302      	str	r3, [sp, #8]
 80120be:	4613      	mov	r3, r2
 80120c0:	9a88      	ldr	r2, [sp, #544]	; 0x220
 80120c2:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80120c4:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 80120c6:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80120c8:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80120ca:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80120ce:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80120d2:	4861      	ldr	r0, [pc, #388]	; (8012258 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80120d4:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80120d6:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80120d8:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 80120da:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80120de:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 80120e0:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80120e4:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 80120e6:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80120ea:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80120ee:	005b      	lsls	r3, r3, #1
 80120f0:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 80120f4:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 80120f6:	9b01      	ldr	r3, [sp, #4]
 80120f8:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 80120fa:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80120fc:	18f1      	adds	r1, r6, r3
 80120fe:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012100:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8012104:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012108:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801210c:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8012110:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8012112:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012116:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 801211a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 801211e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8012120:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8012122:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012124:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8012128:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 801212a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 801212c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 801212e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012130:	484a      	ldr	r0, [pc, #296]	; (801225c <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8012132:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8012134:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8012136:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8012138:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 801213a:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 801213e:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8012140:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8012144:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012148:	eb03 0a08 	add.w	sl, r3, r8
 801214c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8012150:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012154:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012158:	f242 6152 	movw	r1, #9810	; 0x2652
 801215c:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012160:	493f      	ldr	r1, [pc, #252]	; (8012260 <jpeg_idct_14x14+0x3e0>)
 8012162:	eb0a 0704 	add.w	r7, sl, r4
 8012166:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801216a:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801216e:	f641 0114 	movw	r1, #6164	; 0x1814
 8012172:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012174:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012178:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801217a:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 801217e:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012182:	4838      	ldr	r0, [pc, #224]	; (8012264 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012184:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012188:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801218c:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012190:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8012192:	4471      	add	r1, lr
 8012194:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012196:	eb08 010c 	add.w	r1, r8, ip
 801219a:	4369      	muls	r1, r5
 801219c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80121a0:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80121a4:	4830      	ldr	r0, [pc, #192]	; (8012268 <jpeg_idct_14x14+0x3e8>)
 80121a6:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80121aa:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80121ac:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121b0:	482e      	ldr	r0, [pc, #184]	; (801226c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80121b2:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80121b4:	ebac 0408 	sub.w	r4, ip, r8
 80121b8:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80121ba:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80121bc:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121c0:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80121c4:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80121c8:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121ca:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80121ce:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121d0:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80121d2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80121d6:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80121da:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121de:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80121e0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80121e4:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80121e6:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80121e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80121ea:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80121ec:	f81b 3006 	ldrb.w	r3, [fp, r6]
 80121f0:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80121f2:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80121f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80121f6:	4453      	add	r3, sl
			     & RANGE_MASK];
 80121f8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80121fc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012200:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012202:	9b05      	ldr	r3, [sp, #20]
 8012204:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8012208:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801220c:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8012210:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012212:	9b07      	ldr	r3, [sp, #28]
 8012214:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012216:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801221a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801221e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012220:	9b07      	ldr	r3, [sp, #28]
 8012222:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012224:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012228:	f81b 3001 	ldrb.w	r3, [fp, r1]
 801222c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012232:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012236:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801223a:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801223c:	9b03      	ldr	r3, [sp, #12]
 801223e:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012242:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012246:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801224a:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801224c:	9b08      	ldr	r3, [sp, #32]
 801224e:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012250:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8012254:	e00c      	b.n	8012270 <jpeg_idct_14x14+0x3f0>
 8012256:	bf00      	nop
 8012258:	ffffc8fc 	.word	0xffffc8fc
 801225c:	ffffde0b 	.word	0xffffde0b
 8012260:	ffffdbf0 	.word	0xffffdbf0
 8012264:	fffff26e 	.word	0xfffff26e
 8012268:	ffffb409 	.word	0xffffb409
 801226c:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012270:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012274:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012276:	9b08      	ldr	r3, [sp, #32]
 8012278:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801227a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801227e:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8012282:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012284:	9b06      	ldr	r3, [sp, #24]
 8012286:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012288:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801228c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012290:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012292:	9b06      	ldr	r3, [sp, #24]
 8012294:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012296:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801229a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 801229e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80122a0:	9b04      	ldr	r3, [sp, #16]
 80122a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80122a4:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122a6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80122aa:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80122ae:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80122b0:	9b04      	ldr	r3, [sp, #16]
 80122b2:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122b4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80122b8:	f81b 3001 	ldrb.w	r3, [fp, r1]
 80122bc:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 80122be:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80122c0:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 80122c2:	3320      	adds	r3, #32
 80122c4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80122c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122c8:	4293      	cmp	r3, r2
 80122ca:	f47f aeed 	bne.w	80120a8 <jpeg_idct_14x14+0x228>
  }
}
 80122ce:	b07f      	add	sp, #508	; 0x1fc
 80122d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122d4 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80122d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80122dc:	f1a2 0b02 	sub.w	fp, r2, #2
 80122e0:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80122e2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80122e6:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80122e8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80122ec:	1f03      	subs	r3, r0, #4
 80122ee:	9300      	str	r3, [sp, #0]
 80122f0:	f102 030e 	add.w	r3, r2, #14
 80122f4:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 80122f6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80122f8:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80122fa:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80122fe:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012302:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012306:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801230a:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801230e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012312:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012314:	9100      	str	r1, [sp, #0]
 8012316:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012318:	9a00      	ldr	r2, [sp, #0]
 801231a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 801231e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8012320:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012322:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012324:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012326:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012328:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801232c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012330:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012334:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012336:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801233a:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801233e:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012340:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012344:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012348:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801234c:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 801234e:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8012352:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012354:	eba4 040c 	sub.w	r4, r4, ip
 8012358:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 801235c:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 801235e:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012360:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012364:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012366:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801236a:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 801236e:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012372:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012376:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8012378:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801237c:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801237e:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8012382:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012384:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012386:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801238a:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801238e:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012390:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8012392:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012396:	443c      	add	r4, r7
 8012398:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801239c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80123a0:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80123a4:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 80123a6:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80123a8:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80123aa:	f641 114c 	movw	r1, #6476	; 0x194c
 80123ae:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80123b0:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80123b4:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80123b6:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 80123b8:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80123ba:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 80123be:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 80123c0:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 80123c2:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80123c4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80123c6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80123ca:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80123cc:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 80123d0:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80123d2:	9908      	ldr	r1, [sp, #32]
 80123d4:	9a01      	ldr	r2, [sp, #4]
 80123d6:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80123d8:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80123dc:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80123de:	9a00      	ldr	r2, [sp, #0]
 80123e0:	6a12      	ldr	r2, [r2, #32]
 80123e2:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80123e4:	9900      	ldr	r1, [sp, #0]
 80123e6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80123e8:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80123ea:	9900      	ldr	r1, [sp, #0]
 80123ec:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80123f0:	9800      	ldr	r0, [sp, #0]
 80123f2:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80123f6:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80123f8:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80123fc:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012400:	48d2      	ldr	r0, [pc, #840]	; (801274c <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012402:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012406:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8012408:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801240c:	1917      	adds	r7, r2, r4
 801240e:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8012412:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012416:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801241a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801241e:	48cc      	ldr	r0, [pc, #816]	; (8012750 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012420:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012424:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012426:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801242a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801242c:	48c9      	ldr	r0, [pc, #804]	; (8012754 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801242e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012432:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012436:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801243a:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801243c:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012440:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012444:	fb00 4402 	mla	r4, r0, r2, r4
 8012448:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801244a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801244e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012450:	f241 2068 	movw	r0, #4712	; 0x1268
 8012454:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012456:	f640 7039 	movw	r0, #3897	; 0xf39
 801245a:	fb00 1202 	mla	r2, r0, r2, r1
 801245e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012460:	1b92      	subs	r2, r2, r6
 8012462:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012464:	48bc      	ldr	r0, [pc, #752]	; (8012758 <jpeg_idct_15x15+0x484>)
 8012466:	fb00 110e 	mla	r1, r0, lr, r1
 801246a:	4431      	add	r1, r6
 801246c:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801246e:	9902      	ldr	r1, [sp, #8]
 8012470:	4441      	add	r1, r8
 8012472:	12c9      	asrs	r1, r1, #11
 8012474:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012478:	9902      	ldr	r1, [sp, #8]
 801247a:	eba1 0808 	sub.w	r8, r1, r8
 801247e:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8012482:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012486:	9906      	ldr	r1, [sp, #24]
 8012488:	4449      	add	r1, r9
 801248a:	12c9      	asrs	r1, r1, #11
 801248c:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801248e:	9906      	ldr	r1, [sp, #24]
 8012490:	eba1 0909 	sub.w	r9, r1, r9
 8012494:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8012498:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801249c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801249e:	4461      	add	r1, ip
 80124a0:	12c9      	asrs	r1, r1, #11
 80124a2:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80124a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124a6:	eba1 0c0c 	sub.w	ip, r1, ip
 80124aa:	ea4f 21ec 	mov.w	r1, ip, asr #11
 80124ae:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80124b2:	9903      	ldr	r1, [sp, #12]
 80124b4:	4411      	add	r1, r2
 80124b6:	12c9      	asrs	r1, r1, #11
 80124b8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	1a8a      	subs	r2, r1, r2
 80124be:	12d2      	asrs	r2, r2, #11
 80124c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80124c4:	9a07      	ldr	r2, [sp, #28]
 80124c6:	443a      	add	r2, r7
 80124c8:	12d2      	asrs	r2, r2, #11
 80124ca:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80124cc:	9a07      	ldr	r2, [sp, #28]
 80124ce:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80124d0:	9a04      	ldr	r2, [sp, #16]
 80124d2:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80124d4:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80124d6:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80124d8:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80124dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80124e0:	9a04      	ldr	r2, [sp, #16]
 80124e2:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80124e4:	9a05      	ldr	r2, [sp, #20]
 80124e6:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80124e8:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80124ea:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80124ec:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80124f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80124f4:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80124f6:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80124f8:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80124fa:	9a01      	ldr	r2, [sp, #4]
 80124fc:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012500:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012502:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012504:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012508:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801250c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801250e:	455a      	cmp	r2, fp
 8012510:	f47f aef2 	bne.w	80122f8 <jpeg_idct_15x15+0x24>
 8012514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012516:	f1a3 0904 	sub.w	r9, r3, #4
 801251a:	3338      	adds	r3, #56	; 0x38
 801251c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801251e:	ab0e      	add	r3, sp, #56	; 0x38
 8012520:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012522:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012526:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 801252a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801252c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8012530:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012532:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8012536:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012538:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801253a:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 801253e:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8012540:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012542:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8012544:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012546:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012548:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801254c:	f242 419d 	movw	r1, #9373	; 0x249d
 8012550:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8012552:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8012556:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801255a:	eba2 020c 	sub.w	r2, r2, ip
 801255e:	0052      	lsls	r2, r2, #1
 8012560:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8012564:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8012566:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012568:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801256c:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801256e:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012572:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012576:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8012578:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801257c:	1a8a      	subs	r2, r1, r2
 801257e:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8012580:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012584:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012588:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 801258a:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801258c:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012590:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012592:	f241 1282 	movw	r2, #4482	; 0x1182
 8012596:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8012598:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801259c:	440a      	add	r2, r1
 801259e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80125a2:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80125a6:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 80125a8:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80125aa:	4c68      	ldr	r4, [pc, #416]	; (801274c <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80125ac:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80125ae:	f641 124c 	movw	r2, #6476	; 0x194c
 80125b2:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80125b4:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80125b8:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80125ba:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 80125bc:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 80125be:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80125c0:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 80125c2:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80125c4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80125c6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 80125ca:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 80125cc:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80125ce:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 80125d2:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 80125d4:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80125d6:	9808      	ldr	r0, [sp, #32]
 80125d8:	9a01      	ldr	r2, [sp, #4]
 80125da:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80125de:	6948      	ldr	r0, [r1, #20]
 80125e0:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 80125e4:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80125e6:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 80125ea:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80125ec:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 80125ee:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 80125f2:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80125f6:	1950      	adds	r0, r2, r5
 80125f8:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80125fa:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80125fe:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012602:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8012606:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801260a:	4c54      	ldr	r4, [pc, #336]	; (801275c <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801260c:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801260e:	4850      	ldr	r0, [pc, #320]	; (8012750 <jpeg_idct_15x15+0x47c>)
 8012610:	4378      	muls	r0, r7
 8012612:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012614:	484f      	ldr	r0, [pc, #316]	; (8012754 <jpeg_idct_15x15+0x480>)
 8012616:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012618:	f642 5002 	movw	r0, #11522	; 0x2d02
 801261c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012620:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012622:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012626:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801262a:	fb04 0002 	mla	r0, r4, r2, r0
 801262e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012630:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012632:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012636:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012638:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801263c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801263e:	eb02 000e 	add.w	r0, r2, lr
 8012642:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012644:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012646:	fb01 0202 	mla	r2, r1, r2, r0
 801264a:	eba2 020c 	sub.w	r2, r2, ip
 801264e:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012650:	4c41      	ldr	r4, [pc, #260]	; (8012758 <jpeg_idct_15x15+0x484>)
 8012652:	fb04 000e 	mla	r0, r4, lr, r0
 8012656:	4460      	add	r0, ip
 8012658:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801265a:	9802      	ldr	r0, [sp, #8]
 801265c:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801265e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012662:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012666:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012668:	9990      	ldr	r1, [sp, #576]	; 0x240
 801266a:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801266c:	9902      	ldr	r1, [sp, #8]
 801266e:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012670:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 8012672:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012676:	f81a 0006 	ldrb.w	r0, [sl, r6]
 801267a:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801267c:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012680:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8012684:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012688:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801268c:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012690:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012692:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012696:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012698:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801269c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 80126a0:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126a4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80126a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80126ac:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80126ae:	f81a 100b 	ldrb.w	r1, [sl, fp]
 80126b2:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80126b4:	9903      	ldr	r1, [sp, #12]
 80126b6:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126b8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80126bc:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80126c0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80126c2:	9903      	ldr	r1, [sp, #12]
 80126c4:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80126c6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80126c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80126cc:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80126d0:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80126d2:	9a07      	ldr	r2, [sp, #28]
 80126d4:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80126da:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80126de:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80126e0:	9a07      	ldr	r2, [sp, #28]
 80126e2:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126e4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80126e8:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80126ec:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80126ee:	9a04      	ldr	r2, [sp, #16]
 80126f0:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126f2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80126f6:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80126fa:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80126fc:	9a04      	ldr	r2, [sp, #16]
 80126fe:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012700:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012704:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012708:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801270a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801270c:	9a05      	ldr	r2, [sp, #20]
 801270e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012710:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012714:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012718:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801271a:	9a05      	ldr	r2, [sp, #20]
 801271c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801271e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012720:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012724:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012728:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801272a:	9a01      	ldr	r2, [sp, #4]
 801272c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012730:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8012734:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012738:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 801273a:	9b00      	ldr	r3, [sp, #0]
 801273c:	3320      	adds	r3, #32
 801273e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012742:	454b      	cmp	r3, r9
 8012744:	f47f aeed 	bne.w	8012522 <jpeg_idct_15x15+0x24e>
 8012748:	e00a      	b.n	8012760 <jpeg_idct_15x15+0x48c>
 801274a:	bf00      	nop
 801274c:	ffffba5c 	.word	0xffffba5c
 8012750:	ffffe566 	.word	0xffffe566
 8012754:	ffffd4f6 	.word	0xffffd4f6
 8012758:	ffffe42f 	.word	0xffffe42f
 801275c:	ffffdc67 	.word	0xffffdc67
  }
}
 8012760:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012768 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801276c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8012770:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012772:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012776:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801277a:	1e93      	subs	r3, r2, #2
 801277c:	9300      	str	r3, [sp, #0]
 801277e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012780:	f1a3 0904 	sub.w	r9, r3, #4
 8012784:	f102 030e 	add.w	r3, r2, #14
 8012788:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801278a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801278c:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801278e:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012792:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012796:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801279a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801279e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80127a0:	9100      	str	r1, [sp, #0]
 80127a2:	f859 1f04 	ldr.w	r1, [r9, #4]!
 80127a6:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80127a8:	9900      	ldr	r1, [sp, #0]
 80127aa:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 80127ae:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80127b0:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 80127b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80127b8:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80127ba:	f642 10cf 	movw	r0, #10703	; 0x29cf
 80127be:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80127c0:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 80127c2:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80127c4:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80127c6:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80127c8:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80127cc:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80127ce:	4ad6      	ldr	r2, [pc, #856]	; (8012b28 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80127d0:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 80127d4:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80127d8:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80127dc:	9900      	ldr	r1, [sp, #0]
 80127de:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 80127e2:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 80127e6:	4361      	muls	r1, r4
    z3 = z1 - z2;
 80127e8:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80127ec:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80127f0:	f642 4563 	movw	r5, #11363	; 0x2c63
 80127f4:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80127f6:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80127fa:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80127fe:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012802:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012806:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801280a:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 801280e:	eb07 020c 	add.w	r2, r7, ip
 8012812:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012814:	eba7 020c 	sub.w	r2, r7, ip
 8012818:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801281a:	1972      	adds	r2, r6, r5
 801281c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801281e:	1b72      	subs	r2, r6, r5
 8012820:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012822:	eb0b 0204 	add.w	r2, fp, r4
 8012826:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012828:	ebab 0204 	sub.w	r2, fp, r4
 801282c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801282e:	1842      	adds	r2, r0, r1
 8012830:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012832:	1a42      	subs	r2, r0, r1
 8012834:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012836:	9a00      	ldr	r2, [sp, #0]
 8012838:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 801283c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8012840:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012842:	9a00      	ldr	r2, [sp, #0]
 8012844:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 8012848:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 801284c:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801284e:	9800      	ldr	r0, [sp, #0]
 8012850:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012854:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012856:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801285a:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801285e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012860:	9800      	ldr	r0, [sp, #0]
 8012862:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 8012866:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012868:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 801286c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801286e:	f642 344e 	movw	r4, #11086	; 0x2b4e
 8012872:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012874:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012878:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801287c:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012880:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012884:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012888:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801288c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012890:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012894:	f241 5455 	movw	r4, #5461	; 0x1555
 8012898:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 801289a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801289e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80128a0:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 80128a4:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80128a6:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80128aa:	4ca0      	ldr	r4, [pc, #640]	; (8012b2c <jpeg_idct_16x16+0x3c4>)
 80128ac:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80128b0:	4f9f      	ldr	r7, [pc, #636]	; (8012b30 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 80128b2:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80128b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80128b6:	4464      	add	r4, ip
 80128b8:	445c      	add	r4, fp
 80128ba:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80128be:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80128c0:	4f9c      	ldr	r7, [pc, #624]	; (8012b34 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80128c2:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80128c4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80128c8:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80128ca:	f240 214d 	movw	r1, #589	; 0x24d
 80128ce:	fb01 4102 	mla	r1, r1, r2, r4
 80128d2:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80128d4:	4998      	ldr	r1, [pc, #608]	; (8012b38 <jpeg_idct_16x16+0x3d0>)
 80128d6:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80128da:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80128dc:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80128de:	f642 5a09 	movw	sl, #11529	; 0x2d09
 80128e2:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80128e6:	fb07 1a05 	mla	sl, r7, r5, r1
 80128ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80128ec:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80128ee:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80128f2:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 80128f6:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80128f8:	4990      	ldr	r1, [pc, #576]	; (8012b3c <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80128fa:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80128fc:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012900:	4351      	muls	r1, r2
    tmp1  += z1;
 8012902:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012904:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012908:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801290c:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801290e:	498c      	ldr	r1, [pc, #560]	; (8012b40 <jpeg_idct_16x16+0x3d8>)
 8012910:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012912:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8012916:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012918:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801291c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801291e:	eb05 0b00 	add.w	fp, r5, r0
 8012922:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012924:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012926:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012928:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801292c:	f640 5123 	movw	r1, #3363	; 0xd23
 8012930:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012932:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8012934:	445c      	add	r4, fp
    tmp3  += z2;
 8012936:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012938:	4429      	add	r1, r5
    tmp10 += z2;
 801293a:	4484      	add	ip, r0
    tmp11 += z2;
 801293c:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801293e:	12c9      	asrs	r1, r1, #11
 8012940:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012944:	9901      	ldr	r1, [sp, #4]
 8012946:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012948:	9903      	ldr	r1, [sp, #12]
 801294a:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801294c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801294e:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012950:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012954:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012956:	9903      	ldr	r1, [sp, #12]
 8012958:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801295a:	9905      	ldr	r1, [sp, #20]
 801295c:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801295e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012960:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012962:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012966:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012968:	9905      	ldr	r1, [sp, #20]
 801296a:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801296c:	9907      	ldr	r1, [sp, #28]
 801296e:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012970:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012972:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012974:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012978:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801297a:	9907      	ldr	r1, [sp, #28]
 801297c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012980:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8012984:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012988:	9908      	ldr	r1, [sp, #32]
 801298a:	4461      	add	r1, ip
 801298c:	12c9      	asrs	r1, r1, #11
 801298e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012990:	9908      	ldr	r1, [sp, #32]
 8012992:	eba1 0c0c 	sub.w	ip, r1, ip
 8012996:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801299a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801299e:	9906      	ldr	r1, [sp, #24]
 80129a0:	4401      	add	r1, r0
 80129a2:	12c9      	asrs	r1, r1, #11
 80129a4:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80129a8:	9906      	ldr	r1, [sp, #24]
 80129aa:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80129ac:	9904      	ldr	r1, [sp, #16]
 80129ae:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80129b0:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80129b2:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80129b4:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80129b8:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80129bc:	9904      	ldr	r1, [sp, #16]
 80129be:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80129c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80129c2:	12d2      	asrs	r2, r2, #11
 80129c4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80129c8:	9a02      	ldr	r2, [sp, #8]
 80129ca:	440a      	add	r2, r1
 80129cc:	12d2      	asrs	r2, r2, #11
 80129ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80129d2:	9a02      	ldr	r2, [sp, #8]
 80129d4:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80129d8:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80129da:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129dc:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80129de:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129e2:	f47f aed3 	bne.w	801278c <jpeg_idct_16x16+0x24>
 80129e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 80129e8:	ad0e      	add	r5, sp, #56	; 0x38
 80129ea:	3b04      	subs	r3, #4
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129f0:	333c      	adds	r3, #60	; 0x3c
 80129f2:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80129f4:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129f6:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129fa:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 80129fe:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012a02:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012a06:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8012a0a:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012a0e:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012a12:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012a14:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	4613      	mov	r3, r2
 8012a1a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 8012a1c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012a1e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012a22:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012a26:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012a28:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012a2a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012a2c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012a30:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012a34:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012a38:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8012a3c:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012a40:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012a42:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012a46:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012a48:	4a37      	ldr	r2, [pc, #220]	; (8012b28 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a4a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012a4e:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012a52:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a56:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a5a:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a5e:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012a62:	eb0e 0207 	add.w	r2, lr, r7
 8012a66:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012a68:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012a6c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012a70:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012a72:	eb0c 0206 	add.w	r2, ip, r6
 8012a76:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012a78:	ebac 0206 	sub.w	r2, ip, r6
 8012a7c:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012a7e:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012a82:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012a86:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012a88:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012a8a:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8012a8c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012a90:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012a92:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a94:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012a98:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8012a9c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8012a9e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012aa2:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012aa6:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012aaa:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012aae:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ab0:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012ab4:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ab6:	4e1d      	ldr	r6, [pc, #116]	; (8012b2c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012ab8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012aba:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012abe:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012ac2:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012ac6:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012aca:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012ace:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012ad2:	f241 5455 	movw	r4, #5461	; 0x1555
 8012ad6:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ada:	f640 5423 	movw	r4, #3363	; 0xd23
 8012ade:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ae2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012ae4:	4454      	add	r4, sl
 8012ae6:	4474      	add	r4, lr
 8012ae8:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aec:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012af0:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012af2:	eb0c 0409 	add.w	r4, ip, r9
 8012af6:	445c      	add	r4, fp
 8012af8:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012afc:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012afe:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012b00:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012b02:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012b06:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012b08:	f240 224d 	movw	r2, #589	; 0x24d
 8012b0c:	fb02 4203 	mla	r2, r2, r3, r4
 8012b10:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012b12:	4a09      	ldr	r2, [pc, #36]	; (8012b38 <jpeg_idct_16x16+0x3d0>)
 8012b14:	fb02 4407 	mla	r4, r2, r7, r4
 8012b18:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012b1c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012b20:	4c04      	ldr	r4, [pc, #16]	; (8012b34 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012b22:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012b24:	1afa      	subs	r2, r7, r3
 8012b26:	e00d      	b.n	8012b44 <jpeg_idct_16x16+0x3dc>
 8012b28:	ffffecc2 	.word	0xffffecc2
 8012b2c:	ffffb6d6 	.word	0xffffb6d6
 8012b30:	ffffc542 	.word	0xffffc542
 8012b34:	ffffe77a 	.word	0xffffe77a
 8012b38:	ffffdbfa 	.word	0xffffdbfa
 8012b3c:	ffffeaab 	.word	0xffffeaab
 8012b40:	ffffd817 	.word	0xffffd817
 8012b44:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012b48:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8012b4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012b4e:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b50:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012b54:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012b58:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012b5a:	4a4f      	ldr	r2, [pc, #316]	; (8012c98 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b5c:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b5e:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012b62:	435a      	muls	r2, r3
    tmp1  += z1;
 8012b64:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b66:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b6a:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b6e:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012b70:	4a4a      	ldr	r2, [pc, #296]	; (8012c9c <jpeg_idct_16x16+0x534>)
 8012b72:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b74:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012b78:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b7a:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b7e:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b80:	eb07 0b00 	add.w	fp, r7, r0
 8012b84:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b86:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b8a:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b8e:	f640 5223 	movw	r2, #3363	; 0xd23
 8012b92:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b94:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012b96:	445c      	add	r4, fp
    tmp3  += z2;
 8012b98:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b9a:	443a      	add	r2, r7
 8012b9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012b9e:	4484      	add	ip, r0
    tmp11 += z2;
 8012ba0:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012ba2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012ba6:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012baa:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8012bac:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012bae:	9b01      	ldr	r3, [sp, #4]
 8012bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bb2:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012bb4:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012bb6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012bba:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012bbe:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012bc0:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012bc2:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012bc4:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012bc6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012bca:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012bce:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012bd2:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012bd4:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012bd8:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012bda:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012bdc:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012bde:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012be0:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012be4:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012be8:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012bec:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012bee:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012bf2:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012bf4:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012bf8:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012bfc:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012bfe:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012c02:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012c06:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012c0a:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012c0c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012c10:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012c12:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012c16:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012c1a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012c1c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012c20:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012c24:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012c28:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012c2a:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012c2e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012c30:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012c32:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012c34:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012c36:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012c3a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012c3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012c42:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012c44:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012c48:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012c4a:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012c4e:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012c52:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012c56:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012c5a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012c5e:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012c60:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012c66:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012c68:	9b02      	ldr	r3, [sp, #8]
 8012c6a:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012c6c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012c70:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012c74:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012c76:	9b02      	ldr	r3, [sp, #8]
 8012c78:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8012c7c:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012c7e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012c82:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012c86:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8012c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	f47f aeb2 	bne.w	80129f4 <jpeg_idct_16x16+0x28c>
  }
}
 8012c90:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c98:	ffffeaab 	.word	0xffffeaab
 8012c9c:	ffffd817 	.word	0xffffd817

08012ca0 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012ca6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012ca8:	3a02      	subs	r2, #2
{
 8012caa:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8012cac:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012cae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012cb2:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012cb6:	f105 0320 	add.w	r3, r5, #32
 8012cba:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012cbc:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8012cc0:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012cc2:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012cc6:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8012cca:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012cce:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8012cd2:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8012cd6:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8012cde:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8012ce2:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012ce4:	ea4a 030b 	orr.w	r3, sl, fp
 8012ce8:	ea4e 0303 	orr.w	r3, lr, r3
 8012cec:	ea4c 0303 	orr.w	r3, ip, r3
 8012cf0:	433b      	orrs	r3, r7
 8012cf2:	4333      	orrs	r3, r6
 8012cf4:	ea59 0303 	orrs.w	r3, r9, r3
 8012cf8:	f040 8159 	bne.w	8012fae <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012cfc:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8012cfe:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012d02:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012d04:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012d06:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012d08:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8012d0a:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8012d0e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012d12:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012d16:	9b04      	ldr	r3, [sp, #16]
 8012d18:	42ab      	cmp	r3, r5
 8012d1a:	d1cf      	bne.n	8012cbc <jpeg_idct_16x8+0x1c>
 8012d1c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8012d1e:	ad0e      	add	r5, sp, #56	; 0x38
 8012d20:	3b04      	subs	r3, #4
 8012d22:	9300      	str	r3, [sp, #0]
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	331c      	adds	r3, #28
 8012d28:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012d2a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012d2c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012d30:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8012d34:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012d38:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012d3c:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8012d40:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012d44:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012d48:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012d4a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	4613      	mov	r3, r2
 8012d50:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012d52:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012d54:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012d58:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012d5c:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012d5e:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012d60:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012d62:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012d66:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012d6a:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012d6e:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8012d72:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012d76:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012d78:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012d7c:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012d7e:	4acf      	ldr	r2, [pc, #828]	; (80130bc <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012d80:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012d84:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012d88:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012d8c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012d90:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012d94:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012d98:	eb0e 0207 	add.w	r2, lr, r7
 8012d9c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012d9e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012da2:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012da6:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012da8:	eb0c 0206 	add.w	r2, ip, r6
 8012dac:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012dae:	ebac 0206 	sub.w	r2, ip, r6
 8012db2:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012db4:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012db8:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012dbc:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012dbe:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012dc0:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8012dc2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012dc6:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012dc8:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012dca:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012dce:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8012dd2:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8012dd4:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012dd8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012ddc:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012de0:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012de4:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012de6:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012dea:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012dec:	4eb4      	ldr	r6, [pc, #720]	; (80130c0 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012dee:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012df0:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012df4:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012df8:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012dfc:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012e00:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012e04:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012e08:	f241 5455 	movw	r4, #5461	; 0x1555
 8012e0c:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012e10:	f640 5423 	movw	r4, #3363	; 0xd23
 8012e14:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012e18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012e1a:	4454      	add	r4, sl
 8012e1c:	4474      	add	r4, lr
 8012e1e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012e22:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012e26:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012e28:	eb0c 0409 	add.w	r4, ip, r9
 8012e2c:	445c      	add	r4, fp
 8012e2e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012e32:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012e34:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012e36:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012e38:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012e3c:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012e3e:	f240 224d 	movw	r2, #589	; 0x24d
 8012e42:	fb02 4203 	mla	r2, r2, r3, r4
 8012e46:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012e48:	4a9e      	ldr	r2, [pc, #632]	; (80130c4 <jpeg_idct_16x8+0x424>)
 8012e4a:	fb02 4407 	mla	r4, r2, r7, r4
 8012e4e:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012e52:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012e56:	4c9c      	ldr	r4, [pc, #624]	; (80130c8 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012e58:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012e5a:	1afa      	subs	r2, r7, r3
 8012e5c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012e60:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8012e64:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012e66:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012e68:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012e6c:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012e70:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012e72:	4a96      	ldr	r2, [pc, #600]	; (80130cc <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012e74:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012e76:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012e7a:	435a      	muls	r2, r3
    tmp1  += z1;
 8012e7c:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012e7e:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012e82:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012e86:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012e88:	4a91      	ldr	r2, [pc, #580]	; (80130d0 <jpeg_idct_16x8+0x430>)
 8012e8a:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012e8c:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012e90:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012e92:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012e96:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012e98:	eb07 0b00 	add.w	fp, r7, r0
 8012e9c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012e9e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012ea0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012ea2:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012ea6:	f640 5223 	movw	r2, #3363	; 0xd23
 8012eaa:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012eac:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012eae:	445c      	add	r4, fp
    tmp3  += z2;
 8012eb0:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012eb2:	443a      	add	r2, r7
 8012eb4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012eb6:	4484      	add	ip, r0
    tmp11 += z2;
 8012eb8:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012eba:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012ebe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012ec2:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012ec4:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012ec6:	9b01      	ldr	r3, [sp, #4]
 8012ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eca:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012ecc:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012ece:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012ed2:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012ed6:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012ed8:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012eda:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012edc:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012ede:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012ee2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012ee6:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012eea:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012eec:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012ef0:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012ef2:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012ef4:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012ef6:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012ef8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012efc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012f00:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012f04:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012f06:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012f0a:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012f0c:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012f10:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012f14:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012f16:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012f1a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012f1e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012f22:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012f24:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012f28:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012f2a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012f2e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012f32:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012f34:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012f38:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012f3c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012f40:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012f42:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012f46:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012f48:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012f4a:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012f4c:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012f4e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012f52:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012f56:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012f5a:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012f5c:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012f60:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012f62:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012f66:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012f6a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012f6e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012f72:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012f76:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012f78:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012f7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012f7e:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012f80:	9b02      	ldr	r3, [sp, #8]
 8012f82:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012f84:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012f88:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012f8c:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012f8e:	9b02      	ldr	r3, [sp, #8]
 8012f90:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8012f94:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012f96:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012f9a:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012f9e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8012fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	f47f aec1 	bne.w	8012d2a <jpeg_idct_16x8+0x8a>
  }
}
 8012fa8:	b04f      	add	sp, #316	; 0x13c
 8012faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012fae:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8012fb0:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012fb4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8012fb8:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012fba:	f241 1651 	movw	r6, #4433	; 0x1151
 8012fbe:	eb0b 0300 	add.w	r3, fp, r0
 8012fc2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012fc4:	f641 067e 	movw	r6, #6270	; 0x187e
 8012fc8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012fcc:	4e41      	ldr	r6, [pc, #260]	; (80130d4 <jpeg_idct_16x8+0x434>)
 8012fce:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8012fd2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012fd4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012fda:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 8012fde:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8012fe2:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8012fe6:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8012fea:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012fee:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8012ff0:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8012ff2:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012ff4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8012ff8:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 8012ffa:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012ffc:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8013000:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013002:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013006:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801300a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 801300e:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013010:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8013012:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013016:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 801301a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801301e:	1930      	adds	r0, r6, r4
 8013020:	4358      	muls	r0, r3
    z2 += z1;
 8013022:	4b2d      	ldr	r3, [pc, #180]	; (80130d8 <jpeg_idct_16x8+0x438>)
 8013024:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8013028:	4b2c      	ldr	r3, [pc, #176]	; (80130dc <jpeg_idct_16x8+0x43c>)
 801302a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801302e:	eb09 040a 	add.w	r4, r9, sl
 8013032:	4b2b      	ldr	r3, [pc, #172]	; (80130e0 <jpeg_idct_16x8+0x440>)
 8013034:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8013036:	f640 138e 	movw	r3, #2446	; 0x98e
 801303a:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801303e:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8013040:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8013044:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013048:	4b26      	ldr	r3, [pc, #152]	; (80130e4 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 801304a:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801304e:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8013052:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013056:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801305a:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 801305c:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801305e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8013060:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013064:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8013068:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801306c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013070:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013074:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013076:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013078:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801307c:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013080:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013084:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013088:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801308a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801308c:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013090:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013092:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013094:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8013096:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013098:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801309a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801309e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80130a0:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80130a2:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80130a4:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80130a6:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80130aa:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80130ac:	9b00      	ldr	r3, [sp, #0]
 80130ae:	eba3 0909 	sub.w	r9, r3, r9
 80130b2:	ea4f 20e9 	mov.w	r0, r9, asr #11
 80130b6:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 80130b8:	e62d      	b.n	8012d16 <jpeg_idct_16x8+0x76>
 80130ba:	bf00      	nop
 80130bc:	ffffecc2 	.word	0xffffecc2
 80130c0:	ffffb6d6 	.word	0xffffb6d6
 80130c4:	ffffdbfa 	.word	0xffffdbfa
 80130c8:	ffffe77a 	.word	0xffffe77a
 80130cc:	ffffeaab 	.word	0xffffeaab
 80130d0:	ffffd817 	.word	0xffffd817
 80130d4:	ffffc4df 	.word	0xffffc4df
 80130d8:	ffffc13b 	.word	0xffffc13b
 80130dc:	fffff384 	.word	0xfffff384
 80130e0:	ffffe333 	.word	0xffffe333
 80130e4:	ffffadfd 	.word	0xffffadfd

080130e8 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	b0c5      	sub	sp, #276	; 0x114
 80130ee:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 80130f0:	f1a2 0c02 	sub.w	ip, r2, #2
 80130f4:	320e      	adds	r2, #14
 80130f6:	9302      	str	r3, [sp, #8]
 80130f8:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80130fa:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80130fe:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8013102:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013104:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013106:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801310a:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801310e:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013112:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013116:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801311a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801311e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013120:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013124:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8013128:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801312a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801312e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013130:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013132:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013134:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8013138:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801313c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8013140:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013142:	eba8 0102 	sub.w	r1, r8, r2
 8013146:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801314a:	eba5 0008 	sub.w	r0, r5, r8
 801314e:	f640 2112 	movw	r1, #2578	; 0xa12
 8013152:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013156:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013158:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801315a:	eb09 0407 	add.w	r4, r9, r7
 801315e:	440c      	add	r4, r1
 8013160:	49ba      	ldr	r1, [pc, #744]	; (801344c <jpeg_idct_14x7+0x364>)
 8013162:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8013166:	18a9      	adds	r1, r5, r2
 8013168:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801316a:	9900      	ldr	r1, [sp, #0]
 801316c:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013170:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8013174:	fb01 0102 	mla	r1, r1, r2, r0
 8013178:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801317c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013180:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013184:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013186:	4ab2      	ldr	r2, [pc, #712]	; (8013450 <jpeg_idct_14x7+0x368>)
 8013188:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801318c:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8013190:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013192:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013194:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013198:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801319a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 801319c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801319e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 80131a2:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80131a6:	eb02 0905 	add.w	r9, r2, r5
 80131aa:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80131ae:	eba2 0905 	sub.w	r9, r2, r5
 80131b2:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80131b6:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80131b8:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80131ba:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80131be:	49a5      	ldr	r1, [pc, #660]	; (8013454 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 80131c0:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 80131c4:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80131c6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80131ca:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80131cc:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80131d0:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80131d4:	44a9      	add	r9, r5
    tmp10 += z2;
 80131d6:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80131d8:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80131dc:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80131de:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80131e0:	4452      	add	r2, sl
 80131e2:	12d2      	asrs	r2, r2, #11
 80131e4:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80131e8:	9a01      	ldr	r2, [sp, #4]
 80131ea:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80131ee:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80131f2:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80131f6:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80131f8:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80131fc:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013200:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013202:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013206:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013208:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801320a:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801320c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801320e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013212:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8013214:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013216:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 801321a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801321e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013222:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013226:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801322a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801322e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013232:	9a04      	ldr	r2, [sp, #16]
 8013234:	4562      	cmp	r2, ip
 8013236:	f47f af66 	bne.w	8013106 <jpeg_idct_14x7+0x1e>
 801323a:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801323c:	ac0c      	add	r4, sp, #48	; 0x30
 801323e:	3a04      	subs	r2, #4
 8013240:	9200      	str	r2, [sp, #0]
 8013242:	9a02      	ldr	r2, [sp, #8]
 8013244:	3218      	adds	r2, #24
 8013246:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013248:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801324a:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 801324e:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013250:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8013254:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013258:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801325c:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801325e:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8013262:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013264:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8013268:	9200      	str	r2, [sp, #0]
 801326a:	460a      	mov	r2, r1
 801326c:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801326e:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013270:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8013272:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013274:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8013278:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801327c:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801327e:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013280:	4d75      	ldr	r5, [pc, #468]	; (8013458 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8013282:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013286:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8013288:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 801328c:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013290:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013292:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013296:	0052      	lsls	r2, r2, #1
 8013298:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 801329c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 801329e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80132a2:	eb0e 0002 	add.w	r0, lr, r2
 80132a6:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80132a8:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80132ac:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80132b0:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80132b4:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 80132b8:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 80132ba:	eb0c 0507 	add.w	r5, ip, r7
 80132be:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80132c0:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80132c4:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 80132c8:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 80132cc:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80132ce:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 80132d0:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 80132d2:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 80132d6:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80132d8:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 80132dc:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 80132de:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 80132e2:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 80132e6:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 80132ea:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132ec:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 80132f0:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 80132f2:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132f6:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 80132fa:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132fe:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013302:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013306:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801330a:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801330e:	4853      	ldr	r0, [pc, #332]	; (801345c <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013310:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013314:	eb0a 0705 	add.w	r7, sl, r5
 8013318:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801331c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013320:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8013324:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8013328:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801332c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013330:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013334:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013338:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 801333a:	4470      	add	r0, lr
 801333c:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801333e:	eb08 000c 	add.w	r0, r8, ip
 8013342:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013344:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013348:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801334c:	fb06 0608 	mla	r6, r6, r8, r0
 8013350:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013352:	4e43      	ldr	r6, [pc, #268]	; (8013460 <jpeg_idct_14x7+0x378>)
 8013354:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013358:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801335c:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801335e:	ebac 0508 	sub.w	r5, ip, r8
 8013362:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013364:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013366:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 801336a:	483e      	ldr	r0, [pc, #248]	; (8013464 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801336c:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013370:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013372:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013376:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013378:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801337a:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801337c:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8013380:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013384:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013388:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801338a:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801338c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 801338e:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013390:	9a02      	ldr	r2, [sp, #8]
 8013392:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8013394:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013398:	5dda      	ldrb	r2, [r3, r7]
 801339a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801339c:	9a04      	ldr	r2, [sp, #16]
 801339e:	4452      	add	r2, sl
			     & RANGE_MASK];
 80133a0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80133a4:	5c9a      	ldrb	r2, [r3, r2]
 80133a6:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133a8:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80133aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133ac:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 80133b0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133b4:	f813 200a 	ldrb.w	r2, [r3, sl]
 80133b8:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80133ba:	9a06      	ldr	r2, [sp, #24]
 80133bc:	4402      	add	r2, r0
			     & RANGE_MASK];
 80133be:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80133c2:	5c9a      	ldrb	r2, [r3, r2]
 80133c4:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80133c6:	9a06      	ldr	r2, [sp, #24]
 80133c8:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 80133ca:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80133ce:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80133d0:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80133d2:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80133d4:	9a01      	ldr	r2, [sp, #4]
 80133d6:	444a      	add	r2, r9
			     & RANGE_MASK];
 80133d8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80133dc:	5c9a      	ldrb	r2, [r3, r2]
 80133de:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80133e0:	9a01      	ldr	r2, [sp, #4]
 80133e2:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 80133e6:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80133ea:	f813 2009 	ldrb.w	r2, [r3, r9]
 80133ee:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80133f0:	9a07      	ldr	r2, [sp, #28]
 80133f2:	4432      	add	r2, r6
			     & RANGE_MASK];
 80133f4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80133f8:	5c9a      	ldrb	r2, [r3, r2]
 80133fa:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80133fc:	9a07      	ldr	r2, [sp, #28]
 80133fe:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8013400:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013404:	5d9a      	ldrb	r2, [r3, r6]
 8013406:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013408:	9a05      	ldr	r2, [sp, #20]
 801340a:	4472      	add	r2, lr
			     & RANGE_MASK];
 801340c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013410:	5c9a      	ldrb	r2, [r3, r2]
 8013412:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013414:	9a05      	ldr	r2, [sp, #20]
 8013416:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 801341a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801341e:	5d5a      	ldrb	r2, [r3, r5]
 8013420:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013422:	9a03      	ldr	r2, [sp, #12]
 8013424:	4402      	add	r2, r0
			     & RANGE_MASK];
 8013426:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801342a:	5c9a      	ldrb	r2, [r3, r2]
 801342c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801342e:	9a03      	ldr	r2, [sp, #12]
 8013430:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8013432:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013436:	5c1a      	ldrb	r2, [r3, r0]
 8013438:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 801343a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801343c:	9900      	ldr	r1, [sp, #0]
 801343e:	428a      	cmp	r2, r1
 8013440:	f47f af02 	bne.w	8013248 <jpeg_idct_14x7+0x160>
  }
}
 8013444:	b045      	add	sp, #276	; 0x114
 8013446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344a:	bf00      	nop
 801344c:	ffffc515 	.word	0xffffc515
 8013450:	ffffb0f1 	.word	0xffffb0f1
 8013454:	ffffd3e1 	.word	0xffffd3e1
 8013458:	ffffc8fc 	.word	0xffffc8fc
 801345c:	ffffdbf0 	.word	0xffffdbf0
 8013460:	ffffb409 	.word	0xffffb409
 8013464:	ffffc9e6 	.word	0xffffc9e6

08013468 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801346c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013470:	b0bb      	sub	sp, #236	; 0xec
 8013472:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013474:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013476:	3080      	adds	r0, #128	; 0x80
 8013478:	320e      	adds	r2, #14
 801347a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801347c:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801347e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013480:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013482:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013486:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801348a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801348e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013490:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013494:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013496:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801349a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801349e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 80134a0:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80134a2:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80134a6:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80134aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80134ae:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80134b2:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 80134b4:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 80134b6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80134ba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80134bc:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80134c0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80134c4:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80134c6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 80134c8:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80134cc:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 80134d0:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80134d2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80134d6:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80134d8:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80134dc:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80134e0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80134e4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80134e8:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80134ec:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80134f0:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80134f4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80134f8:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80134fc:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013500:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013504:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013508:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801350c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013510:	12d2      	asrs	r2, r2, #11
 8013512:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013516:	ea4f 22ee 	mov.w	r2, lr, asr #11
 801351a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801351e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013522:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013526:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013528:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801352c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013530:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013532:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013534:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013538:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801353a:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801353c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801353e:	42b2      	cmp	r2, r6
 8013540:	d19f      	bne.n	8013482 <jpeg_idct_12x6+0x1a>
 8013542:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8013546:	aa0a      	add	r2, sp, #40	; 0x28
 8013548:	3314      	adds	r3, #20
 801354a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801354c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013550:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8013554:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013556:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013558:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801355a:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 801355e:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013560:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8013564:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8013568:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801356a:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 801356e:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013572:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8013576:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 801357a:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801357e:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013580:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8013584:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013588:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801358a:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 801358e:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8013590:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8013594:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8013598:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801359c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 80135a0:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 80135a4:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 80135a6:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 80135aa:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80135ac:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 80135b0:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 80135b2:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 80135b6:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 80135b8:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 80135bc:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80135be:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 80135c2:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 80135c4:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 80135c6:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80135ca:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80135cc:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80135d0:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80135d4:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80135d8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80135dc:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80135e0:	484f      	ldr	r0, [pc, #316]	; (8013720 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80135e2:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80135e6:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80135ea:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80135ec:	484d      	ldr	r0, [pc, #308]	; (8013724 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80135ee:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80135f2:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80135f6:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80135fa:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80135fe:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013602:	eb01 0709 	add.w	r7, r1, r9
 8013606:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801360a:	4847      	ldr	r0, [pc, #284]	; (8013728 <jpeg_idct_12x6+0x2c0>)
 801360c:	fb00 1108 	mla	r1, r0, r8, r1
 8013610:	4846      	ldr	r0, [pc, #280]	; (801372c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013612:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013614:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013618:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801361c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013620:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8013624:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8013628:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801362a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801362e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013630:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013634:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013638:	483d      	ldr	r0, [pc, #244]	; (8013730 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801363a:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801363c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013640:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013644:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013648:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801364a:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801364e:	eb00 080e 	add.w	r8, r0, lr
 8013652:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 8013654:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013658:	f811 c008 	ldrb.w	ip, [r1, r8]
 801365c:	9944      	ldr	r1, [sp, #272]	; 0x110
 801365e:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013662:	9904      	ldr	r1, [sp, #16]
 8013664:	eba1 0e0e 	sub.w	lr, r1, lr
 8013668:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801366a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801366e:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013672:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013674:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013678:	eb01 0c05 	add.w	ip, r1, r5
 801367c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801367e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013682:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8013686:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801368a:	9902      	ldr	r1, [sp, #8]
 801368c:	eba1 0805 	sub.w	r8, r1, r5
 8013690:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013692:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013696:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801369a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801369c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801369e:	19cd      	adds	r5, r1, r7
 80136a0:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136a2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80136a6:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80136a8:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80136aa:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80136ac:	1bcf      	subs	r7, r1, r7
 80136ae:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136b0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80136b4:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80136b6:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80136b8:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80136ba:	190d      	adds	r5, r1, r4
 80136bc:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136be:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80136c2:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80136c4:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80136c6:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80136c8:	1b0c      	subs	r4, r1, r4
 80136ca:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136cc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80136d0:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80136d2:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80136d4:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80136d6:	198c      	adds	r4, r1, r6
 80136d8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136da:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80136de:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80136e0:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80136e2:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80136e4:	1b8e      	subs	r6, r1, r6
 80136e6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136e8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80136ec:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80136ee:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80136f0:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80136f2:	eb01 0409 	add.w	r4, r1, r9
 80136f6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80136f8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80136fc:	5d0c      	ldrb	r4, [r1, r4]
 80136fe:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013700:	9905      	ldr	r1, [sp, #20]
 8013702:	9801      	ldr	r0, [sp, #4]
 8013704:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 8013708:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801370c:	5c41      	ldrb	r1, [r0, r1]
 801370e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013712:	4553      	cmp	r3, sl
 8013714:	f47f af1a 	bne.w	801354c <jpeg_idct_12x6+0xe4>
  }
}
 8013718:	b03b      	add	sp, #236	; 0xec
 801371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801371e:	bf00      	nop
 8013720:	ffffeeaf 	.word	0xffffeeaf
 8013724:	ffffde8b 	.word	0xffffde8b
 8013728:	ffffea5c 	.word	0xffffea5c
 801372c:	ffffc08c 	.word	0xffffc08c
 8013730:	ffffc4df 	.word	0xffffc4df

08013734 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013738:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801373c:	b0af      	sub	sp, #188	; 0xbc
 801373e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013740:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013742:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013744:	320e      	adds	r2, #14
 8013746:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013748:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801374a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801374e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013756:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801375a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801375c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013760:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013764:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013766:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013768:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801376c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801376e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013772:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8013774:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013776:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801377a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801377e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013782:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013786:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801378a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801378e:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013792:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013794:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013798:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801379c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 80137a0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80137a2:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 80137a6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80137aa:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80137ae:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80137b2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80137b6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80137b8:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80137bc:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80137c0:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80137c2:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80137c6:	4b6c      	ldr	r3, [pc, #432]	; (8013978 <jpeg_idct_10x5+0x244>)
 80137c8:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80137cc:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137d0:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80137d2:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80137d6:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80137da:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80137de:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137e2:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80137e4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80137e8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80137ec:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80137f0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80137f4:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80137f8:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80137fc:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137fe:	d1aa      	bne.n	8013756 <jpeg_idct_10x5+0x22>
 8013800:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8013802:	a906      	add	r1, sp, #24
 8013804:	f1a3 0b04 	sub.w	fp, r3, #4
 8013808:	3310      	adds	r3, #16
 801380a:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801380c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013810:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013812:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8013814:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8013818:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801381a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801381e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013820:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013824:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013828:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 801382c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013830:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013832:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8013834:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013838:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 801383a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801383e:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013842:	006d      	lsls	r5, r5, #1
 8013844:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8013848:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801384c:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801384e:	eb05 030c 	add.w	r3, r5, ip
 8013852:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013854:	f241 0771 	movw	r7, #4209	; 0x1071
 8013858:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801385c:	4f46      	ldr	r7, [pc, #280]	; (8013978 <jpeg_idct_10x5+0x244>)
 801385e:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 8013862:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8013866:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013868:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 801386c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801386e:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8013870:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8013872:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 8013874:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 8013878:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 801387c:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013880:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8013884:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013886:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801388a:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 801388e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013892:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8013894:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013898:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 801389c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80138a0:	f240 7614 	movw	r6, #1812	; 0x714
 80138a4:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80138a6:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80138a8:	eba6 0608 	sub.w	r6, r6, r8
 80138ac:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80138ae:	f241 26cf 	movw	r6, #4815	; 0x12cf
 80138b2:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80138b6:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 80138ba:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 80138be:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80138c2:	1ad3      	subs	r3, r2, r3
 80138c4:	035b      	lsls	r3, r3, #13
 80138c6:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80138ca:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80138ce:	f642 0353 	movw	r3, #10323	; 0x2853
 80138d2:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80138d4:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80138d6:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80138d8:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80138dc:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80138e0:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80138e4:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80138e6:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 80138ea:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80138ee:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80138f0:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 80138f2:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80138f6:	5c82      	ldrb	r2, [r0, r2]
 80138f8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80138fa:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80138fc:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80138fe:	f810 200c 	ldrb.w	r2, [r0, ip]
 8013902:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013904:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013906:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8013908:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801390c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013910:	5c82      	ldrb	r2, [r0, r2]
 8013912:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013914:	5dc3      	ldrb	r3, [r0, r7]
 8013916:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013918:	9b00      	ldr	r3, [sp, #0]
 801391a:	4443      	add	r3, r8
			    & RANGE_MASK];
 801391c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013920:	5cc3      	ldrb	r3, [r0, r3]
 8013922:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013924:	9b00      	ldr	r3, [sp, #0]
 8013926:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 801392a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801392e:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013932:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013934:	9b02      	ldr	r3, [sp, #8]
 8013936:	442b      	add	r3, r5
			    & RANGE_MASK];
 8013938:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801393c:	5cc3      	ldrb	r3, [r0, r3]
 801393e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013940:	9b02      	ldr	r3, [sp, #8]
 8013942:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8013944:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013948:	5d43      	ldrb	r3, [r0, r5]
 801394a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801394c:	9b01      	ldr	r3, [sp, #4]
 801394e:	4453      	add	r3, sl
			    & RANGE_MASK];
 8013950:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013954:	5cc3      	ldrb	r3, [r0, r3]
 8013956:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013958:	9b01      	ldr	r3, [sp, #4]
 801395a:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801395e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013962:	f810 300a 	ldrb.w	r3, [r0, sl]
 8013966:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8013968:	9b05      	ldr	r3, [sp, #20]
 801396a:	455b      	cmp	r3, fp
 801396c:	f47f af4e 	bne.w	801380c <jpeg_idct_10x5+0xd8>
  }
}
 8013970:	b02f      	add	sp, #188	; 0xbc
 8013972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013976:	bf00      	nop
 8013978:	ffffba5c 	.word	0xffffba5c

0801397c <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013980:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013984:	b0a5      	sub	sp, #148	; 0x94
 8013986:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013988:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801398a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801398e:	f102 070e 	add.w	r7, r2, #14
 8013992:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013994:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013996:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801399a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801399e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139a2:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80139a4:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139a8:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139ac:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80139ae:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139b2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139b4:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139b8:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139bc:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80139c0:	4966      	ldr	r1, [pc, #408]	; (8013b5c <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80139c2:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80139c6:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139ca:	6a2a      	ldr	r2, [r5, #32]
 80139cc:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139d0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80139d2:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80139d6:	eb0a 020b 	add.w	r2, sl, fp
 80139da:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80139de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80139e2:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80139e6:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80139ea:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80139ee:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 80139f2:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80139f6:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80139fa:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 80139fe:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013a02:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013a06:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013a0a:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013a0e:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013a10:	d1c5      	bne.n	801399e <jpeg_idct_8x4+0x22>
 8013a12:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013a16:	a904      	add	r1, sp, #16
 8013a18:	330c      	adds	r3, #12
 8013a1a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013a1c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013a20:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013a24:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013a26:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013a28:	9302      	str	r3, [sp, #8]
 8013a2a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 8013a2c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 8013a30:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 8013a34:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013a38:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 8013a3c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8013a40:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013a44:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013a48:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 8013a4c:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013a50:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013a54:	4841      	ldr	r0, [pc, #260]	; (8013b5c <jpeg_idct_8x4+0x1e0>)
 8013a56:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a5a:	f851 3c20 	ldr.w	r3, [r1, #-32]
 8013a5e:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013a60:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8013a62:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013a64:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8013a68:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8013a6c:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8013a70:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8013a72:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 8013a76:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 8013a7a:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 8013a7e:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8013a80:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8013a84:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013a86:	1883      	adds	r3, r0, r2
 8013a88:	436b      	muls	r3, r5
    z2 += z1;
 8013a8a:	4d35      	ldr	r5, [pc, #212]	; (8013b60 <jpeg_idct_8x4+0x1e4>)
 8013a8c:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8013a90:	4d34      	ldr	r5, [pc, #208]	; (8013b64 <jpeg_idct_8x4+0x1e8>)
 8013a92:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013a96:	eb07 0209 	add.w	r2, r7, r9
 8013a9a:	4d33      	ldr	r5, [pc, #204]	; (8013b68 <jpeg_idct_8x4+0x1ec>)
 8013a9c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8013a9e:	f640 158e 	movw	r5, #2446	; 0x98e
 8013aa2:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8013aa6:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8013aa8:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013aac:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8013ab0:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8013ab4:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013ab8:	eb0e 0905 	add.w	r9, lr, r5
 8013abc:	4d2b      	ldr	r5, [pc, #172]	; (8013b6c <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 8013abe:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013ac2:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8013ac6:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 8013aca:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8013acc:	4448      	add	r0, r9
 8013ace:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013ad2:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013ad6:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013ada:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 8013adc:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 8013ae0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013ae4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013ae6:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8013ae8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013aec:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8013af0:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013af4:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013af6:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013afa:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013afe:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013b00:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8013b02:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013b06:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 8013b0a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013b0e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013b12:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013b16:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013b18:	f81c 2009 	ldrb.w	r2, [ip, r9]
 8013b1c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013b1e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8013b22:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013b26:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013b2a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013b2c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013b30:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013b32:	9b00      	ldr	r3, [sp, #0]
 8013b34:	443b      	add	r3, r7
			    & RANGE_MASK];
 8013b36:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013b3a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013b3e:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013b40:	9b00      	ldr	r3, [sp, #0]
 8013b42:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8013b44:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013b48:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8013b4c:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8013b4e:	9b03      	ldr	r3, [sp, #12]
 8013b50:	4543      	cmp	r3, r8
 8013b52:	f47f af63 	bne.w	8013a1c <jpeg_idct_8x4+0xa0>
  }
}
 8013b56:	b025      	add	sp, #148	; 0x94
 8013b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5c:	ffffc4df 	.word	0xffffc4df
 8013b60:	ffffc13b 	.word	0xffffc13b
 8013b64:	fffff384 	.word	0xfffff384
 8013b68:	ffffe333 	.word	0xffffe333
 8013b6c:	ffffadfd 	.word	0xffffadfd

08013b70 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b74:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b76:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013b7a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013b7c:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013b80:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b82:	3080      	adds	r0, #128	; 0x80
 8013b84:	f102 040a 	add.w	r4, r2, #10
 8013b88:	f1a1 0c04 	sub.w	ip, r1, #4
 8013b8c:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013b8e:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013b92:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b96:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b98:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013b9c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b9e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ba2:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013ba6:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ba8:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013bac:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bb0:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013bb4:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8013bb8:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bbc:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013bc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013bc4:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bc8:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 8013bcc:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013bd0:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013bd4:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013bd8:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013bdc:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013be0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013be4:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013be6:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013bea:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013bee:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013bf2:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013bf4:	d1d0      	bne.n	8013b98 <jpeg_idct_6x3+0x28>
 8013bf6:	f1a3 0e04 	sub.w	lr, r3, #4
 8013bfa:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013bfe:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013c02:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8013c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013c08:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013c0a:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013c0e:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013c10:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c14:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013c18:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013c1c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c20:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013c24:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013c28:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8013c2c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013c30:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8013c34:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013c38:	f242 7131 	movw	r1, #10033	; 0x2731
 8013c3c:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013c40:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8013c44:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8013c48:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013c4c:	eb04 0508 	add.w	r5, r4, r8
 8013c50:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013c54:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8013c58:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013c5c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013c60:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013c64:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013c66:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013c6a:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013c6e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013c72:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013c76:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8013c7a:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013c7e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013c82:	5d04      	ldrb	r4, [r0, r4]
 8013c84:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013c86:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013c8a:	9801      	ldr	r0, [sp, #4]
 8013c8c:	5d84      	ldrb	r4, [r0, r6]
 8013c8e:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013c90:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013c94:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8013c98:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013c9c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013ca0:	5d04      	ldrb	r4, [r0, r4]
 8013ca2:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013ca4:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013ca8:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013caa:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013cae:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8013cb2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013cb6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013cba:	5cc3      	ldrb	r3, [r0, r3]
 8013cbc:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013cbe:	5d43      	ldrb	r3, [r0, r5]
 8013cc0:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8013cc2:	d19c      	bne.n	8013bfe <jpeg_idct_6x3+0x8e>
  }
}
 8013cc4:	b015      	add	sp, #84	; 0x54
 8013cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013ccc <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013cd2:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8013cd6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013cd8:	1e96      	subs	r6, r2, #2
 8013cda:	f10d 0c08 	add.w	ip, sp, #8
 8013cde:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013ce0:	3c04      	subs	r4, #4
 8013ce2:	f102 0e06 	add.w	lr, r2, #6
 8013ce6:	4660      	mov	r0, ip
{
 8013ce8:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cea:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 8013cee:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013cf2:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cf4:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013cf8:	6a27      	ldr	r7, [r4, #32]
 8013cfa:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8013cfe:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013d02:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8013d06:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 8013d0a:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013d0e:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013d12:	d1ea      	bne.n	8013cea <jpeg_idct_4x2+0x1e>
 8013d14:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013d16:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013d1a:	f641 097e 	movw	r9, #6270	; 0x187e
 8013d1e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8013d22:	46e0      	mov	r8, ip
 8013d24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d26:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8013d2a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 8013d2c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8013d30:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8013d34:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8013d38:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 8013d3c:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8013d3e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013d42:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013d46:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013d48:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013d4a:	4b13      	ldr	r3, [pc, #76]	; (8013d98 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013d4c:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013d50:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013d54:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013d58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013d5a:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013d5e:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8013d62:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8013d66:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013d6a:	5def      	ldrb	r7, [r5, r7]
 8013d6c:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013d70:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8013d72:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013d74:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013d76:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013d7a:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8013d7e:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013d80:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013d84:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013d88:	5c69      	ldrb	r1, [r5, r1]
 8013d8a:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013d8c:	5caa      	ldrb	r2, [r5, r2]
 8013d8e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013d90:	d1c7      	bne.n	8013d22 <jpeg_idct_4x2+0x56>
  }
}
 8013d92:	b00b      	add	sp, #44	; 0x2c
 8013d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d98:	ffffc4df 	.word	0xffffc4df

08013d9c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013d9c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013d9e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013da2:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013da4:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013da6:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013da8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013dac:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013dae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013db2:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013db4:	437b      	muls	r3, r7
{
 8013db6:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8013db8:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013dba:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8013dbc:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013dbe:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013dc0:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013dc2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013dc6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013dca:	5c41      	ldrb	r1, [r0, r1]
 8013dcc:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013dce:	5cc3      	ldrb	r3, [r0, r3]
 8013dd0:	7073      	strb	r3, [r6, #1]
}
 8013dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013dd4 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013ddc:	f1a2 0802 	sub.w	r8, r2, #2
 8013de0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013de2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013de6:	3380      	adds	r3, #128	; 0x80
 8013de8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013dea:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013dec:	f1a3 0904 	sub.w	r9, r3, #4
 8013df0:	f102 030e 	add.w	r3, r2, #14
 8013df4:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8013df6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013df8:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013dfc:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e00:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013e04:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e08:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013e0c:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e10:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e12:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013e16:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e18:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8013e1a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013e1c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013e20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013e24:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013e26:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e28:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 8013e2c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8013e2e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8013e30:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8013e32:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e36:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013e3a:	4ad3      	ldr	r2, [pc, #844]	; (8014188 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e3c:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013e40:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8013e44:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8013e48:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8013e4a:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013e4e:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013e52:	f642 4563 	movw	r5, #11363	; 0x2c63
 8013e56:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013e58:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013e5c:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013e60:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013e64:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013e68:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013e6c:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8013e70:	eb07 020c 	add.w	r2, r7, ip
 8013e74:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013e76:	eba7 020c 	sub.w	r2, r7, ip
 8013e7a:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013e7c:	1972      	adds	r2, r6, r5
 8013e7e:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013e80:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013e82:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8013e86:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013e88:	eb0b 0204 	add.w	r2, fp, r4
 8013e8c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013e8e:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013e92:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8013e96:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013e98:	1842      	adds	r2, r0, r1
 8013e9a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013e9c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e9e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8013ea2:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ea4:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ea8:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013eac:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013eae:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8013eb2:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013eb4:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8013eb8:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013eba:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013ebe:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013ec0:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013ec4:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013ec6:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8013eca:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013ecc:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013ece:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013ed2:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013ed6:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013eda:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013ede:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8013ee2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013ee6:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013eea:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013eee:	f241 5455 	movw	r4, #5461	; 0x1555
 8013ef2:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013ef4:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013ef8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013efa:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013efe:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013f00:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013f04:	4ca1      	ldr	r4, [pc, #644]	; (801418c <jpeg_idct_8x16+0x3b8>)
 8013f06:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013f0a:	4fa1      	ldr	r7, [pc, #644]	; (8014190 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013f0c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013f0e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013f10:	4464      	add	r4, ip
 8013f12:	445c      	add	r4, fp
 8013f14:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013f18:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013f1a:	4f9e      	ldr	r7, [pc, #632]	; (8014194 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013f1c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013f1e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8013f22:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013f24:	f240 214d 	movw	r1, #589	; 0x24d
 8013f28:	fb01 4102 	mla	r1, r1, r2, r4
 8013f2c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013f2e:	499a      	ldr	r1, [pc, #616]	; (8014198 <jpeg_idct_8x16+0x3c4>)
 8013f30:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013f34:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013f36:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013f38:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8013f3c:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013f40:	fb07 1a05 	mla	sl, r7, r5, r1
 8013f44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013f46:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013f48:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013f4c:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8013f50:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013f52:	4992      	ldr	r1, [pc, #584]	; (801419c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013f54:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013f56:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013f5a:	4351      	muls	r1, r2
    tmp1  += z1;
 8013f5c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013f5e:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013f62:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013f66:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013f68:	498d      	ldr	r1, [pc, #564]	; (80141a0 <jpeg_idct_8x16+0x3cc>)
 8013f6a:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013f6c:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8013f70:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013f72:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013f76:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013f78:	eb05 0b00 	add.w	fp, r5, r0
 8013f7c:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013f7e:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013f80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013f82:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013f86:	f640 5123 	movw	r1, #3363	; 0xd23
 8013f8a:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013f8c:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8013f8e:	445c      	add	r4, fp
    tmp3  += z2;
 8013f90:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013f92:	4429      	add	r1, r5
    tmp10 += z2;
 8013f94:	4484      	add	ip, r0
    tmp11 += z2;
 8013f96:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013f98:	12c9      	asrs	r1, r1, #11
 8013f9a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013f9e:	9901      	ldr	r1, [sp, #4]
 8013fa0:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013fa2:	9903      	ldr	r1, [sp, #12]
 8013fa4:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013fa6:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013fa8:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013faa:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013fae:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013fb0:	9903      	ldr	r1, [sp, #12]
 8013fb2:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013fb4:	9905      	ldr	r1, [sp, #20]
 8013fb6:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013fb8:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013fba:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013fbc:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013fc0:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013fc2:	9905      	ldr	r1, [sp, #20]
 8013fc4:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013fc6:	9907      	ldr	r1, [sp, #28]
 8013fc8:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013fca:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013fcc:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013fce:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013fd2:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013fd4:	9907      	ldr	r1, [sp, #28]
 8013fd6:	eba1 0e0e 	sub.w	lr, r1, lr
 8013fda:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8013fde:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013fe2:	9908      	ldr	r1, [sp, #32]
 8013fe4:	4461      	add	r1, ip
 8013fe6:	12c9      	asrs	r1, r1, #11
 8013fe8:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013fea:	9908      	ldr	r1, [sp, #32]
 8013fec:	eba1 0c0c 	sub.w	ip, r1, ip
 8013ff0:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8013ff4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013ff8:	9906      	ldr	r1, [sp, #24]
 8013ffa:	4401      	add	r1, r0
 8013ffc:	12c9      	asrs	r1, r1, #11
 8013ffe:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014002:	9906      	ldr	r1, [sp, #24]
 8014004:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014006:	9904      	ldr	r1, [sp, #16]
 8014008:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801400a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801400c:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801400e:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014012:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014016:	9904      	ldr	r1, [sp, #16]
 8014018:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801401a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801401c:	12d2      	asrs	r2, r2, #11
 801401e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014022:	9a02      	ldr	r2, [sp, #8]
 8014024:	440a      	add	r2, r1
 8014026:	12d2      	asrs	r2, r2, #11
 8014028:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801402c:	9a02      	ldr	r2, [sp, #8]
 801402e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014032:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014034:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014036:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801403a:	f47f aedd 	bne.w	8013df8 <jpeg_idct_8x16+0x24>
 801403e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014040:	a80e      	add	r0, sp, #56	; 0x38
 8014042:	f1a3 0904 	sub.w	r9, r3, #4
 8014046:	333c      	adds	r3, #60	; 0x3c
 8014048:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801404a:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801404e:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8014052:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014054:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8014056:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 801405a:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 801405c:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8014060:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014062:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8014064:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8014068:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801406c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801406e:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8014072:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014076:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801407a:	4c4a      	ldr	r4, [pc, #296]	; (80141a4 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 801407c:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014080:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014084:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8014088:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801408c:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 801408e:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8014090:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8014092:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8014096:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 801409a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 801409e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80140a2:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 80140a4:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 80140a8:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 80140ac:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80140ae:	f242 53a1 	movw	r3, #9633	; 0x25a1
 80140b2:	1862      	adds	r2, r4, r1
 80140b4:	435a      	muls	r2, r3
    z2 += z1;
 80140b6:	4b3c      	ldr	r3, [pc, #240]	; (80141a8 <jpeg_idct_8x16+0x3d4>)
 80140b8:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 80140bc:	4b3b      	ldr	r3, [pc, #236]	; (80141ac <jpeg_idct_8x16+0x3d8>)
 80140be:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80140c2:	eb0c 010a 	add.w	r1, ip, sl
 80140c6:	4b3a      	ldr	r3, [pc, #232]	; (80141b0 <jpeg_idct_8x16+0x3dc>)
 80140c8:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 80140ca:	f640 138e 	movw	r3, #2446	; 0x98e
 80140ce:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 80140d2:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 80140d4:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 80140d8:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80140dc:	4b35      	ldr	r3, [pc, #212]	; (80141b4 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 80140de:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80140e2:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80140e6:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80140ea:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80140ee:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 80140f0:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 80140f2:	4454      	add	r4, sl
 80140f4:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80140f8:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80140fc:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8014100:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014104:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8014106:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801410a:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801410c:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014110:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8014114:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014118:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 801411a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801411e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014122:	9b00      	ldr	r3, [sp, #0]
 8014124:	5dd9      	ldrb	r1, [r3, r7]
 8014126:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014128:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 801412a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801412e:	5c59      	ldrb	r1, [r3, r1]
 8014130:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014132:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014136:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014138:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801413a:	eb03 010b 	add.w	r1, r3, fp
 801413e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014140:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014144:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014146:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014148:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801414a:	eba3 020b 	sub.w	r2, r3, fp
 801414e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014150:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014154:	5c9b      	ldrb	r3, [r3, r2]
 8014156:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014158:	9b01      	ldr	r3, [sp, #4]
 801415a:	9a00      	ldr	r2, [sp, #0]
 801415c:	4463      	add	r3, ip
			    & RANGE_MASK];
 801415e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014162:	5cd3      	ldrb	r3, [r2, r3]
 8014164:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014166:	9b01      	ldr	r3, [sp, #4]
 8014168:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 801416c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014170:	f812 300c 	ldrb.w	r3, [r2, ip]
 8014174:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8014176:	9b04      	ldr	r3, [sp, #16]
 8014178:	454b      	cmp	r3, r9
 801417a:	f47f af66 	bne.w	801404a <jpeg_idct_8x16+0x276>
  }
}
 801417e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8014182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014186:	bf00      	nop
 8014188:	ffffecc2 	.word	0xffffecc2
 801418c:	ffffb6d6 	.word	0xffffb6d6
 8014190:	ffffc542 	.word	0xffffc542
 8014194:	ffffe77a 	.word	0xffffe77a
 8014198:	ffffdbfa 	.word	0xffffdbfa
 801419c:	ffffeaab 	.word	0xffffeaab
 80141a0:	ffffd817 	.word	0xffffd817
 80141a4:	ffffc4df 	.word	0xffffc4df
 80141a8:	ffffc13b 	.word	0xffffc13b
 80141ac:	fffff384 	.word	0xfffff384
 80141b0:	ffffe333 	.word	0xffffe333
 80141b4:	ffffadfd 	.word	0xffffadfd

080141b8 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80141b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141bc:	b0ef      	sub	sp, #444	; 0x1bc
 80141be:	f1a2 0e02 	sub.w	lr, r2, #2
 80141c2:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80141c4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80141c8:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80141ca:	3380      	adds	r3, #128	; 0x80
 80141cc:	3804      	subs	r0, #4
 80141ce:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80141d0:	f102 030c 	add.w	r3, r2, #12
 80141d4:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 80141d6:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141d8:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80141dc:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141e0:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80141e4:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141e8:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80141ec:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141ee:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141f0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80141f4:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80141f6:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 80141fa:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80141fc:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014200:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014204:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014208:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801420c:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8014210:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014212:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014214:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8014216:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801421a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801421e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8014220:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014224:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014228:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801422c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014230:	49b7      	ldr	r1, [pc, #732]	; (8014510 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014232:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014234:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014236:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014238:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 801423c:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801423e:	1916      	adds	r6, r2, r4
 8014240:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014244:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8014248:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801424c:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014250:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8014254:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8014256:	eb07 010c 	add.w	r1, r7, ip
 801425a:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 801425c:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014260:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014264:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8014268:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801426a:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801426c:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8014270:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8014272:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014274:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8014278:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 801427a:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 801427e:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8014282:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8014286:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8014288:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801428a:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801428c:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014290:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014292:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8014294:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014296:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 801429a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801429c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80142a0:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80142a4:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80142a6:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 80142aa:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80142ae:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80142b2:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80142b6:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80142ba:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80142be:	4995      	ldr	r1, [pc, #596]	; (8014514 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80142c0:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80142c4:	eb0a 0805 	add.w	r8, sl, r5
 80142c8:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 80142cc:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80142d0:	f201 211b 	addw	r1, r1, #539	; 0x21b
 80142d4:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 80142d8:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80142da:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 80142de:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80142e0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80142e4:	4c8c      	ldr	r4, [pc, #560]	; (8014518 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 80142e6:	4449      	add	r1, r9
 80142e8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80142ea:	19b9      	adds	r1, r7, r6
 80142ec:	fb0c f101 	mul.w	r1, ip, r1
 80142f0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80142f4:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80142f8:	4c88      	ldr	r4, [pc, #544]	; (801451c <jpeg_idct_7x14+0x364>)
 80142fa:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80142fe:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014300:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014304:	4c86      	ldr	r4, [pc, #536]	; (8014520 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014306:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014308:	1bf5      	subs	r5, r6, r7
 801430a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801430e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8014312:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8014316:	9c07      	ldr	r4, [sp, #28]
 8014318:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801431a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801431c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8014320:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014322:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014324:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014328:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 801432a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801432c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801432e:	12d2      	asrs	r2, r2, #11
 8014330:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014334:	9a01      	ldr	r2, [sp, #4]
 8014336:	eba2 0208 	sub.w	r2, r2, r8
 801433a:	12d2      	asrs	r2, r2, #11
 801433c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014340:	9a03      	ldr	r2, [sp, #12]
 8014342:	4452      	add	r2, sl
 8014344:	12d2      	asrs	r2, r2, #11
 8014346:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014348:	9a03      	ldr	r2, [sp, #12]
 801434a:	eba2 0a0a 	sub.w	sl, r2, sl
 801434e:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8014352:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014356:	9a05      	ldr	r2, [sp, #20]
 8014358:	440a      	add	r2, r1
 801435a:	12d2      	asrs	r2, r2, #11
 801435c:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801435e:	9a05      	ldr	r2, [sp, #20]
 8014360:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8014362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014364:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014368:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801436a:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801436c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801436e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8014372:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014376:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014378:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801437a:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801437c:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014380:	12d2      	asrs	r2, r2, #11
 8014382:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014384:	9a06      	ldr	r2, [sp, #24]
 8014386:	eba2 0c0c 	sub.w	ip, r2, ip
 801438a:	ea4f 22ec 	mov.w	r2, ip, asr #11
 801438e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014392:	9a04      	ldr	r2, [sp, #16]
 8014394:	442a      	add	r2, r5
 8014396:	12d2      	asrs	r2, r2, #11
 8014398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801439c:	9a04      	ldr	r2, [sp, #16]
 801439e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80143a0:	9a02      	ldr	r2, [sp, #8]
 80143a2:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80143a4:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80143a6:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80143a8:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80143ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80143b0:	9a02      	ldr	r2, [sp, #8]
 80143b2:	1a52      	subs	r2, r2, r1
 80143b4:	12d2      	asrs	r2, r2, #11
 80143b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80143ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143bc:	4572      	cmp	r2, lr
 80143be:	f47f af0b 	bne.w	80141d8 <jpeg_idct_7x14+0x20>
 80143c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 80143c4:	ac0c      	add	r4, sp, #48	; 0x30
 80143c6:	f1a3 0904 	sub.w	r9, r3, #4
 80143ca:	3334      	adds	r3, #52	; 0x34
 80143cc:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80143ce:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 80143d2:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 80143d4:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 80143d6:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 80143da:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80143dc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 80143e0:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80143e2:	1b51      	subs	r1, r2, r5
 80143e4:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 80143e8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80143ec:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80143f0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80143f4:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 80143f8:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80143fc:	eba3 0c02 	sub.w	ip, r3, r2
 8014400:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014404:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014406:	4947      	ldr	r1, [pc, #284]	; (8014524 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014408:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801440c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8014410:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014414:	eb0e 000c 	add.w	r0, lr, ip
 8014418:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 801441c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014420:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014424:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014428:	fb02 f208 	mul.w	r2, r2, r8
 801442c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014430:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014434:	4d3c      	ldr	r5, [pc, #240]	; (8014528 <jpeg_idct_7x14+0x370>)
 8014436:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 801443a:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801443e:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8014440:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014444:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014446:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801444a:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801444c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801444e:	f641 53ef 	movw	r3, #7663	; 0x1def
 8014452:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014456:	eba2 050a 	sub.w	r5, r2, sl
 801445a:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801445e:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014460:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014462:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014464:	4b31      	ldr	r3, [pc, #196]	; (801452c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8014466:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 801446a:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801446c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014470:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014474:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014476:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801447a:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 801447e:	4455      	add	r5, sl
    tmp10 += z2;
 8014480:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014482:	fb0b 220e 	mla	r2, fp, lr, r2
 8014486:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014488:	eb01 020c 	add.w	r2, r1, ip
 801448c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 801448e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014492:	5c9a      	ldrb	r2, [r3, r2]
 8014494:	9b03      	ldr	r3, [sp, #12]
 8014496:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014498:	9b01      	ldr	r3, [sp, #4]
 801449a:	eba3 0c0c 	sub.w	ip, r3, ip
 801449e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80144a0:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80144a4:	f813 200c 	ldrb.w	r2, [r3, ip]
 80144a8:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80144aa:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80144ac:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80144ae:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80144b2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80144b6:	5c9a      	ldrb	r2, [r3, r2]
 80144b8:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80144ba:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80144bc:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80144be:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80144c0:	eb03 020a 	add.w	r2, r3, sl
 80144c4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80144c6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80144ca:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80144cc:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80144ce:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80144d0:	eba3 0a0a 	sub.w	sl, r3, sl
 80144d4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80144d6:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80144da:	f813 300a 	ldrb.w	r3, [r3, sl]
 80144de:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 80144e0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80144e4:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80144e8:	f642 5341 	movw	r3, #11585	; 0x2d41
 80144ec:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80144f0:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80144f2:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 80144f6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80144fa:	f813 3008 	ldrb.w	r3, [r3, r8]
 80144fe:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8014500:	9b04      	ldr	r3, [sp, #16]
 8014502:	454b      	cmp	r3, r9
 8014504:	f47f af63 	bne.w	80143ce <jpeg_idct_7x14+0x216>
  }
}
 8014508:	b06f      	add	sp, #444	; 0x1bc
 801450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801450e:	bf00      	nop
 8014510:	ffffc8fc 	.word	0xffffc8fc
 8014514:	ffffdbf0 	.word	0xffffdbf0
 8014518:	fffff26e 	.word	0xfffff26e
 801451c:	ffffb409 	.word	0xffffb409
 8014520:	ffffc9e6 	.word	0xffffc9e6
 8014524:	ffffc515 	.word	0xffffc515
 8014528:	ffffb0f1 	.word	0xffffb0f1
 801452c:	ffffd3e1 	.word	0xffffd3e1

08014530 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014534:	b0d3      	sub	sp, #332	; 0x14c
 8014536:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014538:	f1a2 0a02 	sub.w	sl, r2, #2
 801453c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801453e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014542:	3380      	adds	r3, #128	; 0x80
 8014544:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014546:	1f0b      	subs	r3, r1, #4
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	f102 030a 	add.w	r3, r2, #10
 801454e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8014550:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014552:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014554:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014558:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801455c:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014560:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014564:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014566:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801456a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801456c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014570:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014574:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014576:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801457a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801457c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801457e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014580:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014582:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014586:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801458a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801458c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014590:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014594:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014598:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801459a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801459c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801459e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 80145a2:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 80145a6:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 80145a8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 80145ac:	eb07 010c 	add.w	r1, r7, ip
 80145b0:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 80145b2:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 80145b6:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 80145ba:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 80145be:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 80145c0:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 80145c2:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 80145c6:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145ca:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 80145ce:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 80145d0:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 80145d2:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80145d4:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80145d8:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 80145dc:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145de:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80145e0:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80145e2:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145e6:	6a12      	ldr	r2, [r2, #32]
 80145e8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80145ec:	9a00      	ldr	r2, [sp, #0]
 80145ee:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80145f0:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80145f4:	9a00      	ldr	r2, [sp, #0]
 80145f6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80145fa:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80145fe:	4977      	ldr	r1, [pc, #476]	; (80147dc <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014600:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014602:	9a00      	ldr	r2, [sp, #0]
 8014604:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8014608:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801460c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801460e:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014612:	4973      	ldr	r1, [pc, #460]	; (80147e0 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014614:	eb02 0806 	add.w	r8, r2, r6
 8014618:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801461c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014620:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8014624:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014628:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801462c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014630:	18ae      	adds	r6, r5, r2
 8014632:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014634:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014636:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014638:	496a      	ldr	r1, [pc, #424]	; (80147e4 <jpeg_idct_6x12+0x2b4>)
 801463a:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801463e:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014640:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014644:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014648:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801464a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 801464e:	fb0b 4402 	mla	r4, fp, r2, r4
 8014652:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014654:	4964      	ldr	r1, [pc, #400]	; (80147e8 <jpeg_idct_6x12+0x2b8>)
 8014656:	fb01 000c 	mla	r0, r1, ip, r0
 801465a:	4964      	ldr	r1, [pc, #400]	; (80147ec <jpeg_idct_6x12+0x2bc>)
 801465c:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8014660:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014664:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014668:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801466c:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801466e:	eb02 0805 	add.w	r8, r2, r5
 8014672:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014676:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801467a:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801467e:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014682:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014686:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014688:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801468a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801468e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014692:	9902      	ldr	r1, [sp, #8]
 8014694:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014696:	1a8a      	subs	r2, r1, r2
 8014698:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801469a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801469c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80146a0:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80146a2:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80146a4:	4432      	add	r2, r6
 80146a6:	12d2      	asrs	r2, r2, #11
 80146a8:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80146aa:	9a05      	ldr	r2, [sp, #20]
 80146ac:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80146ae:	9a06      	ldr	r2, [sp, #24]
 80146b0:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80146b2:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80146b4:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80146b6:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80146ba:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80146bc:	9a06      	ldr	r2, [sp, #24]
 80146be:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80146c0:	9a03      	ldr	r2, [sp, #12]
 80146c2:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80146c4:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80146c6:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80146c8:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80146cc:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80146ce:	9a03      	ldr	r2, [sp, #12]
 80146d0:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80146d4:	9a04      	ldr	r2, [sp, #16]
 80146d6:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80146d8:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80146da:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80146dc:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80146e0:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80146e2:	9a04      	ldr	r2, [sp, #16]
 80146e4:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80146e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80146e8:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80146ea:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80146ec:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80146f0:	f47f af2f 	bne.w	8014552 <jpeg_idct_6x12+0x22>
 80146f4:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80146f6:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80146f8:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 80146fc:	f1a3 0c04 	sub.w	ip, r3, #4
 8014700:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8014704:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014708:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 801470c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 801470e:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014710:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8014714:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8014716:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801471a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801471e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014722:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014726:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801472a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 801472e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8014732:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8014736:	eba3 0302 	sub.w	r3, r3, r2
 801473a:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801473c:	f242 7331 	movw	r3, #10033	; 0x2731
 8014740:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8014744:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014748:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 801474c:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8014750:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014754:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014758:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801475c:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014760:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8014764:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014766:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801476a:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801476c:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014770:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014774:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014778:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801477c:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8014780:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014784:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014788:	5c18      	ldrb	r0, [r3, r0]
 801478a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801478c:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014790:	9b01      	ldr	r3, [sp, #4]
 8014792:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014794:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014796:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014798:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801479c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801479e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147a2:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147a4:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147a6:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147a8:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 80147ac:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147ae:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80147b0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147b4:	f813 300e 	ldrb.w	r3, [r3, lr]
 80147b8:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147ba:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80147be:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 80147c2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80147c6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147ca:	5cc3      	ldrb	r3, [r0, r3]
 80147cc:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80147ce:	5d03      	ldrb	r3, [r0, r4]
 80147d0:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 80147d2:	d197      	bne.n	8014704 <jpeg_idct_6x12+0x1d4>
  }
}
 80147d4:	b053      	add	sp, #332	; 0x14c
 80147d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147da:	bf00      	nop
 80147dc:	ffffeeaf 	.word	0xffffeeaf
 80147e0:	ffffde8b 	.word	0xffffde8b
 80147e4:	ffffd0b0 	.word	0xffffd0b0
 80147e8:	ffffea5c 	.word	0xffffea5c
 80147ec:	ffffc08c 	.word	0xffffc08c

080147f0 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	b0b9      	sub	sp, #228	; 0xe4
 80147f6:	1e94      	subs	r4, r2, #2
 80147f8:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80147fa:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80147fe:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014800:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014802:	3380      	adds	r3, #128	; 0x80
 8014804:	3804      	subs	r0, #4
 8014806:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014808:	f102 0308 	add.w	r3, r2, #8
 801480c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801480e:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014812:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014814:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014818:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801481c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801481e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014822:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014824:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8014828:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801482a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801482e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014832:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014836:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014838:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 801483c:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 801483e:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014842:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014844:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014848:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801484c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014850:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014852:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014854:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014856:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 801485a:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801485c:	19f3      	adds	r3, r6, r7
 801485e:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014860:	f241 0271 	movw	r2, #4209	; 0x1071
 8014864:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014868:	4a6d      	ldr	r2, [pc, #436]	; (8014a20 <jpeg_idct_5x10+0x230>)
 801486a:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 801486e:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8014870:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014874:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8014878:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 801487c:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8014880:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8014882:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014884:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8014888:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801488a:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801488e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014890:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014892:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014896:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014898:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 801489c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80148a0:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 80148a4:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80148a6:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 80148aa:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 80148ae:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80148b0:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80148b4:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80148b8:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80148bc:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80148be:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80148c2:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 80148c6:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80148ca:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80148cc:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80148d0:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80148d2:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80148d6:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80148da:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80148dc:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80148de:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80148e2:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80148e6:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80148ea:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80148ee:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80148f2:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80148f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80148f8:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80148fa:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80148fe:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014902:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014906:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801490a:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801490c:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801490e:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014910:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014914:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014918:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801491c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801491e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014920:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014922:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014924:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014928:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801492a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801492c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801492e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014930:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014934:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8014938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801493c:	9b02      	ldr	r3, [sp, #8]
 801493e:	442b      	add	r3, r5
 8014940:	12db      	asrs	r3, r3, #11
 8014942:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014944:	9b02      	ldr	r3, [sp, #8]
 8014946:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014948:	9b01      	ldr	r3, [sp, #4]
 801494a:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801494c:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801494e:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014950:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014952:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014954:	9b01      	ldr	r3, [sp, #4]
 8014956:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801495a:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801495c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014960:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014962:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014964:	f47f af53 	bne.w	801480e <jpeg_idct_5x10+0x1e>
 8014968:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801496a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801496c:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014970:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8014974:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014978:	f641 289a 	movw	r8, #6810	; 0x1a9a
 801497c:	3324      	adds	r3, #36	; 0x24
 801497e:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014980:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014984:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014986:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014988:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 801498c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014990:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014994:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014998:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801499a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801499c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801499e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80149a2:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 80149a6:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80149aa:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 80149ae:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80149b2:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80149b4:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 80149b8:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 80149ba:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80149bc:	eb05 000b 	add.w	r0, r5, fp
 80149c0:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80149c4:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80149c8:	4b15      	ldr	r3, [pc, #84]	; (8014a20 <jpeg_idct_5x10+0x230>)
 80149ca:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80149ce:	eb04 0b05 	add.w	fp, r4, r5
 80149d2:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80149d4:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 80149d6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 80149da:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80149de:	f813 b00b 	ldrb.w	fp, [r3, fp]
 80149e2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80149e4:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80149e8:	9b00      	ldr	r3, [sp, #0]
 80149ea:	5d1c      	ldrb	r4, [r3, r4]
 80149ec:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80149ee:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80149f0:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 80149f2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80149f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80149fa:	5d1c      	ldrb	r4, [r3, r4]
 80149fc:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80149fe:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014a00:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014a02:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014a0a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014a0c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014a10:	5ddb      	ldrb	r3, [r3, r7]
 8014a12:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014a14:	9b02      	ldr	r3, [sp, #8]
 8014a16:	4563      	cmp	r3, ip
 8014a18:	d1b2      	bne.n	8014980 <jpeg_idct_5x10+0x190>
  }
}
 8014a1a:	b039      	add	sp, #228	; 0xe4
 8014a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a20:	ffffba5c 	.word	0xffffba5c

08014a24 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a28:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014a2a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8014a2c:	3a02      	subs	r2, #2
{
 8014a2e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8014a30:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a32:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014a36:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 8014a3a:	f105 0310 	add.w	r3, r5, #16
 8014a3e:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014a40:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8014a44:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014a46:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014a4a:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8014a4e:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014a52:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8014a56:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8014a5a:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a62:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8014a66:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014a68:	ea4a 030b 	orr.w	r3, sl, fp
 8014a6c:	ea4e 0303 	orr.w	r3, lr, r3
 8014a70:	433b      	orrs	r3, r7
 8014a72:	ea48 0303 	orr.w	r3, r8, r3
 8014a76:	4333      	orrs	r3, r6
 8014a78:	ea59 0303 	orrs.w	r3, r9, r3
 8014a7c:	d154      	bne.n	8014b28 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014a7e:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8014a80:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8014a84:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8014a86:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8014a88:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 8014a8a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 8014a8c:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8014a8e:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014a90:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014a92:	9b05      	ldr	r3, [sp, #20]
 8014a94:	42ab      	cmp	r3, r5
 8014a96:	d1d3      	bne.n	8014a40 <jpeg_idct_4x8+0x1c>
 8014a98:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8014a9a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014a9c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014aa0:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014aa4:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014aa6:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014c2c <jpeg_idct_4x8+0x208>
 8014aaa:	331c      	adds	r3, #28
 8014aac:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8014aae:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014ab2:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8014ab4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ab6:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 8014aba:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 8014abc:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8014ac0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ac4:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 8014ac6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014aca:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014ace:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014ad0:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ad4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014ad6:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014ada:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014ade:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ae2:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014ae6:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 8014aea:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014aee:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014af2:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8014af6:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014afa:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 8014afe:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014b00:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014b02:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014b06:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 8014b0a:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 8014b0c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014b10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014b14:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8014b18:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014b1a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014b1e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014b20:	d1c5      	bne.n	8014aae <jpeg_idct_4x8+0x8a>
  }
}
 8014b22:	b027      	add	sp, #156	; 0x9c
 8014b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014b28:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8014b2a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014b2e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8014b32:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014b34:	f241 1651 	movw	r6, #4433	; 0x1151
 8014b38:	eb0b 0300 	add.w	r3, fp, r0
 8014b3c:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014b3e:	f641 067e 	movw	r6, #6270	; 0x187e
 8014b42:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014b46:	4e39      	ldr	r6, [pc, #228]	; (8014c2c <jpeg_idct_4x8+0x208>)
 8014b48:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8014b4c:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014b4e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014b54:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8014b56:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8014b5a:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 8014b5e:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8014b62:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8014b64:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8014b66:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8014b68:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014b6c:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8014b6e:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014b70:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014b74:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8014b78:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014b7a:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014b7e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014b82:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8014b86:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014b8a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8014b8c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014b90:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8014b94:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014b98:	1930      	adds	r0, r6, r4
 8014b9a:	4358      	muls	r0, r3
    z2 += z1;
 8014b9c:	4b24      	ldr	r3, [pc, #144]	; (8014c30 <jpeg_idct_4x8+0x20c>)
 8014b9e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8014ba2:	4b24      	ldr	r3, [pc, #144]	; (8014c34 <jpeg_idct_4x8+0x210>)
 8014ba4:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014ba8:	eb09 040a 	add.w	r4, r9, sl
 8014bac:	4b22      	ldr	r3, [pc, #136]	; (8014c38 <jpeg_idct_4x8+0x214>)
 8014bae:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8014bb0:	f640 138e 	movw	r3, #2446	; 0x98e
 8014bb4:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014bb8:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8014bba:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8014bbe:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014bc2:	4b1e      	ldr	r3, [pc, #120]	; (8014c3c <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 8014bc4:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014bc8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014bcc:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014bd0:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014bd4:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8014bd6:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014bd8:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014bda:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014bde:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8014be2:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014be6:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014be8:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014bea:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014bec:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014bee:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014bf0:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014bf4:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014bf6:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014bfa:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014bfe:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014c00:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014c04:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014c06:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014c08:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014c0a:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014c0c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014c0e:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014c10:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014c12:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014c14:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014c16:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014c18:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014c1a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014c1c:	9b02      	ldr	r3, [sp, #8]
 8014c1e:	eba3 0909 	sub.w	r9, r3, r9
 8014c22:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8014c26:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014c28:	e733      	b.n	8014a92 <jpeg_idct_4x8+0x6e>
 8014c2a:	bf00      	nop
 8014c2c:	ffffc4df 	.word	0xffffc4df
 8014c30:	ffffc13b 	.word	0xffffc13b
 8014c34:	fffff384 	.word	0xfffff384
 8014c38:	ffffe333 	.word	0xffffe333
 8014c3c:	ffffadfd 	.word	0xffffadfd

08014c40 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c44:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014c48:	b095      	sub	sp, #84	; 0x54
 8014c4a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014c4c:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c4e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014c52:	3204      	adds	r2, #4
 8014c54:	3c04      	subs	r4, #4
  wsptr = workspace;
 8014c56:	ae02      	add	r6, sp, #8
{
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c5c:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014c60:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c64:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014c68:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c6a:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c6e:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c70:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c74:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c78:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8014c7a:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014c7c:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014c80:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014c88:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014c8c:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8014c8e:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014c90:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014c96:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014c98:	f242 7731 	movw	r7, #10033	; 0x2731
 8014c9c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014c9e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8014ca2:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014ca6:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ca8:	6a22      	ldr	r2, [r4, #32]
 8014caa:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014cac:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014cae:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014cb2:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014cb6:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014cba:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014cbe:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014cc2:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014cc6:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014cc8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014cca:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014cce:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014cd0:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014cd4:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014cd8:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014cdc:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ce0:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ce4:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ce8:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014cec:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014cf0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014cf4:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014cf6:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014cfa:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014cfe:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014d00:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014d04:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014d08:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014d0a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014d0e:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014d12:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014d14:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014d16:	d1a1      	bne.n	8014c5c <jpeg_idct_3x6+0x1c>
 8014d18:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8014d1a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014d1c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014d20:	f242 7b31 	movw	fp, #10033	; 0x2731
 8014d24:	1f1d      	subs	r5, r3, #4
 8014d26:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014d28:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8014d2c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8014d2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014d30:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8014d34:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8014d36:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d3a:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014d3e:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014d42:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d46:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014d4a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014d4c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8014d50:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8014d54:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014d58:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014d5c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8014d60:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8014d64:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014d68:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014d6c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014d70:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8014d74:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014d78:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8014d7c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014d7e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014d82:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014d84:	d1d0      	bne.n	8014d28 <jpeg_idct_3x6+0xe8>
  }
}
 8014d86:	b015      	add	sp, #84	; 0x54
 8014d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d8c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014d90:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014d94:	b08b      	sub	sp, #44	; 0x2c
 8014d96:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014d98:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014d9a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014d9e:	ad02      	add	r5, sp, #8
 8014da0:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014da2:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014da6:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014daa:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014dac:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014db0:	46b4      	mov	ip, r6
 8014db2:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014db6:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014db8:	4f29      	ldr	r7, [pc, #164]	; (8014e60 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014dba:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014dbc:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014dc0:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8014dc4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014dc6:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014dca:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014dce:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014dd2:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014dd6:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014dda:	6a21      	ldr	r1, [r4, #32]
 8014ddc:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014de0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014de2:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014de6:	eb0a 010b 	add.w	r1, sl, fp
 8014dea:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014dee:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014df2:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014df6:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014dfa:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8014dfe:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8014e02:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8014e06:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014e0a:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8014e0e:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8014e12:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014e14:	d1ca      	bne.n	8014dac <jpeg_idct_2x4+0x20>
 8014e16:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8014e18:	a902      	add	r1, sp, #8
 8014e1a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014e1c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8014e20:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8014e22:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8014e24:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014e28:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8014e2a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014e2e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014e32:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014e34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014e38:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014e3c:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8014e40:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8014e44:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014e48:	5d3c      	ldrb	r4, [r7, r4]
 8014e4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014e4c:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014e4e:	9c01      	ldr	r4, [sp, #4]
 8014e50:	5ca2      	ldrb	r2, [r4, r2]
 8014e52:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8014e56:	d1e1      	bne.n	8014e1c <jpeg_idct_2x4+0x90>
  }
}
 8014e58:	b00b      	add	sp, #44	; 0x2c
 8014e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5e:	bf00      	nop
 8014e60:	ffffc4df 	.word	0xffffc4df

08014e64 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014e64:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014e66:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e68:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014e6c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014e6e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8014e72:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e74:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e76:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014e7a:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8014e7c:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e7e:	3080      	adds	r0, #128	; 0x80
{
 8014e80:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014e82:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014e84:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8014e86:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8014e8a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014e8e:	5d06      	ldrb	r6, [r0, r4]
 8014e90:	681c      	ldr	r4, [r3, #0]
 8014e92:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014e94:	5c42      	ldrb	r2, [r0, r1]
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	555a      	strb	r2, [r3, r5]
}
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}

08014e9c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8014e9c:	6803      	ldr	r3, [r0, #0]
 8014e9e:	2238      	movs	r2, #56	; 0x38
 8014ea0:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	4718      	bx	r3

08014ea8 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014ea8:	688b      	ldr	r3, [r1, #8]
{
 8014eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014eae:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8014eb2:	698b      	ldr	r3, [r1, #24]
{
 8014eb4:	b085      	sub	sp, #20
 8014eb6:	4681      	mov	r9, r0
 8014eb8:	460c      	mov	r4, r1
 8014eba:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8014ebc:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014ec0:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014ec2:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014ec6:	6922      	ldr	r2, [r4, #16]
 8014ec8:	42b2      	cmp	r2, r6
 8014eca:	dc02      	bgt.n	8014ed2 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8014ecc:	b005      	add	sp, #20
 8014ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014ed2:	1b92      	subs	r2, r2, r6
 8014ed4:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014ed6:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014ed8:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014eda:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8014edc:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014ee0:	bfa8      	it	ge
 8014ee2:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014ee4:	69e1      	ldr	r1, [r4, #28]
 8014ee6:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014ee8:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014eea:	428a      	cmp	r2, r1
 8014eec:	bfa8      	it	ge
 8014eee:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014ef0:	42aa      	cmp	r2, r5
 8014ef2:	bfa8      	it	ge
 8014ef4:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014ef6:	2a00      	cmp	r2, #0
 8014ef8:	dde8      	ble.n	8014ecc <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8014efa:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014efe:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8014f00:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014f02:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8014f06:	f1ba 0f00 	cmp.w	sl, #0
 8014f0a:	d00a      	beq.n	8014f22 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014f0c:	9300      	str	r3, [sp, #0]
 8014f0e:	4659      	mov	r1, fp
 8014f10:	463b      	mov	r3, r7
 8014f12:	4648      	mov	r0, r9
 8014f14:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014f16:	47a8      	blx	r5
    file_offset += byte_count;
 8014f18:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014f1a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014f1c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014f1e:	4416      	add	r6, r2
 8014f20:	e7d1      	b.n	8014ec6 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014f22:	9b03      	ldr	r3, [sp, #12]
 8014f24:	4659      	mov	r1, fp
 8014f26:	4648      	mov	r0, r9
 8014f28:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	463b      	mov	r3, r7
 8014f2e:	e7f2      	b.n	8014f16 <do_barray_io+0x6e>

08014f30 <alloc_small>:
{
 8014f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014f34:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014f38:	4606      	mov	r6, r0
 8014f3a:	460d      	mov	r5, r1
 8014f3c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014f3e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014f40:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014f42:	d902      	bls.n	8014f4a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8014f44:	2101      	movs	r1, #1
 8014f46:	f7ff ffa9 	bl	8014e9c <out_of_memory>
  if (odd_bytes > 0)
 8014f4a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014f4e:	bf1c      	itt	ne
 8014f50:	3408      	addne	r4, #8
 8014f52:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014f54:	2d01      	cmp	r5, #1
 8014f56:	d906      	bls.n	8014f66 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014f58:	6833      	ldr	r3, [r6, #0]
 8014f5a:	220f      	movs	r2, #15
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8014f66:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8014f6a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8014f6e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8014f72:	b9e8      	cbnz	r0, 8014fb0 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8014f74:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014f78:	f1ba 0f00 	cmp.w	sl, #0
 8014f7c:	d11e      	bne.n	8014fbc <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8014f7e:	4b1d      	ldr	r3, [pc, #116]	; (8014ff4 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8014f80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8014f84:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8014f88:	429d      	cmp	r5, r3
 8014f8a:	bf28      	it	cs
 8014f8c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8014f8e:	eb05 0b09 	add.w	fp, r5, r9
 8014f92:	4630      	mov	r0, r6
 8014f94:	4659      	mov	r1, fp
 8014f96:	f000 fbcf 	bl	8015738 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8014f9a:	b988      	cbnz	r0, 8014fc0 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014f9c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8014f9e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014fa2:	d803      	bhi.n	8014fac <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8014fa4:	2102      	movs	r1, #2
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f7ff ff78 	bl	8014e9c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8014fac:	465d      	mov	r5, fp
 8014fae:	e7ee      	b.n	8014f8e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8014fb0:	6883      	ldr	r3, [r0, #8]
 8014fb2:	42a3      	cmp	r3, r4
 8014fb4:	d211      	bcs.n	8014fda <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8014fb6:	4682      	mov	sl, r0
 8014fb8:	6800      	ldr	r0, [r0, #0]
 8014fba:	e7da      	b.n	8014f72 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8014fbc:	4b0e      	ldr	r3, [pc, #56]	; (8014ff8 <alloc_small+0xc8>)
 8014fbe:	e7df      	b.n	8014f80 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8014fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014fc2:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8014fc4:	445b      	add	r3, fp
 8014fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8014fc8:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014fca:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8014fcc:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014fd0:	f1ba 0f00 	cmp.w	sl, #0
 8014fd4:	d10b      	bne.n	8014fee <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8014fd6:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014fda:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014fdc:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014fde:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014fe0:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8014fe2:	6882      	ldr	r2, [r0, #8]
 8014fe4:	1b12      	subs	r2, r2, r4
 8014fe6:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014fe8:	4418      	add	r0, r3
}
 8014fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8014fee:	f8ca 0000 	str.w	r0, [sl]
 8014ff2:	e7f2      	b.n	8014fda <alloc_small+0xaa>
 8014ff4:	0802ea4c 	.word	0x0802ea4c
 8014ff8:	0802ea44 	.word	0x0802ea44

08014ffc <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8014ffc:	2901      	cmp	r1, #1
{
 8014ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015002:	4604      	mov	r4, r0
 8015004:	460d      	mov	r5, r1
 8015006:	4616      	mov	r6, r2
 8015008:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801500a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 801500e:	d005      	beq.n	801501c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015010:	6803      	ldr	r3, [r0, #0]
 8015012:	220f      	movs	r2, #15
 8015014:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801501c:	223c      	movs	r2, #60	; 0x3c
 801501e:	4629      	mov	r1, r5
 8015020:	4620      	mov	r0, r4
 8015022:	f7ff ff85 	bl	8014f30 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015026:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015028:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801502a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801502c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801502e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8015032:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015034:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8015036:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 801503a:	9a07      	ldr	r2, [sp, #28]
 801503c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 801503e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8015042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015046 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8015046:	2901      	cmp	r1, #1
{
 8015048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801504c:	4604      	mov	r4, r0
 801504e:	460d      	mov	r5, r1
 8015050:	4616      	mov	r6, r2
 8015052:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015054:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015058:	d005      	beq.n	8015066 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801505a:	6803      	ldr	r3, [r0, #0]
 801505c:	220f      	movs	r2, #15
 801505e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8015066:	223c      	movs	r2, #60	; 0x3c
 8015068:	4629      	mov	r1, r5
 801506a:	4620      	mov	r0, r4
 801506c:	f7ff ff60 	bl	8014f30 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015070:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015072:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015074:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015076:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015078:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 801507c:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 801507e:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8015080:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8015084:	9a07      	ldr	r2, [sp, #28]
 8015086:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8015088:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 801508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015090 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015090:	2901      	cmp	r1, #1
{
 8015092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015096:	4606      	mov	r6, r0
 8015098:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801509a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801509c:	d910      	bls.n	80150c0 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801509e:	6803      	ldr	r3, [r0, #0]
 80150a0:	220f      	movs	r2, #15
 80150a2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 80150aa:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 80150ae:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 80150b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 80150b2:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 80150b4:	bb0b      	cbnz	r3, 80150fa <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 80150b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 80150b8:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 80150ba:	bb69      	cbnz	r1, 8015118 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 80150bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 80150c0:	d1f3      	bne.n	80150aa <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80150c2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80150c4:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80150c6:	b924      	cbnz	r4, 80150d2 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80150c8:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 80150ca:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80150cc:	b95f      	cbnz	r7, 80150e6 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 80150ce:	64af      	str	r7, [r5, #72]	; 0x48
 80150d0:	e7eb      	b.n	80150aa <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 80150d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80150d4:	b12b      	cbz	r3, 80150e2 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80150d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80150d8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80150dc:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80150de:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80150e0:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80150e2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80150e4:	e7ef      	b.n	80150c6 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 80150e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e8:	b12b      	cbz	r3, 80150f6 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80150ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80150f0:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80150f2:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80150f4:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80150f6:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 80150f8:	e7e8      	b.n	80150cc <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 80150fa:	e9d3 8700 	ldrd	r8, r7, [r3]
 80150fe:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015100:	4619      	mov	r1, r3
 8015102:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8015104:	4417      	add	r7, r2
 8015106:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015108:	463a      	mov	r2, r7
 801510a:	f000 fb1e 	bl	801574a <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 801510e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015110:	1bdb      	subs	r3, r3, r7
 8015112:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8015114:	4643      	mov	r3, r8
 8015116:	e7cd      	b.n	80150b4 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8015118:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801511a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 801511c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8015120:	4414      	add	r4, r2
 8015122:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015124:	4622      	mov	r2, r4
 8015126:	f000 fb0a 	bl	801573e <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801512a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801512c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 801512e:	1b1b      	subs	r3, r3, r4
 8015130:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8015132:	e7c2      	b.n	80150ba <free_pool+0x2a>

08015134 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8015134:	b510      	push	{r4, lr}
 8015136:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8015138:	2101      	movs	r1, #1
 801513a:	f7ff ffa9 	bl	8015090 <free_pool>
 801513e:	2100      	movs	r1, #0
 8015140:	4620      	mov	r0, r4
 8015142:	f7ff ffa5 	bl	8015090 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8015146:	4620      	mov	r0, r4
 8015148:	6861      	ldr	r1, [r4, #4]
 801514a:	2254      	movs	r2, #84	; 0x54
 801514c:	f000 faf7 	bl	801573e <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015150:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8015152:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015154:	6063      	str	r3, [r4, #4]
}
 8015156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801515a:	f000 bb02 	b.w	8015762 <jpeg_mem_term>

0801515e <access_virt_barray>:
{
 801515e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8015162:	18d7      	adds	r7, r2, r3
{
 8015164:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015166:	684a      	ldr	r2, [r1, #4]
{
 8015168:	460c      	mov	r4, r1
 801516a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801516e:	42ba      	cmp	r2, r7
 8015170:	d304      	bcc.n	801517c <access_virt_barray+0x1e>
 8015172:	68ca      	ldr	r2, [r1, #12]
 8015174:	429a      	cmp	r2, r3
 8015176:	d301      	bcc.n	801517c <access_virt_barray+0x1e>
 8015178:	680b      	ldr	r3, [r1, #0]
 801517a:	b933      	cbnz	r3, 801518a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801517c:	6803      	ldr	r3, [r0, #0]
 801517e:	2217      	movs	r2, #23
 8015180:	9001      	str	r0, [sp, #4]
 8015182:	615a      	str	r2, [r3, #20]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	4798      	blx	r3
 8015188:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 801518a:	69a3      	ldr	r3, [r4, #24]
 801518c:	42ab      	cmp	r3, r5
 801518e:	d803      	bhi.n	8015198 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8015190:	6922      	ldr	r2, [r4, #16]
 8015192:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8015194:	42bb      	cmp	r3, r7
 8015196:	d221      	bcs.n	80151dc <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8015198:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801519a:	b933      	cbnz	r3, 80151aa <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801519c:	6803      	ldr	r3, [r0, #0]
 801519e:	2247      	movs	r2, #71	; 0x47
 80151a0:	9001      	str	r0, [sp, #4]
 80151a2:	615a      	str	r2, [r3, #20]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	4798      	blx	r3
 80151a8:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 80151aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151ac:	b13b      	cbz	r3, 80151be <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 80151ae:	2201      	movs	r2, #1
 80151b0:	4621      	mov	r1, r4
 80151b2:	9001      	str	r0, [sp, #4]
 80151b4:	f7ff fe78 	bl	8014ea8 <do_barray_io>
      ptr->dirty = FALSE;
 80151b8:	2300      	movs	r3, #0
 80151ba:	9801      	ldr	r0, [sp, #4]
 80151bc:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80151be:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80151c0:	2200      	movs	r2, #0
 80151c2:	4621      	mov	r1, r4
 80151c4:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 80151c6:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80151c8:	bf29      	itett	cs
 80151ca:	6923      	ldrcs	r3, [r4, #16]
 80151cc:	462b      	movcc	r3, r5
 80151ce:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80151d0:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80151d4:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80151d6:	f7ff fe67 	bl	8014ea8 <do_barray_io>
 80151da:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 80151dc:	69e6      	ldr	r6, [r4, #28]
 80151de:	42be      	cmp	r6, r7
 80151e0:	d21c      	bcs.n	801521c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 80151e2:	42ae      	cmp	r6, r5
 80151e4:	d20c      	bcs.n	8015200 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 80151e6:	f1b8 0f00 	cmp.w	r8, #0
 80151ea:	d01b      	beq.n	8015224 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80151ec:	6803      	ldr	r3, [r0, #0]
 80151ee:	2217      	movs	r2, #23
 80151f0:	9001      	str	r0, [sp, #4]
 80151f2:	462e      	mov	r6, r5
 80151f4:	615a      	str	r2, [r3, #20]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	4798      	blx	r3
    if (writable)
 80151fa:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 80151fc:	61e7      	str	r7, [r4, #28]
 80151fe:	e002      	b.n	8015206 <access_virt_barray+0xa8>
    if (writable)
 8015200:	f1b8 0f00 	cmp.w	r8, #0
 8015204:	d1fa      	bne.n	80151fc <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8015206:	6a22      	ldr	r2, [r4, #32]
 8015208:	b1b2      	cbz	r2, 8015238 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801520a:	68a2      	ldr	r2, [r4, #8]
 801520c:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015210:	69a2      	ldr	r2, [r4, #24]
 8015212:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8015214:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8015216:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015218:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 801521a:	d305      	bcc.n	8015228 <access_virt_barray+0xca>
  if (writable)
 801521c:	f1b8 0f00 	cmp.w	r8, #0
 8015220:	d10d      	bne.n	801523e <access_virt_barray+0xe0>
 8015222:	e00e      	b.n	8015242 <access_virt_barray+0xe4>
 8015224:	462e      	mov	r6, r5
 8015226:	e7ee      	b.n	8015206 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015228:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801522c:	464a      	mov	r2, r9
 801522e:	2100      	movs	r1, #0
	undef_row++;
 8015230:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015232:	f014 fb47 	bl	80298c4 <memset>
	undef_row++;
 8015236:	e7ee      	b.n	8015216 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8015238:	f1b8 0f00 	cmp.w	r8, #0
 801523c:	d009      	beq.n	8015252 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 801523e:	2301      	movs	r3, #1
 8015240:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015242:	69a0      	ldr	r0, [r4, #24]
 8015244:	1a2d      	subs	r5, r5, r0
 8015246:	6820      	ldr	r0, [r4, #0]
}
 8015248:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801524c:	b003      	add	sp, #12
 801524e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015252:	6803      	ldr	r3, [r0, #0]
 8015254:	2217      	movs	r2, #23
 8015256:	615a      	str	r2, [r3, #20]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	4798      	blx	r3
  if (writable)
 801525c:	e7f1      	b.n	8015242 <access_virt_barray+0xe4>

0801525e <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801525e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8015262:	429a      	cmp	r2, r3
{
 8015264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015268:	4606      	mov	r6, r0
 801526a:	4688      	mov	r8, r1
 801526c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801526e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8015270:	d902      	bls.n	8015278 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8015272:	2103      	movs	r1, #3
 8015274:	f7ff fe12 	bl	8014e9c <out_of_memory>
  if (odd_bytes > 0)
 8015278:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801527c:	bf1c      	itt	ne
 801527e:	3408      	addne	r4, #8
 8015280:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015282:	f1b8 0f01 	cmp.w	r8, #1
 8015286:	d906      	bls.n	8015296 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015288:	6833      	ldr	r3, [r6, #0]
 801528a:	220f      	movs	r2, #15
 801528c:	4630      	mov	r0, r6
 801528e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8015296:	f104 0110 	add.w	r1, r4, #16
 801529a:	4630      	mov	r0, r6
 801529c:	f000 fa52 	bl	8015744 <jpeg_get_large>
  if (hdr_ptr == NULL)
 80152a0:	4605      	mov	r5, r0
 80152a2:	b918      	cbnz	r0, 80152ac <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80152a4:	2104      	movs	r1, #4
 80152a6:	4630      	mov	r0, r6
 80152a8:	f7ff fdf8 	bl	8014e9c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80152ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80152ae:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80152b2:	3310      	adds	r3, #16
 80152b4:	4423      	add	r3, r4
 80152b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80152b8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80152bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80152be:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 80152c2:	2300      	movs	r3, #0
 80152c4:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 80152c6:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 80152c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152cc <alloc_barray>:
{
 80152cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 80152d0:	01d7      	lsls	r7, r2, #7
{
 80152d2:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80152d4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80152d8:	4680      	mov	r8, r0
 80152da:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80152dc:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 80152de:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80152e0:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 80152e4:	d904      	bls.n	80152f0 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80152e6:	6803      	ldr	r3, [r0, #0]
 80152e8:	2248      	movs	r2, #72	; 0x48
 80152ea:	615a      	str	r2, [r3, #20]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80152f0:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80152f2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80152f6:	4651      	mov	r1, sl
 80152f8:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 80152fa:	bfa8      	it	ge
 80152fc:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 80152fe:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015300:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015302:	f7ff fe15 	bl	8014f30 <alloc_small>
 8015306:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015308:	42ae      	cmp	r6, r5
 801530a:	d302      	bcc.n	8015312 <alloc_barray+0x46>
}
 801530c:	4648      	mov	r0, r9
 801530e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015312:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015314:	4651      	mov	r1, sl
 8015316:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015318:	429c      	cmp	r4, r3
 801531a:	bf28      	it	cs
 801531c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801531e:	fb04 f207 	mul.w	r2, r4, r7
 8015322:	f7ff ff9c 	bl	801525e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015326:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801532a:	4426      	add	r6, r4
 801532c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015330:	4293      	cmp	r3, r2
 8015332:	d0e9      	beq.n	8015308 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8015334:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8015338:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 801533a:	e7f9      	b.n	8015330 <alloc_barray+0x64>

0801533c <alloc_sarray>:
{
 801533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015340:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015342:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015346:	4607      	mov	r7, r0
 8015348:	468a      	mov	sl, r1
  if (ltemp <= 0)
 801534a:	429a      	cmp	r2, r3
{
 801534c:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801534e:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015350:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8015354:	d904      	bls.n	8015360 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8015356:	6803      	ldr	r3, [r0, #0]
 8015358:	2248      	movs	r2, #72	; 0x48
 801535a:	615a      	str	r2, [r3, #20]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015360:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015362:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8015366:	4651      	mov	r1, sl
 8015368:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 801536a:	bfa8      	it	ge
 801536c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801536e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015370:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015372:	f7ff fddd 	bl	8014f30 <alloc_small>
 8015376:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015378:	42ae      	cmp	r6, r5
 801537a:	d302      	bcc.n	8015382 <alloc_sarray+0x46>
}
 801537c:	4648      	mov	r0, r9
 801537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015382:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8015384:	4651      	mov	r1, sl
 8015386:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015388:	429c      	cmp	r4, r3
 801538a:	bf28      	it	cs
 801538c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801538e:	fb04 f208 	mul.w	r2, r4, r8
 8015392:	f7ff ff64 	bl	801525e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015396:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801539a:	4426      	add	r6, r4
 801539c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80153a0:	4293      	cmp	r3, r2
 80153a2:	d0e9      	beq.n	8015378 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 80153a4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 80153a8:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 80153aa:	e7f9      	b.n	80153a0 <alloc_sarray+0x64>

080153ac <realize_virt_arrays>:
{
 80153ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80153b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 80153b4:	2500      	movs	r5, #0
{
 80153b6:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80153b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 80153bc:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80153be:	bb03      	cbnz	r3, 8015402 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80153c0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80153c4:	bb43      	cbnz	r3, 8015418 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 80153c6:	2e00      	cmp	r6, #0
 80153c8:	dd19      	ble.n	80153fe <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 80153ca:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80153ce:	462a      	mov	r2, r5
 80153d0:	4631      	mov	r1, r6
 80153d2:	4638      	mov	r0, r7
 80153d4:	f000 f9bc 	bl	8015750 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 80153d8:	4285      	cmp	r5, r0
 80153da:	dd2a      	ble.n	8015432 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 80153dc:	fb90 f6f6 	sdiv	r6, r0, r6
 80153e0:	2e01      	cmp	r6, #1
 80153e2:	bfb8      	it	lt
 80153e4:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80153e6:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80153ea:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 80153ee:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80153f0:	bb0c      	cbnz	r4, 8015436 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80153f2:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80153f6:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80153fa:	2d00      	cmp	r5, #0
 80153fc:	d141      	bne.n	8015482 <realize_virt_arrays+0xd6>
}
 80153fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	b932      	cbnz	r2, 8015414 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8015406:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 801540a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 801540e:	6859      	ldr	r1, [r3, #4]
 8015410:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015416:	e7d2      	b.n	80153be <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	b942      	cbnz	r2, 801542e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 801541c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015420:	4351      	muls	r1, r2
 8015422:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8015426:	6859      	ldr	r1, [r3, #4]
 8015428:	434a      	muls	r2, r1
 801542a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015430:	e7c8      	b.n	80153c4 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8015432:	4e27      	ldr	r6, [pc, #156]	; (80154d0 <realize_virt_arrays+0x124>)
 8015434:	e7d7      	b.n	80153e6 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015436:	6823      	ldr	r3, [r4, #0]
 8015438:	b9ab      	cbnz	r3, 8015466 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801543a:	6862      	ldr	r2, [r4, #4]
 801543c:	68e1      	ldr	r1, [r4, #12]
 801543e:	1e53      	subs	r3, r2, #1
 8015440:	fbb3 f3f1 	udiv	r3, r3, r1
 8015444:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015446:	429e      	cmp	r6, r3
 8015448:	db0f      	blt.n	801546a <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 801544a:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801544c:	6923      	ldr	r3, [r4, #16]
 801544e:	2101      	movs	r1, #1
 8015450:	68a2      	ldr	r2, [r4, #8]
 8015452:	4638      	mov	r0, r7
 8015454:	f7ff ff72 	bl	801533c <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8015458:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801545c:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 801545e:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8015460:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8015462:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015466:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8015468:	e7c2      	b.n	80153f0 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 801546a:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801546c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801546e:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8015470:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8015472:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015476:	435a      	muls	r2, r3
 8015478:	f000 f96c 	bl	8015754 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 801547c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8015480:	e7e4      	b.n	801544c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015482:	682b      	ldr	r3, [r5, #0]
 8015484:	b9ab      	cbnz	r3, 80154b2 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8015486:	6868      	ldr	r0, [r5, #4]
 8015488:	68e9      	ldr	r1, [r5, #12]
 801548a:	1e43      	subs	r3, r0, #1
 801548c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015490:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015492:	429e      	cmp	r6, r3
 8015494:	db0f      	blt.n	80154b6 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8015496:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015498:	692b      	ldr	r3, [r5, #16]
 801549a:	2101      	movs	r1, #1
 801549c:	68aa      	ldr	r2, [r5, #8]
 801549e:	4638      	mov	r0, r7
 80154a0:	f7ff ff14 	bl	80152cc <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 80154a4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80154a8:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 80154aa:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 80154ac:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 80154ae:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80154b2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80154b4:	e7a1      	b.n	80153fa <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 80154b6:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80154b8:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 80154ba:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80154bc:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80154be:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80154c0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80154c4:	01d2      	lsls	r2, r2, #7
 80154c6:	f000 f945 	bl	8015754 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 80154ca:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80154ce:	e7e3      	b.n	8015498 <realize_virt_arrays+0xec>
 80154d0:	3b9aca00 	.word	0x3b9aca00

080154d4 <access_virt_sarray>:
{
 80154d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 80154d8:	eb02 0803 	add.w	r8, r2, r3
{
 80154dc:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80154de:	684a      	ldr	r2, [r1, #4]
{
 80154e0:	b087      	sub	sp, #28
 80154e2:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80154e4:	4542      	cmp	r2, r8
{
 80154e6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80154ea:	d304      	bcc.n	80154f6 <access_virt_sarray+0x22>
 80154ec:	68ca      	ldr	r2, [r1, #12]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d301      	bcc.n	80154f6 <access_virt_sarray+0x22>
 80154f2:	680b      	ldr	r3, [r1, #0]
 80154f4:	b933      	cbnz	r3, 8015504 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80154f6:	6803      	ldr	r3, [r0, #0]
 80154f8:	2217      	movs	r2, #23
 80154fa:	9003      	str	r0, [sp, #12]
 80154fc:	615a      	str	r2, [r3, #20]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4798      	blx	r3
 8015502:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8015504:	69a3      	ldr	r3, [r4, #24]
 8015506:	42ab      	cmp	r3, r5
 8015508:	d80c      	bhi.n	8015524 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801550a:	6922      	ldr	r2, [r4, #16]
 801550c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801550e:	4543      	cmp	r3, r8
 8015510:	d308      	bcc.n	8015524 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8015512:	69e6      	ldr	r6, [r4, #28]
 8015514:	4546      	cmp	r6, r8
 8015516:	f0c0 8081 	bcc.w	801561c <access_virt_sarray+0x148>
  if (writable)
 801551a:	f1ba 0f00 	cmp.w	sl, #0
 801551e:	f040 80a8 	bne.w	8015672 <access_virt_sarray+0x19e>
 8015522:	e0a8      	b.n	8015676 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8015524:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015526:	b933      	cbnz	r3, 8015536 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8015528:	6803      	ldr	r3, [r0, #0]
 801552a:	2247      	movs	r2, #71	; 0x47
 801552c:	9003      	str	r0, [sp, #12]
 801552e:	615a      	str	r2, [r3, #20]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	4798      	blx	r3
 8015534:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8015536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015538:	b17b      	cbz	r3, 801555a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801553a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801553e:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8015542:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015544:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8015548:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801554c:	6922      	ldr	r2, [r4, #16]
 801554e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015550:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015554:	dc3c      	bgt.n	80155d0 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8015556:	2300      	movs	r3, #0
 8015558:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801555a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801555c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015560:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015562:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8015566:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015568:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801556c:	bf2a      	itet	cs
 801556e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8015572:	462b      	movcc	r3, r5
 8015574:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015578:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 801557a:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801557e:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015580:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015582:	454a      	cmp	r2, r9
 8015584:	ddc5      	ble.n	8015512 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015586:	eba2 0209 	sub.w	r2, r2, r9
 801558a:	6967      	ldr	r7, [r4, #20]
 801558c:	42ba      	cmp	r2, r7
 801558e:	bfa8      	it	ge
 8015590:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8015592:	69a7      	ldr	r7, [r4, #24]
 8015594:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015596:	1bf6      	subs	r6, r6, r7
 8015598:	42b2      	cmp	r2, r6
 801559a:	bfa8      	it	ge
 801559c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801559e:	6866      	ldr	r6, [r4, #4]
 80155a0:	1bf6      	subs	r6, r6, r7
 80155a2:	42b2      	cmp	r2, r6
 80155a4:	bfa8      	it	ge
 80155a6:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 80155a8:	2a00      	cmp	r2, #0
 80155aa:	ddb2      	ble.n	8015512 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 80155ac:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80155b0:	6822      	ldr	r2, [r4, #0]
 80155b2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80155b4:	9600      	str	r6, [sp, #0]
 80155b6:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80155ba:	9305      	str	r3, [sp, #20]
 80155bc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80155c0:	47b8      	blx	r7
    file_offset += byte_count;
 80155c2:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80155c4:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80155c6:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80155c8:	4491      	add	r9, r2
 80155ca:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80155ce:	e7d6      	b.n	801557e <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80155d0:	eba2 0209 	sub.w	r2, r2, r9
 80155d4:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80155d6:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80155d8:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80155da:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80155de:	bfa8      	it	ge
 80155e0:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80155e2:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80155e4:	42ba      	cmp	r2, r7
 80155e6:	bfa8      	it	ge
 80155e8:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80155ea:	eba6 070c 	sub.w	r7, r6, ip
 80155ee:	42ba      	cmp	r2, r7
 80155f0:	bfa8      	it	ge
 80155f2:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 80155f4:	2a00      	cmp	r2, #0
 80155f6:	ddae      	ble.n	8015556 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 80155f8:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80155fc:	6822      	ldr	r2, [r4, #0]
 80155fe:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015600:	9700      	str	r7, [sp, #0]
 8015602:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8015606:	9305      	str	r3, [sp, #20]
 8015608:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801560c:	47b0      	blx	r6
    file_offset += byte_count;
 801560e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015610:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015612:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015614:	4491      	add	r9, r2
 8015616:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801561a:	e797      	b.n	801554c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 801561c:	42ae      	cmp	r6, r5
 801561e:	d20d      	bcs.n	801563c <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8015620:	f1ba 0f00 	cmp.w	sl, #0
 8015624:	d020      	beq.n	8015668 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015626:	6803      	ldr	r3, [r0, #0]
 8015628:	2217      	movs	r2, #23
 801562a:	9003      	str	r0, [sp, #12]
 801562c:	462e      	mov	r6, r5
 801562e:	615a      	str	r2, [r3, #20]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	4798      	blx	r3
    if (writable)
 8015634:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8015636:	f8c4 801c 	str.w	r8, [r4, #28]
 801563a:	e002      	b.n	8015642 <access_virt_sarray+0x16e>
    if (writable)
 801563c:	f1ba 0f00 	cmp.w	sl, #0
 8015640:	d1f9      	bne.n	8015636 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 8015642:	6a22      	ldr	r2, [r4, #32]
 8015644:	b192      	cbz	r2, 801566c <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015646:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015648:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801564a:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 801564c:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8015650:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015652:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015654:	f4bf af61 	bcs.w	801551a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015658:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801565c:	463a      	mov	r2, r7
 801565e:	2100      	movs	r1, #0
	undef_row++;
 8015660:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015662:	f014 f92f 	bl	80298c4 <memset>
	undef_row++;
 8015666:	e7f3      	b.n	8015650 <access_virt_sarray+0x17c>
 8015668:	462e      	mov	r6, r5
 801566a:	e7ea      	b.n	8015642 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 801566c:	f1ba 0f00 	cmp.w	sl, #0
 8015670:	d009      	beq.n	8015686 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 8015672:	2301      	movs	r3, #1
 8015674:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015676:	69a0      	ldr	r0, [r4, #24]
 8015678:	1a2d      	subs	r5, r5, r0
 801567a:	6820      	ldr	r0, [r4, #0]
}
 801567c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015680:	b007      	add	sp, #28
 8015682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015686:	6803      	ldr	r3, [r0, #0]
 8015688:	2217      	movs	r2, #23
 801568a:	615a      	str	r2, [r3, #20]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4798      	blx	r3
  if (writable)
 8015690:	e7f1      	b.n	8015676 <access_virt_sarray+0x1a2>
	...

08015694 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8015694:	2300      	movs	r3, #0
{
 8015696:	b570      	push	{r4, r5, r6, lr}
 8015698:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801569a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801569c:	f000 f85f 	bl	801575e <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80156a0:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80156a2:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80156a4:	4628      	mov	r0, r5
 80156a6:	f000 f847 	bl	8015738 <jpeg_get_small>

  if (mem == NULL) {
 80156aa:	4604      	mov	r4, r0
 80156ac:	b948      	cbnz	r0, 80156c2 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 80156ae:	4628      	mov	r0, r5
 80156b0:	f000 f857 	bl	8015762 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 80156b4:	682b      	ldr	r3, [r5, #0]
 80156b6:	2238      	movs	r2, #56	; 0x38
 80156b8:	4628      	mov	r0, r5
 80156ba:	e9c3 2405 	strd	r2, r4, [r3, #20]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 80156c2:	4b12      	ldr	r3, [pc, #72]	; (801570c <jinit_memory_mgr+0x78>)
 80156c4:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 80156c6:	4b12      	ldr	r3, [pc, #72]	; (8015710 <jinit_memory_mgr+0x7c>)
 80156c8:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80156ca:	4b12      	ldr	r3, [pc, #72]	; (8015714 <jinit_memory_mgr+0x80>)
 80156cc:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 80156ce:	4b12      	ldr	r3, [pc, #72]	; (8015718 <jinit_memory_mgr+0x84>)
 80156d0:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 80156d2:	4b12      	ldr	r3, [pc, #72]	; (801571c <jinit_memory_mgr+0x88>)
 80156d4:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 80156d6:	4b12      	ldr	r3, [pc, #72]	; (8015720 <jinit_memory_mgr+0x8c>)
 80156d8:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 80156da:	4b12      	ldr	r3, [pc, #72]	; (8015724 <jinit_memory_mgr+0x90>)
 80156dc:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 80156de:	4b12      	ldr	r3, [pc, #72]	; (8015728 <jinit_memory_mgr+0x94>)
 80156e0:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 80156e2:	4b12      	ldr	r3, [pc, #72]	; (801572c <jinit_memory_mgr+0x98>)
 80156e4:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80156e6:	4b12      	ldr	r3, [pc, #72]	; (8015730 <jinit_memory_mgr+0x9c>)
 80156e8:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 80156ea:	4b12      	ldr	r3, [pc, #72]	; (8015734 <jinit_memory_mgr+0xa0>)
 80156ec:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80156ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80156f2:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 80156f6:	2300      	movs	r3, #0
 80156f8:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 80156fa:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 80156fc:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 80156fe:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8015700:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8015704:	2354      	movs	r3, #84	; 0x54
 8015706:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8015708:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	08014f31 	.word	0x08014f31
 8015710:	0801525f 	.word	0x0801525f
 8015714:	0801533d 	.word	0x0801533d
 8015718:	080152cd 	.word	0x080152cd
 801571c:	08015047 	.word	0x08015047
 8015720:	08014ffd 	.word	0x08014ffd
 8015724:	080153ad 	.word	0x080153ad
 8015728:	080154d5 	.word	0x080154d5
 801572c:	0801515f 	.word	0x0801515f
 8015730:	08015091 	.word	0x08015091
 8015734:	08015135 	.word	0x08015135

08015738 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8015738:	4608      	mov	r0, r1
 801573a:	f7f2 b8a5 	b.w	8007888 <pvPortMalloc>

0801573e <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 801573e:	4608      	mov	r0, r1
 8015740:	f7f2 b938 	b.w	80079b4 <vPortFree>

08015744 <jpeg_get_large>:
 8015744:	4608      	mov	r0, r1
 8015746:	f7f2 b89f 	b.w	8007888 <pvPortMalloc>

0801574a <jpeg_free_large>:
 801574a:	4608      	mov	r0, r1
 801574c:	f7f2 b932 	b.w	80079b4 <vPortFree>

08015750 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8015750:	4610      	mov	r0, r2
 8015752:	4770      	bx	lr

08015754 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8015754:	6803      	ldr	r3, [r0, #0]
 8015756:	2233      	movs	r2, #51	; 0x33
 8015758:	615a      	str	r2, [r3, #20]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	4718      	bx	r3

0801575e <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801575e:	2000      	movs	r0, #0
 8015760:	4770      	bx	lr

08015762 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8015762:	4770      	bx	lr

08015764 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8015764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015768:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801576c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801576e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015772:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015774:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015776:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 801577a:	bf16      	itet	ne
 801577c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801577e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015782:	461e      	movne	r6, r3
 8015784:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015786:	6843      	ldr	r3, [r0, #4]
 8015788:	f506 7280 	add.w	r2, r6, #256	; 0x100
 801578c:	689f      	ldr	r7, [r3, #8]
 801578e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015790:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8015792:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8015796:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801579a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801579c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801579e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80157a0:	429a      	cmp	r2, r3
 80157a2:	dc01      	bgt.n	80157a8 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 80157a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80157a8:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 80157ac:	009f      	lsls	r7, r3, #2
 80157ae:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 80157b0:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 80157b4:	b126      	cbz	r6, 80157c0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 80157b6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80157ba:	32ff      	adds	r2, #255	; 0xff
 80157bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 80157c0:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80157c4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 80157c8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 80157ca:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80157cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80157d0:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80157d2:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 80157d6:	428f      	cmp	r7, r1
 80157d8:	db0a      	blt.n	80157f0 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 80157da:	fb10 fb0c 	smulbb	fp, r0, ip
 80157de:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80157e2:	3101      	adds	r1, #1
 80157e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80157e8:	d1f5      	bne.n	80157d6 <create_colorindex+0x72>
    if (pad)
 80157ea:	b93e      	cbnz	r6, 80157fc <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80157ec:	3301      	adds	r3, #1
 80157ee:	e7d6      	b.n	801579e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 80157f0:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80157f2:	fb08 a700 	mla	r7, r8, r0, sl
 80157f6:	fb97 f7f9 	sdiv	r7, r7, r9
 80157fa:	e7ec      	b.n	80157d6 <create_colorindex+0x72>
 80157fc:	4611      	mov	r1, r2
 80157fe:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015802:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015806:	f892 9000 	ldrb.w	r9, [r2]
 801580a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801580e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015810:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015814:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015818:	d1f5      	bne.n	8015806 <create_colorindex+0xa2>
 801581a:	e7e7      	b.n	80157ec <create_colorindex+0x88>

0801581c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801581c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8015820:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8015824:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8015826:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801582a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 801582e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8015832:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015834:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8015836:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015838:	4540      	cmp	r0, r8
 801583a:	db02      	blt.n	8015842 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 801583c:	b003      	add	sp, #12
 801583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8015842:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8015846:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8015848:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801584c:	eb04 0a03 	add.w	sl, r4, r3
 8015850:	4554      	cmp	r4, sl
 8015852:	d10f      	bne.n	8015874 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8015854:	3001      	adds	r0, #1
 8015856:	e7ef      	b.n	8015838 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015858:	f815 b003 	ldrb.w	fp, [r5, r3]
 801585c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8015860:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015862:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015866:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015868:	4563      	cmp	r3, ip
 801586a:	dbf5      	blt.n	8015858 <color_quantize+0x3c>
 801586c:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 801586e:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8015872:	e7ed      	b.n	8015850 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8015874:	2300      	movs	r3, #0
      pixcode = 0;
 8015876:	461e      	mov	r6, r3
 8015878:	e7f6      	b.n	8015868 <color_quantize+0x4c>

0801587a <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 801587a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801587e:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015882:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015886:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015888:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801588a:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801588e:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015892:	4298      	cmp	r0, r3
 8015894:	db01      	blt.n	801589a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801589a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801589e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80158a2:	eb05 0a09 	add.w	sl, r5, r9
 80158a6:	4555      	cmp	r5, sl
 80158a8:	f104 0403 	add.w	r4, r4, #3
 80158ac:	d101      	bne.n	80158b2 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 80158ae:	3001      	adds	r0, #1
 80158b0:	e7ef      	b.n	8015892 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 80158b2:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80158b6:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 80158ba:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 80158be:	f81e 6006 	ldrb.w	r6, [lr, r6]
 80158c2:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 80158c4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80158c8:	f818 6006 	ldrb.w	r6, [r8, r6]
 80158cc:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 80158ce:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 80158d2:	e7e8      	b.n	80158a6 <color_quantize3+0x2c>

080158d4 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 80158d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d8:	469a      	mov	sl, r3
 80158da:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80158dc:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80158e0:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80158e4:	699a      	ldr	r2, [r3, #24]
 80158e6:	6811      	ldr	r1, [r2, #0]
 80158e8:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80158ea:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80158ec:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80158ee:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80158f0:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80158f2:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 80158f4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80158f6:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80158f8:	4551      	cmp	r1, sl
 80158fa:	db02      	blt.n	8015902 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 80158fc:	b00b      	add	sp, #44	; 0x2c
 80158fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8015902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8015904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015906:	9c07      	ldr	r4, [sp, #28]
 8015908:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 801590c:	0190      	lsls	r0, r2, #6
 801590e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015912:	9002      	str	r0, [sp, #8]
 8015914:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8015918:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 801591a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 801591c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8015920:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8015922:	9808      	ldr	r0, [sp, #32]
 8015924:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015928:	4575      	cmp	r5, lr
 801592a:	f100 0003 	add.w	r0, r0, #3
 801592e:	d106      	bne.n	801593e <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015930:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015932:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015934:	3201      	adds	r2, #1
 8015936:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 801593a:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801593c:	e7dc      	b.n	80158f8 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801593e:	9e02      	ldr	r6, [sp, #8]
 8015940:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8015944:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8015948:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 801594a:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801594c:	f858 7006 	ldr.w	r7, [r8, r6]
 8015950:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015952:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015954:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015958:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801595c:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8015960:	f859 7006 	ldr.w	r7, [r9, r6]
 8015964:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015966:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015968:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801596c:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801596e:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015970:	9a06      	ldr	r2, [sp, #24]
 8015972:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015976:	4417      	add	r7, r2
 8015978:	5dbe      	ldrb	r6, [r7, r6]
 801597a:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 801597c:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8015980:	e7d2      	b.n	8015928 <quantize3_ord_dither+0x54>

08015982 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015982:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8015984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015986:	3202      	adds	r2, #2
 8015988:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 801598c:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801598e:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015990:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015992:	3644      	adds	r6, #68	; 0x44
 8015994:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015996:	42bb      	cmp	r3, r7
 8015998:	dc00      	bgt.n	801599c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 801599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801599c:	6863      	ldr	r3, [r4, #4]
 801599e:	462a      	mov	r2, r5
 80159a0:	2101      	movs	r1, #1
 80159a2:	4620      	mov	r0, r4
 80159a4:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80159a6:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80159a8:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 80159aa:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 80159ae:	e7f1      	b.n	8015994 <alloc_fs_workspace+0x12>

080159b0 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 80159b0:	4770      	bx	lr

080159b2 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 80159b2:	6803      	ldr	r3, [r0, #0]
 80159b4:	222f      	movs	r2, #47	; 0x2f
 80159b6:	615a      	str	r2, [r3, #20]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4718      	bx	r3

080159bc <start_pass_1_quant>:
{
 80159bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80159c0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80159c4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 80159c6:	692b      	ldr	r3, [r5, #16]
 80159c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 80159cc:	696b      	ldr	r3, [r5, #20]
 80159ce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 80159d2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d00b      	beq.n	80159f2 <start_pass_1_quant+0x36>
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d05e      	beq.n	8015a9c <start_pass_1_quant+0xe0>
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d174      	bne.n	8015acc <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 80159e2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80159e4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 80159e6:	bf0c      	ite	eq
 80159e8:	4b3c      	ldreq	r3, [pc, #240]	; (8015adc <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 80159ea:	4b3d      	ldrne	r3, [pc, #244]	; (8015ae0 <start_pass_1_quant+0x124>)
 80159ec:	606b      	str	r3, [r5, #4]
}
 80159ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 80159f2:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 80159f4:	4b3b      	ldr	r3, [pc, #236]	; (8015ae4 <start_pass_1_quant+0x128>)
 80159f6:	4a3c      	ldr	r2, [pc, #240]	; (8015ae8 <start_pass_1_quant+0x12c>)
 80159f8:	2903      	cmp	r1, #3
 80159fa:	bf18      	it	ne
 80159fc:	4613      	movne	r3, r2
 80159fe:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015a00:	2300      	movs	r3, #0
 8015a02:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015a04:	69eb      	ldr	r3, [r5, #28]
 8015a06:	b90b      	cbnz	r3, 8015a0c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015a08:	f7ff feac 	bl	8015764 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8015a0c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8015a0e:	2d00      	cmp	r5, #0
 8015a10:	d1ed      	bne.n	80159ee <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015a12:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a16:	f107 0820 	add.w	r8, r7, #32
 8015a1a:	4646      	mov	r6, r8
 8015a1c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015a1e:	429d      	cmp	r5, r3
 8015a20:	dae5      	bge.n	80159ee <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015a22:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8015a26:	4642      	mov	r2, r8
 8015a28:	2300      	movs	r3, #0
 8015a2a:	429d      	cmp	r5, r3
 8015a2c:	d007      	beq.n	8015a3e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 8015a2e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015a32:	4589      	cmp	r9, r1
 8015a34:	d130      	bne.n	8015a98 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8015a36:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015a3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 8015a3c:	bb48      	cbnz	r0, 8015a92 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015a3e:	6863      	ldr	r3, [r4, #4]
 8015a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a44:	2101      	movs	r1, #1
 8015a46:	4620      	mov	r0, r4
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8015a4c:	f109 32ff 	add.w	r2, r9, #4294967295
 8015a50:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8015a54:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015af0 <start_pass_1_quant+0x134>
 8015a58:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015a5a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015a5e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8015a62:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8015a64:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8015a6e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8015a72:	bf45      	ittet	mi
 8015a74:	425b      	negmi	r3, r3
 8015a76:	fb93 f3f2 	sdivmi	r3, r3, r2
 8015a7a:	fb93 f3f2 	sdivpl	r3, r3, r2
 8015a7e:	425b      	negmi	r3, r3
 8015a80:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015a84:	458e      	cmp	lr, r1
 8015a86:	d1ed      	bne.n	8015a64 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015a88:	3140      	adds	r1, #64	; 0x40
 8015a8a:	f10c 0c10 	add.w	ip, ip, #16
 8015a8e:	458a      	cmp	sl, r1
 8015a90:	d1e5      	bne.n	8015a5e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a92:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015a94:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a96:	e7c1      	b.n	8015a1c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015a98:	3301      	adds	r3, #1
 8015a9a:	e7c6      	b.n	8015a2a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8015a9c:	4b13      	ldr	r3, [pc, #76]	; (8015aec <start_pass_1_quant+0x130>)
 8015a9e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015aa4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015aa6:	b90b      	cbnz	r3, 8015aac <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015aa8:	f7ff ff6b 	bl	8015982 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015aac:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015aae:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8015ab0:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015ab2:	3202      	adds	r2, #2
 8015ab4:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015ab6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015ab8:	42bb      	cmp	r3, r7
 8015aba:	dd98      	ble.n	80159ee <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015abc:	4632      	mov	r2, r6
 8015abe:	2100      	movs	r1, #0
 8015ac0:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8015ac4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015ac6:	f013 fefd 	bl	80298c4 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8015aca:	e7f4      	b.n	8015ab6 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015acc:	6803      	ldr	r3, [r0, #0]
 8015ace:	2231      	movs	r2, #49	; 0x31
}
 8015ad0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015ad4:	615a      	str	r2, [r3, #20]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	4718      	bx	r3
 8015ada:	bf00      	nop
 8015adc:	0801587b 	.word	0x0801587b
 8015ae0:	0801581d 	.word	0x0801581d
 8015ae4:	080158d5 	.word	0x080158d5
 8015ae8:	08015c2d 	.word	0x08015c2d
 8015aec:	08015af5 	.word	0x08015af5
 8015af0:	0802ea60 	.word	0x0802ea60

08015af4 <quantize_fs_dither>:
{
 8015af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af8:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 8015afa:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015afc:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8015b00:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015b04:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8015b08:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015b0c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015b10:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015b12:	1e6b      	subs	r3, r5, #1
 8015b14:	9304      	str	r3, [sp, #16]
 8015b16:	fb03 f309 	mul.w	r3, r3, r9
 8015b1a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015b1c:	1c6b      	adds	r3, r5, #1
 8015b1e:	005b      	lsls	r3, r3, #1
 8015b20:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8015b22:	2300      	movs	r3, #0
 8015b24:	9300      	str	r3, [sp, #0]
 8015b26:	9a00      	ldr	r2, [sp, #0]
 8015b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	db02      	blt.n	8015b34 <quantize_fs_dither+0x40>
}
 8015b2e:	b011      	add	sp, #68	; 0x44
 8015b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015b34:	2100      	movs	r1, #0
 8015b36:	462a      	mov	r2, r5
 8015b38:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8015b3c:	f013 fec2 	bl	80298c4 <memset>
    for (ci = 0; ci < nc; ci++) {
 8015b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b44:	2100      	movs	r1, #0
 8015b46:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8015b48:	f1c9 0300 	rsb	r3, r9, #0
 8015b4c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 8015b4e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8015b50:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8015b52:	db06      	blt.n	8015b62 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015b54:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8015b58:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015b5a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 8015b5c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015b5e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8015b60:	e7e0      	b.n	8015b24 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8015b62:	9800      	ldr	r0, [sp, #0]
 8015b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 8015b6a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 8015b6e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015b72:	9b05      	ldr	r3, [sp, #20]
 8015b74:	f853 cb04 	ldr.w	ip, [r3], #4
 8015b78:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 8015b7a:	b312      	cbz	r2, 8015bc2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015b7c:	9b08      	ldr	r3, [sp, #32]
 8015b7e:	449e      	add	lr, r3
	output_ptr += width-1;
 8015b80:	9b04      	ldr	r3, [sp, #16]
 8015b82:	4418      	add	r0, r3
	dirnc = -nc;
 8015b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b86:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b8a:	449c      	add	ip, r3
	dir = -1;
 8015b8c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8015b90:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8015b92:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8015b94:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8015b96:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8015b98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015b9c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8015b9e:	6923      	ldr	r3, [r4, #16]
 8015ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ba4:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015ba6:	9b02      	ldr	r3, [sp, #8]
 8015ba8:	005b      	lsls	r3, r3, #1
 8015baa:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8015bac:	2300      	movs	r3, #0
      cur = 0;
 8015bae:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015bb0:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015bb2:	9a03      	ldr	r2, [sp, #12]
 8015bb4:	b94a      	cbnz	r2, 8015bca <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015bb6:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8015bb8:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015bba:	436a      	muls	r2, r5
 8015bbc:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015bc0:	e7c5      	b.n	8015b4e <quantize_fs_dither+0x5a>
	dir = 1;
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8015bc8:	e7e2      	b.n	8015b90 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015bca:	9a01      	ldr	r2, [sp, #4]
 8015bcc:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015bd2:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015bd4:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015bd8:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015bdc:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8015be2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015be6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015bea:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015bee:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015bf0:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8015bf4:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015bf8:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015bfc:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015bfe:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015c02:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8015c04:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8015c06:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8015c0a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8015c0c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015c0e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015c10:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015c14:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015c16:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8015c18:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8015c1a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015c1c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8015c1e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8015c20:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8015c24:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015c28:	4417      	add	r7, r2
 8015c2a:	e7c2      	b.n	8015bb2 <quantize_fs_dither+0xbe>

08015c2c <quantize_ord_dither>:
{
 8015c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c30:	b089      	sub	sp, #36	; 0x24
 8015c32:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015c34:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8015c38:	1f14      	subs	r4, r2, #4
{
 8015c3a:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015c3c:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 8015c3e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8015c40:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015c44:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015c46:	9b07      	ldr	r3, [sp, #28]
 8015c48:	429f      	cmp	r7, r3
 8015c4a:	db02      	blt.n	8015c52 <quantize_ord_dither+0x26>
}
 8015c4c:	b009      	add	sp, #36	; 0x24
 8015c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015c52:	4652      	mov	r2, sl
 8015c54:	2100      	movs	r1, #0
 8015c56:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015c5a:	f013 fe33 	bl	80298c4 <memset>
    row_index = cquantize->row_index;
 8015c5e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8015c62:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8015c66:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8015c68:	019a      	lsls	r2, r3, #6
 8015c6a:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8015c6c:	9a01      	ldr	r2, [sp, #4]
 8015c6e:	4290      	cmp	r0, r2
 8015c70:	db06      	blt.n	8015c80 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015c72:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8015c74:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015c76:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8015c7a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015c7e:	e7e2      	b.n	8015c46 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8015c80:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8015c84:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8015c86:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8015c8a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8015c8e:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015c90:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015c92:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015c94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015c98:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8015c9a:	eb0a 0205 	add.w	r2, sl, r5
 8015c9e:	9206      	str	r2, [sp, #24]
 8015ca0:	9a06      	ldr	r2, [sp, #24]
 8015ca2:	4295      	cmp	r5, r2
 8015ca4:	d101      	bne.n	8015caa <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015ca6:	3001      	adds	r0, #1
 8015ca8:	e7e0      	b.n	8015c6c <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015caa:	782a      	ldrb	r2, [r5, #0]
 8015cac:	f891 e000 	ldrb.w	lr, [r1]
 8015cb0:	9204      	str	r2, [sp, #16]
 8015cb2:	9a02      	ldr	r2, [sp, #8]
 8015cb4:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015cb8:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015cba:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015cbc:	f85b b002 	ldr.w	fp, [fp, r2]
 8015cc0:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015cc2:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015cc6:	4496      	add	lr, r2
 8015cc8:	9a04      	ldr	r2, [sp, #16]
 8015cca:	f81e e00b 	ldrb.w	lr, [lr, fp]
 8015cce:	4472      	add	r2, lr
 8015cd0:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8015cd4:	9a01      	ldr	r2, [sp, #4]
 8015cd6:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8015cd8:	e7e2      	b.n	8015ca0 <quantize_ord_dither+0x74>
	...

08015cdc <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015cdc:	6843      	ldr	r3, [r0, #4]
 8015cde:	2258      	movs	r2, #88	; 0x58
 8015ce0:	2101      	movs	r1, #1
 8015ce2:	681b      	ldr	r3, [r3, #0]
{
 8015ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce8:	b085      	sub	sp, #20
 8015cea:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015cec:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015cee:	4b67      	ldr	r3, [pc, #412]	; (8015e8c <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015cf0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015cf4:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8015cf6:	4b66      	ldr	r3, [pc, #408]	; (8015e90 <jinit_1pass_quantizer+0x1b4>)
 8015cf8:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8015cfa:	4b66      	ldr	r3, [pc, #408]	; (8015e94 <jinit_1pass_quantizer+0x1b8>)
 8015cfc:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015cfe:	2300      	movs	r3, #0
 8015d00:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015d02:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015d04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015d06:	2b04      	cmp	r3, #4
 8015d08:	dd07      	ble.n	8015d1a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8015d0a:	6823      	ldr	r3, [r4, #0]
 8015d0c:	2039      	movs	r0, #57	; 0x39
 8015d0e:	2204      	movs	r2, #4
 8015d10:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4620      	mov	r0, r4
 8015d18:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8015d1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d20:	dd08      	ble.n	8015d34 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015d22:	6823      	ldr	r3, [r4, #0]
 8015d24:	213b      	movs	r1, #59	; 0x3b
 8015d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015d34:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8015d38:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8015d3a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8015d3e:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8015d42:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8015d46:	469a      	mov	sl, r3
 8015d48:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8015d4a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8015d4c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8015d4e:	4588      	cmp	r8, r1
 8015d50:	dc47      	bgt.n	8015de2 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8015d52:	4591      	cmp	r9, r2
 8015d54:	daf7      	bge.n	8015d46 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8015d56:	f1ba 0f01 	cmp.w	sl, #1
 8015d5a:	d106      	bne.n	8015d6a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	213a      	movs	r1, #58	; 0x3a
 8015d60:	4620      	mov	r0, r4
 8015d62:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 8015d6a:	463a      	mov	r2, r7
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	2501      	movs	r5, #1
 8015d70:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8015d72:	4598      	cmp	r8, r3
 8015d74:	dc38      	bgt.n	8015de8 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015d76:	f8df c120 	ldr.w	ip, [pc, #288]	; 8015e98 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 8015d7a:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8015d7c:	460b      	mov	r3, r1
 8015d7e:	4598      	cmp	r8, r3
 8015d80:	dc38      	bgt.n	8015df4 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8015d82:	2900      	cmp	r1, #0
 8015d84:	d1f9      	bne.n	8015d7a <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8015d86:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015d88:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8015d8a:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015d8c:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8015d8e:	d148      	bne.n	8015e22 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015d90:	619d      	str	r5, [r3, #24]
 8015d92:	6a31      	ldr	r1, [r6, #32]
 8015d94:	61d9      	str	r1, [r3, #28]
 8015d96:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015d98:	6219      	str	r1, [r3, #32]
 8015d9a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015d9c:	6259      	str	r1, [r3, #36]	; 0x24
 8015d9e:	2160      	movs	r1, #96	; 0x60
 8015da0:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015da2:	2101      	movs	r1, #1
 8015da4:	4620      	mov	r0, r4
 8015da6:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015da8:	6863      	ldr	r3, [r4, #4]
 8015daa:	462a      	mov	r2, r5
 8015dac:	2101      	movs	r1, #1
 8015dae:	689f      	ldr	r7, [r3, #8]
 8015db0:	4620      	mov	r0, r4
 8015db2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015db4:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015db6:	46ae      	mov	lr, r5
 8015db8:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8015dba:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015dbc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	db33      	blt.n	8015e2a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8015dc2:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015dc4:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015dc6:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015dca:	f7ff fccb 	bl	8015764 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015dce:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015dd2:	2b02      	cmp	r3, #2
 8015dd4:	d156      	bne.n	8015e84 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8015dd6:	4620      	mov	r0, r4
}
 8015dd8:	b005      	add	sp, #20
 8015dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015dde:	f7ff bdd0 	b.w	8015982 <alloc_fs_workspace>
      temp *= iroot;
 8015de2:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015de4:	3101      	adds	r1, #1
 8015de6:	e7b2      	b.n	8015d4e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015de8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8015dec:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8015dee:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8015df2:	e7be      	b.n	8015d72 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015df4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015df8:	2a02      	cmp	r2, #2
 8015dfa:	bf0c      	ite	eq
 8015dfc:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8015e00:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8015e02:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8015e06:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015e0a:	fb0a 2202 	mla	r2, sl, r2, r2
 8015e0e:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8015e12:	4591      	cmp	r9, r2
 8015e14:	dbb5      	blt.n	8015d82 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8015e16:	3301      	adds	r3, #1
 8015e18:	4615      	mov	r5, r2
      changed = TRUE;
 8015e1a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8015e1c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8015e20:	e7ad      	b.n	8015d7e <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015e22:	2161      	movs	r1, #97	; 0x61
 8015e24:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8015e28:	e7bb      	b.n	8015da2 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015e2a:	9b01      	ldr	r3, [sp, #4]
 8015e2c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8015e30:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015e34:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015e36:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 8015e3a:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015e3e:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8015e40:	2300      	movs	r3, #0
 8015e42:	469a      	mov	sl, r3
 8015e44:	4599      	cmp	r9, r3
 8015e46:	dc02      	bgt.n	8015e4e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015e48:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8015e4a:	46c6      	mov	lr, r8
 8015e4c:	e7b6      	b.n	8015dbc <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015e4e:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8015e52:	9f03      	ldr	r7, [sp, #12]
 8015e54:	4439      	add	r1, r7
 8015e56:	fb91 f1fb 	sdiv	r1, r1, fp
 8015e5a:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015e5c:	4651      	mov	r1, sl
 8015e5e:	42a9      	cmp	r1, r5
 8015e60:	db0d      	blt.n	8015e7e <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8015e62:	3301      	adds	r3, #1
 8015e64:	44c2      	add	sl, r8
 8015e66:	e7ed      	b.n	8015e44 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015e68:	9f02      	ldr	r7, [sp, #8]
 8015e6a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8015e6e:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8015e70:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015e74:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8015e76:	45e0      	cmp	r8, ip
 8015e78:	dcf6      	bgt.n	8015e68 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015e7a:	4471      	add	r1, lr
 8015e7c:	e7ef      	b.n	8015e5e <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 8015e7e:	f04f 0c00 	mov.w	ip, #0
 8015e82:	e7f8      	b.n	8015e76 <jinit_1pass_quantizer+0x19a>
}
 8015e84:	b005      	add	sp, #20
 8015e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e8a:	bf00      	nop
 8015e8c:	080159bd 	.word	0x080159bd
 8015e90:	080159b1 	.word	0x080159b1
 8015e94:	080159b3 	.word	0x080159b3
 8015e98:	0802ea54 	.word	0x0802ea54

08015e9c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8015e9c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8015ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8015ea2:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015ea6:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8015ea8:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 8015eac:	429c      	cmp	r4, r3
 8015eae:	db00      	blt.n	8015eb2 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8015eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8015eb2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8015eb6:	4677      	mov	r7, lr
 8015eb8:	3203      	adds	r2, #3
 8015eba:	b90f      	cbnz	r7, 8015ec0 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 8015ebc:	3401      	adds	r4, #1
 8015ebe:	e7f5      	b.n	8015eac <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015ec0:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015ec4:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015ec8:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015eca:	08a8      	lsrs	r0, r5, #2
 8015ecc:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8015ed0:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015ed4:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8015ed8:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 8015eda:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 8015ede:	3001      	adds	r0, #1
 8015ee0:	b280      	uxth	r0, r0
 8015ee2:	b108      	cbz	r0, 8015ee8 <prescan_quantize+0x4c>
 8015ee4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 8015ee8:	3f01      	subs	r7, #1
 8015eea:	3203      	adds	r2, #3
 8015eec:	e7e5      	b.n	8015eba <prescan_quantize+0x1e>

08015eee <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8015eee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef2:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 8015ef6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 8015efa:	2500      	movs	r5, #0
{
 8015efc:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015efe:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015f02:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8015f04:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8015f06:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015f08:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 8015f0a:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 8015f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015f0e:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8015f12:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8015f14:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8015f16:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8015f18:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 8015f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015f20:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8015f22:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8015f26:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015f28:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8015f2c:	341c      	adds	r4, #28
{
 8015f2e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8015f32:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8015f34:	0149      	lsls	r1, r1, #5
 8015f36:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8015f3a:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8015f3c:	eb09 0301 	add.w	r3, r9, r1
 8015f40:	105b      	asrs	r3, r3, #1
 8015f42:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8015f44:	eb08 0304 	add.w	r3, r8, r4
 8015f48:	105b      	asrs	r3, r3, #1
 8015f4a:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 8015f4c:	9b01      	ldr	r3, [sp, #4]
 8015f4e:	42ab      	cmp	r3, r5
 8015f50:	dc43      	bgt.n	8015fda <fill_inverse_cmap+0xec>
  ncolors = 0;
 8015f52:	2200      	movs	r2, #0
 8015f54:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8015f56:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015f58:	4613      	mov	r3, r2
 8015f5a:	9c01      	ldr	r4, [sp, #4]
 8015f5c:	429c      	cmp	r4, r3
 8015f5e:	f300 809c 	bgt.w	801609a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015f62:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8015f64:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8015f66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015f6a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8015f6c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015f70:	d1fb      	bne.n	8015f6a <fill_inverse_cmap+0x7c>
 8015f72:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015f74:	469b      	mov	fp, r3
 8015f76:	9107      	str	r1, [sp, #28]
 8015f78:	4593      	cmp	fp, r2
 8015f7a:	f040 8096 	bne.w	80160aa <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 8015f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8015f80:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8015f82:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8015f86:	9b08      	ldr	r3, [sp, #32]
 8015f88:	f023 0103 	bic.w	r1, r3, #3
 8015f8c:	9b05      	ldr	r3, [sp, #20]
 8015f8e:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8015f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f94:	f023 0307 	bic.w	r3, r3, #7
 8015f98:	4629      	mov	r1, r5
 8015f9a:	019b      	lsls	r3, r3, #6
 8015f9c:	3110      	adds	r1, #16
 8015f9e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015fa2:	f855 4b04 	ldr.w	r4, [r5], #4
 8015fa6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015fa8:	f102 0720 	add.w	r7, r2, #32
 8015fac:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015fae:	4626      	mov	r6, r4
 8015fb0:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015fb2:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015fb6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015fba:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015fbc:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015fbe:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015fc2:	d1f8      	bne.n	8015fb6 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015fc4:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015fc6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015fc8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8015fcc:	d1ef      	bne.n	8015fae <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8015fce:	428d      	cmp	r5, r1
 8015fd0:	d1e7      	bne.n	8015fa2 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8015fd2:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8015fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8015fda:	9b00      	ldr	r3, [sp, #0]
 8015fdc:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8015fe4:	4591      	cmp	r9, r2
 8015fe6:	dd2a      	ble.n	801603e <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8015fe8:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8015fec:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8015fee:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8015ff2:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8015ff8:	459a      	cmp	sl, r3
 8015ffa:	dd33      	ble.n	8016064 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8015ffc:	eba3 0e0a 	sub.w	lr, r3, sl
 8016000:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016004:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8016008:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 801600a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 801600e:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8016016:	4598      	cmp	r8, r3
 8016018:	dd32      	ble.n	8016080 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 801601a:	eba3 0708 	sub.w	r7, r3, r8
 801601e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016020:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8016024:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8016026:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8016028:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 801602c:	aa70      	add	r2, sp, #448	; 0x1c0
 801602e:	429e      	cmp	r6, r3
 8016030:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8016034:	f105 0501 	add.w	r5, r5, #1
 8016038:	bfa8      	it	ge
 801603a:	461e      	movge	r6, r3
 801603c:	e786      	b.n	8015f4c <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 801603e:	4291      	cmp	r1, r2
 8016040:	da06      	bge.n	8016050 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8016042:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8016046:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 801604a:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 801604e:	e7d0      	b.n	8015ff2 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8016050:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8016052:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8016056:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8016058:	bfac      	ite	ge
 801605a:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 801605c:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8016060:	4352      	muls	r2, r2
 8016062:	e7c7      	b.n	8015ff4 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8016064:	4298      	cmp	r0, r3
 8016066:	da08      	bge.n	801607a <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8016068:	eba3 0e00 	sub.w	lr, r3, r0
 801606c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016070:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8016074:	eba3 030a 	sub.w	r3, r3, sl
 8016078:	e7c7      	b.n	801600a <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 801607a:	459b      	cmp	fp, r3
 801607c:	dbfa      	blt.n	8016074 <fill_inverse_cmap+0x186>
 801607e:	e7c3      	b.n	8016008 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8016080:	429c      	cmp	r4, r3
 8016082:	da06      	bge.n	8016092 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8016084:	1b1f      	subs	r7, r3, r4
 8016086:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016088:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 801608c:	eba3 0308 	sub.w	r3, r3, r8
 8016090:	e7c9      	b.n	8016026 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8016092:	9f03      	ldr	r7, [sp, #12]
 8016094:	429f      	cmp	r7, r3
 8016096:	dbf9      	blt.n	801608c <fill_inverse_cmap+0x19e>
 8016098:	e7c4      	b.n	8016024 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 801609a:	f851 4b04 	ldr.w	r4, [r1], #4
 801609e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 80160a0:	bfa4      	itt	ge
 80160a2:	5483      	strbge	r3, [r0, r2]
 80160a4:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 80160a6:	3301      	adds	r3, #1
 80160a8:	e757      	b.n	8015f5a <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 80160aa:	9b07      	ldr	r3, [sp, #28]
 80160ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80160b0:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80160b2:	9b00      	ldr	r3, [sp, #0]
 80160b4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80160b8:	680b      	ldr	r3, [r1, #0]
 80160ba:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80160bc:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80160be:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80160c0:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80160c4:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80160c6:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80160c8:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80160cc:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80160d0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80160d4:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 80160d6:	4364      	muls	r4, r4
 80160d8:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80160dc:	3004      	adds	r0, #4
 80160de:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 80160e0:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80160e4:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80160e6:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80160e8:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80160ea:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 80160ec:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80160ee:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80160f0:	9106      	str	r1, [sp, #24]
 80160f2:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80160f4:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80160f8:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80160fc:	930e      	str	r3, [sp, #56]	; 0x38
 80160fe:	9b06      	ldr	r3, [sp, #24]
 8016100:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8016102:	a810      	add	r0, sp, #64	; 0x40
 8016104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016108:	9003      	str	r0, [sp, #12]
 801610a:	930d      	str	r3, [sp, #52]	; 0x34
 801610c:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 801610e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016110:	eb03 0c01 	add.w	ip, r3, r1
 8016114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016116:	440b      	add	r3, r1
 8016118:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 801611a:	9b03      	ldr	r3, [sp, #12]
 801611c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 801611e:	9b02      	ldr	r3, [sp, #8]
 8016120:	9301      	str	r3, [sp, #4]
 8016122:	e01c      	b.n	801615e <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8016124:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8016128:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 801612c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801612e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8016130:	bfc8      	it	gt
 8016132:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8016134:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8016136:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 801613a:	bfc8      	it	gt
 801613c:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016140:	42af      	cmp	r7, r5
 8016142:	d1ef      	bne.n	8016124 <fill_inverse_cmap+0x236>
	  cptr++;
 8016144:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8016146:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 801614a:	3304      	adds	r3, #4
 801614c:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 801614e:	9b01      	ldr	r3, [sp, #4]
 8016150:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8016152:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8016156:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8016158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801615a:	4298      	cmp	r0, r3
 801615c:	d006      	beq.n	801616c <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801615e:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8016162:	9d06      	ldr	r5, [sp, #24]
 8016164:	f8dd e010 	ldr.w	lr, [sp, #16]
 8016168:	9c01      	ldr	r4, [sp, #4]
 801616a:	e7db      	b.n	8016124 <fill_inverse_cmap+0x236>
	  cptr++;
 801616c:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801616e:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8016170:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8016172:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016174:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8016178:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 801617a:	9b02      	ldr	r3, [sp, #8]
 801617c:	4403      	add	r3, r0
 801617e:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016180:	d1c4      	bne.n	801610c <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8016182:	f10b 0b01 	add.w	fp, fp, #1
 8016186:	e6f7      	b.n	8015f78 <fill_inverse_cmap+0x8a>

08016188 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8016188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618c:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801618e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8016192:	b085      	sub	sp, #20
 8016194:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8016196:	699b      	ldr	r3, [r3, #24]
{
 8016198:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 801619a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 801619c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 801619e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80161a0:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80161a2:	4555      	cmp	r5, sl
 80161a4:	db02      	blt.n	80161ac <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 80161a6:	b005      	add	sp, #20
 80161a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 80161ac:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 80161b0:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 80161b4:	9b01      	ldr	r3, [sp, #4]
 80161b6:	3403      	adds	r4, #3
 80161b8:	eb06 0b03 	add.w	fp, r6, r3
 80161bc:	455e      	cmp	r6, fp
 80161be:	d101      	bne.n	80161c4 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 80161c0:	3501      	adds	r5, #1
 80161c2:	e7ee      	b.n	80161a2 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80161c4:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80161c8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80161cc:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 80161d0:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80161d2:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80161d6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 80161da:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80161de:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 80161e0:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 80161e4:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80161e8:	f1bc 0f00 	cmp.w	ip, #0
 80161ec:	d106      	bne.n	80161fc <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 80161ee:	4672      	mov	r2, lr
 80161f0:	9303      	str	r3, [sp, #12]
 80161f2:	9002      	str	r0, [sp, #8]
 80161f4:	f7ff fe7b 	bl	8015eee <fill_inverse_cmap>
 80161f8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 80161fc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016200:	3403      	adds	r4, #3
 8016202:	3b01      	subs	r3, #1
 8016204:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8016208:	e7d8      	b.n	80161bc <pass2_no_dither+0x34>

0801620a <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 801620a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801620e:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8016212:	b09f      	sub	sp, #124	; 0x7c
 8016214:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8016216:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801621a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801621c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801621e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016220:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016224:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8016226:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801622a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801622c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016230:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8016238:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 801623a:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 801623c:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 801623e:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016240:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016242:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016248:	3b03      	subs	r3, #3
 801624a:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801624c:	2306      	movs	r3, #6
 801624e:	fb02 3303 	mla	r3, r2, r3, r3
 8016252:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8016254:	2300      	movs	r3, #0
 8016256:	9304      	str	r3, [sp, #16]
 8016258:	9b04      	ldr	r3, [sp, #16]
 801625a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801625c:	4293      	cmp	r3, r2
 801625e:	db02      	blt.n	8016266 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8016260:	b01f      	add	sp, #124	; 0x7c
 8016262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8016266:	9a04      	ldr	r2, [sp, #16]
 8016268:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801626a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801626e:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8016270:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016276:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016278:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801627c:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 801627e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8016282:	2b00      	cmp	r3, #0
 8016284:	d036      	beq.n	80162f4 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016288:	9a01      	ldr	r2, [sp, #4]
 801628a:	441a      	add	r2, r3
      outptr += width-1;
 801628c:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 801628e:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8016290:	3b01      	subs	r3, #1
 8016292:	9a03      	ldr	r2, [sp, #12]
 8016294:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016296:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8016298:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801629a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801629c:	4413      	add	r3, r2
      dir3 = -3;
 801629e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80162a2:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 80162a4:	2300      	movs	r3, #0
      dir3 = -3;
 80162a6:	9208      	str	r2, [sp, #32]
      dir = -1;
 80162a8:	f04f 32ff 	mov.w	r2, #4294967295
 80162ac:	920f      	str	r2, [sp, #60]	; 0x3c
 80162ae:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80162b2:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80162b4:	9b08      	ldr	r3, [sp, #32]
 80162b6:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80162b8:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80162ba:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 80162bc:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 80162be:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80162c0:	1cab      	adds	r3, r5, #2
 80162c2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80162c4:	1d2b      	adds	r3, r5, #4
 80162c6:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 80162c8:	9b05      	ldr	r3, [sp, #20]
 80162ca:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 80162cc:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80162ce:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 80162d2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 80162d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80162d8:	b98f      	cbnz	r7, 80162fe <pass2_fs_dither+0xf4>
 80162da:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80162dc:	9a02      	ldr	r2, [sp, #8]
 80162de:	435d      	muls	r5, r3
 80162e0:	9906      	ldr	r1, [sp, #24]
 80162e2:	9b02      	ldr	r3, [sp, #8]
 80162e4:	5351      	strh	r1, [r2, r5]
 80162e6:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 80162e8:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 80162ea:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 80162ec:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 80162ee:	9b04      	ldr	r3, [sp, #16]
 80162f0:	3301      	adds	r3, #1
 80162f2:	e7b0      	b.n	8016256 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 80162f4:	2301      	movs	r3, #1
      dir3 = 3;
 80162f6:	2203      	movs	r2, #3
      dir = 1;
 80162f8:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 80162fa:	9208      	str	r2, [sp, #32]
 80162fc:	e7d7      	b.n	80162ae <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80162fe:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8016302:	1977      	adds	r7, r6, r5
 8016304:	4463      	add	r3, ip
 8016306:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8016308:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801630a:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801630e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016310:	5ef3      	ldrsh	r3, [r6, r3]
 8016312:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016316:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016318:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801631a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801631c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801631e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016322:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8016324:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8016328:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801632c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 801632e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8016332:	9f01      	ldr	r7, [sp, #4]
 8016334:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016338:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801633a:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 801633c:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 801633e:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016340:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8016344:	9901      	ldr	r1, [sp, #4]
 8016346:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016348:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 801634c:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8016350:	9a01      	ldr	r2, [sp, #4]
 8016352:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016354:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016358:	ea4f 02aa 	mov.w	r2, sl, asr #2
 801635c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801635e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016362:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8016366:	461f      	mov	r7, r3
 8016368:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 801636c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8016370:	f1bc 0f00 	cmp.w	ip, #0
 8016374:	d105      	bne.n	8016382 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8016376:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 801637a:	f7ff fdb8 	bl	8015eee <fill_inverse_cmap>
 801637e:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8016382:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8016386:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8016388:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801638a:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 801638c:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 801638e:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8016390:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016392:	5cd2      	ldrb	r2, [r2, r3]
 8016394:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8016398:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801639a:	5cd2      	ldrb	r2, [r2, r3]
 801639c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80163a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80163a2:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80163a4:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80163a6:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 80163aa:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80163ae:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 80163b0:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80163b4:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 80163b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 80163b8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 80163bc:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 80163be:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 80163c2:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 80163c4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80163c8:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 80163ca:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80163ce:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 80163d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80163d2:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 80163d4:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 80163d8:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 80163da:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80163de:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 80163e0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80163e4:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 80163e6:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 80163e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 80163ea:	4437      	add	r7, r6
      outptr += dir;
 80163ec:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 80163ee:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 80163f0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 80163f4:	9701      	str	r7, [sp, #4]
      outptr += dir;
 80163f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80163f8:	443e      	add	r6, r7
 80163fa:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 80163fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80163fe:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8016400:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8016404:	9609      	str	r6, [sp, #36]	; 0x24
 8016406:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016408:	e765      	b.n	80162d6 <pass2_fs_dither+0xcc>

0801640a <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 801640a:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801640c:	6843      	ldr	r3, [r0, #4]
 801640e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016412:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016414:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801641c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8016420:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8016424:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8016428:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 801642a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 801642c:	425c      	negs	r4, r3
 801642e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016432:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8016434:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016438:	2b10      	cmp	r3, #16
 801643a:	d1f7      	bne.n	801642c <init_error_limit+0x22>
 801643c:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8016440:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8016444:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8016448:	425d      	negs	r5, r3
 801644a:	f844 3f04 	str.w	r3, [r4, #4]!
 801644e:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8016452:	f002 0501 	and.w	r5, r2, #1
 8016456:	3a01      	subs	r2, #1
 8016458:	442b      	add	r3, r5
 801645a:	f112 0f32 	cmn.w	r2, #50	; 0x32
 801645e:	d1f3      	bne.n	8016448 <init_error_limit+0x3e>
 8016460:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8016464:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8016468:	425c      	negs	r4, r3
 801646a:	f841 3f04 	str.w	r3, [r1, #4]!
 801646e:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8016472:	4282      	cmp	r2, r0
 8016474:	d1f9      	bne.n	801646a <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8016476:	bd38      	pop	{r3, r4, r5, pc}

08016478 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8016478:	4770      	bx	lr

0801647a <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 801647a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801647e:	2201      	movs	r2, #1
 8016480:	61da      	str	r2, [r3, #28]
}
 8016482:	4770      	bx	lr

08016484 <start_pass_2_quant>:
{
 8016484:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016486:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 801648a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 801648c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8016490:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8016492:	2b00      	cmp	r3, #0
 8016494:	d050      	beq.n	8016538 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8016496:	2302      	movs	r3, #2
 8016498:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 801649c:	b189      	cbz	r1, 80164c2 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 801649e:	4b28      	ldr	r3, [pc, #160]	; (8016540 <start_pass_2_quant+0xbc>)
 80164a0:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 80164a2:	4b28      	ldr	r3, [pc, #160]	; (8016544 <start_pass_2_quant+0xc0>)
 80164a4:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 80164a6:	1f34      	subs	r4, r6, #4
 80164a8:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 80164aa:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80164ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80164b2:	2100      	movs	r1, #0
 80164b4:	f013 fa06 	bl	80298c4 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 80164b8:	42a6      	cmp	r6, r4
 80164ba:	d1f6      	bne.n	80164aa <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 80164bc:	2300      	movs	r3, #0
 80164be:	61eb      	str	r3, [r5, #28]
}
 80164c0:	e02f      	b.n	8016522 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 80164c2:	4b21      	ldr	r3, [pc, #132]	; (8016548 <start_pass_2_quant+0xc4>)
 80164c4:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 80164c6:	4b21      	ldr	r3, [pc, #132]	; (801654c <start_pass_2_quant+0xc8>)
 80164c8:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 80164ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	dc29      	bgt.n	8016526 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 80164d2:	223a      	movs	r2, #58	; 0x3a
 80164d4:	6823      	ldr	r3, [r4, #0]
 80164d6:	615a      	str	r2, [r3, #20]
 80164d8:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80164da:	619a      	str	r2, [r3, #24]
 80164dc:	4620      	mov	r0, r4
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 80164e2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80164e6:	2b02      	cmp	r3, #2
 80164e8:	d118      	bne.n	801651c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80164ea:	2306      	movs	r3, #6
 80164ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80164ee:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 80164f0:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80164f2:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 80164f4:	b93b      	cbnz	r3, 8016506 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80164f6:	6863      	ldr	r3, [r4, #4]
 80164f8:	2101      	movs	r1, #1
 80164fa:	4620      	mov	r0, r4
 80164fc:	9201      	str	r2, [sp, #4]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	4798      	blx	r3
 8016502:	9a01      	ldr	r2, [sp, #4]
 8016504:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8016506:	2100      	movs	r1, #0
 8016508:	6a28      	ldr	r0, [r5, #32]
 801650a:	f013 f9db 	bl	80298c4 <memset>
      if (cquantize->error_limiter == NULL)
 801650e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016510:	b913      	cbnz	r3, 8016518 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8016512:	4620      	mov	r0, r4
 8016514:	f7ff ff79 	bl	801640a <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016518:	2300      	movs	r3, #0
 801651a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801651c:	69eb      	ldr	r3, [r5, #28]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d1c1      	bne.n	80164a6 <start_pass_2_quant+0x22>
}
 8016522:	b002      	add	sp, #8
 8016524:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8016526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801652a:	ddda      	ble.n	80164e2 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801652c:	223b      	movs	r2, #59	; 0x3b
 801652e:	6823      	ldr	r3, [r4, #0]
 8016530:	615a      	str	r2, [r3, #20]
 8016532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016536:	e7d0      	b.n	80164da <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016538:	2900      	cmp	r1, #0
 801653a:	d1b0      	bne.n	801649e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 801653c:	4b04      	ldr	r3, [pc, #16]	; (8016550 <start_pass_2_quant+0xcc>)
 801653e:	e7c1      	b.n	80164c4 <start_pass_2_quant+0x40>
 8016540:	08015e9d 	.word	0x08015e9d
 8016544:	08016793 	.word	0x08016793
 8016548:	0801620b 	.word	0x0801620b
 801654c:	08016479 	.word	0x08016479
 8016550:	08016189 	.word	0x08016189

08016554 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8016554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016558:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 801655c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801655e:	b085      	sub	sp, #20
  if (c0max > c0min)
 8016560:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8016562:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016564:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016566:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801656a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 801656e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8016572:	db24      	blt.n	80165be <update_box.isra.0+0x6a>
  if (c1max > c1min)
 8016574:	4584      	cmp	ip, r0
 8016576:	4662      	mov	r2, ip
 8016578:	db5d      	blt.n	8016636 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 801657a:	42a5      	cmp	r5, r4
 801657c:	f280 80eb 	bge.w	8016756 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8016580:	0196      	lsls	r6, r2, #6
 8016582:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8016586:	46ac      	mov	ip, r5
 8016588:	9602      	str	r6, [sp, #8]
 801658a:	fb07 f602 	mul.w	r6, r7, r2
 801658e:	9603      	str	r6, [sp, #12]
 8016590:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016592:	469e      	mov	lr, r3
 8016594:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8016598:	9e03      	ldr	r6, [sp, #12]
 801659a:	44b1      	add	r9, r6
 801659c:	e083      	b.n	80166a6 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801659e:	9a01      	ldr	r2, [sp, #4]
 80165a0:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80165a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80165a8:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80165aa:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 80165ac:	454c      	cmp	r4, r9
 80165ae:	da08      	bge.n	80165c2 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80165b0:	f108 0801 	add.w	r8, r8, #1
 80165b4:	4540      	cmp	r0, r8
 80165b6:	daf2      	bge.n	801659e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 80165b8:	3301      	adds	r3, #1
 80165ba:	459b      	cmp	fp, r3
 80165bc:	db0f      	blt.n	80165de <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80165be:	46e0      	mov	r8, ip
 80165c0:	e7f8      	b.n	80165b4 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 80165c2:	f832 ab02 	ldrh.w	sl, [r2], #2
 80165c6:	f1ba 0f00 	cmp.w	sl, #0
 80165ca:	d005      	beq.n	80165d8 <update_box.isra.0+0x84>
  if (c0max > c0min)
 80165cc:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 80165ce:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 80165d0:	ddd0      	ble.n	8016574 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80165d2:	465f      	mov	r7, fp
 80165d4:	46e0      	mov	r8, ip
 80165d6:	e00f      	b.n	80165f8 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 80165d8:	f109 0901 	add.w	r9, r9, #1
 80165dc:	e7e6      	b.n	80165ac <update_box.isra.0+0x58>
 have_c0min:
 80165de:	463b      	mov	r3, r7
 80165e0:	e7f7      	b.n	80165d2 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 80165e2:	9a01      	ldr	r2, [sp, #4]
 80165e4:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80165e8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80165ec:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80165ee:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 80165f0:	454c      	cmp	r4, r9
 80165f2:	da07      	bge.n	8016604 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80165f4:	f108 0801 	add.w	r8, r8, #1
 80165f8:	4540      	cmp	r0, r8
 80165fa:	daf2      	bge.n	80165e2 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 80165fc:	3f01      	subs	r7, #1
 80165fe:	429f      	cmp	r7, r3
 8016600:	dbb8      	blt.n	8016574 <update_box.isra.0+0x20>
 8016602:	e7e7      	b.n	80165d4 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8016604:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016608:	f1ba 0f00 	cmp.w	sl, #0
 801660c:	d002      	beq.n	8016614 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801660e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8016610:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8016612:	e7af      	b.n	8016574 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016614:	f109 0901 	add.w	r9, r9, #1
 8016618:	e7ea      	b.n	80165f0 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801661a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801661c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 801661e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016622:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016624:	454c      	cmp	r4, r9
 8016626:	da0a      	bge.n	801663e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016628:	f108 0801 	add.w	r8, r8, #1
 801662c:	45d8      	cmp	r8, fp
 801662e:	ddf4      	ble.n	801661a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8016630:	3201      	adds	r2, #1
 8016632:	4290      	cmp	r0, r2
 8016634:	db11      	blt.n	801665a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016636:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016638:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 801663c:	e7f6      	b.n	801662c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 801663e:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016642:	b13e      	cbz	r6, 8016654 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8016644:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8016646:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8016648:	dd97      	ble.n	801657a <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801664a:	4684      	mov	ip, r0
 801664c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 801664e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 8016652:	e00d      	b.n	8016670 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016654:	f109 0901 	add.w	r9, r9, #1
 8016658:	e7e4      	b.n	8016624 <update_box.isra.0+0xd0>
 have_c1min:
 801665a:	4662      	mov	r2, ip
 801665c:	e7f5      	b.n	801664a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 801665e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016660:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8016662:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016666:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016668:	454c      	cmp	r4, r9
 801666a:	da09      	bge.n	8016680 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801666c:	f108 0801 	add.w	r8, r8, #1
 8016670:	45c3      	cmp	fp, r8
 8016672:	daf4      	bge.n	801665e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 8016674:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016678:	4594      	cmp	ip, r2
 801667a:	f6ff af7e 	blt.w	801657a <update_box.isra.0+0x26>
 801667e:	e7e5      	b.n	801664c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8016680:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016684:	b11e      	cbz	r6, 801668e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8016686:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8016688:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 801668c:	e775      	b.n	801657a <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801668e:	f109 0901 	add.w	r9, r9, #1
 8016692:	e7e9      	b.n	8016668 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016694:	9e01      	ldr	r6, [sp, #4]
 8016696:	4690      	mov	r8, r2
 8016698:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801669c:	444f      	add	r7, r9
 801669e:	4580      	cmp	r8, r0
 80166a0:	dd11      	ble.n	80166c6 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80166a2:	f10e 0e01 	add.w	lr, lr, #1
 80166a6:	45f3      	cmp	fp, lr
 80166a8:	daf4      	bge.n	8016694 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 80166aa:	f10c 0c01 	add.w	ip, ip, #1
 80166ae:	4564      	cmp	r4, ip
 80166b0:	f6bf af6e 	bge.w	8016590 <update_box.isra.0+0x3c>
 have_c2min:
 80166b4:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80166b6:	4627      	mov	r7, r4
 80166b8:	9d02      	ldr	r5, [sp, #8]
 80166ba:	469e      	mov	lr, r3
 80166bc:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 80166c0:	9d03      	ldr	r5, [sp, #12]
 80166c2:	44a9      	add	r9, r5
 80166c4:	e034      	b.n	8016730 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 80166c6:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80166ca:	f837 a00a 	ldrh.w	sl, [r7, sl]
 80166ce:	f1ba 0f00 	cmp.w	sl, #0
 80166d2:	d021      	beq.n	8016718 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 80166d4:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 80166d6:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 80166da:	dcec      	bgt.n	80166b6 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80166dc:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80166de:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80166e2:	eba4 070c 	sub.w	r7, r4, ip
 80166e6:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80166ea:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80166ee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80166f2:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80166f6:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80166f8:	fb08 f808 	mul.w	r8, r8, r8
 80166fc:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 8016700:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016704:	fb05 8505 	mla	r5, r5, r5, r8
 8016708:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801670a:	459b      	cmp	fp, r3
 801670c:	da3f      	bge.n	801678e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 801670e:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8016712:	b005      	add	sp, #20
 8016714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016718:	f108 0801 	add.w	r8, r8, #1
 801671c:	e7bf      	b.n	801669e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801671e:	9d01      	ldr	r5, [sp, #4]
 8016720:	4690      	mov	r8, r2
 8016722:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8016726:	444d      	add	r5, r9
 8016728:	4540      	cmp	r0, r8
 801672a:	da07      	bge.n	801673c <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801672c:	f10e 0e01 	add.w	lr, lr, #1
 8016730:	45f3      	cmp	fp, lr
 8016732:	daf4      	bge.n	801671e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 8016734:	3f01      	subs	r7, #1
 8016736:	4567      	cmp	r7, ip
 8016738:	dbd0      	blt.n	80166dc <update_box.isra.0+0x188>
 801673a:	e7bd      	b.n	80166b8 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 801673c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016740:	f835 a00a 	ldrh.w	sl, [r5, sl]
 8016744:	f1ba 0f00 	cmp.w	sl, #0
 8016748:	d002      	beq.n	8016750 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 801674a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 801674c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 801674e:	e7c5      	b.n	80166dc <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016750:	f108 0801 	add.w	r8, r8, #1
 8016754:	e7e8      	b.n	8016728 <update_box.isra.0+0x1d4>
 have_c2min:
 8016756:	46ac      	mov	ip, r5
 8016758:	e7c0      	b.n	80166dc <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801675a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 801675e:	f1a5 0802 	sub.w	r8, r5, #2
 8016762:	9d01      	ldr	r5, [sp, #4]
 8016764:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8016768:	4445      	add	r5, r8
 801676a:	46e0      	mov	r8, ip
 801676c:	4544      	cmp	r4, r8
 801676e:	da04      	bge.n	801677a <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016770:	3701      	adds	r7, #1
 8016772:	42b8      	cmp	r0, r7
 8016774:	daf1      	bge.n	801675a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016776:	3301      	adds	r3, #1
 8016778:	e7c7      	b.n	801670a <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 801677a:	f835 af02 	ldrh.w	sl, [r5, #2]!
 801677e:	f1ba 0f00 	cmp.w	sl, #0
 8016782:	d001      	beq.n	8016788 <update_box.isra.0+0x234>
	  ccount++;
 8016784:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016788:	f108 0801 	add.w	r8, r8, #1
 801678c:	e7ee      	b.n	801676c <update_box.isra.0+0x218>
 801678e:	4617      	mov	r7, r2
 8016790:	e7ef      	b.n	8016772 <update_box.isra.0+0x21e>

08016792 <finish_pass1>:
{
 8016792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016796:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801679a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801679c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801679e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80167a2:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 80167a4:	691b      	ldr	r3, [r3, #16]
{
 80167a6:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 80167a8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 80167ac:	9b02      	ldr	r3, [sp, #8]
 80167ae:	695b      	ldr	r3, [r3, #20]
 80167b0:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80167b2:	9a01      	ldr	r2, [sp, #4]
 80167b4:	6843      	ldr	r3, [r0, #4]
 80167b6:	0152      	lsls	r2, r2, #5
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80167bc:	2300      	movs	r3, #0
 80167be:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 80167c0:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80167c2:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 80167c4:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 80167c6:	6142      	str	r2, [r0, #20]
 80167c8:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 80167ca:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80167ce:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 80167d2:	9b00      	ldr	r3, [sp, #0]
 80167d4:	4601      	mov	r1, r0
 80167d6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80167da:	f7ff febb 	bl	8016554 <update_box.isra.0>
  while (numboxes < desired_colors) {
 80167de:	9b01      	ldr	r3, [sp, #4]
 80167e0:	455b      	cmp	r3, fp
 80167e2:	dc24      	bgt.n	801682e <finish_pass1+0x9c>
 80167e4:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 80167e6:	9a00      	ldr	r2, [sp, #0]
 80167e8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 80167ec:	6992      	ldr	r2, [r2, #24]
 80167ee:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80167f0:	e9d8 7200 	ldrd	r7, r2, [r8]
 80167f4:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80167f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80167fa:	9205      	str	r2, [sp, #20]
 80167fc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8016800:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016802:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016806:	9201      	str	r2, [sp, #4]
 8016808:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801680c:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801680e:	9a01      	ldr	r2, [sp, #4]
 8016810:	0052      	lsls	r2, r2, #1
 8016812:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8016814:	2200      	movs	r2, #0
  long c1total = 0;
 8016816:	4692      	mov	sl, r2
  long c0total = 0;
 8016818:	4691      	mov	r9, r2
  long total = 0;
 801681a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 801681c:	9804      	ldr	r0, [sp, #16]
 801681e:	42b8      	cmp	r0, r7
 8016820:	f2c0 8098 	blt.w	8016954 <finish_pass1+0x1c2>
 8016824:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016826:	9e05      	ldr	r6, [sp, #20]
 8016828:	3004      	adds	r0, #4
 801682a:	9008      	str	r0, [sp, #32]
 801682c:	e07c      	b.n	8016928 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 801682e:	9b01      	ldr	r3, [sp, #4]
 8016830:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8016834:	db4f      	blt.n	80168d6 <finish_pass1+0x144>
  boxptr which = NULL;
 8016836:	2300      	movs	r3, #0
 8016838:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801683a:	461e      	mov	r6, r3
  register long maxc = 0;
 801683c:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 801683e:	69c2      	ldr	r2, [r0, #28]
 8016840:	42ba      	cmp	r2, r7
 8016842:	dd04      	ble.n	801684e <finish_pass1+0xbc>
 8016844:	6984      	ldr	r4, [r0, #24]
 8016846:	2c00      	cmp	r4, #0
 8016848:	bfc4      	itt	gt
 801684a:	4603      	movgt	r3, r0
 801684c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801684e:	3601      	adds	r6, #1
 8016850:	3020      	adds	r0, #32
 8016852:	45b3      	cmp	fp, r6
 8016854:	d1f3      	bne.n	801683e <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 8016856:	2b00      	cmp	r3, #0
 8016858:	d0c5      	beq.n	80167e6 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 801685a:	685a      	ldr	r2, [r3, #4]
 801685c:	f101 0920 	add.w	r9, r1, #32
 8016860:	624a      	str	r2, [r1, #36]	; 0x24
 8016862:	68d8      	ldr	r0, [r3, #12]
 8016864:	62c8      	str	r0, [r1, #44]	; 0x2c
 8016866:	6958      	ldr	r0, [r3, #20]
 8016868:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801686a:	6818      	ldr	r0, [r3, #0]
 801686c:	6208      	str	r0, [r1, #32]
 801686e:	6898      	ldr	r0, [r3, #8]
 8016870:	6288      	str	r0, [r1, #40]	; 0x28
 8016872:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8016876:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 801687a:	6818      	ldr	r0, [r3, #0]
 801687c:	9003      	str	r0, [sp, #12]
 801687e:	1a10      	subs	r0, r2, r0
 8016880:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016884:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 8016888:	9004      	str	r0, [sp, #16]
 801688a:	1a30      	subs	r0, r6, r0
 801688c:	00c7      	lsls	r7, r0, #3
 801688e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016892:	6958      	ldr	r0, [r3, #20]
 8016894:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016898:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801689c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 80168a0:	f2c0 808c 	blt.w	80169bc <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 80168a4:	45be      	cmp	lr, r7
 80168a6:	dd25      	ble.n	80168f4 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 80168a8:	9803      	ldr	r0, [sp, #12]
 80168aa:	4402      	add	r2, r0
 80168ac:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80168b0:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 80168b2:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 80168b4:	3201      	adds	r2, #1
 80168b6:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 80168b8:	4619      	mov	r1, r3
 80168ba:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 80168bc:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 80168c0:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80168c4:	f7ff fe46 	bl	8016554 <update_box.isra.0>
    update_box(cinfo, b2);
 80168c8:	9b00      	ldr	r3, [sp, #0]
 80168ca:	4649      	mov	r1, r9
 80168cc:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80168d0:	f7ff fe40 	bl	8016554 <update_box.isra.0>
    numboxes++;
 80168d4:	e783      	b.n	80167de <finish_pass1+0x4c>
  boxptr which = NULL;
 80168d6:	2300      	movs	r3, #0
 80168d8:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80168da:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 80168dc:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 80168de:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80168e0:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 80168e2:	42b7      	cmp	r7, r6
 80168e4:	bfc4      	itt	gt
 80168e6:	4613      	movgt	r3, r2
 80168e8:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80168ea:	4583      	cmp	fp, r0
 80168ec:	f102 0220 	add.w	r2, r2, #32
 80168f0:	d1f5      	bne.n	80168de <finish_pass1+0x14c>
 80168f2:	e7b0      	b.n	8016856 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 80168f4:	9a04      	ldr	r2, [sp, #16]
 80168f6:	4416      	add	r6, r2
 80168f8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80168fc:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 80168fe:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8016900:	3601      	adds	r6, #1
 8016902:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8016904:	e7d8      	b.n	80168b8 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8016906:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016908:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801690c:	9c03      	ldr	r4, [sp, #12]
 801690e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8016912:	f10e 0e02 	add.w	lr, lr, #2
 8016916:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 801691a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 801691e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016920:	9c07      	ldr	r4, [sp, #28]
 8016922:	4564      	cmp	r4, ip
 8016924:	da05      	bge.n	8016932 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016926:	3601      	adds	r6, #1
 8016928:	9806      	ldr	r0, [sp, #24]
 801692a:	42b0      	cmp	r0, r6
 801692c:	daeb      	bge.n	8016906 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 801692e:	3701      	adds	r7, #1
 8016930:	e774      	b.n	801681c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 8016932:	f830 5b02 	ldrh.w	r5, [r0], #2
 8016936:	b155      	cbz	r5, 801694e <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016938:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 801693a:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 801693c:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016940:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8016944:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8016948:	3404      	adds	r4, #4
 801694a:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 801694e:	f10c 0c01 	add.w	ip, ip, #1
 8016952:	e7e5      	b.n	8016920 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016954:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8016958:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801695a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 801695e:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016962:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016966:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801696a:	fb99 f9f1 	sdiv	r9, r9, r1
 801696e:	6800      	ldr	r0, [r0, #0]
 8016970:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016974:	9800      	ldr	r0, [sp, #0]
 8016976:	fb9a faf1 	sdiv	sl, sl, r1
 801697a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801697e:	6840      	ldr	r0, [r0, #4]
 8016980:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016984:	9800      	ldr	r0, [sp, #0]
 8016986:	fb92 f1f1 	sdiv	r1, r2, r1
 801698a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801698e:	6880      	ldr	r0, [r0, #8]
 8016990:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8016992:	3301      	adds	r3, #1
 8016994:	455b      	cmp	r3, fp
 8016996:	f47f af26 	bne.w	80167e6 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 801699a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801699c:	2162      	movs	r1, #98	; 0x62
 801699e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 80169a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 80169a4:	6812      	ldr	r2, [r2, #0]
 80169a6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80169aa:	6853      	ldr	r3, [r2, #4]
 80169ac:	2101      	movs	r1, #1
 80169ae:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 80169b0:	2301      	movs	r3, #1
 80169b2:	9a02      	ldr	r2, [sp, #8]
 80169b4:	61d3      	str	r3, [r2, #28]
}
 80169b6:	b00b      	add	sp, #44	; 0x2c
 80169b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 80169bc:	45a6      	cmp	lr, r4
 80169be:	f73f af73 	bgt.w	80168a8 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 80169c2:	4460      	add	r0, ip
 80169c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80169c8:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 80169ca:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 80169cc:	3001      	adds	r0, #1
 80169ce:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 80169d0:	e772      	b.n	80168b8 <finish_pass1+0x126>
	...

080169d4 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 80169d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80169d6:	6843      	ldr	r3, [r0, #4]
 80169d8:	222c      	movs	r2, #44	; 0x2c
 80169da:	2101      	movs	r1, #1
{
 80169dc:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 80169e2:	4b30      	ldr	r3, [pc, #192]	; (8016aa4 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80169e4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80169e8:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 80169ea:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 80169ec:	4b2e      	ldr	r3, [pc, #184]	; (8016aa8 <jinit_2pass_quantizer+0xd4>)
 80169ee:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 80169f0:	2300      	movs	r3, #0
 80169f2:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 80169f4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 80169f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80169f8:	2b03      	cmp	r3, #3
 80169fa:	d005      	beq.n	8016a08 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 80169fc:	6823      	ldr	r3, [r4, #0]
 80169fe:	2230      	movs	r2, #48	; 0x30
 8016a00:	4620      	mov	r0, r4
 8016a02:	615a      	str	r2, [r3, #20]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016a08:	6863      	ldr	r3, [r4, #4]
 8016a0a:	2600      	movs	r6, #0
 8016a0c:	2280      	movs	r2, #128	; 0x80
 8016a0e:	2101      	movs	r1, #1
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4620      	mov	r0, r4
 8016a14:	4798      	blx	r3
 8016a16:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8016a18:	6863      	ldr	r3, [r4, #4]
 8016a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a1e:	69af      	ldr	r7, [r5, #24]
 8016a20:	2101      	movs	r1, #1
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	4620      	mov	r0, r4
 8016a26:	4798      	blx	r3
 8016a28:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016a2a:	3604      	adds	r6, #4
 8016a2c:	2e80      	cmp	r6, #128	; 0x80
 8016a2e:	d1f3      	bne.n	8016a18 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8016a30:	2301      	movs	r3, #1
 8016a32:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8016a34:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d031      	beq.n	8016a9e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8016a3a:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8016a3c:	2e07      	cmp	r6, #7
 8016a3e:	dc25      	bgt.n	8016a8c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8016a40:	223a      	movs	r2, #58	; 0x3a
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	615a      	str	r2, [r3, #20]
 8016a46:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016a48:	619a      	str	r2, [r3, #24]
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8016a50:	6863      	ldr	r3, [r4, #4]
 8016a52:	4632      	mov	r2, r6
 8016a54:	2101      	movs	r1, #1
 8016a56:	4620      	mov	r0, r4
 8016a58:	689f      	ldr	r7, [r3, #8]
 8016a5a:	2303      	movs	r3, #3
 8016a5c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8016a5e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016a62:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016a66:	b1e3      	cbz	r3, 8016aa2 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016a68:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016a6a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8016a70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016a74:	2306      	movs	r3, #6
 8016a76:	435a      	muls	r2, r3
 8016a78:	6863      	ldr	r3, [r4, #4]
 8016a7a:	320c      	adds	r2, #12
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	4798      	blx	r3
 8016a80:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016a82:	4620      	mov	r0, r4
  }
}
 8016a84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016a88:	f7ff bcbf 	b.w	801640a <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8016a8c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016a90:	ddde      	ble.n	8016a50 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016a92:	223b      	movs	r2, #59	; 0x3b
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	615a      	str	r2, [r3, #20]
 8016a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016a9c:	e7d4      	b.n	8016a48 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8016a9e:	612b      	str	r3, [r5, #16]
 8016aa0:	e7df      	b.n	8016a62 <jinit_2pass_quantizer+0x8e>
}
 8016aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aa4:	08016485 	.word	0x08016485
 8016aa8:	0801647b 	.word	0x0801647b

08016aac <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8016aac:	4408      	add	r0, r1
 8016aae:	3801      	subs	r0, #1
}
 8016ab0:	fb90 f0f1 	sdiv	r0, r0, r1
 8016ab4:	4770      	bx	lr

08016ab6 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016ab6:	1e4b      	subs	r3, r1, #1
 8016ab8:	4418      	add	r0, r3
  return a - (a % b);
 8016aba:	fb90 f3f1 	sdiv	r3, r0, r1
 8016abe:	fb01 0113 	mls	r1, r1, r3, r0
}
 8016ac2:	1a40      	subs	r0, r0, r1
 8016ac4:	4770      	bx	lr

08016ac6 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8016ac6:	b570      	push	{r4, r5, r6, lr}
 8016ac8:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8016aca:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8016ace:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016ad2:	2e00      	cmp	r6, #0
 8016ad4:	dc00      	bgt.n	8016ad8 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016ad6:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016ad8:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8016ada:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8016adc:	f854 1b04 	ldr.w	r1, [r4], #4
 8016ae0:	f855 0b04 	ldr.w	r0, [r5], #4
 8016ae4:	f012 fee0 	bl	80298a8 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016ae8:	e7f3      	b.n	8016ad2 <jcopy_sample_rows+0xc>

08016aea <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8016aea:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8016aec:	01d2      	lsls	r2, r2, #7
 8016aee:	4601      	mov	r1, r0
 8016af0:	4618      	mov	r0, r3
 8016af2:	f012 bed9 	b.w	80298a8 <memcpy>

08016af6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016af6:	8880      	ldrh	r0, [r0, #4]
 8016af8:	4770      	bx	lr

08016afa <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016afa:	b570      	push	{r4, r5, r6, lr}
 8016afc:	6803      	ldr	r3, [r0, #0]
 8016afe:	460c      	mov	r4, r1
 8016b00:	2100      	movs	r1, #0
 8016b02:	4605      	mov	r5, r0
 8016b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b06:	4798      	blx	r3
 8016b08:	4606      	mov	r6, r0
 8016b0a:	682b      	ldr	r3, [r5, #0]
 8016b0c:	4628      	mov	r0, r5
 8016b0e:	1ba4      	subs	r4, r4, r6
 8016b10:	6a1b      	ldr	r3, [r3, #32]
 8016b12:	b2a4      	uxth	r4, r4
 8016b14:	4798      	blx	r3
 8016b16:	fbb4 f0f0 	udiv	r0, r4, r0
 8016b1a:	bd70      	pop	{r4, r5, r6, pc}

08016b1c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	8083      	strh	r3, [r0, #4]
 8016b20:	4770      	bx	lr

08016b22 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016b22:	b510      	push	{r4, lr}
 8016b24:	6803      	ldr	r3, [r0, #0]
 8016b26:	4604      	mov	r4, r0
 8016b28:	8881      	ldrh	r1, [r0, #4]
 8016b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b2c:	4798      	blx	r3
 8016b2e:	88a3      	ldrh	r3, [r4, #4]
 8016b30:	3301      	adds	r3, #1
 8016b32:	80a3      	strh	r3, [r4, #4]
 8016b34:	bd10      	pop	{r4, pc}

08016b36 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016b36:	6803      	ldr	r3, [r0, #0]
 8016b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b3a:	4718      	bx	r3

08016b3c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016b3c:	4770      	bx	lr
	...

08016b40 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016b40:	4a02      	ldr	r2, [pc, #8]	; (8016b4c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016b42:	6002      	str	r2, [r0, #0]
 8016b44:	2200      	movs	r2, #0
 8016b46:	8082      	strh	r2, [r0, #4]
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	0802f054 	.word	0x0802f054

08016b50 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016b50:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016b52:	4770      	bx	lr

08016b54 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016b54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b56:	2000      	movs	r0, #0
 8016b58:	b12b      	cbz	r3, 8016b66 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016b5a:	b920      	cbnz	r0, 8016b66 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016b5c:	1a5a      	subs	r2, r3, r1
 8016b5e:	699b      	ldr	r3, [r3, #24]
 8016b60:	4250      	negs	r0, r2
 8016b62:	4150      	adcs	r0, r2
 8016b64:	e7f8      	b.n	8016b58 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016b66:	4770      	bx	lr

08016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016b68:	2300      	movs	r3, #0
 8016b6a:	6148      	str	r0, [r1, #20]
 8016b6c:	618b      	str	r3, [r1, #24]
 8016b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b70:	b913      	cbnz	r3, 8016b78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016b72:	6281      	str	r1, [r0, #40]	; 0x28
 8016b74:	4770      	bx	lr
 8016b76:	4613      	mov	r3, r2
 8016b78:	699a      	ldr	r2, [r3, #24]
 8016b7a:	2a00      	cmp	r2, #0
 8016b7c:	d1fb      	bne.n	8016b76 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016b7e:	6199      	str	r1, [r3, #24]
 8016b80:	4770      	bx	lr

08016b82 <_ZN8touchgfx9Container9removeAllEv>:
 8016b82:	2200      	movs	r2, #0
 8016b84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b86:	b123      	cbz	r3, 8016b92 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016b88:	6999      	ldr	r1, [r3, #24]
 8016b8a:	6281      	str	r1, [r0, #40]	; 0x28
 8016b8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016b90:	e7f8      	b.n	8016b84 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016b92:	4770      	bx	lr

08016b94 <_ZN8touchgfx9Container6unlinkEv>:
 8016b94:	2300      	movs	r3, #0
 8016b96:	6283      	str	r3, [r0, #40]	; 0x28
 8016b98:	4770      	bx	lr

08016b9a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	8002      	strh	r2, [r0, #0]
 8016b9e:	8042      	strh	r2, [r0, #2]
 8016ba0:	8082      	strh	r2, [r0, #4]
 8016ba2:	80c2      	strh	r2, [r0, #6]
 8016ba4:	4770      	bx	lr

08016ba6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016ba6:	b570      	push	{r4, r5, r6, lr}
 8016ba8:	460d      	mov	r5, r1
 8016baa:	4616      	mov	r6, r2
 8016bac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016bae:	b13c      	cbz	r4, 8016bc0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016bb0:	6823      	ldr	r3, [r4, #0]
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	4632      	mov	r2, r6
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bba:	4798      	blx	r3
 8016bbc:	69a4      	ldr	r4, [r4, #24]
 8016bbe:	e7f6      	b.n	8016bae <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016bc0:	bd70      	pop	{r4, r5, r6, pc}

08016bc2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016bc2:	b538      	push	{r3, r4, r5, lr}
 8016bc4:	460d      	mov	r5, r1
 8016bc6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016bc8:	b134      	cbz	r4, 8016bd8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016bca:	682b      	ldr	r3, [r5, #0]
 8016bcc:	4621      	mov	r1, r4
 8016bce:	4628      	mov	r0, r5
 8016bd0:	689b      	ldr	r3, [r3, #8]
 8016bd2:	4798      	blx	r3
 8016bd4:	69a4      	ldr	r4, [r4, #24]
 8016bd6:	e7f7      	b.n	8016bc8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016bd8:	bd38      	pop	{r3, r4, r5, pc}

08016bda <_ZN8touchgfx9ContainerD1Ev>:
 8016bda:	4770      	bx	lr

08016bdc <_ZN8touchgfx9ContainerD0Ev>:
 8016bdc:	b510      	push	{r4, lr}
 8016bde:	4604      	mov	r4, r0
 8016be0:	212c      	movs	r1, #44	; 0x2c
 8016be2:	f012 fdb1 	bl	8029748 <_ZdlPvj>
 8016be6:	4620      	mov	r0, r4
 8016be8:	bd10      	pop	{r4, pc}

08016bea <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016bea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016bec:	b19b      	cbz	r3, 8016c16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016bee:	428b      	cmp	r3, r1
 8016bf0:	d109      	bne.n	8016c06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016bf2:	699a      	ldr	r2, [r3, #24]
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	6159      	str	r1, [r3, #20]
 8016bf8:	6282      	str	r2, [r0, #40]	; 0x28
 8016bfa:	b902      	cbnz	r2, 8016bfe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016bfc:	4770      	bx	lr
 8016bfe:	6199      	str	r1, [r3, #24]
 8016c00:	4770      	bx	lr
 8016c02:	4613      	mov	r3, r2
 8016c04:	b13a      	cbz	r2, 8016c16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016c06:	699a      	ldr	r2, [r3, #24]
 8016c08:	428a      	cmp	r2, r1
 8016c0a:	d1fa      	bne.n	8016c02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016c0c:	698a      	ldr	r2, [r1, #24]
 8016c0e:	619a      	str	r2, [r3, #24]
 8016c10:	2300      	movs	r3, #0
 8016c12:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016c16:	4770      	bx	lr

08016c18 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016c18:	b410      	push	{r4}
 8016c1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016c1c:	4604      	mov	r4, r0
 8016c1e:	b92b      	cbnz	r3, 8016c2c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016c20:	6803      	ldr	r3, [r0, #0]
 8016c22:	4611      	mov	r1, r2
 8016c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c2a:	4718      	bx	r3
 8016c2c:	b941      	cbnz	r1, 8016c40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016c2e:	6193      	str	r3, [r2, #24]
 8016c30:	6282      	str	r2, [r0, #40]	; 0x28
 8016c32:	6154      	str	r4, [r2, #20]
 8016c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c38:	4770      	bx	lr
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	d0f9      	beq.n	8016c34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016c40:	4299      	cmp	r1, r3
 8016c42:	6998      	ldr	r0, [r3, #24]
 8016c44:	d1f9      	bne.n	8016c3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016c46:	6190      	str	r0, [r2, #24]
 8016c48:	618a      	str	r2, [r1, #24]
 8016c4a:	e7f2      	b.n	8016c32 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c50:	461f      	mov	r7, r3
 8016c52:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016c56:	460d      	mov	r5, r1
 8016c58:	4616      	mov	r6, r2
 8016c5a:	b103      	cbz	r3, 8016c5e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016c5c:	6038      	str	r0, [r7, #0]
 8016c5e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016c60:	b314      	cbz	r4, 8016ca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016c62:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016c66:	b1eb      	cbz	r3, 8016ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c68:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016c6c:	428d      	cmp	r5, r1
 8016c6e:	db19      	blt.n	8016ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c70:	b289      	uxth	r1, r1
 8016c72:	8923      	ldrh	r3, [r4, #8]
 8016c74:	440b      	add	r3, r1
 8016c76:	b21b      	sxth	r3, r3
 8016c78:	429d      	cmp	r5, r3
 8016c7a:	da13      	bge.n	8016ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c7c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016c80:	4296      	cmp	r6, r2
 8016c82:	db0f      	blt.n	8016ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c84:	b292      	uxth	r2, r2
 8016c86:	8963      	ldrh	r3, [r4, #10]
 8016c88:	4413      	add	r3, r2
 8016c8a:	b21b      	sxth	r3, r3
 8016c8c:	429e      	cmp	r6, r3
 8016c8e:	da09      	bge.n	8016ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	1ab2      	subs	r2, r6, r2
 8016c94:	1a69      	subs	r1, r5, r1
 8016c96:	4620      	mov	r0, r4
 8016c98:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016c9c:	b212      	sxth	r2, r2
 8016c9e:	463b      	mov	r3, r7
 8016ca0:	b209      	sxth	r1, r1
 8016ca2:	47c0      	blx	r8
 8016ca4:	69a4      	ldr	r4, [r4, #24]
 8016ca6:	e7db      	b.n	8016c60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016cac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb0:	4c6d      	ldr	r4, [pc, #436]	; (8016e68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016cb2:	b0a1      	sub	sp, #132	; 0x84
 8016cb4:	4606      	mov	r6, r0
 8016cb6:	6824      	ldr	r4, [r4, #0]
 8016cb8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016cba:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016cbe:	2400      	movs	r4, #0
 8016cc0:	9303      	str	r3, [sp, #12]
 8016cc2:	802c      	strh	r4, [r5, #0]
 8016cc4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016cc6:	802c      	strh	r4, [r5, #0]
 8016cc8:	601c      	str	r4, [r3, #0]
 8016cca:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016cce:	f7ff ffbd 	bl	8016c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016cd2:	f1b9 0f03 	cmp.w	r9, #3
 8016cd6:	f340 80c1 	ble.w	8016e5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016cda:	4631      	mov	r1, r6
 8016cdc:	a80c      	add	r0, sp, #48	; 0x30
 8016cde:	f005 fb41 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ce2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016ce6:	9306      	str	r3, [sp, #24]
 8016ce8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016cec:	9307      	str	r3, [sp, #28]
 8016cee:	9b03      	ldr	r3, [sp, #12]
 8016cf0:	f8d3 a000 	ldr.w	sl, [r3]
 8016cf4:	f1ba 0f00 	cmp.w	sl, #0
 8016cf8:	f000 80b3 	beq.w	8016e62 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8016cfc:	4651      	mov	r1, sl
 8016cfe:	a810      	add	r0, sp, #64	; 0x40
 8016d00:	f005 fb30 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016d04:	2002      	movs	r0, #2
 8016d06:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016d0a:	9b01      	ldr	r3, [sp, #4]
 8016d0c:	9a06      	ldr	r2, [sp, #24]
 8016d0e:	fb91 f1f0 	sdiv	r1, r1, r0
 8016d12:	189d      	adds	r5, r3, r2
 8016d14:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8016d18:	9a07      	ldr	r2, [sp, #28]
 8016d1a:	4419      	add	r1, r3
 8016d1c:	9b02      	ldr	r3, [sp, #8]
 8016d1e:	4413      	add	r3, r2
 8016d20:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016d24:	1a6d      	subs	r5, r5, r1
 8016d26:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016d2a:	fb92 f2f0 	sdiv	r2, r2, r0
 8016d2e:	440a      	add	r2, r1
 8016d30:	1a9b      	subs	r3, r3, r2
 8016d32:	435b      	muls	r3, r3
 8016d34:	fb05 3505 	mla	r5, r5, r5, r3
 8016d38:	4f4c      	ldr	r7, [pc, #304]	; (8016e6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8016d3a:	ac10      	add	r4, sp, #64	; 0x40
 8016d3c:	f1b9 0f0c 	cmp.w	r9, #12
 8016d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d4c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016d54:	f04f 0303 	mov.w	r3, #3
 8016d58:	bfd8      	it	le
 8016d5a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016d5e:	f04f 0400 	mov.w	r4, #0
 8016d62:	f8cd 9000 	str.w	r9, [sp]
 8016d66:	bfcc      	ite	gt
 8016d68:	4698      	movgt	r8, r3
 8016d6a:	fb92 f8f3 	sdivle	r8, r2, r3
 8016d6e:	1c63      	adds	r3, r4, #1
 8016d70:	aa10      	add	r2, sp, #64	; 0x40
 8016d72:	f004 0401 	and.w	r4, r4, #1
 8016d76:	f04f 0b00 	mov.w	fp, #0
 8016d7a:	9308      	str	r3, [sp, #32]
 8016d7c:	9b00      	ldr	r3, [sp, #0]
 8016d7e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016d82:	fb93 f3f8 	sdiv	r3, r3, r8
 8016d86:	3404      	adds	r4, #4
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	9304      	str	r3, [sp, #16]
 8016d8c:	9a04      	ldr	r2, [sp, #16]
 8016d8e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016d92:	fb13 f302 	smulbb	r3, r3, r2
 8016d96:	9a01      	ldr	r2, [sp, #4]
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	1899      	adds	r1, r3, r2
 8016d9c:	9305      	str	r3, [sp, #20]
 8016d9e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016da2:	b209      	sxth	r1, r1
 8016da4:	4299      	cmp	r1, r3
 8016da6:	db4d      	blt.n	8016e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016da8:	8932      	ldrh	r2, [r6, #8]
 8016daa:	4413      	add	r3, r2
 8016dac:	b21b      	sxth	r3, r3
 8016dae:	4299      	cmp	r1, r3
 8016db0:	da48      	bge.n	8016e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016db2:	9b04      	ldr	r3, [sp, #16]
 8016db4:	6827      	ldr	r7, [r4, #0]
 8016db6:	fb17 f703 	smulbb	r7, r7, r3
 8016dba:	9b02      	ldr	r3, [sp, #8]
 8016dbc:	b2bf      	uxth	r7, r7
 8016dbe:	18fa      	adds	r2, r7, r3
 8016dc0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016dc4:	b212      	sxth	r2, r2
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	db3c      	blt.n	8016e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016dca:	8970      	ldrh	r0, [r6, #10]
 8016dcc:	4403      	add	r3, r0
 8016dce:	b21b      	sxth	r3, r3
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	da37      	bge.n	8016e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	4630      	mov	r0, r6
 8016dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dda:	ab0b      	add	r3, sp, #44	; 0x2c
 8016ddc:	f7ff ff36 	bl	8016c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016de2:	b37a      	cbz	r2, 8016e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016de4:	4552      	cmp	r2, sl
 8016de6:	d02d      	beq.n	8016e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016de8:	4611      	mov	r1, r2
 8016dea:	a80e      	add	r0, sp, #56	; 0x38
 8016dec:	9209      	str	r2, [sp, #36]	; 0x24
 8016dee:	f005 fab9 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016df2:	f04f 0e02 	mov.w	lr, #2
 8016df6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8016dfa:	9a06      	ldr	r2, [sp, #24]
 8016dfc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016e00:	9b01      	ldr	r3, [sp, #4]
 8016e02:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8016e06:	4413      	add	r3, r2
 8016e08:	9a07      	ldr	r2, [sp, #28]
 8016e0a:	fb91 f1fe 	sdiv	r1, r1, lr
 8016e0e:	fb9c fcfe 	sdiv	ip, ip, lr
 8016e12:	4401      	add	r1, r0
 8016e14:	1a58      	subs	r0, r3, r1
 8016e16:	9b02      	ldr	r3, [sp, #8]
 8016e18:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8016e1c:	4413      	add	r3, r2
 8016e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e20:	448c      	add	ip, r1
 8016e22:	eba3 030c 	sub.w	r3, r3, ip
 8016e26:	435b      	muls	r3, r3
 8016e28:	fb00 3300 	mla	r3, r0, r0, r3
 8016e2c:	42ab      	cmp	r3, r5
 8016e2e:	d208      	bcs.n	8016e42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8016e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e32:	461d      	mov	r5, r3
 8016e34:	9803      	ldr	r0, [sp, #12]
 8016e36:	6001      	str	r1, [r0, #0]
 8016e38:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016e3a:	9805      	ldr	r0, [sp, #20]
 8016e3c:	8008      	strh	r0, [r1, #0]
 8016e3e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016e40:	800f      	strh	r7, [r1, #0]
 8016e42:	4692      	mov	sl, r2
 8016e44:	f10b 0b01 	add.w	fp, fp, #1
 8016e48:	3408      	adds	r4, #8
 8016e4a:	f1bb 0f04 	cmp.w	fp, #4
 8016e4e:	d19d      	bne.n	8016d8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8016e50:	9b00      	ldr	r3, [sp, #0]
 8016e52:	9c08      	ldr	r4, [sp, #32]
 8016e54:	444b      	add	r3, r9
 8016e56:	4544      	cmp	r4, r8
 8016e58:	9300      	str	r3, [sp, #0]
 8016e5a:	d188      	bne.n	8016d6e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8016e5c:	b021      	add	sp, #132	; 0x84
 8016e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e62:	f04f 35ff 	mov.w	r5, #4294967295
 8016e66:	e767      	b.n	8016d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016e68:	20015210 	.word	0x20015210
 8016e6c:	0802ace0 	.word	0x0802ace0

08016e70 <_ZN8touchgfx4RectaNERKS0_>:
 8016e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e74:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016e78:	888c      	ldrh	r4, [r1, #4]
 8016e7a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016e7e:	443c      	add	r4, r7
 8016e80:	b2a4      	uxth	r4, r4
 8016e82:	fa0f f884 	sxth.w	r8, r4
 8016e86:	45c1      	cmp	r9, r8
 8016e88:	da2f      	bge.n	8016eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e8a:	8882      	ldrh	r2, [r0, #4]
 8016e8c:	444a      	add	r2, r9
 8016e8e:	b292      	uxth	r2, r2
 8016e90:	fa0f fe82 	sxth.w	lr, r2
 8016e94:	4577      	cmp	r7, lr
 8016e96:	da28      	bge.n	8016eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e98:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016e9c:	88cb      	ldrh	r3, [r1, #6]
 8016e9e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016ea2:	442b      	add	r3, r5
 8016ea4:	b21b      	sxth	r3, r3
 8016ea6:	429e      	cmp	r6, r3
 8016ea8:	da1f      	bge.n	8016eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016eaa:	88c3      	ldrh	r3, [r0, #6]
 8016eac:	4433      	add	r3, r6
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	fa0f fc83 	sxth.w	ip, r3
 8016eb4:	4565      	cmp	r5, ip
 8016eb6:	da18      	bge.n	8016eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016eb8:	454f      	cmp	r7, r9
 8016eba:	bfb8      	it	lt
 8016ebc:	464f      	movlt	r7, r9
 8016ebe:	42b5      	cmp	r5, r6
 8016ec0:	bfb8      	it	lt
 8016ec2:	4635      	movlt	r5, r6
 8016ec4:	45f0      	cmp	r8, lr
 8016ec6:	bfd8      	it	le
 8016ec8:	4622      	movle	r2, r4
 8016eca:	1bd2      	subs	r2, r2, r7
 8016ecc:	8082      	strh	r2, [r0, #4]
 8016ece:	884a      	ldrh	r2, [r1, #2]
 8016ed0:	88c9      	ldrh	r1, [r1, #6]
 8016ed2:	8007      	strh	r7, [r0, #0]
 8016ed4:	440a      	add	r2, r1
 8016ed6:	8045      	strh	r5, [r0, #2]
 8016ed8:	b292      	uxth	r2, r2
 8016eda:	b211      	sxth	r1, r2
 8016edc:	458c      	cmp	ip, r1
 8016ede:	bfa8      	it	ge
 8016ee0:	4613      	movge	r3, r2
 8016ee2:	1b5b      	subs	r3, r3, r5
 8016ee4:	80c3      	strh	r3, [r0, #6]
 8016ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eea:	2300      	movs	r3, #0
 8016eec:	8003      	strh	r3, [r0, #0]
 8016eee:	8043      	strh	r3, [r0, #2]
 8016ef0:	8083      	strh	r3, [r0, #4]
 8016ef2:	80c3      	strh	r3, [r0, #6]
 8016ef4:	e7f7      	b.n	8016ee6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016ef6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	dd06      	ble.n	8016f0c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016efe:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016f02:	2800      	cmp	r0, #0
 8016f04:	bfcc      	ite	gt
 8016f06:	2000      	movgt	r0, #0
 8016f08:	2001      	movle	r0, #1
 8016f0a:	4770      	bx	lr
 8016f0c:	2001      	movs	r0, #1
 8016f0e:	4770      	bx	lr

08016f10 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f14:	2300      	movs	r3, #0
 8016f16:	4604      	mov	r4, r0
 8016f18:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016f1a:	8003      	strh	r3, [r0, #0]
 8016f1c:	8043      	strh	r3, [r0, #2]
 8016f1e:	8083      	strh	r3, [r0, #4]
 8016f20:	80c3      	strh	r3, [r0, #6]
 8016f22:	2d00      	cmp	r5, #0
 8016f24:	d040      	beq.n	8016fa8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016f26:	1d28      	adds	r0, r5, #4
 8016f28:	f7ff ffe5 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f2c:	b988      	cbnz	r0, 8016f52 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016f2e:	4620      	mov	r0, r4
 8016f30:	f7ff ffe1 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f34:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016f38:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016f3c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016f40:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016f44:	b138      	cbz	r0, 8016f56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016f46:	8022      	strh	r2, [r4, #0]
 8016f48:	8063      	strh	r3, [r4, #2]
 8016f4a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016f4e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016f52:	69ad      	ldr	r5, [r5, #24]
 8016f54:	e7e5      	b.n	8016f22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016f56:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016f5a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016f5e:	4290      	cmp	r0, r2
 8016f60:	4607      	mov	r7, r0
 8016f62:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016f66:	460e      	mov	r6, r1
 8016f68:	bfa8      	it	ge
 8016f6a:	4617      	movge	r7, r2
 8016f6c:	4299      	cmp	r1, r3
 8016f6e:	4472      	add	r2, lr
 8016f70:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016f74:	bfa8      	it	ge
 8016f76:	461e      	movge	r6, r3
 8016f78:	4440      	add	r0, r8
 8016f7a:	4471      	add	r1, lr
 8016f7c:	4463      	add	r3, ip
 8016f7e:	b200      	sxth	r0, r0
 8016f80:	8027      	strh	r7, [r4, #0]
 8016f82:	b212      	sxth	r2, r2
 8016f84:	8066      	strh	r6, [r4, #2]
 8016f86:	b209      	sxth	r1, r1
 8016f88:	b21b      	sxth	r3, r3
 8016f8a:	4290      	cmp	r0, r2
 8016f8c:	bfac      	ite	ge
 8016f8e:	ebc7 0200 	rsbge	r2, r7, r0
 8016f92:	ebc7 0202 	rsblt	r2, r7, r2
 8016f96:	4299      	cmp	r1, r3
 8016f98:	bfac      	ite	ge
 8016f9a:	ebc6 0301 	rsbge	r3, r6, r1
 8016f9e:	ebc6 0303 	rsblt	r3, r6, r3
 8016fa2:	80a2      	strh	r2, [r4, #4]
 8016fa4:	80e3      	strh	r3, [r4, #6]
 8016fa6:	e7d4      	b.n	8016f52 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016fa8:	4620      	mov	r0, r4
 8016faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fae <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016fae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016fb2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016fb6:	b383      	cbz	r3, 801701a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016fb8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016fba:	b374      	cbz	r4, 801701a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016fbc:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016fc0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016fc4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016fc8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016fcc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016fd0:	b303      	cbz	r3, 8017014 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016fd2:	4668      	mov	r0, sp
 8016fd4:	1d21      	adds	r1, r4, #4
 8016fd6:	f8ad 5000 	strh.w	r5, [sp]
 8016fda:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016fde:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016fe2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016fe6:	f7ff ff43 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8016fea:	4668      	mov	r0, sp
 8016fec:	f7ff ff83 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ff0:	b980      	cbnz	r0, 8017014 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016ff2:	f8bd 3000 	ldrh.w	r3, [sp]
 8016ff6:	4669      	mov	r1, sp
 8016ff8:	88a2      	ldrh	r2, [r4, #4]
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	1a9b      	subs	r3, r3, r2
 8016ffe:	88e2      	ldrh	r2, [r4, #6]
 8017000:	f8ad 3000 	strh.w	r3, [sp]
 8017004:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017008:	1a9b      	subs	r3, r3, r2
 801700a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801700e:	6823      	ldr	r3, [r4, #0]
 8017010:	689b      	ldr	r3, [r3, #8]
 8017012:	4798      	blx	r3
 8017014:	69a4      	ldr	r4, [r4, #24]
 8017016:	2c00      	cmp	r4, #0
 8017018:	d1d8      	bne.n	8016fcc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801701a:	b002      	add	sp, #8
 801701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017020 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017022:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017026:	460d      	mov	r5, r1
 8017028:	4616      	mov	r6, r2
 801702a:	b323      	cbz	r3, 8017076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801702c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801702e:	b314      	cbz	r4, 8017076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017030:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017034:	b1eb      	cbz	r3, 8017072 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017036:	6828      	ldr	r0, [r5, #0]
 8017038:	466b      	mov	r3, sp
 801703a:	6869      	ldr	r1, [r5, #4]
 801703c:	c303      	stmia	r3!, {r0, r1}
 801703e:	4668      	mov	r0, sp
 8017040:	1d21      	adds	r1, r4, #4
 8017042:	f7ff ff15 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8017046:	4668      	mov	r0, sp
 8017048:	f7ff ff55 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801704c:	b988      	cbnz	r0, 8017072 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801704e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017052:	4669      	mov	r1, sp
 8017054:	88a2      	ldrh	r2, [r4, #4]
 8017056:	4620      	mov	r0, r4
 8017058:	1a9b      	subs	r3, r3, r2
 801705a:	88e2      	ldrh	r2, [r4, #6]
 801705c:	f8ad 3000 	strh.w	r3, [sp]
 8017060:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017064:	1a9b      	subs	r3, r3, r2
 8017066:	4632      	mov	r2, r6
 8017068:	f8ad 3002 	strh.w	r3, [sp, #2]
 801706c:	6823      	ldr	r3, [r4, #0]
 801706e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017070:	4798      	blx	r3
 8017072:	69a4      	ldr	r4, [r4, #24]
 8017074:	e7db      	b.n	801702e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017076:	b002      	add	sp, #8
 8017078:	bd70      	pop	{r4, r5, r6, pc}

0801707a <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801707a:	2000      	movs	r0, #0
 801707c:	4770      	bx	lr

0801707e <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801707e:	2001      	movs	r0, #1
 8017080:	4770      	bx	lr

08017082 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8017082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017084:	6803      	ldr	r3, [r0, #0]
 8017086:	4604      	mov	r4, r0
 8017088:	460e      	mov	r6, r1
 801708a:	4601      	mov	r1, r0
 801708c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017090:	4668      	mov	r0, sp
 8017092:	4615      	mov	r5, r2
 8017094:	4798      	blx	r3
 8017096:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801709a:	b13b      	cbz	r3, 80170ac <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 801709c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80170a0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80170a4:	4293      	cmp	r3, r2
 80170a6:	bfac      	ite	ge
 80170a8:	2300      	movge	r3, #0
 80170aa:	2301      	movlt	r3, #1
 80170ac:	7033      	strb	r3, [r6, #0]
 80170ae:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80170b2:	b13b      	cbz	r3, 80170c4 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 80170b4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80170b8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80170bc:	4293      	cmp	r3, r2
 80170be:	bfac      	ite	ge
 80170c0:	2300      	movge	r3, #0
 80170c2:	2301      	movlt	r3, #1
 80170c4:	702b      	strb	r3, [r5, #0]
 80170c6:	b002      	add	sp, #8
 80170c8:	bd70      	pop	{r4, r5, r6, pc}

080170ca <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 80170ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170ce:	4604      	mov	r4, r0
 80170d0:	460f      	mov	r7, r1
 80170d2:	4616      	mov	r6, r2
 80170d4:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80170d6:	f100 0838 	add.w	r8, r0, #56	; 0x38
 80170da:	f100 0964 	add.w	r9, r0, #100	; 0x64
 80170de:	b15d      	cbz	r5, 80170f8 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 80170e0:	4545      	cmp	r5, r8
 80170e2:	d007      	beq.n	80170f4 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80170e4:	454d      	cmp	r5, r9
 80170e6:	d005      	beq.n	80170f4 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80170e8:	682b      	ldr	r3, [r5, #0]
 80170ea:	4632      	mov	r2, r6
 80170ec:	4639      	mov	r1, r7
 80170ee:	4628      	mov	r0, r5
 80170f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170f2:	4798      	blx	r3
 80170f4:	69ad      	ldr	r5, [r5, #24]
 80170f6:	e7f2      	b.n	80170de <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 80170f8:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80170fc:	441f      	add	r7, r3
 80170fe:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8017102:	441e      	add	r6, r3
 8017104:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 8017108:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 801710c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017110 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 8017110:	4770      	bx	lr

08017112 <_ZN8touchgfx9DragEventD1Ev>:
 8017112:	4770      	bx	lr

08017114 <_ZN8touchgfx10ClickEventD1Ev>:
 8017114:	4770      	bx	lr

08017116 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8017116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017118:	4605      	mov	r5, r0
 801711a:	f100 0638 	add.w	r6, r0, #56	; 0x38
 801711e:	4604      	mov	r4, r0
 8017120:	460f      	mov	r7, r1
 8017122:	f855 3b64 	ldr.w	r3, [r5], #100
 8017126:	4631      	mov	r1, r6
 8017128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801712a:	4798      	blx	r3
 801712c:	6823      	ldr	r3, [r4, #0]
 801712e:	4629      	mov	r1, r5
 8017130:	4620      	mov	r0, r4
 8017132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017134:	4798      	blx	r3
 8017136:	4639      	mov	r1, r7
 8017138:	4620      	mov	r0, r4
 801713a:	f7ff fd15 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801713e:	4631      	mov	r1, r6
 8017140:	4620      	mov	r0, r4
 8017142:	f7ff fd11 	bl	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017146:	4629      	mov	r1, r5
 8017148:	4620      	mov	r0, r4
 801714a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801714e:	f7ff bd0b 	b.w	8016b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>

08017152 <_ZN8touchgfx10ClickEventD0Ev>:
 8017152:	b510      	push	{r4, lr}
 8017154:	4604      	mov	r4, r0
 8017156:	210c      	movs	r1, #12
 8017158:	f012 faf6 	bl	8029748 <_ZdlPvj>
 801715c:	4620      	mov	r0, r4
 801715e:	bd10      	pop	{r4, pc}

08017160 <_ZN8touchgfx9DragEventD0Ev>:
 8017160:	b510      	push	{r4, lr}
 8017162:	4604      	mov	r4, r0
 8017164:	2110      	movs	r1, #16
 8017166:	f012 faef 	bl	8029748 <_ZdlPvj>
 801716a:	4620      	mov	r0, r4
 801716c:	bd10      	pop	{r4, pc}

0801716e <_ZN8touchgfx19ScrollableContainerD0Ev>:
 801716e:	b510      	push	{r4, lr}
 8017170:	4604      	mov	r4, r0
 8017172:	21bc      	movs	r1, #188	; 0xbc
 8017174:	f012 fae8 	bl	8029748 <_ZdlPvj>
 8017178:	4620      	mov	r0, r4
 801717a:	bd10      	pop	{r4, pc}

0801717c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 801717c:	b570      	push	{r4, r5, r6, lr}
 801717e:	b086      	sub	sp, #24
 8017180:	2300      	movs	r3, #0
 8017182:	460c      	mov	r4, r1
 8017184:	4605      	mov	r5, r0
 8017186:	aa06      	add	r2, sp, #24
 8017188:	f88d 3002 	strb.w	r3, [sp, #2]
 801718c:	f10d 0102 	add.w	r1, sp, #2
 8017190:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8017194:	6803      	ldr	r3, [r0, #0]
 8017196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801719a:	4798      	blx	r3
 801719c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80171a0:	b10b      	cbz	r3, 80171a6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 80171a2:	7923      	ldrb	r3, [r4, #4]
 80171a4:	b133      	cbz	r3, 80171b4 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 80171a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d068      	beq.n	8017280 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80171ae:	7923      	ldrb	r3, [r4, #4]
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d165      	bne.n	8017280 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80171b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80171b8:	2a00      	cmp	r2, #0
 80171ba:	bfb8      	it	lt
 80171bc:	4252      	neglt	r2, r2
 80171be:	b213      	sxth	r3, r2
 80171c0:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 80171c4:	429a      	cmp	r2, r3
 80171c6:	dc5b      	bgt.n	8017280 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80171c8:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 80171ca:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 80171ce:	429a      	cmp	r2, r3
 80171d0:	bfa8      	it	ge
 80171d2:	461a      	movge	r2, r3
 80171d4:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 80171d8:	b212      	sxth	r2, r2
 80171da:	2a05      	cmp	r2, #5
 80171dc:	bfb8      	it	lt
 80171de:	2205      	movlt	r2, #5
 80171e0:	4351      	muls	r1, r2
 80171e2:	3a04      	subs	r2, #4
 80171e4:	fb91 f1f3 	sdiv	r1, r1, r3
 80171e8:	f8a5 10a8 	strh.w	r1, [r5, #168]	; 0xa8
 80171ec:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80171f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80171f4:	b289      	uxth	r1, r1
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171fc:	bfcc      	ite	gt
 80171fe:	2001      	movgt	r0, #1
 8017200:	4618      	movle	r0, r3
 8017202:	00d3      	lsls	r3, r2, #3
 8017204:	fb13 f300 	smulbb	r3, r3, r0
 8017208:	b21b      	sxth	r3, r3
 801720a:	2b00      	cmp	r3, #0
 801720c:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
 8017210:	bfb8      	it	lt
 8017212:	425b      	neglt	r3, r3
 8017214:	b21b      	sxth	r3, r3
 8017216:	428b      	cmp	r3, r1
 8017218:	bfa8      	it	ge
 801721a:	460b      	movge	r3, r1
 801721c:	4629      	mov	r1, r5
 801721e:	f8a5 30a8 	strh.w	r3, [r5, #168]	; 0xa8
 8017222:	7922      	ldrb	r2, [r4, #4]
 8017224:	682b      	ldr	r3, [r5, #0]
 8017226:	2a01      	cmp	r2, #1
 8017228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801722c:	d12a      	bne.n	8017284 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 801722e:	a801      	add	r0, sp, #4
 8017230:	4798      	blx	r3
 8017232:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8017236:	2601      	movs	r6, #1
 8017238:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 801723c:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8017240:	f003 ff66 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8017244:	4629      	mov	r1, r5
 8017246:	3004      	adds	r0, #4
 8017248:	f004 f830 	bl	801b2ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801724c:	7923      	ldrb	r3, [r4, #4]
 801724e:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8017252:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8017256:	b198      	cbz	r0, 8017280 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8017258:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 801725c:	b983      	cbnz	r3, 8017280 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801725e:	4a0c      	ldr	r2, [pc, #48]	; (8017290 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 8017260:	a903      	add	r1, sp, #12
 8017262:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017266:	9203      	str	r2, [sp, #12]
 8017268:	2202      	movs	r2, #2
 801726a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801726e:	f88d 2010 	strb.w	r2, [sp, #16]
 8017272:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017276:	6803      	ldr	r3, [r0, #0]
 8017278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801727a:	4798      	blx	r3
 801727c:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8017280:	b006      	add	sp, #24
 8017282:	bd70      	pop	{r4, r5, r6, pc}
 8017284:	a803      	add	r0, sp, #12
 8017286:	4798      	blx	r3
 8017288:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801728c:	e7d3      	b.n	8017236 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 801728e:	bf00      	nop
 8017290:	0802f118 	.word	0x0802f118

08017294 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8017294:	b470      	push	{r4, r5, r6}
 8017296:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 801729a:	461d      	mov	r5, r3
 801729c:	b11e      	cbz	r6, 80172a6 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 801729e:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 80172a2:	b116      	cbz	r6, 80172aa <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 80172a4:	6028      	str	r0, [r5, #0]
 80172a6:	bc70      	pop	{r4, r5, r6}
 80172a8:	4770      	bx	lr
 80172aa:	bc70      	pop	{r4, r5, r6}
 80172ac:	f7ff bcce 	b.w	8016c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

080172b0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 80172b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172b2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80172b6:	4604      	mov	r4, r0
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d049      	beq.n	8017350 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 80172bc:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 80172c0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 80172c4:	3001      	adds	r0, #1
 80172c6:	b280      	uxth	r0, r0
 80172c8:	4298      	cmp	r0, r3
 80172ca:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 80172ce:	d843      	bhi.n	8017358 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa8>
 80172d0:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80172d4:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80172d8:	f005 fbee 	bl	801cab8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80172dc:	4605      	mov	r5, r0
 80172de:	b282      	uxth	r2, r0
 80172e0:	f012 0301 	ands.w	r3, r2, #1
 80172e4:	d006      	beq.n	80172f4 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 80172e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80172ea:	2800      	cmp	r0, #0
 80172ec:	bfd8      	it	le
 80172ee:	460b      	movle	r3, r1
 80172f0:	18d5      	adds	r5, r2, r3
 80172f2:	b22d      	sxth	r5, r5
 80172f4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d02b      	beq.n	8017354 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa4>
 80172fc:	6823      	ldr	r3, [r4, #0]
 80172fe:	4621      	mov	r1, r4
 8017300:	4668      	mov	r0, sp
 8017302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017306:	4798      	blx	r3
 8017308:	f8bd 6000 	ldrh.w	r6, [sp]
 801730c:	1bae      	subs	r6, r5, r6
 801730e:	b236      	sxth	r6, r6
 8017310:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8017314:	b14a      	cbz	r2, 801732a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 8017316:	6823      	ldr	r3, [r4, #0]
 8017318:	4621      	mov	r1, r4
 801731a:	4668      	mov	r0, sp
 801731c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017320:	4798      	blx	r3
 8017322:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017326:	1aad      	subs	r5, r5, r2
 8017328:	b22a      	sxth	r2, r5
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	4631      	mov	r1, r6
 801732e:	4620      	mov	r0, r4
 8017330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017334:	4798      	blx	r3
 8017336:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 801733a:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 801733e:	b93d      	cbnz	r5, 8017350 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 8017340:	f003 fee6 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8017344:	4621      	mov	r1, r4
 8017346:	3004      	adds	r0, #4
 8017348:	f003 ff07 	bl	801b15a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801734c:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 8017350:	b002      	add	sp, #8
 8017352:	bd70      	pop	{r4, r5, r6, pc}
 8017354:	2600      	movs	r6, #0
 8017356:	e7db      	b.n	8017310 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8017358:	2300      	movs	r3, #0
 801735a:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 801735e:	e7ec      	b.n	801733a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08017360 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8017360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017364:	b08b      	sub	sp, #44	; 0x2c
 8017366:	2300      	movs	r3, #0
 8017368:	4604      	mov	r4, r0
 801736a:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801736e:	aa0a      	add	r2, sp, #40	; 0x28
 8017370:	f88d 3006 	strb.w	r3, [sp, #6]
 8017374:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8017378:	460f      	mov	r7, r1
 801737a:	f802 3d21 	strb.w	r3, [r2, #-33]!
 801737e:	6803      	ldr	r3, [r0, #0]
 8017380:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8017384:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8017388:	f10d 0106 	add.w	r1, sp, #6
 801738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017390:	4798      	blx	r3
 8017392:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8017396:	2900      	cmp	r1, #0
 8017398:	d03d      	beq.n	8017416 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801739a:	42a1      	cmp	r1, r4
 801739c:	d03b      	beq.n	8017416 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801739e:	a802      	add	r0, sp, #8
 80173a0:	f004 ffe0 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173a4:	4621      	mov	r1, r4
 80173a6:	a804      	add	r0, sp, #16
 80173a8:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 80173ac:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80173b0:	f004 ffd8 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80173b8:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 80173bc:	eba3 030b 	sub.w	r3, r3, fp
 80173c0:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 80173c4:	88f9      	ldrh	r1, [r7, #6]
 80173c6:	4413      	add	r3, r2
 80173c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80173cc:	f89d c006 	ldrb.w	ip, [sp, #6]
 80173d0:	eba2 020a 	sub.w	r2, r2, sl
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	4402      	add	r2, r0
 80173d8:	8938      	ldrh	r0, [r7, #8]
 80173da:	4419      	add	r1, r3
 80173dc:	b292      	uxth	r2, r2
 80173de:	b209      	sxth	r1, r1
 80173e0:	4410      	add	r0, r2
 80173e2:	b200      	sxth	r0, r0
 80173e4:	f1bc 0f00 	cmp.w	ip, #0
 80173e8:	f040 808d 	bne.w	8017506 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 80173ec:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 80173f0:	4473      	add	r3, lr
 80173f2:	b21b      	sxth	r3, r3
 80173f4:	f89d e007 	ldrb.w	lr, [sp, #7]
 80173f8:	f1be 0f00 	cmp.w	lr, #0
 80173fc:	f040 80b1 	bne.w	8017562 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 8017400:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 8017404:	4472      	add	r2, lr
 8017406:	b212      	sxth	r2, r2
 8017408:	f1bc 0f00 	cmp.w	ip, #0
 801740c:	f000 80c8 	beq.w	80175a0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 8017410:	4290      	cmp	r0, r2
 8017412:	f040 80ae 	bne.w	8017572 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8017416:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 801741a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801741e:	2b00      	cmp	r3, #0
 8017420:	f040 8099 	bne.w	8017556 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8017424:	897d      	ldrh	r5, [r7, #10]
 8017426:	89be      	ldrh	r6, [r7, #12]
 8017428:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 801742c:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
 8017430:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 8017434:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	; 0xa0
 8017438:	4411      	add	r1, r2
 801743a:	442a      	add	r2, r5
 801743c:	449c      	add	ip, r3
 801743e:	4433      	add	r3, r6
 8017440:	b292      	uxth	r2, r2
 8017442:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8017446:	b29b      	uxth	r3, r3
 8017448:	b289      	uxth	r1, r1
 801744a:	fa1f fc8c 	uxth.w	ip, ip
 801744e:	b215      	sxth	r5, r2
 8017450:	b21e      	sxth	r6, r3
 8017452:	b15f      	cbz	r7, 801746c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8017454:	1a52      	subs	r2, r2, r1
 8017456:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	; 0x9c
 801745a:	b212      	sxth	r2, r2
 801745c:	2a00      	cmp	r2, #0
 801745e:	bfb8      	it	lt
 8017460:	4252      	neglt	r2, r2
 8017462:	b212      	sxth	r2, r2
 8017464:	4297      	cmp	r7, r2
 8017466:	bfac      	ite	ge
 8017468:	2700      	movge	r7, #0
 801746a:	2701      	movlt	r7, #1
 801746c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017470:	b152      	cbz	r2, 8017488 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 8017472:	eba3 030c 	sub.w	r3, r3, ip
 8017476:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
 801747a:	b21b      	sxth	r3, r3
 801747c:	2b00      	cmp	r3, #0
 801747e:	bfb8      	it	lt
 8017480:	425b      	neglt	r3, r3
 8017482:	b21b      	sxth	r3, r3
 8017484:	429a      	cmp	r2, r3
 8017486:	db01      	blt.n	801748c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8017488:	2f00      	cmp	r7, #0
 801748a:	d03e      	beq.n	801750a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 801748c:	2701      	movs	r7, #1
 801748e:	fa0f f881 	sxth.w	r8, r1
 8017492:	fa0f f98c 	sxth.w	r9, ip
 8017496:	f884 70a3 	strb.w	r7, [r4, #163]	; 0xa3
 801749a:	b1a0      	cbz	r0, 80174c6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 801749c:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80174a0:	b98b      	cbnz	r3, 80174c6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 80174a2:	4a41      	ldr	r2, [pc, #260]	; (80175a8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 80174a4:	a906      	add	r1, sp, #24
 80174a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80174aa:	9206      	str	r2, [sp, #24]
 80174ac:	2202      	movs	r2, #2
 80174ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80174b2:	f88d 201c 	strb.w	r2, [sp, #28]
 80174b6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80174ba:	6803      	ldr	r3, [r0, #0]
 80174bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174be:	4798      	blx	r3
 80174c0:	2301      	movs	r3, #1
 80174c2:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 80174c6:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 80174ca:	b149      	cbz	r1, 80174e0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 80174cc:	eba5 0108 	sub.w	r1, r5, r8
 80174d0:	b209      	sxth	r1, r1
 80174d2:	b12f      	cbz	r7, 80174e0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 80174d4:	2900      	cmp	r1, #0
 80174d6:	dc40      	bgt.n	801755a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 80174d8:	bf14      	ite	ne
 80174da:	f04f 31ff 	movne.w	r1, #4294967295
 80174de:	2100      	moveq	r1, #0
 80174e0:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80174e4:	b14a      	cbz	r2, 80174fa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80174e6:	eba6 0609 	sub.w	r6, r6, r9
 80174ea:	b232      	sxth	r2, r6
 80174ec:	b12f      	cbz	r7, 80174fa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80174ee:	2a00      	cmp	r2, #0
 80174f0:	dc35      	bgt.n	801755e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 80174f2:	bf14      	ite	ne
 80174f4:	f04f 32ff 	movne.w	r2, #4294967295
 80174f8:	2200      	moveq	r2, #0
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	4620      	mov	r0, r4
 80174fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017502:	4798      	blx	r3
 8017504:	e024      	b.n	8017550 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8017506:	460b      	mov	r3, r1
 8017508:	e774      	b.n	80173f4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 801750a:	b308      	cbz	r0, 8017550 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 801750c:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8017510:	b9f3      	cbnz	r3, 8017550 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8017512:	ab0a      	add	r3, sp, #40	; 0x28
 8017514:	4620      	mov	r0, r4
 8017516:	4632      	mov	r2, r6
 8017518:	4629      	mov	r1, r5
 801751a:	f843 7d18 	str.w	r7, [r3, #-24]!
 801751e:	f7ff fb95 	bl	8016c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017522:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8017526:	9b04      	ldr	r3, [sp, #16]
 8017528:	4298      	cmp	r0, r3
 801752a:	d011      	beq.n	8017550 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 801752c:	4b1e      	ldr	r3, [pc, #120]	; (80175a8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 801752e:	a906      	add	r1, sp, #24
 8017530:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017534:	9306      	str	r3, [sp, #24]
 8017536:	2302      	movs	r3, #2
 8017538:	f8ad 7020 	strh.w	r7, [sp, #32]
 801753c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017540:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017544:	6803      	ldr	r3, [r0, #0]
 8017546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017548:	4798      	blx	r3
 801754a:	2301      	movs	r3, #1
 801754c:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8017550:	b00b      	add	sp, #44	; 0x2c
 8017552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017556:	2700      	movs	r7, #0
 8017558:	e79f      	b.n	801749a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 801755a:	2101      	movs	r1, #1
 801755c:	e7c0      	b.n	80174e0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 801755e:	2201      	movs	r2, #1
 8017560:	e7cb      	b.n	80174fa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8017562:	f1bc 0f00 	cmp.w	ip, #0
 8017566:	f47f af56 	bne.w	8017416 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801756a:	428b      	cmp	r3, r1
 801756c:	f43f af53 	beq.w	8017416 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8017570:	4602      	mov	r2, r0
 8017572:	f8df c038 	ldr.w	ip, [pc, #56]	; 80175ac <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8017576:	f8ad 0020 	strh.w	r0, [sp, #32]
 801757a:	f8cd c018 	str.w	ip, [sp, #24]
 801757e:	f04f 0c00 	mov.w	ip, #0
 8017582:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8017586:	f8ad 101e 	strh.w	r1, [sp, #30]
 801758a:	a906      	add	r1, sp, #24
 801758c:	f88d c01c 	strb.w	ip, [sp, #28]
 8017590:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017594:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8017598:	6803      	ldr	r3, [r0, #0]
 801759a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801759c:	4798      	blx	r3
 801759e:	e73a      	b.n	8017416 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80175a0:	428b      	cmp	r3, r1
 80175a2:	f43f af35 	beq.w	8017410 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 80175a6:	e7e4      	b.n	8017572 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 80175a8:	0802f118 	.word	0x0802f118
 80175ac:	0802f12c 	.word	0x0802f12c

080175b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80175b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b2:	4604      	mov	r4, r0
 80175b4:	4608      	mov	r0, r1
 80175b6:	460d      	mov	r5, r1
 80175b8:	f7ff fc9d 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175bc:	b978      	cbnz	r0, 80175de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80175be:	4620      	mov	r0, r4
 80175c0:	f7ff fc99 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175c4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80175c8:	b150      	cbz	r0, 80175e0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80175ca:	8026      	strh	r6, [r4, #0]
 80175cc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80175d0:	8063      	strh	r3, [r4, #2]
 80175d2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80175d6:	80a3      	strh	r3, [r4, #4]
 80175d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80175dc:	80e3      	strh	r3, [r4, #6]
 80175de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175e0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80175e4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80175e8:	42b1      	cmp	r1, r6
 80175ea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80175ee:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80175f2:	460f      	mov	r7, r1
 80175f4:	88ed      	ldrh	r5, [r5, #6]
 80175f6:	bfa8      	it	ge
 80175f8:	4637      	movge	r7, r6
 80175fa:	4293      	cmp	r3, r2
 80175fc:	4618      	mov	r0, r3
 80175fe:	4466      	add	r6, ip
 8017600:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017604:	bfa8      	it	ge
 8017606:	4610      	movge	r0, r2
 8017608:	442a      	add	r2, r5
 801760a:	88e5      	ldrh	r5, [r4, #6]
 801760c:	4461      	add	r1, ip
 801760e:	b236      	sxth	r6, r6
 8017610:	8027      	strh	r7, [r4, #0]
 8017612:	442b      	add	r3, r5
 8017614:	b209      	sxth	r1, r1
 8017616:	b212      	sxth	r2, r2
 8017618:	8060      	strh	r0, [r4, #2]
 801761a:	b21b      	sxth	r3, r3
 801761c:	428e      	cmp	r6, r1
 801761e:	bfac      	ite	ge
 8017620:	ebc7 0106 	rsbge	r1, r7, r6
 8017624:	ebc7 0101 	rsblt	r1, r7, r1
 8017628:	429a      	cmp	r2, r3
 801762a:	bfac      	ite	ge
 801762c:	ebc0 0202 	rsbge	r2, r0, r2
 8017630:	ebc0 0203 	rsblt	r2, r0, r3
 8017634:	80a1      	strh	r1, [r4, #4]
 8017636:	80e2      	strh	r2, [r4, #6]
 8017638:	e7d1      	b.n	80175de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801763a <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 801763a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801763c:	4604      	mov	r4, r0
 801763e:	2200      	movs	r2, #0
 8017640:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8017644:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8017648:	680b      	ldr	r3, [r1, #0]
 801764a:	8022      	strh	r2, [r4, #0]
 801764c:	8062      	strh	r2, [r4, #2]
 801764e:	80e0      	strh	r0, [r4, #6]
 8017650:	4668      	mov	r0, sp
 8017652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017656:	80a5      	strh	r5, [r4, #4]
 8017658:	4798      	blx	r3
 801765a:	4620      	mov	r0, r4
 801765c:	4669      	mov	r1, sp
 801765e:	f7ff ffa7 	bl	80175b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017662:	4620      	mov	r0, r4
 8017664:	b003      	add	sp, #12
 8017666:	bd30      	pop	{r4, r5, pc}

08017668 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8017668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801766a:	2300      	movs	r3, #0
 801766c:	4605      	mov	r5, r0
 801766e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017670:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8017674:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8017678:	8003      	strh	r3, [r0, #0]
 801767a:	8043      	strh	r3, [r0, #2]
 801767c:	8083      	strh	r3, [r0, #4]
 801767e:	80c3      	strh	r3, [r0, #6]
 8017680:	b164      	cbz	r4, 801769c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8017682:	42bc      	cmp	r4, r7
 8017684:	d008      	beq.n	8017698 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8017686:	42b4      	cmp	r4, r6
 8017688:	d006      	beq.n	8017698 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 801768a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801768e:	b11b      	cbz	r3, 8017698 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8017690:	1d21      	adds	r1, r4, #4
 8017692:	4628      	mov	r0, r5
 8017694:	f7ff ff8c 	bl	80175b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017698:	69a4      	ldr	r4, [r4, #24]
 801769a:	e7f1      	b.n	8017680 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 801769c:	4628      	mov	r0, r5
 801769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080176a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	6803      	ldr	r3, [r0, #0]
 80176a4:	4604      	mov	r4, r0
 80176a6:	4615      	mov	r5, r2
 80176a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176aa:	4798      	blx	r3
 80176ac:	6823      	ldr	r3, [r4, #0]
 80176ae:	4629      	mov	r1, r5
 80176b0:	4620      	mov	r0, r4
 80176b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176b8:	4718      	bx	r3
	...

080176bc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 80176bc:	b530      	push	{r4, r5, lr}
 80176be:	2500      	movs	r5, #0
 80176c0:	6283      	str	r3, [r0, #40]	; 0x28
 80176c2:	8101      	strh	r1, [r0, #8]
 80176c4:	8085      	strh	r5, [r0, #4]
 80176c6:	80c5      	strh	r5, [r0, #6]
 80176c8:	8185      	strh	r5, [r0, #12]
 80176ca:	81c5      	strh	r5, [r0, #14]
 80176cc:	8205      	strh	r5, [r0, #16]
 80176ce:	8245      	strh	r5, [r0, #18]
 80176d0:	61c5      	str	r5, [r0, #28]
 80176d2:	8405      	strh	r5, [r0, #32]
 80176d4:	8445      	strh	r5, [r0, #34]	; 0x22
 80176d6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80176da:	8142      	strh	r2, [r0, #10]
 80176dc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80176e0:	2501      	movs	r5, #1
 80176e2:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 80176e6:	4d03      	ldr	r5, [pc, #12]	; (80176f4 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 80176e8:	6005      	str	r5, [r0, #0]
 80176ea:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80176ee:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 80176f2:	bd30      	pop	{r4, r5, pc}
 80176f4:	0802f29c 	.word	0x0802f29c

080176f8 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 80176f8:	4b2f      	ldr	r3, [pc, #188]	; (80177b8 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 80176fa:	2278      	movs	r2, #120	; 0x78
 80176fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176fe:	6003      	str	r3, [r0, #0]
 8017700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017704:	2500      	movs	r5, #0
 8017706:	2601      	movs	r6, #1
 8017708:	8583      	strh	r3, [r0, #44]	; 0x2c
 801770a:	2111      	movs	r1, #17
 801770c:	f04f 33ff 	mov.w	r3, #4294967295
 8017710:	4604      	mov	r4, r0
 8017712:	8085      	strh	r5, [r0, #4]
 8017714:	80c5      	strh	r5, [r0, #6]
 8017716:	8105      	strh	r5, [r0, #8]
 8017718:	8145      	strh	r5, [r0, #10]
 801771a:	8185      	strh	r5, [r0, #12]
 801771c:	81c5      	strh	r5, [r0, #14]
 801771e:	8205      	strh	r5, [r0, #16]
 8017720:	8245      	strh	r5, [r0, #18]
 8017722:	61c5      	str	r5, [r0, #28]
 8017724:	8405      	strh	r5, [r0, #32]
 8017726:	8445      	strh	r5, [r0, #34]	; 0x22
 8017728:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 801772c:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8017730:	6285      	str	r5, [r0, #40]	; 0x28
 8017732:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017736:	6303      	str	r3, [r0, #48]	; 0x30
 8017738:	8681      	strh	r1, [r0, #52]	; 0x34
 801773a:	4629      	mov	r1, r5
 801773c:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8017740:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8017744:	9200      	str	r2, [sp, #0]
 8017746:	3038      	adds	r0, #56	; 0x38
 8017748:	462a      	mov	r2, r5
 801774a:	f7ff ffb7 	bl	80176bc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 801774e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017752:	462a      	mov	r2, r5
 8017754:	4629      	mov	r1, r5
 8017756:	9300      	str	r3, [sp, #0]
 8017758:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801775c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801775e:	f7ff ffad 	bl	80176bc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8017762:	2305      	movs	r3, #5
 8017764:	4620      	mov	r0, r4
 8017766:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 801776a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801776e:	4b13      	ldr	r3, [pc, #76]	; (80177bc <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8017770:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8017774:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8017778:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 801777c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8017780:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8017784:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8017788:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 801778c:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8017790:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8017794:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8017798:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 801779c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80177a0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 80177a4:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 80177a8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80177ac:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 80177b0:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 80177b4:	b002      	add	sp, #8
 80177b6:	bd70      	pop	{r4, r5, r6, pc}
 80177b8:	0802f140 	.word	0x0802f140
 80177bc:	00010007 	.word	0x00010007

080177c0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 80177c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177c2:	2600      	movs	r6, #0
 80177c4:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 80177c8:	4605      	mov	r5, r0
 80177ca:	460c      	mov	r4, r1
 80177cc:	8006      	strh	r6, [r0, #0]
 80177ce:	8046      	strh	r6, [r0, #2]
 80177d0:	8086      	strh	r6, [r0, #4]
 80177d2:	80c6      	strh	r6, [r0, #6]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d041      	beq.n	801785c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 80177d8:	680b      	ldr	r3, [r1, #0]
 80177da:	4668      	mov	r0, sp
 80177dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80177e0:	4798      	blx	r3
 80177e2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80177e6:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d039      	beq.n	8017862 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 80177ee:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80177f2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	dd05      	ble.n	8017806 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 80177fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80177fe:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8017802:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017806:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801780a:	42bb      	cmp	r3, r7
 801780c:	da26      	bge.n	801785c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801780e:	f9bd 0000 	ldrsh.w	r0, [sp]
 8017812:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017816:	4242      	negs	r2, r0
 8017818:	4438      	add	r0, r7
 801781a:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 801781e:	b200      	sxth	r0, r0
 8017820:	435a      	muls	r2, r3
 8017822:	1b9e      	subs	r6, r3, r6
 8017824:	1ac0      	subs	r0, r0, r3
 8017826:	4343      	muls	r3, r0
 8017828:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 801782c:	fb92 f2f7 	sdiv	r2, r2, r7
 8017830:	fb93 f3f7 	sdiv	r3, r3, r7
 8017834:	4413      	add	r3, r2
 8017836:	0047      	lsls	r7, r0, #1
 8017838:	1af3      	subs	r3, r6, r3
 801783a:	429f      	cmp	r7, r3
 801783c:	dd05      	ble.n	801784a <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 801783e:	1afb      	subs	r3, r7, r3
 8017840:	4353      	muls	r3, r2
 8017842:	fb93 f3f6 	sdiv	r3, r3, r6
 8017846:	1ad2      	subs	r2, r2, r3
 8017848:	463b      	mov	r3, r7
 801784a:	b289      	uxth	r1, r1
 801784c:	8964      	ldrh	r4, [r4, #10]
 801784e:	80ab      	strh	r3, [r5, #4]
 8017850:	180e      	adds	r6, r1, r0
 8017852:	4411      	add	r1, r2
 8017854:	80e8      	strh	r0, [r5, #6]
 8017856:	1ba4      	subs	r4, r4, r6
 8017858:	8029      	strh	r1, [r5, #0]
 801785a:	806c      	strh	r4, [r5, #2]
 801785c:	4628      	mov	r0, r5
 801785e:	b003      	add	sp, #12
 8017860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017862:	461e      	mov	r6, r3
 8017864:	e7cf      	b.n	8017806 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

08017866 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8017866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017868:	2600      	movs	r6, #0
 801786a:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 801786e:	4605      	mov	r5, r0
 8017870:	460c      	mov	r4, r1
 8017872:	8006      	strh	r6, [r0, #0]
 8017874:	8046      	strh	r6, [r0, #2]
 8017876:	8086      	strh	r6, [r0, #4]
 8017878:	80c6      	strh	r6, [r0, #6]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d041      	beq.n	8017902 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801787e:	680b      	ldr	r3, [r1, #0]
 8017880:	4668      	mov	r0, sp
 8017882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017886:	4798      	blx	r3
 8017888:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801788c:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d039      	beq.n	8017908 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8017894:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017898:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801789c:	429a      	cmp	r2, r3
 801789e:	dd05      	ble.n	80178ac <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 80178a0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80178a4:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80178a8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80178ac:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80178b0:	42bb      	cmp	r3, r7
 80178b2:	da26      	bge.n	8017902 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80178b4:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80178b8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80178bc:	4242      	negs	r2, r0
 80178be:	4438      	add	r0, r7
 80178c0:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80178c4:	b200      	sxth	r0, r0
 80178c6:	435a      	muls	r2, r3
 80178c8:	1b9e      	subs	r6, r3, r6
 80178ca:	1ac0      	subs	r0, r0, r3
 80178cc:	4343      	muls	r3, r0
 80178ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80178d2:	fb92 f2f7 	sdiv	r2, r2, r7
 80178d6:	fb93 f3f7 	sdiv	r3, r3, r7
 80178da:	4413      	add	r3, r2
 80178dc:	0047      	lsls	r7, r0, #1
 80178de:	1af3      	subs	r3, r6, r3
 80178e0:	429f      	cmp	r7, r3
 80178e2:	dd05      	ble.n	80178f0 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 80178e4:	1afb      	subs	r3, r7, r3
 80178e6:	4353      	muls	r3, r2
 80178e8:	fb93 f3f6 	sdiv	r3, r3, r6
 80178ec:	1ad2      	subs	r2, r2, r3
 80178ee:	463b      	mov	r3, r7
 80178f0:	b289      	uxth	r1, r1
 80178f2:	8924      	ldrh	r4, [r4, #8]
 80178f4:	80a8      	strh	r0, [r5, #4]
 80178f6:	180e      	adds	r6, r1, r0
 80178f8:	4411      	add	r1, r2
 80178fa:	80eb      	strh	r3, [r5, #6]
 80178fc:	1ba4      	subs	r4, r4, r6
 80178fe:	8069      	strh	r1, [r5, #2]
 8017900:	802c      	strh	r4, [r5, #0]
 8017902:	4628      	mov	r0, r5
 8017904:	b003      	add	sp, #12
 8017906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017908:	461e      	mov	r6, r3
 801790a:	e7cf      	b.n	80178ac <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

0801790c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 801790c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017910:	4617      	mov	r7, r2
 8017912:	2200      	movs	r2, #0
 8017914:	4604      	mov	r4, r0
 8017916:	460e      	mov	r6, r1
 8017918:	8002      	strh	r2, [r0, #0]
 801791a:	4698      	mov	r8, r3
 801791c:	8042      	strh	r2, [r0, #2]
 801791e:	8082      	strh	r2, [r0, #4]
 8017920:	80c2      	strh	r2, [r0, #6]
 8017922:	4638      	mov	r0, r7
 8017924:	f7ff fae7 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017928:	4605      	mov	r5, r0
 801792a:	b998      	cbnz	r0, 8017954 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 801792c:	4640      	mov	r0, r8
 801792e:	f7ff fae2 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017932:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8017936:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 801793a:	b908      	cbnz	r0, 8017940 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 801793c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8017940:	8933      	ldrh	r3, [r6, #8]
 8017942:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8017946:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801794a:	8022      	strh	r2, [r4, #0]
 801794c:	8067      	strh	r7, [r4, #2]
 801794e:	1b58      	subs	r0, r3, r5
 8017950:	80e1      	strh	r1, [r4, #6]
 8017952:	80a0      	strh	r0, [r4, #4]
 8017954:	4620      	mov	r0, r4
 8017956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801795a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 801795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801795e:	4604      	mov	r4, r0
 8017960:	2000      	movs	r0, #0
 8017962:	460f      	mov	r7, r1
 8017964:	4616      	mov	r6, r2
 8017966:	8020      	strh	r0, [r4, #0]
 8017968:	4698      	mov	r8, r3
 801796a:	8060      	strh	r0, [r4, #2]
 801796c:	80a0      	strh	r0, [r4, #4]
 801796e:	80e0      	strh	r0, [r4, #6]
 8017970:	4618      	mov	r0, r3
 8017972:	f7ff fac0 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017976:	4605      	mov	r5, r0
 8017978:	b998      	cbnz	r0, 80179a2 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 801797a:	4630      	mov	r0, r6
 801797c:	f7ff fabb 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017980:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8017984:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8017988:	b908      	cbnz	r0, 801798e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 801798a:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 801798e:	897a      	ldrh	r2, [r7, #10]
 8017990:	f8b8 3000 	ldrh.w	r3, [r8]
 8017994:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8017998:	8066      	strh	r6, [r4, #2]
 801799a:	8023      	strh	r3, [r4, #0]
 801799c:	1b50      	subs	r0, r2, r5
 801799e:	80a1      	strh	r1, [r4, #4]
 80179a0:	80e0      	strh	r0, [r4, #6]
 80179a2:	4620      	mov	r0, r4
 80179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080179a8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 80179a8:	b570      	push	{r4, r5, r6, lr}
 80179aa:	b088      	sub	sp, #32
 80179ac:	4604      	mov	r4, r0
 80179ae:	4601      	mov	r1, r0
 80179b0:	4668      	mov	r0, sp
 80179b2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80179b6:	f7ff ff03 	bl	80177c0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 80179ba:	4621      	mov	r1, r4
 80179bc:	a802      	add	r0, sp, #8
 80179be:	f7ff ff52 	bl	8017866 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 80179c2:	ab02      	add	r3, sp, #8
 80179c4:	466a      	mov	r2, sp
 80179c6:	4621      	mov	r1, r4
 80179c8:	a804      	add	r0, sp, #16
 80179ca:	f7ff ff9f 	bl	801790c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 80179ce:	ab02      	add	r3, sp, #8
 80179d0:	466a      	mov	r2, sp
 80179d2:	4621      	mov	r1, r4
 80179d4:	a806      	add	r0, sp, #24
 80179d6:	f7ff ffc0 	bl	801795a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 80179da:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80179de:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80179e2:	429a      	cmp	r2, r3
 80179e4:	da02      	bge.n	80179ec <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 80179e6:	4630      	mov	r0, r6
 80179e8:	f004 fc21 	bl	801c22e <_ZNK8touchgfx8Drawable10invalidateEv>
 80179ec:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80179f0:	f104 0564 	add.w	r5, r4, #100	; 0x64
 80179f4:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 80179f8:	429a      	cmp	r2, r3
 80179fa:	da02      	bge.n	8017a02 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 80179fc:	4628      	mov	r0, r5
 80179fe:	f004 fc16 	bl	801c22e <_ZNK8touchgfx8Drawable10invalidateEv>
 8017a02:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017a06:	f8bd 0000 	ldrh.w	r0, [sp]
 8017a0a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8017a0e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017a12:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8017a14:	4630      	mov	r0, r6
 8017a16:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8017a18:	f7ff fe42 	bl	80176a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a1c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017a20:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8017a24:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8017a28:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8017a2c:	4628      	mov	r0, r5
 8017a2e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8017a32:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8017a36:	f7ff fe33 	bl	80176a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a3a:	8922      	ldrh	r2, [r4, #8]
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	a804      	add	r0, sp, #16
 8017a40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a44:	8962      	ldrh	r2, [r4, #10]
 8017a46:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017a4a:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017a4e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017a52:	f7ff fa50 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a56:	b920      	cbnz	r0, 8017a62 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8017a58:	6823      	ldr	r3, [r4, #0]
 8017a5a:	a904      	add	r1, sp, #16
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	691b      	ldr	r3, [r3, #16]
 8017a60:	4798      	blx	r3
 8017a62:	a806      	add	r0, sp, #24
 8017a64:	f7ff fa47 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a68:	b920      	cbnz	r0, 8017a74 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	a906      	add	r1, sp, #24
 8017a6e:	4620      	mov	r0, r4
 8017a70:	691b      	ldr	r3, [r3, #16]
 8017a72:	4798      	blx	r3
 8017a74:	b008      	add	sp, #32
 8017a76:	bd70      	pop	{r4, r5, r6, pc}

08017a78 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8017a78:	b570      	push	{r4, r5, r6, lr}
 8017a7a:	790b      	ldrb	r3, [r1, #4]
 8017a7c:	b08a      	sub	sp, #40	; 0x28
 8017a7e:	4604      	mov	r4, r0
 8017a80:	460d      	mov	r5, r1
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d17f      	bne.n	8017b86 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10e>
 8017a86:	2201      	movs	r2, #1
 8017a88:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8017a8c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 8017a90:	b14a      	cbz	r2, 8017aa6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2e>
 8017a92:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8017a96:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8017a9a:	f003 fb39 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8017a9e:	4621      	mov	r1, r4
 8017aa0:	3004      	adds	r0, #4
 8017aa2:	f003 fb5a 	bl	801b15a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8017aa6:	4623      	mov	r3, r4
 8017aa8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017aac:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8017ab0:	f853 0bb4 	ldr.w	r0, [r3], #180
 8017ab4:	9301      	str	r3, [sp, #4]
 8017ab6:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8017ac0:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	47b0      	blx	r6
 8017ac6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8017aca:	42a3      	cmp	r3, r4
 8017acc:	bf04      	itt	eq
 8017ace:	2300      	moveq	r3, #0
 8017ad0:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 8017ad4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8017ad8:	2900      	cmp	r1, #0
 8017ada:	d03a      	beq.n	8017b52 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8017adc:	2600      	movs	r6, #0
 8017ade:	a803      	add	r0, sp, #12
 8017ae0:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 8017ae4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017ae8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8017aec:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8017af0:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8017af4:	f004 fc36 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017af8:	4621      	mov	r1, r4
 8017afa:	a805      	add	r0, sp, #20
 8017afc:	f004 fc32 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017b04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017b08:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8017b0c:	1ad2      	subs	r2, r2, r3
 8017b0e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8017b12:	7929      	ldrb	r1, [r5, #4]
 8017b14:	441a      	add	r2, r3
 8017b16:	88eb      	ldrh	r3, [r5, #6]
 8017b18:	f88d 1020 	strb.w	r1, [sp, #32]
 8017b1c:	a907      	add	r1, sp, #28
 8017b1e:	441a      	add	r2, r3
 8017b20:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017b24:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8017b28:	1a1b      	subs	r3, r3, r0
 8017b2a:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8017b2e:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8017b32:	4403      	add	r3, r0
 8017b34:	8928      	ldrh	r0, [r5, #8]
 8017b36:	4403      	add	r3, r0
 8017b38:	482f      	ldr	r0, [pc, #188]	; (8017bf8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8017b3a:	9007      	str	r0, [sp, #28]
 8017b3c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8017b40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017b44:	6803      	ldr	r3, [r0, #0]
 8017b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b48:	4798      	blx	r3
 8017b4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8017b4e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017b52:	2300      	movs	r3, #0
 8017b54:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8017b58:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8017b5c:	b112      	cbz	r2, 8017b64 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xec>
 8017b5e:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8017b62:	b90b      	cbnz	r3, 8017b68 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xf0>
 8017b64:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8017b68:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8017b6c:	b112      	cbz	r2, 8017b74 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfc>
 8017b6e:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8017b72:	b90b      	cbnz	r3, 8017b78 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x100>
 8017b74:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8017b78:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f7ff ff13 	bl	80179a8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8017b82:	b00a      	add	sp, #40	; 0x28
 8017b84:	bd70      	pop	{r4, r5, r6, pc}
 8017b86:	2b02      	cmp	r3, #2
 8017b88:	d0fb      	beq.n	8017b82 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10a>
 8017b8a:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8017b8e:	b361      	cbz	r1, 8017bea <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 8017b90:	a803      	add	r0, sp, #12
 8017b92:	f004 fbe7 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b96:	4621      	mov	r1, r4
 8017b98:	a805      	add	r0, sp, #20
 8017b9a:	f004 fbe3 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017ba2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017ba6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8017baa:	1ad2      	subs	r2, r2, r3
 8017bac:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8017bb0:	7929      	ldrb	r1, [r5, #4]
 8017bb2:	441a      	add	r2, r3
 8017bb4:	88eb      	ldrh	r3, [r5, #6]
 8017bb6:	f88d 1020 	strb.w	r1, [sp, #32]
 8017bba:	a907      	add	r1, sp, #28
 8017bbc:	441a      	add	r2, r3
 8017bbe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017bc2:	1a1b      	subs	r3, r3, r0
 8017bc4:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8017bc8:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8017bcc:	4403      	add	r3, r0
 8017bce:	8928      	ldrh	r0, [r5, #8]
 8017bd0:	4403      	add	r3, r0
 8017bd2:	4809      	ldr	r0, [pc, #36]	; (8017bf8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8017bd4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017bd8:	2300      	movs	r3, #0
 8017bda:	9007      	str	r0, [sp, #28]
 8017bdc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8017be0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017be4:	6803      	ldr	r3, [r0, #0]
 8017be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017be8:	4798      	blx	r3
 8017bea:	2300      	movs	r3, #0
 8017bec:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 8017bf0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8017bf4:	e7ad      	b.n	8017b52 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8017bf6:	bf00      	nop
 8017bf8:	0802f118 	.word	0x0802f118

08017bfc <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8017bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bfe:	4606      	mov	r6, r0
 8017c00:	4615      	mov	r5, r2
 8017c02:	460c      	mov	r4, r1
 8017c04:	b919      	cbnz	r1, 8017c0e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8017c06:	b912      	cbnz	r2, 8017c0e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8017c08:	2000      	movs	r0, #0
 8017c0a:	b003      	add	sp, #12
 8017c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c0e:	6833      	ldr	r3, [r6, #0]
 8017c10:	4631      	mov	r1, r6
 8017c12:	4668      	mov	r0, sp
 8017c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017c18:	4798      	blx	r3
 8017c1a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8017c1e:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8017c22:	f9bd 2000 	ldrsh.w	r2, [sp]
 8017c26:	4288      	cmp	r0, r1
 8017c28:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8017c2c:	da2c      	bge.n	8017c88 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8017c2e:	2c00      	cmp	r4, #0
 8017c30:	dd20      	ble.n	8017c74 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 8017c32:	1913      	adds	r3, r2, r4
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	dd01      	ble.n	8017c3c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8017c38:	4252      	negs	r2, r2
 8017c3a:	b214      	sxth	r4, r2
 8017c3c:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8017c40:	4297      	cmp	r7, r2
 8017c42:	dd2c      	ble.n	8017c9e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8017c44:	2d00      	cmp	r5, #0
 8017c46:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017c4a:	dd1f      	ble.n	8017c8c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8017c4c:	195a      	adds	r2, r3, r5
 8017c4e:	2a00      	cmp	r2, #0
 8017c50:	dd04      	ble.n	8017c5c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8017c52:	425b      	negs	r3, r3
 8017c54:	b21d      	sxth	r5, r3
 8017c56:	b90c      	cbnz	r4, 8017c5c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8017c58:	2d00      	cmp	r5, #0
 8017c5a:	d0d5      	beq.n	8017c08 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8017c5c:	6833      	ldr	r3, [r6, #0]
 8017c5e:	462a      	mov	r2, r5
 8017c60:	4621      	mov	r1, r4
 8017c62:	4630      	mov	r0, r6
 8017c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017c68:	4798      	blx	r3
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	f7ff fe9c 	bl	80179a8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8017c70:	2001      	movs	r0, #1
 8017c72:	e7ca      	b.n	8017c0a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8017c74:	d0e2      	beq.n	8017c3c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8017c76:	440a      	add	r2, r1
 8017c78:	b292      	uxth	r2, r2
 8017c7a:	fa04 f382 	sxtah	r3, r4, r2
 8017c7e:	4283      	cmp	r3, r0
 8017c80:	dadc      	bge.n	8017c3c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8017c82:	1a84      	subs	r4, r0, r2
 8017c84:	b224      	sxth	r4, r4
 8017c86:	e7d9      	b.n	8017c3c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8017c88:	2400      	movs	r4, #0
 8017c8a:	e7d7      	b.n	8017c3c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8017c8c:	d007      	beq.n	8017c9e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8017c8e:	443b      	add	r3, r7
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	fa05 f183 	sxtah	r1, r5, r3
 8017c96:	4291      	cmp	r1, r2
 8017c98:	dae0      	bge.n	8017c5c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8017c9a:	1ad3      	subs	r3, r2, r3
 8017c9c:	e7da      	b.n	8017c54 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 8017c9e:	2c00      	cmp	r4, #0
 8017ca0:	d0b2      	beq.n	8017c08 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8017ca2:	2500      	movs	r5, #0
 8017ca4:	e7da      	b.n	8017c5c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

08017ca6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8017ca6:	b513      	push	{r0, r1, r4, lr}
 8017ca8:	6803      	ldr	r3, [r0, #0]
 8017caa:	4601      	mov	r1, r0
 8017cac:	4604      	mov	r4, r0
 8017cae:	4668      	mov	r0, sp
 8017cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017cb4:	4798      	blx	r3
 8017cb6:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8017cba:	f9bd 1000 	ldrsh.w	r1, [sp]
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	dd20      	ble.n	8017d04 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8017cc2:	4602      	mov	r2, r0
 8017cc4:	2900      	cmp	r1, #0
 8017cc6:	dc0e      	bgt.n	8017ce6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8017cc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017ccc:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8017cd0:	440b      	add	r3, r1
 8017cd2:	b21b      	sxth	r3, r3
 8017cd4:	4298      	cmp	r0, r3
 8017cd6:	dd04      	ble.n	8017ce2 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8017cd8:	1a1b      	subs	r3, r3, r0
 8017cda:	4299      	cmp	r1, r3
 8017cdc:	bfb8      	it	lt
 8017cde:	4619      	movlt	r1, r3
 8017ce0:	b909      	cbnz	r1, 8017ce6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8017ce2:	b1f2      	cbz	r2, 8017d22 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8017ce4:	2100      	movs	r1, #0
 8017ce6:	6823      	ldr	r3, [r4, #0]
 8017ce8:	4252      	negs	r2, r2
 8017cea:	4249      	negs	r1, r1
 8017cec:	4620      	mov	r0, r4
 8017cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017cf2:	b212      	sxth	r2, r2
 8017cf4:	b209      	sxth	r1, r1
 8017cf6:	4798      	blx	r3
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	b002      	add	sp, #8
 8017cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d00:	f7ff be52 	b.w	80179a8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8017d04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017d08:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017d0c:	4403      	add	r3, r0
 8017d0e:	b21b      	sxth	r3, r3
 8017d10:	429a      	cmp	r2, r3
 8017d12:	dd04      	ble.n	8017d1e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8017d14:	1a9a      	subs	r2, r3, r2
 8017d16:	4282      	cmp	r2, r0
 8017d18:	bfb8      	it	lt
 8017d1a:	4602      	movlt	r2, r0
 8017d1c:	e7d2      	b.n	8017cc4 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8017d1e:	2200      	movs	r2, #0
 8017d20:	e7d0      	b.n	8017cc4 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8017d22:	b002      	add	sp, #8
 8017d24:	bd10      	pop	{r4, pc}

08017d26 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8017d26:	6301      	str	r1, [r0, #48]	; 0x30
 8017d28:	6601      	str	r1, [r0, #96]	; 0x60
 8017d2a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8017d2e:	4770      	bx	lr

08017d30 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 8017d30:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8017d34:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
 8017d38:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
 8017d3c:	4770      	bx	lr

08017d3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017d3e:	6803      	ldr	r3, [r0, #0]
 8017d40:	b513      	push	{r0, r1, r4, lr}
 8017d42:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8017d46:	2300      	movs	r3, #0
 8017d48:	e9cd 3300 	strd	r3, r3, [sp]
 8017d4c:	466b      	mov	r3, sp
 8017d4e:	47a0      	blx	r4
 8017d50:	b002      	add	sp, #8
 8017d52:	bd10      	pop	{r4, pc}

08017d54 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017d54:	2301      	movs	r3, #1
 8017d56:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017d5a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017d5e:	4770      	bx	lr

08017d60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017d60:	2301      	movs	r3, #1
 8017d62:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017d66:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017d6a:	4770      	bx	lr

08017d6c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017d6c:	6843      	ldr	r3, [r0, #4]
 8017d6e:	2201      	movs	r2, #1
 8017d70:	725a      	strb	r2, [r3, #9]
 8017d72:	6840      	ldr	r0, [r0, #4]
 8017d74:	6803      	ldr	r3, [r0, #0]
 8017d76:	691b      	ldr	r3, [r3, #16]
 8017d78:	4718      	bx	r3

08017d7a <_ZN8touchgfx3HAL8flushDMAEv>:
 8017d7a:	6840      	ldr	r0, [r0, #4]
 8017d7c:	6803      	ldr	r3, [r0, #0]
 8017d7e:	689b      	ldr	r3, [r3, #8]
 8017d80:	4718      	bx	r3

08017d82 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017d82:	b530      	push	{r4, r5, lr}
 8017d84:	b08b      	sub	sp, #44	; 0x2c
 8017d86:	6804      	ldr	r4, [r0, #0]
 8017d88:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8017d8e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017d92:	9508      	str	r5, [sp, #32]
 8017d94:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017d98:	9507      	str	r5, [sp, #28]
 8017d9a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017d9e:	9506      	str	r5, [sp, #24]
 8017da0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017da4:	9505      	str	r5, [sp, #20]
 8017da6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017daa:	9504      	str	r5, [sp, #16]
 8017dac:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017db0:	9503      	str	r5, [sp, #12]
 8017db2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017db6:	9502      	str	r5, [sp, #8]
 8017db8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017dbc:	e9cd 3500 	strd	r3, r5, [sp]
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	47a0      	blx	r4
 8017dc8:	b00b      	add	sp, #44	; 0x2c
 8017dca:	bd30      	pop	{r4, r5, pc}

08017dcc <_ZN8touchgfx3HAL10beginFrameEv>:
 8017dcc:	4b04      	ldr	r3, [pc, #16]	; (8017de0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	b123      	cbz	r3, 8017ddc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017dd2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017dd6:	f080 0001 	eor.w	r0, r0, #1
 8017dda:	4770      	bx	lr
 8017ddc:	2001      	movs	r0, #1
 8017dde:	4770      	bx	lr
 8017de0:	2001520e 	.word	0x2001520e

08017de4 <_ZN8touchgfx3HAL8endFrameEv>:
 8017de4:	b510      	push	{r4, lr}
 8017de6:	4604      	mov	r4, r0
 8017de8:	6840      	ldr	r0, [r0, #4]
 8017dea:	6803      	ldr	r3, [r0, #0]
 8017dec:	689b      	ldr	r3, [r3, #8]
 8017dee:	4798      	blx	r3
 8017df0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017df4:	b113      	cbz	r3, 8017dfc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017df6:	2301      	movs	r3, #1
 8017df8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017dfc:	bd10      	pop	{r4, pc}

08017dfe <_ZN8touchgfx3HAL10initializeEv>:
 8017dfe:	b510      	push	{r4, lr}
 8017e00:	4604      	mov	r4, r0
 8017e02:	f7ea f873 	bl	8001eec <_ZN8touchgfx10OSWrappers10initializeEv>
 8017e06:	f7e9 ff4f 	bl	8001ca8 <_ZN8touchgfx4GPIO4initEv>
 8017e0a:	6860      	ldr	r0, [r4, #4]
 8017e0c:	6803      	ldr	r3, [r0, #0]
 8017e0e:	68db      	ldr	r3, [r3, #12]
 8017e10:	4798      	blx	r3
 8017e12:	68e0      	ldr	r0, [r4, #12]
 8017e14:	6803      	ldr	r3, [r0, #0]
 8017e16:	689b      	ldr	r3, [r3, #8]
 8017e18:	4798      	blx	r3
 8017e1a:	6823      	ldr	r3, [r4, #0]
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e24:	4718      	bx	r3

08017e26 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017e26:	b508      	push	{r3, lr}
 8017e28:	6803      	ldr	r3, [r0, #0]
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017e30:	4798      	blx	r3
 8017e32:	6823      	ldr	r3, [r4, #0]
 8017e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e36:	4620      	mov	r0, r4
 8017e38:	4798      	blx	r3
 8017e3a:	f7ea f8a3 	bl	8001f84 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017e3e:	6823      	ldr	r3, [r4, #0]
 8017e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e42:	e7f8      	b.n	8017e36 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08017e44 <_ZN8touchgfx3HAL4tickEv>:
 8017e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017e46:	6803      	ldr	r3, [r0, #0]
 8017e48:	4604      	mov	r4, r0
 8017e4a:	4d5b      	ldr	r5, [pc, #364]	; (8017fb8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8017e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017e50:	4798      	blx	r3
 8017e52:	2800      	cmp	r0, #0
 8017e54:	f000 8095 	beq.w	8017f82 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8017e58:	2001      	movs	r0, #1
 8017e5a:	2600      	movs	r6, #0
 8017e5c:	f7e9 fe8a 	bl	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017e60:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017e64:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017e68:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017e6c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017e70:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017e74:	b133      	cbz	r3, 8017e84 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017e76:	6823      	ldr	r3, [r4, #0]
 8017e78:	4620      	mov	r0, r4
 8017e7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017e7e:	4798      	blx	r3
 8017e80:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017e84:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017e88:	2601      	movs	r6, #1
 8017e8a:	6862      	ldr	r2, [r4, #4]
 8017e8c:	f083 0301 	eor.w	r3, r3, #1
 8017e90:	702e      	strb	r6, [r5, #0]
 8017e92:	7253      	strb	r3, [r2, #9]
 8017e94:	f003 f93c 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8017e98:	6803      	ldr	r3, [r0, #0]
 8017e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e9c:	4798      	blx	r3
 8017e9e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017ea2:	b90b      	cbnz	r3, 8017ea8 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017ea4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017ea8:	f003 f932 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8017eac:	6803      	ldr	r3, [r0, #0]
 8017eae:	695b      	ldr	r3, [r3, #20]
 8017eb0:	4798      	blx	r3
 8017eb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017eb4:	6803      	ldr	r3, [r0, #0]
 8017eb6:	691b      	ldr	r3, [r3, #16]
 8017eb8:	4798      	blx	r3
 8017eba:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017ebe:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017ec2:	3b01      	subs	r3, #1
 8017ec4:	b2db      	uxtb	r3, r3
 8017ec6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017eca:	b10a      	cbz	r2, 8017ed0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d1eb      	bne.n	8017ea8 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017ed0:	4a3a      	ldr	r2, [pc, #232]	; (8017fbc <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017ed2:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017ed6:	7813      	ldrb	r3, [r2, #0]
 8017ed8:	3301      	adds	r3, #1
 8017eda:	b25b      	sxtb	r3, r3
 8017edc:	4299      	cmp	r1, r3
 8017ede:	7013      	strb	r3, [r2, #0]
 8017ee0:	dc10      	bgt.n	8017f04 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	68e0      	ldr	r0, [r4, #12]
 8017ee6:	a902      	add	r1, sp, #8
 8017ee8:	7013      	strb	r3, [r2, #0]
 8017eea:	aa03      	add	r2, sp, #12
 8017eec:	6803      	ldr	r3, [r0, #0]
 8017eee:	68db      	ldr	r3, [r3, #12]
 8017ef0:	4798      	blx	r3
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	2800      	cmp	r0, #0
 8017ef6:	d050      	beq.n	8017f9a <_ZN8touchgfx3HAL4tickEv+0x156>
 8017ef8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017efc:	4620      	mov	r0, r4
 8017efe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017f02:	4798      	blx	r3
 8017f04:	2300      	movs	r3, #0
 8017f06:	6960      	ldr	r0, [r4, #20]
 8017f08:	f88d 3007 	strb.w	r3, [sp, #7]
 8017f0c:	b158      	cbz	r0, 8017f26 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017f0e:	6803      	ldr	r3, [r0, #0]
 8017f10:	f10d 0107 	add.w	r1, sp, #7
 8017f14:	68db      	ldr	r3, [r3, #12]
 8017f16:	4798      	blx	r3
 8017f18:	b128      	cbz	r0, 8017f26 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017f1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017f20:	6803      	ldr	r3, [r0, #0]
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	4798      	blx	r3
 8017f26:	f104 001c 	add.w	r0, r4, #28
 8017f2a:	f011 fb39 	bl	80295a0 <_ZN8touchgfx8Gestures4tickEv>
 8017f2e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017f32:	b30b      	cbz	r3, 8017f78 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017f34:	6920      	ldr	r0, [r4, #16]
 8017f36:	6803      	ldr	r3, [r0, #0]
 8017f38:	691b      	ldr	r3, [r3, #16]
 8017f3a:	4798      	blx	r3
 8017f3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017f3e:	4606      	mov	r6, r0
 8017f40:	b903      	cbnz	r3, 8017f44 <_ZN8touchgfx3HAL4tickEv+0x100>
 8017f42:	6720      	str	r0, [r4, #112]	; 0x70
 8017f44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017f46:	4a1e      	ldr	r2, [pc, #120]	; (8017fc0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017f48:	1af3      	subs	r3, r6, r3
 8017f4a:	4293      	cmp	r3, r2
 8017f4c:	d914      	bls.n	8017f78 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017f4e:	6920      	ldr	r0, [r4, #16]
 8017f50:	6803      	ldr	r3, [r0, #0]
 8017f52:	699b      	ldr	r3, [r3, #24]
 8017f54:	4798      	blx	r3
 8017f56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017f58:	2264      	movs	r2, #100	; 0x64
 8017f5a:	1af3      	subs	r3, r6, r3
 8017f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8017f64:	2800      	cmp	r0, #0
 8017f66:	dc1d      	bgt.n	8017fa4 <_ZN8touchgfx3HAL4tickEv+0x160>
 8017f68:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017f6c:	6920      	ldr	r0, [r4, #16]
 8017f6e:	2100      	movs	r1, #0
 8017f70:	6803      	ldr	r3, [r0, #0]
 8017f72:	69db      	ldr	r3, [r3, #28]
 8017f74:	4798      	blx	r3
 8017f76:	6726      	str	r6, [r4, #112]	; 0x70
 8017f78:	f003 f8ca 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 8017f7c:	6803      	ldr	r3, [r0, #0]
 8017f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f80:	4798      	blx	r3
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	4620      	mov	r0, r4
 8017f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f8a:	4798      	blx	r3
 8017f8c:	2001      	movs	r0, #1
 8017f8e:	f7e9 fe21 	bl	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017f92:	2300      	movs	r3, #0
 8017f94:	702b      	strb	r3, [r5, #0]
 8017f96:	b004      	add	sp, #16
 8017f98:	bd70      	pop	{r4, r5, r6, pc}
 8017f9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	4798      	blx	r3
 8017fa2:	e7af      	b.n	8017f04 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017fa4:	2863      	cmp	r0, #99	; 0x63
 8017fa6:	bfcb      	itete	gt
 8017fa8:	2300      	movgt	r3, #0
 8017faa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017fae:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017fb2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017fb6:	e7d9      	b.n	8017f6c <_ZN8touchgfx3HAL4tickEv+0x128>
 8017fb8:	20015214 	.word	0x20015214
 8017fbc:	20015215 	.word	0x20015215
 8017fc0:	05f5e100 	.word	0x05f5e100

08017fc4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017fc4:	f7e9 bfc2 	b.w	8001f4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017fc8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017fc8:	6581      	str	r1, [r0, #88]	; 0x58
 8017fca:	301c      	adds	r0, #28
 8017fcc:	f011 bae6 	b.w	802959c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017fd0 <_ZN8touchgfx3HAL5touchEll>:
 8017fd0:	b530      	push	{r4, r5, lr}
 8017fd2:	b087      	sub	sp, #28
 8017fd4:	4604      	mov	r4, r0
 8017fd6:	a804      	add	r0, sp, #16
 8017fd8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017fdc:	f002 fede 	bl	801ad9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017fe0:	9b04      	ldr	r3, [sp, #16]
 8017fe2:	a906      	add	r1, sp, #24
 8017fe4:	a803      	add	r0, sp, #12
 8017fe6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017fea:	9b05      	ldr	r3, [sp, #20]
 8017fec:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017ff0:	f002 ff26 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017ff4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017ff8:	f104 001c 	add.w	r0, r4, #28
 8017ffc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018000:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018004:	b189      	cbz	r1, 801802a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018006:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801800a:	9300      	str	r3, [sp, #0]
 801800c:	4613      	mov	r3, r2
 801800e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018012:	462a      	mov	r2, r5
 8018014:	f011 fad2 	bl	80295bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018018:	b128      	cbz	r0, 8018026 <_ZN8touchgfx3HAL5touchEll+0x56>
 801801a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801801e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018020:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018024:	6623      	str	r3, [r4, #96]	; 0x60
 8018026:	b007      	add	sp, #28
 8018028:	bd30      	pop	{r4, r5, pc}
 801802a:	f011 fb07 	bl	802963c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801802e:	2301      	movs	r3, #1
 8018030:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018034:	e7f1      	b.n	801801a <_ZN8touchgfx3HAL5touchEll+0x4a>

08018036 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018036:	b510      	push	{r4, lr}
 8018038:	2b00      	cmp	r3, #0
 801803a:	d046      	beq.n	80180ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801803c:	ea81 0002 	eor.w	r0, r1, r2
 8018040:	07c4      	lsls	r4, r0, #31
 8018042:	d508      	bpl.n	8018056 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018044:	440b      	add	r3, r1
 8018046:	3a01      	subs	r2, #1
 8018048:	428b      	cmp	r3, r1
 801804a:	d93e      	bls.n	80180ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801804c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018050:	f801 0b01 	strb.w	r0, [r1], #1
 8018054:	e7f8      	b.n	8018048 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018056:	07d0      	lsls	r0, r2, #31
 8018058:	bf42      	ittt	mi
 801805a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801805e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018062:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018066:	2b01      	cmp	r3, #1
 8018068:	d911      	bls.n	801808e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801806a:	ea81 0402 	eor.w	r4, r1, r2
 801806e:	4610      	mov	r0, r2
 8018070:	07a4      	lsls	r4, r4, #30
 8018072:	d022      	beq.n	80180ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018074:	f023 0401 	bic.w	r4, r3, #1
 8018078:	440c      	add	r4, r1
 801807a:	428c      	cmp	r4, r1
 801807c:	4602      	mov	r2, r0
 801807e:	d904      	bls.n	801808a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018080:	8812      	ldrh	r2, [r2, #0]
 8018082:	3002      	adds	r0, #2
 8018084:	f821 2b02 	strh.w	r2, [r1], #2
 8018088:	e7f7      	b.n	801807a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801808a:	f003 0301 	and.w	r3, r3, #1
 801808e:	f023 0003 	bic.w	r0, r3, #3
 8018092:	4408      	add	r0, r1
 8018094:	4288      	cmp	r0, r1
 8018096:	4614      	mov	r4, r2
 8018098:	d904      	bls.n	80180a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801809a:	6824      	ldr	r4, [r4, #0]
 801809c:	3204      	adds	r2, #4
 801809e:	f841 4b04 	str.w	r4, [r1], #4
 80180a2:	e7f7      	b.n	8018094 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80180a4:	f003 0303 	and.w	r3, r3, #3
 80180a8:	3a01      	subs	r2, #1
 80180aa:	440b      	add	r3, r1
 80180ac:	428b      	cmp	r3, r1
 80180ae:	d90c      	bls.n	80180ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80180b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80180b4:	f801 0b01 	strb.w	r0, [r1], #1
 80180b8:	e7f8      	b.n	80180ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80180ba:	0790      	lsls	r0, r2, #30
 80180bc:	d0e7      	beq.n	801808e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80180be:	f832 0b02 	ldrh.w	r0, [r2], #2
 80180c2:	3b02      	subs	r3, #2
 80180c4:	f821 0b02 	strh.w	r0, [r1], #2
 80180c8:	e7e1      	b.n	801808e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80180ca:	2001      	movs	r0, #1
 80180cc:	bd10      	pop	{r4, pc}

080180ce <_ZN8touchgfx3HAL7noTouchEv>:
 80180ce:	b510      	push	{r4, lr}
 80180d0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80180d4:	4604      	mov	r4, r0
 80180d6:	b153      	cbz	r3, 80180ee <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80180d8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80180dc:	2101      	movs	r1, #1
 80180de:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80180e2:	301c      	adds	r0, #28
 80180e4:	f011 faaa 	bl	802963c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80180e8:	2300      	movs	r3, #0
 80180ea:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80180ee:	bd10      	pop	{r4, pc}

080180f0 <_ZN8touchgfx3HAL3lcdEv>:
 80180f0:	4b04      	ldr	r3, [pc, #16]	; (8018104 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80180f8:	b10a      	cbz	r2, 80180fe <_ZN8touchgfx3HAL3lcdEv+0xe>
 80180fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80180fc:	b900      	cbnz	r0, 8018100 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80180fe:	6898      	ldr	r0, [r3, #8]
 8018100:	4770      	bx	lr
 8018102:	bf00      	nop
 8018104:	20015210 	.word	0x20015210

08018108 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801810c:	b085      	sub	sp, #20
 801810e:	4604      	mov	r4, r0
 8018110:	2000      	movs	r0, #0
 8018112:	4699      	mov	r9, r3
 8018114:	ad04      	add	r5, sp, #16
 8018116:	460f      	mov	r7, r1
 8018118:	4690      	mov	r8, r2
 801811a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801811e:	69a0      	ldr	r0, [r4, #24]
 8018120:	6806      	ldr	r6, [r0, #0]
 8018122:	9501      	str	r5, [sp, #4]
 8018124:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018128:	9500      	str	r5, [sp, #0]
 801812a:	6835      	ldr	r5, [r6, #0]
 801812c:	47a8      	blx	r5
 801812e:	4d10      	ldr	r5, [pc, #64]	; (8018170 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8018130:	4606      	mov	r6, r0
 8018132:	f8a5 9000 	strh.w	r9, [r5]
 8018136:	f7ff ffdb 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 801813a:	6803      	ldr	r3, [r0, #0]
 801813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801813e:	4798      	blx	r3
 8018140:	b128      	cbz	r0, 801814e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8018142:	2801      	cmp	r0, #1
 8018144:	d00b      	beq.n	801815e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8018146:	4630      	mov	r0, r6
 8018148:	b005      	add	sp, #20
 801814a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801814e:	882b      	ldrh	r3, [r5, #0]
 8018150:	fb08 7203 	mla	r2, r8, r3, r7
 8018154:	9b03      	ldr	r3, [sp, #12]
 8018156:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801815a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801815c:	e7f3      	b.n	8018146 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801815e:	882a      	ldrh	r2, [r5, #0]
 8018160:	9b03      	ldr	r3, [sp, #12]
 8018162:	fb08 7202 	mla	r2, r8, r2, r7
 8018166:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801816a:	1a9a      	subs	r2, r3, r2
 801816c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801816e:	e7ea      	b.n	8018146 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018170:	2001520a 	.word	0x2001520a

08018174 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018176:	b08b      	sub	sp, #44	; 0x2c
 8018178:	4617      	mov	r7, r2
 801817a:	4604      	mov	r4, r0
 801817c:	460e      	mov	r6, r1
 801817e:	461d      	mov	r5, r3
 8018180:	f7ff ffb6 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 8018184:	6803      	ldr	r3, [r0, #0]
 8018186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018188:	4798      	blx	r3
 801818a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801818e:	9007      	str	r0, [sp, #28]
 8018190:	4631      	mov	r1, r6
 8018192:	6822      	ldr	r2, [r4, #0]
 8018194:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018198:	4b0c      	ldr	r3, [pc, #48]	; (80181cc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801819a:	4620      	mov	r0, r4
 801819c:	881b      	ldrh	r3, [r3, #0]
 801819e:	9306      	str	r3, [sp, #24]
 80181a0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80181a4:	9305      	str	r3, [sp, #20]
 80181a6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80181aa:	9304      	str	r3, [sp, #16]
 80181ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80181b0:	9303      	str	r3, [sp, #12]
 80181b2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80181b6:	9302      	str	r3, [sp, #8]
 80181b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80181bc:	e9cd 5300 	strd	r5, r3, [sp]
 80181c0:	463b      	mov	r3, r7
 80181c2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80181c4:	2200      	movs	r2, #0
 80181c6:	47a8      	blx	r5
 80181c8:	b00b      	add	sp, #44	; 0x2c
 80181ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181cc:	2001520a 	.word	0x2001520a

080181d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80181d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181d4:	4698      	mov	r8, r3
 80181d6:	6803      	ldr	r3, [r0, #0]
 80181d8:	b08b      	sub	sp, #44	; 0x2c
 80181da:	4617      	mov	r7, r2
 80181dc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80181de:	460e      	mov	r6, r1
 80181e0:	4b13      	ldr	r3, [pc, #76]	; (8018230 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80181e2:	4604      	mov	r4, r0
 80181e4:	f8b3 9000 	ldrh.w	r9, [r3]
 80181e8:	f7ff ff82 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 80181ec:	6803      	ldr	r3, [r0, #0]
 80181ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f0:	4798      	blx	r3
 80181f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80181f6:	2200      	movs	r2, #0
 80181f8:	4631      	mov	r1, r6
 80181fa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80181fe:	2302      	movs	r3, #2
 8018200:	4620      	mov	r0, r4
 8018202:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018206:	2301      	movs	r3, #1
 8018208:	9305      	str	r3, [sp, #20]
 801820a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801820e:	9304      	str	r3, [sp, #16]
 8018210:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018214:	9303      	str	r3, [sp, #12]
 8018216:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801821a:	9302      	str	r3, [sp, #8]
 801821c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018220:	e9cd 8300 	strd	r8, r3, [sp]
 8018224:	463b      	mov	r3, r7
 8018226:	47a8      	blx	r5
 8018228:	b00b      	add	sp, #44	; 0x2c
 801822a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801822e:	bf00      	nop
 8018230:	2001520a 	.word	0x2001520a

08018234 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018238:	4698      	mov	r8, r3
 801823a:	6803      	ldr	r3, [r0, #0]
 801823c:	b087      	sub	sp, #28
 801823e:	460e      	mov	r6, r1
 8018240:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018242:	4617      	mov	r7, r2
 8018244:	4b0f      	ldr	r3, [pc, #60]	; (8018284 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018246:	4604      	mov	r4, r0
 8018248:	f8b3 9000 	ldrh.w	r9, [r3]
 801824c:	f7ff ff50 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 8018250:	6803      	ldr	r3, [r0, #0]
 8018252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018254:	4798      	blx	r3
 8018256:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801825a:	463a      	mov	r2, r7
 801825c:	4631      	mov	r1, r6
 801825e:	f8cd 900c 	str.w	r9, [sp, #12]
 8018262:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018266:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801826a:	4620      	mov	r0, r4
 801826c:	9302      	str	r3, [sp, #8]
 801826e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018272:	9301      	str	r3, [sp, #4]
 8018274:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018278:	9300      	str	r3, [sp, #0]
 801827a:	4643      	mov	r3, r8
 801827c:	47a8      	blx	r5
 801827e:	b007      	add	sp, #28
 8018280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018284:	2001520a 	.word	0x2001520a

08018288 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801828c:	4604      	mov	r4, r0
 801828e:	b08f      	sub	sp, #60	; 0x3c
 8018290:	4610      	mov	r0, r2
 8018292:	460d      	mov	r5, r1
 8018294:	4691      	mov	r9, r2
 8018296:	461e      	mov	r6, r3
 8018298:	f005 fbc0 	bl	801da1c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801829c:	2800      	cmp	r0, #0
 801829e:	f000 809d 	beq.w	80183dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80182a2:	6823      	ldr	r3, [r4, #0]
 80182a4:	4620      	mov	r0, r4
 80182a6:	f8df b198 	ldr.w	fp, [pc, #408]	; 8018440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80182aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80182ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182b0:	4798      	blx	r3
 80182b2:	6823      	ldr	r3, [r4, #0]
 80182b4:	4620      	mov	r0, r4
 80182b6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8018444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80182ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182bc:	4798      	blx	r3
 80182be:	f8bb 3000 	ldrh.w	r3, [fp]
 80182c2:	4f5c      	ldr	r7, [pc, #368]	; (8018434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80182c4:	9301      	str	r3, [sp, #4]
 80182c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80182ca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80182ce:	4640      	mov	r0, r8
 80182d0:	9302      	str	r3, [sp, #8]
 80182d2:	883b      	ldrh	r3, [r7, #0]
 80182d4:	9303      	str	r3, [sp, #12]
 80182d6:	4b58      	ldr	r3, [pc, #352]	; (8018438 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80182d8:	881a      	ldrh	r2, [r3, #0]
 80182da:	9305      	str	r3, [sp, #20]
 80182dc:	9204      	str	r2, [sp, #16]
 80182de:	f005 fc31 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182e2:	8038      	strh	r0, [r7, #0]
 80182e4:	4640      	mov	r0, r8
 80182e6:	f005 fc61 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182ea:	9b05      	ldr	r3, [sp, #20]
 80182ec:	b280      	uxth	r0, r0
 80182ee:	8018      	strh	r0, [r3, #0]
 80182f0:	4b52      	ldr	r3, [pc, #328]	; (801843c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d174      	bne.n	80183e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80182f8:	883b      	ldrh	r3, [r7, #0]
 80182fa:	f8aa 0000 	strh.w	r0, [sl]
 80182fe:	f8ab 3000 	strh.w	r3, [fp]
 8018302:	4648      	mov	r0, r9
 8018304:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018308:	f005 fb88 	bl	801da1c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801830c:	2200      	movs	r2, #0
 801830e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018312:	4611      	mov	r1, r2
 8018314:	4628      	mov	r0, r5
 8018316:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801831a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801831e:	f7eb fcbf 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
 8018322:	2301      	movs	r3, #1
 8018324:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018328:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801832c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018330:	2b00      	cmp	r3, #0
 8018332:	dd5c      	ble.n	80183ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018334:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018338:	2b00      	cmp	r3, #0
 801833a:	dd58      	ble.n	80183ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801833c:	462a      	mov	r2, r5
 801833e:	ab0a      	add	r3, sp, #40	; 0x28
 8018340:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018344:	6851      	ldr	r1, [r2, #4]
 8018346:	c303      	stmia	r3!, {r0, r1}
 8018348:	4631      	mov	r1, r6
 801834a:	a80a      	add	r0, sp, #40	; 0x28
 801834c:	f7fe fd90 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8018350:	4b38      	ldr	r3, [pc, #224]	; (8018434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018352:	2100      	movs	r1, #0
 8018354:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018358:	4b37      	ldr	r3, [pc, #220]	; (8018438 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801835a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801835e:	aa0a      	add	r2, sp, #40	; 0x28
 8018360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018364:	910c      	str	r1, [sp, #48]	; 0x30
 8018366:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801836a:	ab08      	add	r3, sp, #32
 801836c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018370:	e883 0003 	stmia.w	r3, {r0, r1}
 8018374:	4618      	mov	r0, r3
 8018376:	a90c      	add	r1, sp, #48	; 0x30
 8018378:	f7fe fd7a 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801837c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801837e:	2b00      	cmp	r3, #0
 8018380:	d13c      	bne.n	80183fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8018382:	2000      	movs	r0, #0
 8018384:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018388:	2600      	movs	r6, #0
 801838a:	696b      	ldr	r3, [r5, #20]
 801838c:	a908      	add	r1, sp, #32
 801838e:	682a      	ldr	r2, [r5, #0]
 8018390:	4628      	mov	r0, r5
 8018392:	9305      	str	r3, [sp, #20]
 8018394:	616e      	str	r6, [r5, #20]
 8018396:	6892      	ldr	r2, [r2, #8]
 8018398:	4790      	blx	r2
 801839a:	9b05      	ldr	r3, [sp, #20]
 801839c:	4652      	mov	r2, sl
 801839e:	4649      	mov	r1, r9
 80183a0:	616b      	str	r3, [r5, #20]
 80183a2:	4628      	mov	r0, r5
 80183a4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80183a8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80183ac:	f7eb fc78 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
 80183b0:	9a01      	ldr	r2, [sp, #4]
 80183b2:	4b23      	ldr	r3, [pc, #140]	; (8018440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80183b4:	4620      	mov	r0, r4
 80183b6:	801a      	strh	r2, [r3, #0]
 80183b8:	9a02      	ldr	r2, [sp, #8]
 80183ba:	4b22      	ldr	r3, [pc, #136]	; (8018444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80183bc:	801a      	strh	r2, [r3, #0]
 80183be:	9a03      	ldr	r2, [sp, #12]
 80183c0:	4b1c      	ldr	r3, [pc, #112]	; (8018434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80183c2:	801a      	strh	r2, [r3, #0]
 80183c4:	4b1c      	ldr	r3, [pc, #112]	; (8018438 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80183c6:	9a04      	ldr	r2, [sp, #16]
 80183c8:	801a      	strh	r2, [r3, #0]
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80183d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183d2:	4798      	blx	r3
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	4620      	mov	r0, r4
 80183d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183da:	4798      	blx	r3
 80183dc:	b00f      	add	sp, #60	; 0x3c
 80183de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e2:	883b      	ldrh	r3, [r7, #0]
 80183e4:	f8ab 0000 	strh.w	r0, [fp]
 80183e8:	f8aa 3000 	strh.w	r3, [sl]
 80183ec:	e789      	b.n	8018302 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80183ee:	462a      	mov	r2, r5
 80183f0:	ab0a      	add	r3, sp, #40	; 0x28
 80183f2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80183f6:	6851      	ldr	r1, [r2, #4]
 80183f8:	c303      	stmia	r3!, {r0, r1}
 80183fa:	e7a9      	b.n	8018350 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80183fc:	a807      	add	r0, sp, #28
 80183fe:	f005 fd11 	bl	801de24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018402:	4606      	mov	r6, r0
 8018404:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018406:	6803      	ldr	r3, [r0, #0]
 8018408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801840a:	4798      	blx	r3
 801840c:	4286      	cmp	r6, r0
 801840e:	d1b8      	bne.n	8018382 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018410:	f7ff fe6e 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 8018414:	6803      	ldr	r3, [r0, #0]
 8018416:	4606      	mov	r6, r0
 8018418:	a807      	add	r0, sp, #28
 801841a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801841c:	9305      	str	r3, [sp, #20]
 801841e:	f005 fd01 	bl	801de24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018422:	9b05      	ldr	r3, [sp, #20]
 8018424:	4601      	mov	r1, r0
 8018426:	4630      	mov	r0, r6
 8018428:	4798      	blx	r3
 801842a:	f080 0001 	eor.w	r0, r0, #1
 801842e:	b2c0      	uxtb	r0, r0
 8018430:	e7a8      	b.n	8018384 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8018432:	bf00      	nop
 8018434:	20015204 	.word	0x20015204
 8018438:	20015206 	.word	0x20015206
 801843c:	20015208 	.word	0x20015208
 8018440:	2001520a 	.word	0x2001520a
 8018444:	2001520c 	.word	0x2001520c

08018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018448:	4b07      	ldr	r3, [pc, #28]	; (8018468 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801844a:	b510      	push	{r4, lr}
 801844c:	781b      	ldrb	r3, [r3, #0]
 801844e:	4604      	mov	r4, r0
 8018450:	b13b      	cbz	r3, 8018462 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018452:	6803      	ldr	r3, [r0, #0]
 8018454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018456:	4798      	blx	r3
 8018458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801845a:	4283      	cmp	r3, r0
 801845c:	d101      	bne.n	8018462 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801845e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018460:	bd10      	pop	{r4, pc}
 8018462:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018464:	e7fc      	b.n	8018460 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018466:	bf00      	nop
 8018468:	2001520e 	.word	0x2001520e

0801846c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801846c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018470:	461d      	mov	r5, r3
 8018472:	b08a      	sub	sp, #40	; 0x28
 8018474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018478:	4690      	mov	r8, r2
 801847a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801847e:	2400      	movs	r4, #0
 8018480:	4607      	mov	r7, r0
 8018482:	fb06 8505 	mla	r5, r6, r5, r8
 8018486:	9404      	str	r4, [sp, #16]
 8018488:	f88d 4020 	strb.w	r4, [sp, #32]
 801848c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018490:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018494:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018498:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801849c:	f8ad 301a 	strh.w	r3, [sp, #26]
 80184a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80184a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80184a8:	f7ff ffce 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80184ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80184b6:	a901      	add	r1, sp, #4
 80184b8:	9505      	str	r5, [sp, #20]
 80184ba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80184be:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80184c2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80184c6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80184ca:	6803      	ldr	r3, [r0, #0]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	4798      	blx	r3
 80184d0:	b00a      	add	sp, #40	; 0x28
 80184d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080184d6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80184d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184da:	b08b      	sub	sp, #44	; 0x2c
 80184dc:	2400      	movs	r4, #0
 80184de:	4691      	mov	r9, r2
 80184e0:	461d      	mov	r5, r3
 80184e2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80184e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80184ea:	4688      	mov	r8, r1
 80184ec:	4607      	mov	r7, r0
 80184ee:	9404      	str	r4, [sp, #16]
 80184f0:	fb06 9505 	mla	r5, r6, r5, r9
 80184f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184f8:	f7ff ffa6 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80184fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018500:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018504:	6878      	ldr	r0, [r7, #4]
 8018506:	f8ad 3018 	strh.w	r3, [sp, #24]
 801850a:	a901      	add	r1, sp, #4
 801850c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018510:	9505      	str	r5, [sp, #20]
 8018512:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018516:	f8ad 401c 	strh.w	r4, [sp, #28]
 801851a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801851e:	f8cd 8010 	str.w	r8, [sp, #16]
 8018522:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018526:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801852a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801852e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018532:	6803      	ldr	r3, [r0, #0]
 8018534:	685b      	ldr	r3, [r3, #4]
 8018536:	4798      	blx	r3
 8018538:	b00b      	add	sp, #44	; 0x2c
 801853a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08018540 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018544:	b08a      	sub	sp, #40	; 0x28
 8018546:	4698      	mov	r8, r3
 8018548:	2300      	movs	r3, #0
 801854a:	4606      	mov	r6, r0
 801854c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8018550:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8018554:	2d0b      	cmp	r5, #11
 8018556:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801855a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801855e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8018562:	9304      	str	r3, [sp, #16]
 8018564:	d137      	bne.n	80185d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8018566:	2380      	movs	r3, #128	; 0x80
 8018568:	f88d 0020 	strb.w	r0, [sp, #32]
 801856c:	4630      	mov	r0, r6
 801856e:	9203      	str	r2, [sp, #12]
 8018570:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018574:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018578:	f8ad 3018 	strh.w	r3, [sp, #24]
 801857c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018580:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018584:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018588:	f8ad 301c 	strh.w	r3, [sp, #28]
 801858c:	f7ff ff5c 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018590:	2c0b      	cmp	r4, #11
 8018592:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018596:	f8ad 701e 	strh.w	r7, [sp, #30]
 801859a:	bf94      	ite	ls
 801859c:	4b19      	ldrls	r3, [pc, #100]	; (8018604 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801859e:	2100      	movhi	r1, #0
 80185a0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80185a4:	bf98      	it	ls
 80185a6:	5d19      	ldrbls	r1, [r3, r4]
 80185a8:	fb02 8307 	mla	r3, r2, r7, r8
 80185ac:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80185b0:	10c9      	asrs	r1, r1, #3
 80185b2:	fb01 0003 	mla	r0, r1, r3, r0
 80185b6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80185ba:	a901      	add	r1, sp, #4
 80185bc:	9005      	str	r0, [sp, #20]
 80185be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80185c2:	2300      	movs	r3, #0
 80185c4:	6870      	ldr	r0, [r6, #4]
 80185c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80185ca:	6803      	ldr	r3, [r0, #0]
 80185cc:	685b      	ldr	r3, [r3, #4]
 80185ce:	4798      	blx	r3
 80185d0:	b00a      	add	sp, #40	; 0x28
 80185d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d6:	2d02      	cmp	r5, #2
 80185d8:	d109      	bne.n	80185ee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80185da:	28ff      	cmp	r0, #255	; 0xff
 80185dc:	d105      	bne.n	80185ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80185de:	f1bc 0f00 	cmp.w	ip, #0
 80185e2:	bf14      	ite	ne
 80185e4:	2340      	movne	r3, #64	; 0x40
 80185e6:	2320      	moveq	r3, #32
 80185e8:	e7be      	b.n	8018568 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80185ea:	2340      	movs	r3, #64	; 0x40
 80185ec:	e7bc      	b.n	8018568 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80185ee:	28ff      	cmp	r0, #255	; 0xff
 80185f0:	d105      	bne.n	80185fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80185f2:	f1bc 0f00 	cmp.w	ip, #0
 80185f6:	bf14      	ite	ne
 80185f8:	2304      	movne	r3, #4
 80185fa:	2301      	moveq	r3, #1
 80185fc:	e7b4      	b.n	8018568 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80185fe:	2304      	movs	r3, #4
 8018600:	e7b2      	b.n	8018568 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018602:	bf00      	nop
 8018604:	0802f1d4 	.word	0x0802f1d4

08018608 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801860c:	b08b      	sub	sp, #44	; 0x2c
 801860e:	461d      	mov	r5, r3
 8018610:	2400      	movs	r4, #0
 8018612:	4688      	mov	r8, r1
 8018614:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018618:	4693      	mov	fp, r2
 801861a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801861e:	4607      	mov	r7, r0
 8018620:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018624:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018628:	9404      	str	r4, [sp, #16]
 801862a:	bf14      	ite	ne
 801862c:	2308      	movne	r3, #8
 801862e:	2302      	moveq	r3, #2
 8018630:	fb05 b50a 	mla	r5, r5, sl, fp
 8018634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018638:	f7ff ff06 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801863c:	2e0b      	cmp	r6, #11
 801863e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018642:	a901      	add	r1, sp, #4
 8018644:	bf98      	it	ls
 8018646:	4b13      	ldrls	r3, [pc, #76]	; (8018694 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8018648:	f8ad a01e 	strh.w	sl, [sp, #30]
 801864c:	bf98      	it	ls
 801864e:	5d9c      	ldrbls	r4, [r3, r6]
 8018650:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018654:	10e4      	asrs	r4, r4, #3
 8018656:	f8cd 8010 	str.w	r8, [sp, #16]
 801865a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801865e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018662:	fb04 0405 	mla	r4, r4, r5, r0
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	f8ad 301a 	strh.w	r3, [sp, #26]
 801866c:	2300      	movs	r3, #0
 801866e:	9405      	str	r4, [sp, #20]
 8018670:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018674:	f88d 9020 	strb.w	r9, [sp, #32]
 8018678:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801867c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018680:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8018684:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8018688:	6803      	ldr	r3, [r0, #0]
 801868a:	685b      	ldr	r3, [r3, #4]
 801868c:	4798      	blx	r3
 801868e:	b00b      	add	sp, #44	; 0x2c
 8018690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018694:	0802f1d4 	.word	0x0802f1d4

08018698 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801869c:	461e      	mov	r6, r3
 801869e:	4b0a      	ldr	r3, [pc, #40]	; (80186c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80186a0:	460f      	mov	r7, r1
 80186a2:	4690      	mov	r8, r2
 80186a4:	881d      	ldrh	r5, [r3, #0]
 80186a6:	f7ff fd23 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 80186aa:	6803      	ldr	r3, [r0, #0]
 80186ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ae:	4798      	blx	r3
 80186b0:	280b      	cmp	r0, #11
 80186b2:	bf96      	itet	ls
 80186b4:	4b05      	ldrls	r3, [pc, #20]	; (80186cc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80186b6:	2400      	movhi	r4, #0
 80186b8:	5c1c      	ldrbls	r4, [r3, r0]
 80186ba:	fb08 7005 	mla	r0, r8, r5, r7
 80186be:	10e4      	asrs	r4, r4, #3
 80186c0:	fb04 6000 	mla	r0, r4, r0, r6
 80186c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186c8:	2001520a 	.word	0x2001520a
 80186cc:	0802f1d4 	.word	0x0802f1d4

080186d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80186d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186d2:	b08b      	sub	sp, #44	; 0x2c
 80186d4:	461f      	mov	r7, r3
 80186d6:	4604      	mov	r4, r0
 80186d8:	4616      	mov	r6, r2
 80186da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80186de:	2500      	movs	r5, #0
 80186e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80186e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80186e8:	9504      	str	r5, [sp, #16]
 80186ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80186ee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80186f2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80186f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80186fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80186fe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018702:	f88d 3020 	strb.w	r3, [sp, #32]
 8018706:	f7ff fe9f 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801870a:	463a      	mov	r2, r7
 801870c:	4631      	mov	r1, r6
 801870e:	4603      	mov	r3, r0
 8018710:	4620      	mov	r0, r4
 8018712:	f7ff ffc1 	bl	8018698 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018716:	4b0e      	ldr	r3, [pc, #56]	; (8018750 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018718:	9005      	str	r0, [sp, #20]
 801871a:	881b      	ldrh	r3, [r3, #0]
 801871c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018720:	f7ff fce6 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 8018724:	6803      	ldr	r3, [r0, #0]
 8018726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018728:	4798      	blx	r3
 801872a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801872c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018730:	a901      	add	r1, sp, #4
 8018732:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018736:	9304      	str	r3, [sp, #16]
 8018738:	6860      	ldr	r0, [r4, #4]
 801873a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801873e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8018742:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018746:	6803      	ldr	r3, [r0, #0]
 8018748:	685b      	ldr	r3, [r3, #4]
 801874a:	4798      	blx	r3
 801874c:	b00b      	add	sp, #44	; 0x2c
 801874e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018750:	2001520a 	.word	0x2001520a

08018754 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018756:	b08d      	sub	sp, #52	; 0x34
 8018758:	2501      	movs	r5, #1
 801875a:	4604      	mov	r4, r0
 801875c:	466b      	mov	r3, sp
 801875e:	9503      	str	r5, [sp, #12]
 8018760:	e883 0006 	stmia.w	r3, {r1, r2}
 8018764:	2300      	movs	r3, #0
 8018766:	f8bd 6000 	ldrh.w	r6, [sp]
 801876a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801876e:	9306      	str	r3, [sp, #24]
 8018770:	6803      	ldr	r3, [r0, #0]
 8018772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018774:	4798      	blx	r3
 8018776:	463a      	mov	r2, r7
 8018778:	4631      	mov	r1, r6
 801877a:	4603      	mov	r3, r0
 801877c:	4620      	mov	r0, r4
 801877e:	f7ff ff8b 	bl	8018698 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018784:	9004      	str	r0, [sp, #16]
 8018786:	9307      	str	r3, [sp, #28]
 8018788:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801878c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018790:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018794:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018798:	4b0e      	ldr	r3, [pc, #56]	; (80187d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801879a:	881b      	ldrh	r3, [r3, #0]
 801879c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80187a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80187a4:	f7ff fca4 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 80187a8:	6803      	ldr	r3, [r0, #0]
 80187aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ac:	4798      	blx	r3
 80187ae:	23ff      	movs	r3, #255	; 0xff
 80187b0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80187b4:	a903      	add	r1, sp, #12
 80187b6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80187ba:	6860      	ldr	r0, [r4, #4]
 80187bc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80187c0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80187c4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80187c8:	6803      	ldr	r3, [r0, #0]
 80187ca:	685b      	ldr	r3, [r3, #4]
 80187cc:	4798      	blx	r3
 80187ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80187d0:	b00d      	add	sp, #52	; 0x34
 80187d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187d4:	2001520a 	.word	0x2001520a

080187d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80187d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187dc:	b08c      	sub	sp, #48	; 0x30
 80187de:	461e      	mov	r6, r3
 80187e0:	2300      	movs	r3, #0
 80187e2:	4604      	mov	r4, r0
 80187e4:	466d      	mov	r5, sp
 80187e6:	9306      	str	r3, [sp, #24]
 80187e8:	6803      	ldr	r3, [r0, #0]
 80187ea:	e885 0006 	stmia.w	r5, {r1, r2}
 80187ee:	2501      	movs	r5, #1
 80187f0:	f8bd 7000 	ldrh.w	r7, [sp]
 80187f4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80187f8:	9503      	str	r5, [sp, #12]
 80187fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187fc:	4798      	blx	r3
 80187fe:	4642      	mov	r2, r8
 8018800:	4639      	mov	r1, r7
 8018802:	4603      	mov	r3, r0
 8018804:	4620      	mov	r0, r4
 8018806:	f7ff ff47 	bl	8018698 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801880a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801880e:	9004      	str	r0, [sp, #16]
 8018810:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018814:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018818:	9607      	str	r6, [sp, #28]
 801881a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801881e:	4b10      	ldr	r3, [pc, #64]	; (8018860 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8018820:	881b      	ldrh	r3, [r3, #0]
 8018822:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018826:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018828:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801882c:	f7ff fc60 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 8018830:	6803      	ldr	r3, [r0, #0]
 8018832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018834:	4798      	blx	r3
 8018836:	23ff      	movs	r3, #255	; 0xff
 8018838:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801883c:	a903      	add	r1, sp, #12
 801883e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8018842:	6860      	ldr	r0, [r4, #4]
 8018844:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8018848:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801884c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8018850:	6803      	ldr	r3, [r0, #0]
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	4798      	blx	r3
 8018856:	4630      	mov	r0, r6
 8018858:	b00c      	add	sp, #48	; 0x30
 801885a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801885e:	bf00      	nop
 8018860:	2001520a 	.word	0x2001520a

08018864 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8018864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018866:	b085      	sub	sp, #20
 8018868:	4605      	mov	r5, r0
 801886a:	ac02      	add	r4, sp, #8
 801886c:	e884 0006 	stmia.w	r4, {r1, r2}
 8018870:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8018874:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8018878:	f7ff fde6 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801887c:	4631      	mov	r1, r6
 801887e:	4603      	mov	r3, r0
 8018880:	463a      	mov	r2, r7
 8018882:	4628      	mov	r0, r5
 8018884:	f7ff ff08 	bl	8018698 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018888:	4a05      	ldr	r2, [pc, #20]	; (80188a0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801888a:	682b      	ldr	r3, [r5, #0]
 801888c:	8812      	ldrh	r2, [r2, #0]
 801888e:	9200      	str	r2, [sp, #0]
 8018890:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8018892:	4603      	mov	r3, r0
 8018894:	4628      	mov	r0, r5
 8018896:	e894 0006 	ldmia.w	r4, {r1, r2}
 801889a:	47b0      	blx	r6
 801889c:	b005      	add	sp, #20
 801889e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188a0:	2001520a 	.word	0x2001520a

080188a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80188aa:	4604      	mov	r4, r0
 80188ac:	b19b      	cbz	r3, 80188d6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80188ae:	2002      	movs	r0, #2
 80188b0:	f7e9 f9c0 	bl	8001c34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80188b4:	2300      	movs	r3, #0
 80188b6:	4620      	mov	r0, r4
 80188b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80188bc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80188c0:	6823      	ldr	r3, [r4, #0]
 80188c2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80188c6:	f7ff fdbf 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80188ca:	4601      	mov	r1, r0
 80188cc:	4620      	mov	r0, r4
 80188ce:	462b      	mov	r3, r5
 80188d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188d4:	4718      	bx	r3
 80188d6:	bd70      	pop	{r4, r5, r6, pc}

080188d8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80188d8:	b570      	push	{r4, r5, r6, lr}
 80188da:	4605      	mov	r5, r0
 80188dc:	460c      	mov	r4, r1
 80188de:	2003      	movs	r0, #3
 80188e0:	b149      	cbz	r1, 80188f6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80188e2:	f7e9 f947 	bl	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80188e6:	6928      	ldr	r0, [r5, #16]
 80188e8:	b168      	cbz	r0, 8018906 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80188ea:	6803      	ldr	r3, [r0, #0]
 80188ec:	2101      	movs	r1, #1
 80188ee:	695b      	ldr	r3, [r3, #20]
 80188f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188f4:	4718      	bx	r3
 80188f6:	f7e9 f96d 	bl	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80188fa:	6928      	ldr	r0, [r5, #16]
 80188fc:	b118      	cbz	r0, 8018906 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80188fe:	6803      	ldr	r3, [r0, #0]
 8018900:	4621      	mov	r1, r4
 8018902:	695b      	ldr	r3, [r3, #20]
 8018904:	e7f4      	b.n	80188f0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018906:	bd70      	pop	{r4, r5, r6, pc}

08018908 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018908:	b538      	push	{r3, r4, r5, lr}
 801890a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801890e:	4604      	mov	r4, r0
 8018910:	460d      	mov	r5, r1
 8018912:	428b      	cmp	r3, r1
 8018914:	d006      	beq.n	8018924 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8018916:	6803      	ldr	r3, [r0, #0]
 8018918:	b929      	cbnz	r1, 8018926 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801891a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801891e:	4798      	blx	r3
 8018920:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8018924:	bd38      	pop	{r3, r4, r5, pc}
 8018926:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801892a:	e7f8      	b.n	801891e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801892c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801892c:	4b0d      	ldr	r3, [pc, #52]	; (8018964 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801892e:	b510      	push	{r4, lr}
 8018930:	781b      	ldrb	r3, [r3, #0]
 8018932:	4604      	mov	r4, r0
 8018934:	b95b      	cbnz	r3, 801894e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018936:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801893a:	2b02      	cmp	r3, #2
 801893c:	d007      	beq.n	801894e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801893e:	6840      	ldr	r0, [r0, #4]
 8018940:	f000 f912 	bl	8018b68 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018944:	b118      	cbz	r0, 801894e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018946:	6862      	ldr	r2, [r4, #4]
 8018948:	7a53      	ldrb	r3, [r2, #9]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d0fc      	beq.n	8018948 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801894e:	f7e9 faf5 	bl	8001f3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018952:	4620      	mov	r0, r4
 8018954:	2100      	movs	r1, #0
 8018956:	f7ff ffd7 	bl	8018908 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801895a:	4620      	mov	r0, r4
 801895c:	f7ff fd74 	bl	8018448 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018960:	bd10      	pop	{r4, pc}
 8018962:	bf00      	nop
 8018964:	2001520e 	.word	0x2001520e

08018968 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018968:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801896c:	1a13      	subs	r3, r2, r0
 801896e:	4258      	negs	r0, r3
 8018970:	4158      	adcs	r0, r3
 8018972:	4770      	bx	lr

08018974 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018974:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018978:	1a9b      	subs	r3, r3, r2
 801897a:	2b00      	cmp	r3, #0
 801897c:	bfdc      	itt	le
 801897e:	6882      	ldrle	r2, [r0, #8]
 8018980:	189b      	addle	r3, r3, r2
 8018982:	2b01      	cmp	r3, #1
 8018984:	bfcc      	ite	gt
 8018986:	2000      	movgt	r0, #0
 8018988:	2001      	movle	r0, #1
 801898a:	4770      	bx	lr

0801898c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801898c:	6902      	ldr	r2, [r0, #16]
 801898e:	6843      	ldr	r3, [r0, #4]
 8018990:	2024      	movs	r0, #36	; 0x24
 8018992:	fb00 3002 	mla	r0, r0, r2, r3
 8018996:	4770      	bx	lr

08018998 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018998:	6803      	ldr	r3, [r0, #0]
 801899a:	691b      	ldr	r3, [r3, #16]
 801899c:	4718      	bx	r3

0801899e <_ZN8touchgfx13DMA_Interface7executeEv>:
 801899e:	2301      	movs	r3, #1
 80189a0:	b570      	push	{r4, r5, r6, lr}
 80189a2:	7203      	strb	r3, [r0, #8]
 80189a4:	4604      	mov	r4, r0
 80189a6:	6840      	ldr	r0, [r0, #4]
 80189a8:	6803      	ldr	r3, [r0, #0]
 80189aa:	699b      	ldr	r3, [r3, #24]
 80189ac:	4798      	blx	r3
 80189ae:	6803      	ldr	r3, [r0, #0]
 80189b0:	4605      	mov	r5, r0
 80189b2:	2b40      	cmp	r3, #64	; 0x40
 80189b4:	d00c      	beq.n	80189d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80189b6:	d810      	bhi.n	80189da <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80189b8:	2b04      	cmp	r3, #4
 80189ba:	d01d      	beq.n	80189f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80189bc:	d804      	bhi.n	80189c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80189be:	2b01      	cmp	r3, #1
 80189c0:	d006      	beq.n	80189d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80189c2:	2b02      	cmp	r3, #2
 80189c4:	d02c      	beq.n	8018a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80189c6:	bd70      	pop	{r4, r5, r6, pc}
 80189c8:	2b08      	cmp	r3, #8
 80189ca:	d01d      	beq.n	8018a08 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80189cc:	2b20      	cmp	r3, #32
 80189ce:	d1fa      	bne.n	80189c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80189d0:	6823      	ldr	r3, [r4, #0]
 80189d2:	4620      	mov	r0, r4
 80189d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189d6:	4798      	blx	r3
 80189d8:	e013      	b.n	8018a02 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80189da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80189de:	d0f7      	beq.n	80189d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80189e0:	d804      	bhi.n	80189ec <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80189e2:	2b80      	cmp	r3, #128	; 0x80
 80189e4:	d0f4      	beq.n	80189d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80189e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80189ea:	e7f0      	b.n	80189ce <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80189ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80189f0:	d0ee      	beq.n	80189d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80189f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80189f6:	e7e5      	b.n	80189c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80189f8:	6823      	ldr	r3, [r4, #0]
 80189fa:	7f01      	ldrb	r1, [r0, #28]
 80189fc:	4620      	mov	r0, r4
 80189fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a00:	4798      	blx	r3
 8018a02:	6823      	ldr	r3, [r4, #0]
 8018a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a06:	e006      	b.n	8018a16 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018a08:	6823      	ldr	r3, [r4, #0]
 8018a0a:	7f01      	ldrb	r1, [r0, #28]
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a10:	4798      	blx	r3
 8018a12:	6823      	ldr	r3, [r4, #0]
 8018a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a16:	4629      	mov	r1, r5
 8018a18:	4620      	mov	r0, r4
 8018a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a1e:	4718      	bx	r3
 8018a20:	6823      	ldr	r3, [r4, #0]
 8018a22:	4620      	mov	r0, r4
 8018a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a26:	4798      	blx	r3
 8018a28:	e7f3      	b.n	8018a12 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08018a2a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018a2a:	4770      	bx	lr

08018a2c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018a2c:	4770      	bx	lr

08018a2e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8018a2e:	4770      	bx	lr

08018a30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018a30:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8018a34:	b510      	push	{r4, lr}
 8018a36:	1ad2      	subs	r2, r2, r3
 8018a38:	2a00      	cmp	r2, #0
 8018a3a:	bfdc      	itt	le
 8018a3c:	6884      	ldrle	r4, [r0, #8]
 8018a3e:	1912      	addle	r2, r2, r4
 8018a40:	2a01      	cmp	r2, #1
 8018a42:	dd16      	ble.n	8018a72 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8018a44:	6842      	ldr	r2, [r0, #4]
 8018a46:	2424      	movs	r4, #36	; 0x24
 8018a48:	fb04 2303 	mla	r3, r4, r3, r2
 8018a4c:	f101 0220 	add.w	r2, r1, #32
 8018a50:	f851 4b04 	ldr.w	r4, [r1], #4
 8018a54:	4291      	cmp	r1, r2
 8018a56:	f843 4b04 	str.w	r4, [r3], #4
 8018a5a:	d1f9      	bne.n	8018a50 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8018a5c:	780a      	ldrb	r2, [r1, #0]
 8018a5e:	701a      	strb	r2, [r3, #0]
 8018a60:	68c3      	ldr	r3, [r0, #12]
 8018a62:	6882      	ldr	r2, [r0, #8]
 8018a64:	f3bf 8f5b 	dmb	ish
 8018a68:	3301      	adds	r3, #1
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	bfd8      	it	le
 8018a6e:	1a9b      	suble	r3, r3, r2
 8018a70:	60c3      	str	r3, [r0, #12]
 8018a72:	bd10      	pop	{r4, pc}

08018a74 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018a74:	6903      	ldr	r3, [r0, #16]
 8018a76:	6882      	ldr	r2, [r0, #8]
 8018a78:	f3bf 8f5b 	dmb	ish
 8018a7c:	3301      	adds	r3, #1
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	bfd8      	it	le
 8018a82:	1a9b      	suble	r3, r3, r2
 8018a84:	6103      	str	r3, [r0, #16]
 8018a86:	4770      	bx	lr

08018a88 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018a88:	b570      	push	{r4, r5, r6, lr}
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	460e      	mov	r6, r1
 8018a8e:	6860      	ldr	r0, [r4, #4]
 8018a90:	6803      	ldr	r3, [r0, #0]
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	4798      	blx	r3
 8018a96:	2800      	cmp	r0, #0
 8018a98:	d1f9      	bne.n	8018a8e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018a9a:	4d0d      	ldr	r5, [pc, #52]	; (8018ad0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018a9c:	6828      	ldr	r0, [r5, #0]
 8018a9e:	6803      	ldr	r3, [r0, #0]
 8018aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018aa2:	4798      	blx	r3
 8018aa4:	f7e9 fa58 	bl	8001f58 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018aa8:	6828      	ldr	r0, [r5, #0]
 8018aaa:	2101      	movs	r1, #1
 8018aac:	f7ff ff2c 	bl	8018908 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018ab0:	6860      	ldr	r0, [r4, #4]
 8018ab2:	4631      	mov	r1, r6
 8018ab4:	6803      	ldr	r3, [r0, #0]
 8018ab6:	689b      	ldr	r3, [r3, #8]
 8018ab8:	4798      	blx	r3
 8018aba:	6823      	ldr	r3, [r4, #0]
 8018abc:	4620      	mov	r0, r4
 8018abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac0:	4798      	blx	r3
 8018ac2:	6828      	ldr	r0, [r5, #0]
 8018ac4:	6803      	ldr	r3, [r0, #0]
 8018ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018acc:	4718      	bx	r3
 8018ace:	bf00      	nop
 8018ad0:	20015210 	.word	0x20015210

08018ad4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018ad4:	b508      	push	{r3, lr}
 8018ad6:	f7e9 fa31 	bl	8001f3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018ade:	f7e9 ba35 	b.w	8001f4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018ae2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8018ae2:	b510      	push	{r4, lr}
 8018ae4:	4604      	mov	r4, r0
 8018ae6:	2114      	movs	r1, #20
 8018ae8:	f010 fe2e 	bl	8029748 <_ZdlPvj>
 8018aec:	4620      	mov	r0, r4
 8018aee:	bd10      	pop	{r4, pc}

08018af0 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018af0:	b510      	push	{r4, lr}
 8018af2:	4604      	mov	r4, r0
 8018af4:	6840      	ldr	r0, [r0, #4]
 8018af6:	6803      	ldr	r3, [r0, #0]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	4798      	blx	r3
 8018afc:	b948      	cbnz	r0, 8018b12 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018afe:	7a63      	ldrb	r3, [r4, #9]
 8018b00:	b13b      	cbz	r3, 8018b12 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018b02:	7a23      	ldrb	r3, [r4, #8]
 8018b04:	b92b      	cbnz	r3, 8018b12 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018b06:	6823      	ldr	r3, [r4, #0]
 8018b08:	4620      	mov	r0, r4
 8018b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b10:	4718      	bx	r3
 8018b12:	bd10      	pop	{r4, pc}

08018b14 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018b14:	b570      	push	{r4, r5, r6, lr}
 8018b16:	4604      	mov	r4, r0
 8018b18:	6840      	ldr	r0, [r0, #4]
 8018b1a:	6803      	ldr	r3, [r0, #0]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	4798      	blx	r3
 8018b20:	4605      	mov	r5, r0
 8018b22:	b930      	cbnz	r0, 8018b32 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018b24:	7a23      	ldrb	r3, [r4, #8]
 8018b26:	b123      	cbz	r3, 8018b32 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018b28:	6860      	ldr	r0, [r4, #4]
 8018b2a:	6803      	ldr	r3, [r0, #0]
 8018b2c:	695b      	ldr	r3, [r3, #20]
 8018b2e:	4798      	blx	r3
 8018b30:	7225      	strb	r5, [r4, #8]
 8018b32:	6860      	ldr	r0, [r4, #4]
 8018b34:	6803      	ldr	r3, [r0, #0]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	4798      	blx	r3
 8018b3a:	b928      	cbnz	r0, 8018b48 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018b3c:	6823      	ldr	r3, [r4, #0]
 8018b3e:	4620      	mov	r0, r4
 8018b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b46:	4718      	bx	r3
 8018b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b4c:	f7e9 ba0c 	b.w	8001f68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018b50 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018b50:	b510      	push	{r4, lr}
 8018b52:	6082      	str	r2, [r0, #8]
 8018b54:	2200      	movs	r2, #0
 8018b56:	4c03      	ldr	r4, [pc, #12]	; (8018b64 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018b58:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018b5c:	e9c0 4100 	strd	r4, r1, [r0]
 8018b60:	bd10      	pop	{r4, pc}
 8018b62:	bf00      	nop
 8018b64:	0802f1e8 	.word	0x0802f1e8

08018b68 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018b68:	6840      	ldr	r0, [r0, #4]
 8018b6a:	6803      	ldr	r3, [r0, #0]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	4718      	bx	r3

08018b70 <_ZN8touchgfx8TextArea8setWidthEs>:
 8018b70:	b530      	push	{r4, r5, lr}
 8018b72:	b085      	sub	sp, #20
 8018b74:	6803      	ldr	r3, [r0, #0]
 8018b76:	4604      	mov	r4, r0
 8018b78:	8101      	strh	r1, [r0, #8]
 8018b7a:	466d      	mov	r5, sp
 8018b7c:	4601      	mov	r1, r0
 8018b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018b82:	343c      	adds	r4, #60	; 0x3c
 8018b84:	4628      	mov	r0, r5
 8018b86:	4798      	blx	r3
 8018b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018b90:	b005      	add	sp, #20
 8018b92:	bd30      	pop	{r4, r5, pc}

08018b94 <_ZN8touchgfx8TextArea9setHeightEs>:
 8018b94:	b530      	push	{r4, r5, lr}
 8018b96:	b085      	sub	sp, #20
 8018b98:	6803      	ldr	r3, [r0, #0]
 8018b9a:	4604      	mov	r4, r0
 8018b9c:	8141      	strh	r1, [r0, #10]
 8018b9e:	466d      	mov	r5, sp
 8018ba0:	4601      	mov	r1, r0
 8018ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018ba6:	343c      	adds	r4, #60	; 0x3c
 8018ba8:	4628      	mov	r0, r5
 8018baa:	4798      	blx	r3
 8018bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018bb4:	b005      	add	sp, #20
 8018bb6:	bd30      	pop	{r4, r5, pc}

08018bb8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8018bb8:	2200      	movs	r2, #0
 8018bba:	8002      	strh	r2, [r0, #0]
 8018bbc:	8042      	strh	r2, [r0, #2]
 8018bbe:	8082      	strh	r2, [r0, #4]
 8018bc0:	80c2      	strh	r2, [r0, #6]
 8018bc2:	4770      	bx	lr

08018bc4 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8018bc4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8018bc8:	4770      	bx	lr
	...

08018bcc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018bcc:	b570      	push	{r4, r5, r6, lr}
 8018bce:	6803      	ldr	r3, [r0, #0]
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018bd4:	460d      	mov	r5, r1
 8018bd6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8018bd8:	4b08      	ldr	r3, [pc, #32]	; (8018bfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018be0:	4b07      	ldr	r3, [pc, #28]	; (8018c00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018be8:	6803      	ldr	r3, [r0, #0]
 8018bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bec:	4798      	blx	r3
 8018bee:	1a29      	subs	r1, r5, r0
 8018bf0:	4633      	mov	r3, r6
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	b209      	sxth	r1, r1
 8018bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bfa:	4718      	bx	r3
 8018bfc:	20015260 	.word	0x20015260
 8018c00:	20015268 	.word	0x20015268

08018c04 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018c04:	b570      	push	{r4, r5, r6, lr}
 8018c06:	6803      	ldr	r3, [r0, #0]
 8018c08:	4604      	mov	r4, r0
 8018c0a:	4615      	mov	r5, r2
 8018c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c0e:	4798      	blx	r3
 8018c10:	6823      	ldr	r3, [r4, #0]
 8018c12:	4629      	mov	r1, r5
 8018c14:	4620      	mov	r0, r4
 8018c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c1c:	4718      	bx	r3

08018c1e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8018c1e:	2000      	movs	r0, #0
 8018c20:	4770      	bx	lr

08018c22 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8018c22:	2000      	movs	r0, #0
 8018c24:	4770      	bx	lr
	...

08018c28 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8018c28:	4b07      	ldr	r3, [pc, #28]	; (8018c48 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8018c2a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018c2c:	881b      	ldrh	r3, [r3, #0]
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	bf81      	itttt	hi
 8018c32:	4b06      	ldrhi	r3, [pc, #24]	; (8018c4c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8018c34:	681b      	ldrhi	r3, [r3, #0]
 8018c36:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8018c3a:	7858      	ldrbhi	r0, [r3, #1]
 8018c3c:	bf8c      	ite	hi
 8018c3e:	f000 0003 	andhi.w	r0, r0, #3
 8018c42:	2000      	movls	r0, #0
 8018c44:	4770      	bx	lr
 8018c46:	bf00      	nop
 8018c48:	20015264 	.word	0x20015264
 8018c4c:	20015260 	.word	0x20015260

08018c50 <_ZN8touchgfx8TextAreaD1Ev>:
 8018c50:	4770      	bx	lr
	...

08018c54 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8018c54:	4b11      	ldr	r3, [pc, #68]	; (8018c9c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8018c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	881b      	ldrh	r3, [r3, #0]
 8018c60:	428b      	cmp	r3, r1
 8018c62:	d918      	bls.n	8018c96 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8018c64:	6803      	ldr	r3, [r0, #0]
 8018c66:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8018c68:	4b0d      	ldr	r3, [pc, #52]	; (8018ca0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8018c6a:	6818      	ldr	r0, [r3, #0]
 8018c6c:	f7ea ffb8 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8018c70:	6823      	ldr	r3, [r4, #0]
 8018c72:	4606      	mov	r6, r0
 8018c74:	4620      	mov	r0, r4
 8018c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018c78:	4798      	blx	r3
 8018c7a:	6823      	ldr	r3, [r4, #0]
 8018c7c:	4607      	mov	r7, r0
 8018c7e:	4620      	mov	r0, r4
 8018c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018c84:	4798      	blx	r3
 8018c86:	463a      	mov	r2, r7
 8018c88:	4603      	mov	r3, r0
 8018c8a:	4631      	mov	r1, r6
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	46ac      	mov	ip, r5
 8018c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c94:	4760      	bx	ip
 8018c96:	2000      	movs	r0, #0
 8018c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c9c:	20015264 	.word	0x20015264
 8018ca0:	2001526c 	.word	0x2001526c

08018ca4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018ca4:	4b18      	ldr	r3, [pc, #96]	; (8018d08 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018ca6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018caa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018cac:	4604      	mov	r4, r0
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	428b      	cmp	r3, r1
 8018cb2:	d926      	bls.n	8018d02 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8018cb4:	4b15      	ldr	r3, [pc, #84]	; (8018d0c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018cbc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018cc0:	4b13      	ldr	r3, [pc, #76]	; (8018d10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018cc2:	7855      	ldrb	r5, [r2, #1]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8018cca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018cce:	6833      	ldr	r3, [r6, #0]
 8018cd0:	69df      	ldr	r7, [r3, #28]
 8018cd2:	4b10      	ldr	r3, [pc, #64]	; (8018d14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018cd4:	6818      	ldr	r0, [r3, #0]
 8018cd6:	f7ea ff83 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8018cda:	6823      	ldr	r3, [r4, #0]
 8018cdc:	4680      	mov	r8, r0
 8018cde:	4620      	mov	r0, r4
 8018ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018ce2:	4798      	blx	r3
 8018ce4:	6823      	ldr	r3, [r4, #0]
 8018ce6:	4681      	mov	r9, r0
 8018ce8:	4620      	mov	r0, r4
 8018cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018cee:	4798      	blx	r3
 8018cf0:	464b      	mov	r3, r9
 8018cf2:	9000      	str	r0, [sp, #0]
 8018cf4:	4642      	mov	r2, r8
 8018cf6:	4629      	mov	r1, r5
 8018cf8:	4630      	mov	r0, r6
 8018cfa:	47b8      	blx	r7
 8018cfc:	b003      	add	sp, #12
 8018cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d02:	2000      	movs	r0, #0
 8018d04:	e7fa      	b.n	8018cfc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8018d06:	bf00      	nop
 8018d08:	20015264 	.word	0x20015264
 8018d0c:	20015260 	.word	0x20015260
 8018d10:	20015268 	.word	0x20015268
 8018d14:	2001526c 	.word	0x2001526c

08018d18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018d18:	b40e      	push	{r1, r2, r3}
 8018d1a:	4b30      	ldr	r3, [pc, #192]	; (8018ddc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8018d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d20:	881a      	ldrh	r2, [r3, #0]
 8018d22:	b09d      	sub	sp, #116	; 0x74
 8018d24:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018d26:	4604      	mov	r4, r0
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	d954      	bls.n	8018dd6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8018d2c:	aa26      	add	r2, sp, #152	; 0x98
 8018d2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8018de0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018d32:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8018de4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8018d36:	9202      	str	r2, [sp, #8]
 8018d38:	f8d9 2000 	ldr.w	r2, [r9]
 8018d3c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018d40:	f8d8 3000 	ldr.w	r3, [r8]
 8018d44:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018d48:	682b      	ldr	r3, [r5, #0]
 8018d4a:	4628      	mov	r0, r5
 8018d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d4e:	4798      	blx	r3
 8018d50:	4606      	mov	r6, r0
 8018d52:	b207      	sxth	r7, r0
 8018d54:	a803      	add	r0, sp, #12
 8018d56:	f003 fee2 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 8018d5a:	682b      	ldr	r3, [r5, #0]
 8018d5c:	4628      	mov	r0, r5
 8018d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d60:	4798      	blx	r3
 8018d62:	682b      	ldr	r3, [r5, #0]
 8018d64:	4682      	mov	sl, r0
 8018d66:	4628      	mov	r0, r5
 8018d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d6a:	4798      	blx	r3
 8018d6c:	4653      	mov	r3, sl
 8018d6e:	9000      	str	r0, [sp, #0]
 8018d70:	a803      	add	r0, sp, #12
 8018d72:	9a02      	ldr	r2, [sp, #8]
 8018d74:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018d76:	f003 ff2d 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018d7a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018d7c:	f8d9 3000 	ldr.w	r3, [r9]
 8018d80:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018d84:	8925      	ldrh	r5, [r4, #8]
 8018d86:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8018d8a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018d8e:	eba5 050c 	sub.w	r5, r5, ip
 8018d92:	784a      	ldrb	r2, [r1, #1]
 8018d94:	f8d8 3000 	ldr.w	r3, [r8]
 8018d98:	b22d      	sxth	r5, r5
 8018d9a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018d9e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018da2:	9500      	str	r5, [sp, #0]
 8018da4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018da8:	a803      	add	r0, sp, #12
 8018daa:	f001 fd85 	bl	801a8b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018dae:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8018db2:	b203      	sxth	r3, r0
 8018db4:	18b9      	adds	r1, r7, r2
 8018db6:	2900      	cmp	r1, #0
 8018db8:	dd0b      	ble.n	8018dd2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8018dba:	3b01      	subs	r3, #1
 8018dbc:	fb13 f302 	smulbb	r3, r3, r2
 8018dc0:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018dc4:	b21f      	sxth	r7, r3
 8018dc6:	4638      	mov	r0, r7
 8018dc8:	b01d      	add	sp, #116	; 0x74
 8018dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dce:	b003      	add	sp, #12
 8018dd0:	4770      	bx	lr
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	dcf7      	bgt.n	8018dc6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018dd6:	2700      	movs	r7, #0
 8018dd8:	e7f5      	b.n	8018dc6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018dda:	bf00      	nop
 8018ddc:	20015264 	.word	0x20015264
 8018de0:	20015260 	.word	0x20015260
 8018de4:	20015268 	.word	0x20015268

08018de8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8018de8:	4bbd      	ldr	r3, [pc, #756]	; (80190e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8018dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dee:	460c      	mov	r4, r1
 8018df0:	881b      	ldrh	r3, [r3, #0]
 8018df2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8018df4:	b0a9      	sub	sp, #164	; 0xa4
 8018df6:	4680      	mov	r8, r0
 8018df8:	428b      	cmp	r3, r1
 8018dfa:	d809      	bhi.n	8018e10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8018e02:	6083      	str	r3, [r0, #8]
 8018e04:	e9c0 3200 	strd	r3, r2, [r0]
 8018e08:	4640      	mov	r0, r8
 8018e0a:	b029      	add	sp, #164	; 0xa4
 8018e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e10:	4eb4      	ldr	r6, [pc, #720]	; (80190e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8018e12:	6833      	ldr	r3, [r6, #0]
 8018e14:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018e18:	4bb3      	ldr	r3, [pc, #716]	; (80190e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018e20:	4bb2      	ldr	r3, [pc, #712]	; (80190ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8018e22:	6818      	ldr	r0, [r3, #0]
 8018e24:	f7ea fedc 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8018e28:	682b      	ldr	r3, [r5, #0]
 8018e2a:	4681      	mov	r9, r0
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e30:	4798      	blx	r3
 8018e32:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8018e34:	b203      	sxth	r3, r0
 8018e36:	4682      	mov	sl, r0
 8018e38:	4407      	add	r7, r0
 8018e3a:	a80f      	add	r0, sp, #60	; 0x3c
 8018e3c:	9304      	str	r3, [sp, #16]
 8018e3e:	b2bb      	uxth	r3, r7
 8018e40:	9303      	str	r3, [sp, #12]
 8018e42:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	f040 80a5 	bne.w	8018f96 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8018e4c:	f003 fe67 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 8018e50:	682b      	ldr	r3, [r5, #0]
 8018e52:	4628      	mov	r0, r5
 8018e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e56:	4798      	blx	r3
 8018e58:	682b      	ldr	r3, [r5, #0]
 8018e5a:	4606      	mov	r6, r0
 8018e5c:	4628      	mov	r0, r5
 8018e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e60:	4798      	blx	r3
 8018e62:	6823      	ldr	r3, [r4, #0]
 8018e64:	4607      	mov	r7, r0
 8018e66:	4620      	mov	r0, r4
 8018e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018e6a:	4798      	blx	r3
 8018e6c:	6823      	ldr	r3, [r4, #0]
 8018e6e:	4683      	mov	fp, r0
 8018e70:	4620      	mov	r0, r4
 8018e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018e76:	4798      	blx	r3
 8018e78:	463b      	mov	r3, r7
 8018e7a:	4649      	mov	r1, r9
 8018e7c:	4632      	mov	r2, r6
 8018e7e:	2600      	movs	r6, #0
 8018e80:	e9cd b000 	strd	fp, r0, [sp]
 8018e84:	a80f      	add	r0, sp, #60	; 0x3c
 8018e86:	4637      	mov	r7, r6
 8018e88:	f003 feb9 	bl	801cbfe <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018e8c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018e90:	f8df b250 	ldr.w	fp, [pc, #592]	; 80190e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8018e94:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018e98:	bf0c      	ite	eq
 8018e9a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8018e9e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8018ea2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018ea4:	4629      	mov	r1, r5
 8018ea6:	f8db 3000 	ldr.w	r3, [fp]
 8018eaa:	a80f      	add	r0, sp, #60	; 0x3c
 8018eac:	3701      	adds	r7, #1
 8018eae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018eb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018eb6:	b2bf      	uxth	r7, r7
 8018eb8:	785b      	ldrb	r3, [r3, #1]
 8018eba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018ebe:	f001 fa16 	bl	801a2ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018ec2:	9b03      	ldr	r3, [sp, #12]
 8018ec4:	4286      	cmp	r6, r0
 8018ec6:	eba9 0903 	sub.w	r9, r9, r3
 8018eca:	bfb8      	it	lt
 8018ecc:	4606      	movlt	r6, r0
 8018ece:	a80f      	add	r0, sp, #60	; 0x3c
 8018ed0:	fa0f f989 	sxth.w	r9, r9
 8018ed4:	b236      	sxth	r6, r6
 8018ed6:	f003 fe49 	bl	801cb6c <_ZN8touchgfx12TextProvider11endOfStringEv>
 8018eda:	b918      	cbnz	r0, 8018ee4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018edc:	7a2b      	ldrb	r3, [r5, #8]
 8018ede:	444b      	add	r3, r9
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	dcde      	bgt.n	8018ea2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8018ee4:	9b03      	ldr	r3, [sp, #12]
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	9a04      	ldr	r2, [sp, #16]
 8018eea:	fb13 f707 	smulbb	r7, r3, r7
 8018eee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018ef0:	f895 9009 	ldrb.w	r9, [r5, #9]
 8018ef4:	1aff      	subs	r7, r7, r3
 8018ef6:	b2bf      	uxth	r7, r7
 8018ef8:	b23b      	sxth	r3, r7
 8018efa:	429a      	cmp	r2, r3
 8018efc:	bfa8      	it	ge
 8018efe:	4657      	movge	r7, sl
 8018f00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018f04:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018f08:	6823      	ldr	r3, [r4, #0]
 8018f0a:	444f      	add	r7, r9
 8018f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f0e:	bf08      	it	eq
 8018f10:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8018f14:	fa1f f987 	uxth.w	r9, r7
 8018f18:	bf18      	it	ne
 8018f1a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8018f1e:	4798      	blx	r3
 8018f20:	2801      	cmp	r0, #1
 8018f22:	fa0f f789 	sxth.w	r7, r9
 8018f26:	b2b3      	uxth	r3, r6
 8018f28:	f000 80e2 	beq.w	80190f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8018f2c:	2802      	cmp	r0, #2
 8018f2e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8018f32:	f000 80e3 	beq.w	80190fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8018f36:	7aea      	ldrb	r2, [r5, #11]
 8018f38:	b236      	sxth	r6, r6
 8018f3a:	7b2d      	ldrb	r5, [r5, #12]
 8018f3c:	1ab6      	subs	r6, r6, r2
 8018f3e:	442a      	add	r2, r5
 8018f40:	fa1f fa86 	uxth.w	sl, r6
 8018f44:	4413      	add	r3, r2
 8018f46:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018f4a:	fa0f fb8a 	sxth.w	fp, sl
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	2a02      	cmp	r2, #2
 8018f52:	b21e      	sxth	r6, r3
 8018f54:	f000 80d6 	beq.w	8019104 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8018f58:	2a03      	cmp	r2, #3
 8018f5a:	f000 80de 	beq.w	801911a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8018f5e:	2a01      	cmp	r2, #1
 8018f60:	f040 80e6 	bne.w	8019130 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8018f64:	8925      	ldrh	r5, [r4, #8]
 8018f66:	4633      	mov	r3, r6
 8018f68:	463e      	mov	r6, r7
 8018f6a:	eba5 0909 	sub.w	r9, r5, r9
 8018f6e:	461f      	mov	r7, r3
 8018f70:	465d      	mov	r5, fp
 8018f72:	fa0f fb89 	sxth.w	fp, r9
 8018f76:	4b5d      	ldr	r3, [pc, #372]	; (80190ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8018f78:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018f7a:	6818      	ldr	r0, [r3, #0]
 8018f7c:	f7ea fe30 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8018f80:	f8a8 b000 	strh.w	fp, [r8]
 8018f84:	f8a8 5002 	strh.w	r5, [r8, #2]
 8018f88:	f8a8 6004 	strh.w	r6, [r8, #4]
 8018f8c:	f8a8 7006 	strh.w	r7, [r8, #6]
 8018f90:	f8c8 0008 	str.w	r0, [r8, #8]
 8018f94:	e738      	b.n	8018e08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8018f96:	f003 fdc2 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 8018f9a:	682b      	ldr	r3, [r5, #0]
 8018f9c:	4628      	mov	r0, r5
 8018f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018fa0:	4798      	blx	r3
 8018fa2:	682b      	ldr	r3, [r5, #0]
 8018fa4:	4607      	mov	r7, r0
 8018fa6:	4628      	mov	r0, r5
 8018fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018faa:	4798      	blx	r3
 8018fac:	6823      	ldr	r3, [r4, #0]
 8018fae:	4683      	mov	fp, r0
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fb4:	4798      	blx	r3
 8018fb6:	6822      	ldr	r2, [r4, #0]
 8018fb8:	9005      	str	r0, [sp, #20]
 8018fba:	4620      	mov	r0, r4
 8018fbc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8018fc0:	4790      	blx	r2
 8018fc2:	9b05      	ldr	r3, [sp, #20]
 8018fc4:	463a      	mov	r2, r7
 8018fc6:	4649      	mov	r1, r9
 8018fc8:	9001      	str	r0, [sp, #4]
 8018fca:	a80f      	add	r0, sp, #60	; 0x3c
 8018fcc:	9300      	str	r3, [sp, #0]
 8018fce:	465b      	mov	r3, fp
 8018fd0:	f003 fe15 	bl	801cbfe <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018fd4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018fd8:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8018fdc:	af0f      	add	r7, sp, #60	; 0x3c
 8018fde:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018fe2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018fe6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018fe8:	bf0a      	itet	eq
 8018fea:	464a      	moveq	r2, r9
 8018fec:	461a      	movne	r2, r3
 8018fee:	4699      	moveq	r9, r3
 8018ff0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8018ff4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8018ff8:	1ad2      	subs	r2, r2, r3
 8018ffa:	6833      	ldr	r3, [r6, #0]
 8018ffc:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8019000:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019004:	7859      	ldrb	r1, [r3, #1]
 8019006:	2300      	movs	r3, #0
 8019008:	9707      	str	r7, [sp, #28]
 801900a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801900e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019012:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019016:	f88d 1020 	strb.w	r1, [sp, #32]
 801901a:	9509      	str	r5, [sp, #36]	; 0x24
 801901c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019020:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8019024:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8019028:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801902c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019030:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019034:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019038:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801903c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8019040:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8019044:	b350      	cbz	r0, 801909c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019046:	682b      	ldr	r3, [r5, #0]
 8019048:	4628      	mov	r0, r5
 801904a:	695b      	ldr	r3, [r3, #20]
 801904c:	4798      	blx	r3
 801904e:	4607      	mov	r7, r0
 8019050:	b320      	cbz	r0, 801909c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019052:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019054:	4639      	mov	r1, r7
 8019056:	6803      	ldr	r3, [r0, #0]
 8019058:	68db      	ldr	r3, [r3, #12]
 801905a:	4798      	blx	r3
 801905c:	4606      	mov	r6, r0
 801905e:	b1e8      	cbz	r0, 801909c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019060:	7b43      	ldrb	r3, [r0, #13]
 8019062:	7a82      	ldrb	r2, [r0, #10]
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801906a:	4313      	orrs	r3, r2
 801906c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8019070:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8019074:	2b06      	cmp	r3, #6
 8019076:	d111      	bne.n	801909c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019078:	9809      	ldr	r0, [sp, #36]	; 0x24
 801907a:	4632      	mov	r2, r6
 801907c:	4639      	mov	r1, r7
 801907e:	6803      	ldr	r3, [r0, #0]
 8019080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019082:	4798      	blx	r3
 8019084:	7b73      	ldrb	r3, [r6, #13]
 8019086:	005b      	lsls	r3, r3, #1
 8019088:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801908c:	7ab3      	ldrb	r3, [r6, #10]
 801908e:	4313      	orrs	r3, r2
 8019090:	4418      	add	r0, r3
 8019092:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019096:	4418      	add	r0, r3
 8019098:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801909c:	2600      	movs	r6, #0
 801909e:	4637      	mov	r7, r6
 80190a0:	a806      	add	r0, sp, #24
 80190a2:	3701      	adds	r7, #1
 80190a4:	f001 fb05 	bl	801a6b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80190a8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80190ac:	9b03      	ldr	r3, [sp, #12]
 80190ae:	b2bf      	uxth	r7, r7
 80190b0:	4286      	cmp	r6, r0
 80190b2:	eba9 0903 	sub.w	r9, r9, r3
 80190b6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80190ba:	bfb8      	it	lt
 80190bc:	4606      	movlt	r6, r0
 80190be:	fa0f f989 	sxth.w	r9, r9
 80190c2:	b236      	sxth	r6, r6
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f43f af0d 	beq.w	8018ee4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80190ca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	f47f af08 	bne.w	8018ee4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80190d4:	7a2b      	ldrb	r3, [r5, #8]
 80190d6:	444b      	add	r3, r9
 80190d8:	2b00      	cmp	r3, #0
 80190da:	dce1      	bgt.n	80190a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 80190dc:	e702      	b.n	8018ee4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80190de:	bf00      	nop
 80190e0:	20015264 	.word	0x20015264
 80190e4:	20015260 	.word	0x20015260
 80190e8:	20015268 	.word	0x20015268
 80190ec:	2001526c 	.word	0x2001526c
 80190f0:	ebaa 0606 	sub.w	r6, sl, r6
 80190f4:	2002      	movs	r0, #2
 80190f6:	fb96 f6f0 	sdiv	r6, r6, r0
 80190fa:	e71c      	b.n	8018f36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80190fc:	441e      	add	r6, r3
 80190fe:	ebaa 0606 	sub.w	r6, sl, r6
 8019102:	e718      	b.n	8018f36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019104:	8925      	ldrh	r5, [r4, #8]
 8019106:	1aed      	subs	r5, r5, r3
 8019108:	eba5 050a 	sub.w	r5, r5, sl
 801910c:	fa0f fb85 	sxth.w	fp, r5
 8019110:	8965      	ldrh	r5, [r4, #10]
 8019112:	eba5 0509 	sub.w	r5, r5, r9
 8019116:	b22d      	sxth	r5, r5
 8019118:	e72d      	b.n	8018f76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801911a:	8965      	ldrh	r5, [r4, #10]
 801911c:	f04f 0b00 	mov.w	fp, #0
 8019120:	1aed      	subs	r5, r5, r3
 8019122:	4633      	mov	r3, r6
 8019124:	463e      	mov	r6, r7
 8019126:	eba5 050a 	sub.w	r5, r5, sl
 801912a:	461f      	mov	r7, r3
 801912c:	b22d      	sxth	r5, r5
 801912e:	e722      	b.n	8018f76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8019130:	2500      	movs	r5, #0
 8019132:	e720      	b.n	8018f76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08019134 <_ZN8touchgfx8TextAreaD0Ev>:
 8019134:	b510      	push	{r4, lr}
 8019136:	4604      	mov	r4, r0
 8019138:	2148      	movs	r1, #72	; 0x48
 801913a:	f010 fb05 	bl	8029748 <_ZdlPvj>
 801913e:	4620      	mov	r0, r4
 8019140:	bd10      	pop	{r4, pc}
	...

08019144 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8019144:	b513      	push	{r0, r1, r4, lr}
 8019146:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801914a:	4604      	mov	r4, r0
 801914c:	b1fb      	cbz	r3, 801918e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801914e:	4b16      	ldr	r3, [pc, #88]	; (80191a8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8019150:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019152:	881b      	ldrh	r3, [r3, #0]
 8019154:	428b      	cmp	r3, r1
 8019156:	d91a      	bls.n	801918e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019158:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801915c:	2b00      	cmp	r3, #0
 801915e:	dd16      	ble.n	801918e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019160:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019164:	2b00      	cmp	r3, #0
 8019166:	dd12      	ble.n	801918e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019168:	4b10      	ldr	r3, [pc, #64]	; (80191ac <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801916a:	6818      	ldr	r0, [r3, #0]
 801916c:	f7ea fd38 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8019170:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8019174:	6822      	ldr	r2, [r4, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	db06      	blt.n	8019188 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801917a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801917e:	2b00      	cmp	r3, #0
 8019180:	db02      	blt.n	8019188 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8019182:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019184:	4298      	cmp	r0, r3
 8019186:	d004      	beq.n	8019192 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8019188:	6953      	ldr	r3, [r2, #20]
 801918a:	4620      	mov	r0, r4
 801918c:	4798      	blx	r3
 801918e:	b002      	add	sp, #8
 8019190:	bd10      	pop	{r4, pc}
 8019192:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8019196:	466b      	mov	r3, sp
 8019198:	6912      	ldr	r2, [r2, #16]
 801919a:	c903      	ldmia	r1, {r0, r1}
 801919c:	e883 0003 	stmia.w	r3, {r0, r1}
 80191a0:	4619      	mov	r1, r3
 80191a2:	4620      	mov	r0, r4
 80191a4:	4790      	blx	r2
 80191a6:	e7f2      	b.n	801918e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80191a8:	20015264 	.word	0x20015264
 80191ac:	2001526c 	.word	0x2001526c

080191b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80191b0:	4b45      	ldr	r3, [pc, #276]	; (80192c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80191b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80191b8:	b08e      	sub	sp, #56	; 0x38
 80191ba:	881b      	ldrh	r3, [r3, #0]
 80191bc:	4604      	mov	r4, r0
 80191be:	4293      	cmp	r3, r2
 80191c0:	d97e      	bls.n	80192c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80191c2:	6808      	ldr	r0, [r1, #0]
 80191c4:	ab05      	add	r3, sp, #20
 80191c6:	6849      	ldr	r1, [r1, #4]
 80191c8:	4d40      	ldr	r5, [pc, #256]	; (80192cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80191ca:	c303      	stmia	r3!, {r0, r1}
 80191cc:	4611      	mov	r1, r2
 80191ce:	6828      	ldr	r0, [r5, #0]
 80191d0:	f7ea fd06 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 80191d4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80191d8:	2b00      	cmp	r3, #0
 80191da:	db11      	blt.n	8019200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80191dc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	db0d      	blt.n	8019200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80191e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80191e6:	4298      	cmp	r0, r3
 80191e8:	d10a      	bne.n	8019200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80191ea:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80191ee:	ab09      	add	r3, sp, #36	; 0x24
 80191f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80191f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80191f8:	4619      	mov	r1, r3
 80191fa:	a805      	add	r0, sp, #20
 80191fc:	f7fd fe38 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8019200:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019204:	2b00      	cmp	r3, #0
 8019206:	dd5b      	ble.n	80192c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019208:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801920c:	2b00      	cmp	r3, #0
 801920e:	dd57      	ble.n	80192c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019210:	4f2f      	ldr	r7, [pc, #188]	; (80192d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8019212:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801921a:	4b2e      	ldr	r3, [pc, #184]	; (80192d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019222:	2e00      	cmp	r6, #0
 8019224:	d04c      	beq.n	80192c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019226:	6823      	ldr	r3, [r4, #0]
 8019228:	4620      	mov	r0, r4
 801922a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801922e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019230:	4798      	blx	r3
 8019232:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019234:	683b      	ldr	r3, [r7, #0]
 8019236:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801923a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801923e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8019242:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8019246:	785b      	ldrb	r3, [r3, #1]
 8019248:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801924c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019250:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019252:	9609      	str	r6, [sp, #36]	; 0x24
 8019254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019258:	4b1f      	ldr	r3, [pc, #124]	; (80192d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801925a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8019264:	910b      	str	r1, [sp, #44]	; 0x2c
 8019266:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801926a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801926e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8019272:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8019276:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801927a:	b10a      	cbz	r2, 8019280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801927c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801927e:	b906      	cbnz	r6, 8019282 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8019280:	689e      	ldr	r6, [r3, #8]
 8019282:	af07      	add	r7, sp, #28
 8019284:	4621      	mov	r1, r4
 8019286:	4638      	mov	r0, r7
 8019288:	f003 f86c 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801928c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801928e:	6828      	ldr	r0, [r5, #0]
 8019290:	f7ea fca6 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8019294:	6823      	ldr	r3, [r4, #0]
 8019296:	4605      	mov	r5, r0
 8019298:	4620      	mov	r0, r4
 801929a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801929c:	4798      	blx	r3
 801929e:	6823      	ldr	r3, [r4, #0]
 80192a0:	4680      	mov	r8, r0
 80192a2:	4620      	mov	r0, r4
 80192a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80192a8:	4798      	blx	r3
 80192aa:	ab09      	add	r3, sp, #36	; 0x24
 80192ac:	9501      	str	r5, [sp, #4]
 80192ae:	9300      	str	r3, [sp, #0]
 80192b0:	ab05      	add	r3, sp, #20
 80192b2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80192b6:	4630      	mov	r0, r6
 80192b8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80192bc:	f7ea fc42 	bl	8003b44 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80192c0:	b00e      	add	sp, #56	; 0x38
 80192c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c6:	bf00      	nop
 80192c8:	20015264 	.word	0x20015264
 80192cc:	2001526c 	.word	0x2001526c
 80192d0:	20015260 	.word	0x20015260
 80192d4:	20015268 	.word	0x20015268
 80192d8:	20015210 	.word	0x20015210

080192dc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80192dc:	b538      	push	{r3, r4, r5, lr}
 80192de:	4b0e      	ldr	r3, [pc, #56]	; (8019318 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80192e0:	4604      	mov	r4, r0
 80192e2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	429a      	cmp	r2, r3
 80192e8:	d214      	bcs.n	8019314 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80192ea:	6803      	ldr	r3, [r0, #0]
 80192ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192ee:	4798      	blx	r3
 80192f0:	6823      	ldr	r3, [r4, #0]
 80192f2:	4605      	mov	r5, r0
 80192f4:	4620      	mov	r0, r4
 80192f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80192f8:	4798      	blx	r3
 80192fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80192fe:	b22d      	sxth	r5, r5
 8019300:	4601      	mov	r1, r0
 8019302:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019306:	bf06      	itte	eq
 8019308:	4602      	moveq	r2, r0
 801930a:	4629      	moveq	r1, r5
 801930c:	462a      	movne	r2, r5
 801930e:	4620      	mov	r0, r4
 8019310:	f7fe f9c6 	bl	80176a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019314:	bd38      	pop	{r3, r4, r5, pc}
 8019316:	bf00      	nop
 8019318:	20015264 	.word	0x20015264

0801931c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801931c:	b530      	push	{r4, r5, lr}
 801931e:	888b      	ldrh	r3, [r1, #4]
 8019320:	b085      	sub	sp, #20
 8019322:	4604      	mov	r4, r0
 8019324:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019326:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801932a:	b923      	cbnz	r3, 8019336 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801932c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019330:	b90b      	cbnz	r3, 8019336 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019332:	f7ff ffd3 	bl	80192dc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019336:	6823      	ldr	r3, [r4, #0]
 8019338:	466d      	mov	r5, sp
 801933a:	4621      	mov	r1, r4
 801933c:	343c      	adds	r4, #60	; 0x3c
 801933e:	4628      	mov	r0, r5
 8019340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019344:	4798      	blx	r3
 8019346:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801934a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801934e:	b005      	add	sp, #20
 8019350:	bd30      	pop	{r4, r5, pc}

08019352 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019352:	2300      	movs	r3, #0
 8019354:	8083      	strh	r3, [r0, #4]
 8019356:	80c3      	strh	r3, [r0, #6]
 8019358:	8003      	strh	r3, [r0, #0]
 801935a:	8043      	strh	r3, [r0, #2]
 801935c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019360:	2bff      	cmp	r3, #255	; 0xff
 8019362:	bf01      	itttt	eq
 8019364:	890b      	ldrheq	r3, [r1, #8]
 8019366:	8083      	strheq	r3, [r0, #4]
 8019368:	894b      	ldrheq	r3, [r1, #10]
 801936a:	80c3      	strheq	r3, [r0, #6]
 801936c:	4770      	bx	lr
	...

08019370 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019372:	4604      	mov	r4, r0
 8019374:	466b      	mov	r3, sp
 8019376:	6808      	ldr	r0, [r1, #0]
 8019378:	6849      	ldr	r1, [r1, #4]
 801937a:	c303      	stmia	r3!, {r0, r1}
 801937c:	6823      	ldr	r3, [r4, #0]
 801937e:	4669      	mov	r1, sp
 8019380:	4620      	mov	r0, r4
 8019382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019384:	4798      	blx	r3
 8019386:	4b08      	ldr	r3, [pc, #32]	; (80193a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801938e:	b10a      	cbz	r2, 8019394 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019390:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019392:	b900      	cbnz	r0, 8019396 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019394:	6898      	ldr	r0, [r3, #8]
 8019396:	6803      	ldr	r3, [r0, #0]
 8019398:	4669      	mov	r1, sp
 801939a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801939c:	6a1d      	ldr	r5, [r3, #32]
 801939e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80193a2:	47a8      	blx	r5
 80193a4:	b003      	add	sp, #12
 80193a6:	bd30      	pop	{r4, r5, pc}
 80193a8:	20015210 	.word	0x20015210

080193ac <_ZN8touchgfx3BoxD1Ev>:
 80193ac:	4770      	bx	lr

080193ae <_ZN8touchgfx3BoxD0Ev>:
 80193ae:	b510      	push	{r4, lr}
 80193b0:	4604      	mov	r4, r0
 80193b2:	212c      	movs	r1, #44	; 0x2c
 80193b4:	f010 f9c8 	bl	8029748 <_ZdlPvj>
 80193b8:	4620      	mov	r0, r4
 80193ba:	bd10      	pop	{r4, pc}

080193bc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80193bc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80193c0:	b12a      	cbz	r2, 80193ce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80193c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80193c6:	b112      	cbz	r2, 80193ce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80193c8:	6803      	ldr	r3, [r0, #0]
 80193ca:	695b      	ldr	r3, [r3, #20]
 80193cc:	4718      	bx	r3
 80193ce:	4770      	bx	lr

080193d0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80193d0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80193d4:	4770      	bx	lr

080193d6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80193d6:	b570      	push	{r4, r5, r6, lr}
 80193d8:	880b      	ldrh	r3, [r1, #0]
 80193da:	4605      	mov	r5, r0
 80193dc:	4604      	mov	r4, r0
 80193de:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80193e0:	8813      	ldrh	r3, [r2, #0]
 80193e2:	f825 3f30 	strh.w	r3, [r5, #48]!
 80193e6:	4628      	mov	r0, r5
 80193e8:	f004 fbac 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80193ec:	4606      	mov	r6, r0
 80193ee:	4628      	mov	r0, r5
 80193f0:	f004 fbdc 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80193f4:	6823      	ldr	r3, [r4, #0]
 80193f6:	4605      	mov	r5, r0
 80193f8:	4631      	mov	r1, r6
 80193fa:	4620      	mov	r0, r4
 80193fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193fe:	4798      	blx	r3
 8019400:	6823      	ldr	r3, [r4, #0]
 8019402:	4629      	mov	r1, r5
 8019404:	4620      	mov	r0, r4
 8019406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801940c:	4718      	bx	r3

0801940e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801940e:	b510      	push	{r4, lr}
 8019410:	4604      	mov	r4, r0
 8019412:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019414:	b150      	cbz	r0, 801942c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019416:	6803      	ldr	r3, [r0, #0]
 8019418:	68db      	ldr	r3, [r3, #12]
 801941a:	4798      	blx	r3
 801941c:	b130      	cbz	r0, 801942c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801941e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019420:	4621      	mov	r1, r4
 8019422:	6803      	ldr	r3, [r0, #0]
 8019424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019428:	689b      	ldr	r3, [r3, #8]
 801942a:	4718      	bx	r3
 801942c:	bd10      	pop	{r4, pc}

0801942e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801942e:	b510      	push	{r4, lr}
 8019430:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019434:	4604      	mov	r4, r0
 8019436:	2bff      	cmp	r3, #255	; 0xff
 8019438:	d006      	beq.n	8019448 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801943a:	2300      	movs	r3, #0
 801943c:	8003      	strh	r3, [r0, #0]
 801943e:	8043      	strh	r3, [r0, #2]
 8019440:	8083      	strh	r3, [r0, #4]
 8019442:	80c3      	strh	r3, [r0, #6]
 8019444:	4620      	mov	r0, r4
 8019446:	bd10      	pop	{r4, pc}
 8019448:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801944c:	b11b      	cbz	r3, 8019456 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801944e:	3130      	adds	r1, #48	; 0x30
 8019450:	f004 fbe0 	bl	801dc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019454:	e7f6      	b.n	8019444 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019456:	312e      	adds	r1, #46	; 0x2e
 8019458:	e7fa      	b.n	8019450 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801945c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019460:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019464:	b08a      	sub	sp, #40	; 0x28
 8019466:	4604      	mov	r4, r0
 8019468:	4688      	mov	r8, r1
 801946a:	2b00      	cmp	r3, #0
 801946c:	d066      	beq.n	801953c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801946e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019470:	a805      	add	r0, sp, #20
 8019472:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019476:	f004 fb65 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801947a:	4607      	mov	r7, r0
 801947c:	a805      	add	r0, sp, #20
 801947e:	f004 fb95 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019482:	f9b8 6000 	ldrsh.w	r6, [r8]
 8019486:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801948a:	2300      	movs	r3, #0
 801948c:	4432      	add	r2, r6
 801948e:	9306      	str	r3, [sp, #24]
 8019490:	b292      	uxth	r2, r2
 8019492:	fa0f fc82 	sxth.w	ip, r2
 8019496:	459c      	cmp	ip, r3
 8019498:	dd52      	ble.n	8019540 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801949a:	42b7      	cmp	r7, r6
 801949c:	dd50      	ble.n	8019540 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801949e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80194a2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80194a6:	442b      	add	r3, r5
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	b219      	sxth	r1, r3
 80194ac:	2900      	cmp	r1, #0
 80194ae:	dd47      	ble.n	8019540 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80194b0:	42a8      	cmp	r0, r5
 80194b2:	dd45      	ble.n	8019540 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80194b4:	4567      	cmp	r7, ip
 80194b6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80194ba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80194be:	bfb8      	it	lt
 80194c0:	b2ba      	uxthlt	r2, r7
 80194c2:	4288      	cmp	r0, r1
 80194c4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80194c8:	bfb8      	it	lt
 80194ca:	b283      	uxthlt	r3, r0
 80194cc:	1b92      	subs	r2, r2, r6
 80194ce:	f8ad 501a 	strh.w	r5, [sp, #26]
 80194d2:	1b5b      	subs	r3, r3, r5
 80194d4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80194d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80194dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80194e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d026      	beq.n	8019536 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80194e8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	dd22      	ble.n	8019536 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80194f0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	dd1e      	ble.n	8019536 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80194f8:	2300      	movs	r3, #0
 80194fa:	a908      	add	r1, sp, #32
 80194fc:	4620      	mov	r0, r4
 80194fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019502:	6823      	ldr	r3, [r4, #0]
 8019504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019506:	4798      	blx	r3
 8019508:	4b0f      	ldr	r3, [pc, #60]	; (8019548 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019510:	b10a      	cbz	r2, 8019516 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8019512:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019514:	b900      	cbnz	r0, 8019518 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8019516:	6898      	ldr	r0, [r3, #8]
 8019518:	2501      	movs	r5, #1
 801951a:	6801      	ldr	r1, [r0, #0]
 801951c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019520:	9502      	str	r5, [sp, #8]
 8019522:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019526:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801952a:	9401      	str	r4, [sp, #4]
 801952c:	ac06      	add	r4, sp, #24
 801952e:	9400      	str	r4, [sp, #0]
 8019530:	688c      	ldr	r4, [r1, #8]
 8019532:	a905      	add	r1, sp, #20
 8019534:	47a0      	blx	r4
 8019536:	b00a      	add	sp, #40	; 0x28
 8019538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801953c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801953e:	e797      	b.n	8019470 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019540:	2300      	movs	r3, #0
 8019542:	9307      	str	r3, [sp, #28]
 8019544:	e7ca      	b.n	80194dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8019546:	bf00      	nop
 8019548:	20015210 	.word	0x20015210

0801954c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801954c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8019550:	b12a      	cbz	r2, 801955e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019552:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019556:	b112      	cbz	r2, 801955e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019558:	6803      	ldr	r3, [r0, #0]
 801955a:	695b      	ldr	r3, [r3, #20]
 801955c:	4718      	bx	r3
 801955e:	4770      	bx	lr

08019560 <_ZN8touchgfx5ImageD1Ev>:
 8019560:	4770      	bx	lr

08019562 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019562:	b570      	push	{r4, r5, r6, lr}
 8019564:	880b      	ldrh	r3, [r1, #0]
 8019566:	460d      	mov	r5, r1
 8019568:	4604      	mov	r4, r0
 801956a:	84c3      	strh	r3, [r0, #38]	; 0x26
 801956c:	4608      	mov	r0, r1
 801956e:	f004 fae9 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019572:	4606      	mov	r6, r0
 8019574:	4628      	mov	r0, r5
 8019576:	f004 fb19 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801957a:	6823      	ldr	r3, [r4, #0]
 801957c:	4605      	mov	r5, r0
 801957e:	4631      	mov	r1, r6
 8019580:	4620      	mov	r0, r4
 8019582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019584:	4798      	blx	r3
 8019586:	6823      	ldr	r3, [r4, #0]
 8019588:	4629      	mov	r1, r5
 801958a:	4620      	mov	r0, r4
 801958c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801958e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019592:	4718      	bx	r3

08019594 <_ZN8touchgfx5ImageD0Ev>:
 8019594:	b510      	push	{r4, lr}
 8019596:	4604      	mov	r4, r0
 8019598:	212c      	movs	r1, #44	; 0x2c
 801959a:	f010 f8d5 	bl	8029748 <_ZdlPvj>
 801959e:	4620      	mov	r0, r4
 80195a0:	bd10      	pop	{r4, pc}

080195a2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80195a2:	b510      	push	{r4, lr}
 80195a4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80195a8:	4604      	mov	r4, r0
 80195aa:	2bff      	cmp	r3, #255	; 0xff
 80195ac:	d006      	beq.n	80195bc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80195ae:	2300      	movs	r3, #0
 80195b0:	8003      	strh	r3, [r0, #0]
 80195b2:	8043      	strh	r3, [r0, #2]
 80195b4:	8083      	strh	r3, [r0, #4]
 80195b6:	80c3      	strh	r3, [r0, #6]
 80195b8:	4620      	mov	r0, r4
 80195ba:	bd10      	pop	{r4, pc}
 80195bc:	3126      	adds	r1, #38	; 0x26
 80195be:	f004 fb29 	bl	801dc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80195c2:	e7f9      	b.n	80195b8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080195c4 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80195c4:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80195c8:	b12a      	cbz	r2, 80195d6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80195ca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80195ce:	b112      	cbz	r2, 80195d6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80195d0:	6803      	ldr	r3, [r0, #0]
 80195d2:	695b      	ldr	r3, [r3, #20]
 80195d4:	4718      	bx	r3
 80195d6:	4770      	bx	lr

080195d8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80195d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195dc:	4604      	mov	r4, r0
 80195de:	b088      	sub	sp, #32
 80195e0:	2500      	movs	r5, #0
 80195e2:	460f      	mov	r7, r1
 80195e4:	f854 3b26 	ldr.w	r3, [r4], #38
 80195e8:	a904      	add	r1, sp, #16
 80195ea:	4606      	mov	r6, r0
 80195ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80195f2:	4798      	blx	r3
 80195f4:	4620      	mov	r0, r4
 80195f6:	f004 faa5 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80195fa:	4680      	mov	r8, r0
 80195fc:	4620      	mov	r0, r4
 80195fe:	f004 fad5 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019602:	9506      	str	r5, [sp, #24]
 8019604:	ad06      	add	r5, sp, #24
 8019606:	f8ad 001e 	strh.w	r0, [sp, #30]
 801960a:	4639      	mov	r1, r7
 801960c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019610:	4628      	mov	r0, r5
 8019612:	f7fd fc2d 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8019616:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801961a:	2b00      	cmp	r3, #0
 801961c:	dd19      	ble.n	8019652 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801961e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019622:	2b00      	cmp	r3, #0
 8019624:	dd15      	ble.n	8019652 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019626:	4b0c      	ldr	r3, [pc, #48]	; (8019658 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801962e:	b10a      	cbz	r2, 8019634 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019630:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019632:	b900      	cbnz	r0, 8019636 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019634:	6898      	ldr	r0, [r3, #8]
 8019636:	2701      	movs	r7, #1
 8019638:	6801      	ldr	r1, [r0, #0]
 801963a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801963e:	9702      	str	r7, [sp, #8]
 8019640:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019644:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019648:	e9cd 5600 	strd	r5, r6, [sp]
 801964c:	688d      	ldr	r5, [r1, #8]
 801964e:	4621      	mov	r1, r4
 8019650:	47a8      	blx	r5
 8019652:	b008      	add	sp, #32
 8019654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019658:	20015210 	.word	0x20015210

0801965c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 801965c:	4770      	bx	lr

0801965e <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801965e:	b510      	push	{r4, lr}
 8019660:	4604      	mov	r4, r0
 8019662:	2148      	movs	r1, #72	; 0x48
 8019664:	f010 f870 	bl	8029748 <_ZdlPvj>
 8019668:	4620      	mov	r0, r4
 801966a:	bd10      	pop	{r4, pc}

0801966c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801966c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019670:	b08d      	sub	sp, #52	; 0x34
 8019672:	4604      	mov	r4, r0
 8019674:	460f      	mov	r7, r1
 8019676:	f7ff fef1 	bl	801945c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801967a:	4a55      	ldr	r2, [pc, #340]	; (80197d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 801967c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801967e:	8812      	ldrh	r2, [r2, #0]
 8019680:	429a      	cmp	r2, r3
 8019682:	f240 8082 	bls.w	801978a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8019686:	4d53      	ldr	r5, [pc, #332]	; (80197d4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8019688:	682a      	ldr	r2, [r5, #0]
 801968a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801968e:	4b52      	ldr	r3, [pc, #328]	; (80197d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019696:	2200      	movs	r2, #0
 8019698:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 801969c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80196a0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80196a4:	2a03      	cmp	r2, #3
 80196a6:	d811      	bhi.n	80196cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80196a8:	e8df f002 	tbb	[pc, r2]
 80196ac:	89727902 	.word	0x89727902
 80196b0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80196b4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80196b8:	1ad2      	subs	r2, r2, r3
 80196ba:	2002      	movs	r0, #2
 80196bc:	f8ad 1010 	strh.w	r1, [sp, #16]
 80196c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80196c4:	fb92 f2f0 	sdiv	r2, r2, r0
 80196c8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80196cc:	f10d 080c 	add.w	r8, sp, #12
 80196d0:	f10d 0914 	add.w	r9, sp, #20
 80196d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80196d8:	e889 0003 	stmia.w	r9, {r0, r1}
 80196dc:	4639      	mov	r1, r7
 80196de:	4648      	mov	r0, r9
 80196e0:	f7fd fbc6 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 80196e4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	dd4e      	ble.n	801978a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80196ec:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	dd4a      	ble.n	801978a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80196f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80196f8:	4641      	mov	r1, r8
 80196fa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80196fe:	4620      	mov	r0, r4
 8019700:	1a9b      	subs	r3, r3, r2
 8019702:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019706:	f8ad 3014 	strh.w	r3, [sp, #20]
 801970a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801970e:	1a9b      	subs	r3, r3, r2
 8019710:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019714:	6823      	ldr	r3, [r4, #0]
 8019716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019718:	4798      	blx	r3
 801971a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801971e:	2b00      	cmp	r3, #0
 8019720:	d053      	beq.n	80197ca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8019722:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019724:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8019726:	682b      	ldr	r3, [r5, #0]
 8019728:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 801972c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019730:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 8019734:	785b      	ldrb	r3, [r3, #1]
 8019736:	9209      	str	r2, [sp, #36]	; 0x24
 8019738:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801973c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019740:	9607      	str	r6, [sp, #28]
 8019742:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019746:	2300      	movs	r3, #0
 8019748:	f88d 5020 	strb.w	r5, [sp, #32]
 801974c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8019750:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019754:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019758:	4b20      	ldr	r3, [pc, #128]	; (80197dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801975a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019764:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019768:	b10a      	cbz	r2, 801976e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801976a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801976c:	b904      	cbnz	r4, 8019770 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 801976e:	689c      	ldr	r4, [r3, #8]
 8019770:	4b1b      	ldr	r3, [pc, #108]	; (80197e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8019772:	6818      	ldr	r0, [r3, #0]
 8019774:	f7ea fa34 	bl	8003be0 <_ZNK8touchgfx5Texts7getTextEt>
 8019778:	ab07      	add	r3, sp, #28
 801977a:	9001      	str	r0, [sp, #4]
 801977c:	4620      	mov	r0, r4
 801977e:	9300      	str	r3, [sp, #0]
 8019780:	464b      	mov	r3, r9
 8019782:	e898 0006 	ldmia.w	r8, {r1, r2}
 8019786:	f7ea f9dd 	bl	8003b44 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801978a:	b00d      	add	sp, #52	; 0x34
 801978c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019790:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8019794:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019798:	1ad2      	subs	r2, r2, r3
 801979a:	3201      	adds	r2, #1
 801979c:	e78d      	b.n	80196ba <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 801979e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80197a2:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80197a6:	1ad2      	subs	r2, r2, r3
 80197a8:	3201      	adds	r2, #1
 80197aa:	2002      	movs	r0, #2
 80197ac:	f8ad 3010 	strh.w	r3, [sp, #16]
 80197b0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80197b4:	fb92 f2f0 	sdiv	r2, r2, r0
 80197b8:	f8ad 200c 	strh.w	r2, [sp, #12]
 80197bc:	e786      	b.n	80196cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80197be:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80197c2:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80197c6:	1ad2      	subs	r2, r2, r3
 80197c8:	e7ef      	b.n	80197aa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80197ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80197cc:	e7aa      	b.n	8019724 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80197ce:	bf00      	nop
 80197d0:	20015264 	.word	0x20015264
 80197d4:	20015260 	.word	0x20015260
 80197d8:	20015268 	.word	0x20015268
 80197dc:	20015210 	.word	0x20015210
 80197e0:	2001526c 	.word	0x2001526c

080197e4 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80197e4:	2101      	movs	r1, #1
 80197e6:	2200      	movs	r2, #0
 80197e8:	b510      	push	{r4, lr}
 80197ea:	4c13      	ldr	r4, [pc, #76]	; (8019838 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80197ec:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80197f0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80197f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80197f8:	6004      	str	r4, [r0, #0]
 80197fa:	4c10      	ldr	r4, [pc, #64]	; (801983c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80197fc:	8082      	strh	r2, [r0, #4]
 80197fe:	80c2      	strh	r2, [r0, #6]
 8019800:	8102      	strh	r2, [r0, #8]
 8019802:	8142      	strh	r2, [r0, #10]
 8019804:	8182      	strh	r2, [r0, #12]
 8019806:	81c2      	strh	r2, [r0, #14]
 8019808:	8202      	strh	r2, [r0, #16]
 801980a:	8242      	strh	r2, [r0, #18]
 801980c:	61c2      	str	r2, [r0, #28]
 801980e:	8402      	strh	r2, [r0, #32]
 8019810:	8442      	strh	r2, [r0, #34]	; 0x22
 8019812:	6282      	str	r2, [r0, #40]	; 0x28
 8019814:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8019818:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801981a:	8601      	strh	r1, [r0, #48]	; 0x30
 801981c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8019820:	6344      	str	r4, [r0, #52]	; 0x34
 8019822:	8701      	strh	r1, [r0, #56]	; 0x38
 8019824:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019828:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 801982c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019830:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8019834:	bd10      	pop	{r4, pc}
 8019836:	bf00      	nop
 8019838:	0802f370 	.word	0x0802f370
 801983c:	0802c604 	.word	0x0802c604

08019840 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019840:	b510      	push	{r4, lr}
 8019842:	6803      	ldr	r3, [r0, #0]
 8019844:	460c      	mov	r4, r1
 8019846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019848:	4798      	blx	r3
 801984a:	1b03      	subs	r3, r0, r4
 801984c:	4258      	negs	r0, r3
 801984e:	4158      	adcs	r0, r3
 8019850:	bd10      	pop	{r4, pc}
	...

08019854 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019854:	4b01      	ldr	r3, [pc, #4]	; (801985c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019856:	6019      	str	r1, [r3, #0]
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop
 801985c:	20015218 	.word	0x20015218

08019860 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019864:	4696      	mov	lr, r2
 8019866:	b097      	sub	sp, #92	; 0x5c
 8019868:	4605      	mov	r5, r0
 801986a:	4614      	mov	r4, r2
 801986c:	460e      	mov	r6, r1
 801986e:	461f      	mov	r7, r3
 8019870:	f10d 0c1c 	add.w	ip, sp, #28
 8019874:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019878:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801987c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019888:	f8de 3000 	ldr.w	r3, [lr]
 801988c:	f104 0e14 	add.w	lr, r4, #20
 8019890:	f8cc 3000 	str.w	r3, [ip]
 8019894:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019898:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801989c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198a0:	f8de 3000 	ldr.w	r3, [lr]
 80198a4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80198a8:	f8cc 3000 	str.w	r3, [ip]
 80198ac:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80198b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80198b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198b8:	f8de 3000 	ldr.w	r3, [lr]
 80198bc:	4631      	mov	r1, r6
 80198be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80198c0:	4628      	mov	r0, r5
 80198c2:	f8cc 3000 	str.w	r3, [ip]
 80198c6:	682b      	ldr	r3, [r5, #0]
 80198c8:	9201      	str	r2, [sp, #4]
 80198ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80198cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80198d0:	9200      	str	r2, [sp, #0]
 80198d2:	aa07      	add	r2, sp, #28
 80198d4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80198d8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80198dc:	463b      	mov	r3, r7
 80198de:	47d8      	blx	fp
 80198e0:	46a6      	mov	lr, r4
 80198e2:	f10d 0c1c 	add.w	ip, sp, #28
 80198e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80198ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198ee:	f8de 3000 	ldr.w	r3, [lr]
 80198f2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80198f6:	343c      	adds	r4, #60	; 0x3c
 80198f8:	f8cc 3000 	str.w	r3, [ip]
 80198fc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019900:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019908:	f8de 3000 	ldr.w	r3, [lr]
 801990c:	f8cc 3000 	str.w	r3, [ip]
 8019910:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019916:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801991a:	6823      	ldr	r3, [r4, #0]
 801991c:	4631      	mov	r1, r6
 801991e:	4628      	mov	r0, r5
 8019920:	f8cc 3000 	str.w	r3, [ip]
 8019924:	682b      	ldr	r3, [r5, #0]
 8019926:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801992a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801992c:	f8cd 8008 	str.w	r8, [sp, #8]
 8019930:	9201      	str	r2, [sp, #4]
 8019932:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019934:	9200      	str	r2, [sp, #0]
 8019936:	aa07      	add	r2, sp, #28
 8019938:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801993a:	463b      	mov	r3, r7
 801993c:	47a0      	blx	r4
 801993e:	b017      	add	sp, #92	; 0x5c
 8019940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019944 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019948:	b08d      	sub	sp, #52	; 0x34
 801994a:	4688      	mov	r8, r1
 801994c:	f8d3 c000 	ldr.w	ip, [r3]
 8019950:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019952:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019956:	680f      	ldr	r7, [r1, #0]
 8019958:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801995c:	eba7 070c 	sub.w	r7, r7, ip
 8019960:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019964:	edd3 6a07 	vldr	s13, [r3, #28]
 8019968:	42bc      	cmp	r4, r7
 801996a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801996c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019970:	bfa8      	it	ge
 8019972:	463c      	movge	r4, r7
 8019974:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019978:	f9ba 1000 	ldrsh.w	r1, [sl]
 801997c:	ee07 4a90 	vmov	s15, r4
 8019980:	eb09 0e0c 	add.w	lr, r9, ip
 8019984:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019988:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801998c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019990:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019994:	4571      	cmp	r1, lr
 8019996:	ee25 4a04 	vmul.f32	s8, s10, s8
 801999a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801999e:	ee25 5a27 	vmul.f32	s10, s10, s15
 80199a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80199a6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80199aa:	ee32 1a05 	vadd.f32	s2, s4, s10
 80199ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80199b2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80199b6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80199ba:	ee22 2a07 	vmul.f32	s4, s4, s14
 80199be:	f340 808c 	ble.w	8019ada <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80199c2:	eba1 060e 	sub.w	r6, r1, lr
 80199c6:	fb96 f5f4 	sdiv	r5, r6, r4
 80199ca:	ee07 5a10 	vmov	s14, r5
 80199ce:	2d00      	cmp	r5, #0
 80199d0:	fb04 6615 	mls	r6, r4, r5, r6
 80199d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199d8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80199dc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80199e0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80199e4:	dd12      	ble.n	8019a0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80199e6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80199ea:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80199ee:	ee31 2a45 	vsub.f32	s4, s2, s10
 80199f2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80199f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199fa:	bf14      	ite	ne
 80199fc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019a00:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019a04:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019a08:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019a0c:	fb05 f204 	mul.w	r2, r5, r4
 8019a10:	1abf      	subs	r7, r7, r2
 8019a12:	4494      	add	ip, r2
 8019a14:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019a18:	4411      	add	r1, r2
 8019a1a:	eb09 020c 	add.w	r2, r9, ip
 8019a1e:	b209      	sxth	r1, r1
 8019a20:	443a      	add	r2, r7
 8019a22:	428a      	cmp	r2, r1
 8019a24:	bfc4      	itt	gt
 8019a26:	eba1 0209 	subgt.w	r2, r1, r9
 8019a2a:	eba2 070c 	subgt.w	r7, r2, ip
 8019a2e:	2f00      	cmp	r7, #0
 8019a30:	dd50      	ble.n	8019ad4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019a32:	fb97 f1f4 	sdiv	r1, r7, r4
 8019a36:	fb04 7211 	mls	r2, r4, r1, r7
 8019a3a:	b90a      	cbnz	r2, 8019a40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019a3c:	3901      	subs	r1, #1
 8019a3e:	4622      	mov	r2, r4
 8019a40:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019a44:	6840      	ldr	r0, [r0, #4]
 8019a46:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019a4a:	44b6      	add	lr, r6
 8019a4c:	f8d0 a000 	ldr.w	sl, [r0]
 8019a50:	2900      	cmp	r1, #0
 8019a52:	bfcc      	ite	gt
 8019a54:	46a1      	movgt	r9, r4
 8019a56:	4691      	movle	r9, r2
 8019a58:	900b      	str	r0, [sp, #44]	; 0x2c
 8019a5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019a5c:	fb04 e505 	mla	r5, r4, r5, lr
 8019a60:	eef0 6a42 	vmov.f32	s13, s4
 8019a64:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019a68:	9008      	str	r0, [sp, #32]
 8019a6a:	eeb0 7a61 	vmov.f32	s14, s3
 8019a6e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019a70:	695b      	ldr	r3, [r3, #20]
 8019a72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a76:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019a7a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019a7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019a80:	445b      	add	r3, fp
 8019a82:	9307      	str	r3, [sp, #28]
 8019a84:	ee16 3a90 	vmov	r3, s13
 8019a88:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019a8c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019a90:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019a94:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019a98:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019a9c:	ee17 7a90 	vmov	r7, s15
 8019aa0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019aa4:	fb97 f7f4 	sdiv	r7, r7, r4
 8019aa8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019aac:	ee17 ca90 	vmov	ip, s15
 8019ab0:	fb9c fcf4 	sdiv	ip, ip, r4
 8019ab4:	fb0c 3306 	mla	r3, ip, r6, r3
 8019ab8:	9302      	str	r3, [sp, #8]
 8019aba:	ee17 3a10 	vmov	r3, s14
 8019abe:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019ac2:	fb07 3706 	mla	r7, r7, r6, r3
 8019ac6:	eba9 0306 	sub.w	r3, r9, r6
 8019aca:	e9cd 4700 	strd	r4, r7, [sp]
 8019ace:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019ad2:	47a0      	blx	r4
 8019ad4:	b00d      	add	sp, #52	; 0x34
 8019ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ada:	2500      	movs	r5, #0
 8019adc:	462e      	mov	r6, r5
 8019ade:	e799      	b.n	8019a14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae4:	b0db      	sub	sp, #364	; 0x16c
 8019ae6:	461d      	mov	r5, r3
 8019ae8:	4614      	mov	r4, r2
 8019aea:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019aee:	910f      	str	r1, [sp, #60]	; 0x3c
 8019af0:	4629      	mov	r1, r5
 8019af2:	930a      	str	r3, [sp, #40]	; 0x28
 8019af4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019af8:	9009      	str	r0, [sp, #36]	; 0x24
 8019afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8019afc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019b00:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8019b04:	9310      	str	r3, [sp, #64]	; 0x40
 8019b06:	6803      	ldr	r3, [r0, #0]
 8019b08:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8019b0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019b0e:	47b8      	blx	r7
 8019b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b12:	6058      	str	r0, [r3, #4]
 8019b14:	2800      	cmp	r0, #0
 8019b16:	f000 83a1 	beq.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b1a:	682b      	ldr	r3, [r5, #0]
 8019b1c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019b20:	ed94 7a02 	vldr	s14, [r4, #8]
 8019b24:	9314      	str	r3, [sp, #80]	; 0x50
 8019b26:	686b      	ldr	r3, [r5, #4]
 8019b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019b2c:	9315      	str	r3, [sp, #84]	; 0x54
 8019b2e:	4bc1      	ldr	r3, [pc, #772]	; (8019e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019b30:	7819      	ldrb	r1, [r3, #0]
 8019b32:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019b36:	2900      	cmp	r1, #0
 8019b38:	bf16      	itet	ne
 8019b3a:	4619      	movne	r1, r3
 8019b3c:	4611      	moveq	r1, r2
 8019b3e:	4613      	movne	r3, r2
 8019b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b44:	9116      	str	r1, [sp, #88]	; 0x58
 8019b46:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019b4a:	f240 8387 	bls.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b4e:	ed94 7a07 	vldr	s14, [r4, #28]
 8019b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b5a:	f240 837f 	bls.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b5e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b6a:	f240 8377 	bls.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b6e:	6822      	ldr	r2, [r4, #0]
 8019b70:	4bb1      	ldr	r3, [pc, #708]	; (8019e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019b72:	429a      	cmp	r2, r3
 8019b74:	f2c0 8372 	blt.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b78:	49b0      	ldr	r1, [pc, #704]	; (8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019b7a:	6963      	ldr	r3, [r4, #20]
 8019b7c:	428a      	cmp	r2, r1
 8019b7e:	f300 836d 	bgt.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b82:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019b86:	48ae      	ldr	r0, [pc, #696]	; (8019e40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019b88:	33ff      	adds	r3, #255	; 0xff
 8019b8a:	4283      	cmp	r3, r0
 8019b8c:	f200 8366 	bhi.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019b92:	4dac      	ldr	r5, [pc, #688]	; (8019e44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019b94:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019b98:	33ff      	adds	r3, #255	; 0xff
 8019b9a:	42ab      	cmp	r3, r5
 8019b9c:	f200 835e 	bhi.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ba0:	6862      	ldr	r2, [r4, #4]
 8019ba2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8019ba6:	33ff      	adds	r3, #255	; 0xff
 8019ba8:	4283      	cmp	r3, r0
 8019baa:	f200 8357 	bhi.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019bae:	69a1      	ldr	r1, [r4, #24]
 8019bb0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019bb4:	33ff      	adds	r3, #255	; 0xff
 8019bb6:	4283      	cmp	r3, r0
 8019bb8:	f200 8350 	bhi.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019bbe:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019bc2:	30ff      	adds	r0, #255	; 0xff
 8019bc4:	42a8      	cmp	r0, r5
 8019bc6:	f200 8349 	bhi.w	801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019bca:	428a      	cmp	r2, r1
 8019bcc:	f280 8110 	bge.w	8019df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	f300 8119 	bgt.w	8019e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019bd6:	4299      	cmp	r1, r3
 8019bd8:	f280 811d 	bge.w	8019e16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019bdc:	2502      	movs	r5, #2
 8019bde:	2701      	movs	r7, #1
 8019be0:	46a9      	mov	r9, r5
 8019be2:	46b8      	mov	r8, r7
 8019be4:	f04f 0a00 	mov.w	sl, #0
 8019be8:	4621      	mov	r1, r4
 8019bea:	a849      	add	r0, sp, #292	; 0x124
 8019bec:	f003 fce2 	bl	801d5b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019bf0:	4622      	mov	r2, r4
 8019bf2:	4653      	mov	r3, sl
 8019bf4:	a949      	add	r1, sp, #292	; 0x124
 8019bf6:	f8cd 9000 	str.w	r9, [sp]
 8019bfa:	a819      	add	r0, sp, #100	; 0x64
 8019bfc:	f003 fe0a 	bl	801d814 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019c00:	4622      	mov	r2, r4
 8019c02:	4653      	mov	r3, sl
 8019c04:	a949      	add	r1, sp, #292	; 0x124
 8019c06:	f8cd 8000 	str.w	r8, [sp]
 8019c0a:	a829      	add	r0, sp, #164	; 0xa4
 8019c0c:	f003 fe02 	bl	801d814 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019c10:	4643      	mov	r3, r8
 8019c12:	4622      	mov	r2, r4
 8019c14:	a949      	add	r1, sp, #292	; 0x124
 8019c16:	f8cd 9000 	str.w	r9, [sp]
 8019c1a:	a839      	add	r0, sp, #228	; 0xe4
 8019c1c:	f003 fdfa 	bl	801d814 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019c20:	42af      	cmp	r7, r5
 8019c22:	af12      	add	r7, sp, #72	; 0x48
 8019c24:	bfb7      	itett	lt
 8019c26:	2300      	movlt	r3, #0
 8019c28:	2301      	movge	r3, #1
 8019c2a:	ad29      	addlt	r5, sp, #164	; 0xa4
 8019c2c:	ac19      	addlt	r4, sp, #100	; 0x64
 8019c2e:	bfb1      	iteee	lt
 8019c30:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019c32:	ad19      	addge	r5, sp, #100	; 0x64
 8019c34:	930e      	strge	r3, [sp, #56]	; 0x38
 8019c36:	ac29      	addge	r4, sp, #164	; 0xa4
 8019c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c3e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019c42:	b928      	cbnz	r0, 8019c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019c44:	4b80      	ldr	r3, [pc, #512]	; (8019e48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019c46:	6818      	ldr	r0, [r3, #0]
 8019c48:	6803      	ldr	r3, [r0, #0]
 8019c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c4c:	4798      	blx	r3
 8019c4e:	6038      	str	r0, [r7, #0]
 8019c50:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019c52:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019c56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c5a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8019c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019c60:	6963      	ldr	r3, [r4, #20]
 8019c62:	440b      	add	r3, r1
 8019c64:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019c68:	4408      	add	r0, r1
 8019c6a:	b200      	sxth	r0, r0
 8019c6c:	4283      	cmp	r3, r0
 8019c6e:	900d      	str	r0, [sp, #52]	; 0x34
 8019c70:	f280 80dd 	bge.w	8019e2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019c74:	428b      	cmp	r3, r1
 8019c76:	da08      	bge.n	8019c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019c78:	2a00      	cmp	r2, #0
 8019c7a:	dd06      	ble.n	8019c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019c7c:	1acb      	subs	r3, r1, r3
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	f2c0 80e4 	blt.w	8019e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	f300 80e2 	bgt.w	8019e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019c8a:	6967      	ldr	r7, [r4, #20]
 8019c8c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c92:	443b      	add	r3, r7
 8019c94:	461f      	mov	r7, r3
 8019c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c98:	1bdf      	subs	r7, r3, r7
 8019c9a:	4297      	cmp	r7, r2
 8019c9c:	bfa8      	it	ge
 8019c9e:	4617      	movge	r7, r2
 8019ca0:	2f00      	cmp	r7, #0
 8019ca2:	f340 8166 	ble.w	8019f72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019ca6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019ca8:	6829      	ldr	r1, [r5, #0]
 8019caa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019cae:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019cb2:	4411      	add	r1, r2
 8019cb4:	6820      	ldr	r0, [r4, #0]
 8019cb6:	4299      	cmp	r1, r3
 8019cb8:	dd1a      	ble.n	8019cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019cba:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019cbe:	4402      	add	r2, r0
 8019cc0:	440b      	add	r3, r1
 8019cc2:	b21b      	sxth	r3, r3
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	dc13      	bgt.n	8019cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019cc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019cca:	a912      	add	r1, sp, #72	; 0x48
 8019ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	9206      	str	r2, [sp, #24]
 8019cd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019cd6:	9500      	str	r5, [sp, #0]
 8019cd8:	9205      	str	r2, [sp, #20]
 8019cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cdc:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019ce0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019ce2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019ce6:	aa49      	add	r2, sp, #292	; 0x124
 8019ce8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8019cec:	4623      	mov	r3, r4
 8019cee:	47c8      	blx	r9
 8019cf0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019cf4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019cf8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d00:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019d04:	68a1      	ldr	r1, [r4, #8]
 8019d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d0a:	ed94 6a08 	vldr	s12, [r4, #32]
 8019d0e:	edd4 6a07 	vldr	s13, [r4, #28]
 8019d12:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019d16:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019d1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019d1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019d22:	edc4 6a07 	vstr	s13, [r4, #28]
 8019d26:	441a      	add	r2, r3
 8019d28:	6963      	ldr	r3, [r4, #20]
 8019d2a:	3301      	adds	r3, #1
 8019d2c:	6022      	str	r2, [r4, #0]
 8019d2e:	6163      	str	r3, [r4, #20]
 8019d30:	69a3      	ldr	r3, [r4, #24]
 8019d32:	3b01      	subs	r3, #1
 8019d34:	61a3      	str	r3, [r4, #24]
 8019d36:	6923      	ldr	r3, [r4, #16]
 8019d38:	440b      	add	r3, r1
 8019d3a:	68e1      	ldr	r1, [r4, #12]
 8019d3c:	428b      	cmp	r3, r1
 8019d3e:	6123      	str	r3, [r4, #16]
 8019d40:	db15      	blt.n	8019d6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019d42:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019d46:	3201      	adds	r2, #1
 8019d48:	1a5b      	subs	r3, r3, r1
 8019d4a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019d4e:	6022      	str	r2, [r4, #0]
 8019d50:	6123      	str	r3, [r4, #16]
 8019d52:	edc4 6a07 	vstr	s13, [r4, #28]
 8019d56:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019d5a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019d5e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019d62:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d6a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019d6e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019d72:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019d76:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d7e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019d82:	68a9      	ldr	r1, [r5, #8]
 8019d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d88:	ed95 6a08 	vldr	s12, [r5, #32]
 8019d8c:	edd5 6a07 	vldr	s13, [r5, #28]
 8019d90:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019d94:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019d98:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019d9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019da0:	edc5 6a07 	vstr	s13, [r5, #28]
 8019da4:	441a      	add	r2, r3
 8019da6:	696b      	ldr	r3, [r5, #20]
 8019da8:	3301      	adds	r3, #1
 8019daa:	602a      	str	r2, [r5, #0]
 8019dac:	616b      	str	r3, [r5, #20]
 8019dae:	69ab      	ldr	r3, [r5, #24]
 8019db0:	3b01      	subs	r3, #1
 8019db2:	61ab      	str	r3, [r5, #24]
 8019db4:	692b      	ldr	r3, [r5, #16]
 8019db6:	440b      	add	r3, r1
 8019db8:	68e9      	ldr	r1, [r5, #12]
 8019dba:	428b      	cmp	r3, r1
 8019dbc:	612b      	str	r3, [r5, #16]
 8019dbe:	db15      	blt.n	8019dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019dc0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019dc4:	3201      	adds	r2, #1
 8019dc6:	1a5b      	subs	r3, r3, r1
 8019dc8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019dcc:	602a      	str	r2, [r5, #0]
 8019dce:	612b      	str	r3, [r5, #16]
 8019dd0:	edc5 6a07 	vstr	s13, [r5, #28]
 8019dd4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019dd8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ddc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019de0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019de8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019dec:	3f01      	subs	r7, #1
 8019dee:	e757      	b.n	8019ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019df0:	4299      	cmp	r1, r3
 8019df2:	dc13      	bgt.n	8019e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019df4:	429a      	cmp	r2, r3
 8019df6:	da14      	bge.n	8019e22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019df8:	2502      	movs	r5, #2
 8019dfa:	2703      	movs	r7, #3
 8019dfc:	f04f 0800 	mov.w	r8, #0
 8019e00:	46a9      	mov	r9, r5
 8019e02:	f04f 0a01 	mov.w	sl, #1
 8019e06:	e6ef      	b.n	8019be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019e08:	2501      	movs	r5, #1
 8019e0a:	2700      	movs	r7, #0
 8019e0c:	46a9      	mov	r9, r5
 8019e0e:	46b8      	mov	r8, r7
 8019e10:	f04f 0a02 	mov.w	sl, #2
 8019e14:	e6e8      	b.n	8019be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019e16:	2501      	movs	r5, #1
 8019e18:	2702      	movs	r7, #2
 8019e1a:	e6e1      	b.n	8019be0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019e1c:	2500      	movs	r5, #0
 8019e1e:	2701      	movs	r7, #1
 8019e20:	e7f4      	b.n	8019e0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019e22:	2702      	movs	r7, #2
 8019e24:	2503      	movs	r5, #3
 8019e26:	f04f 0900 	mov.w	r9, #0
 8019e2a:	46b8      	mov	r8, r7
 8019e2c:	e7e9      	b.n	8019e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019e2e:	4613      	mov	r3, r2
 8019e30:	e728      	b.n	8019c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019e32:	bf00      	nop
 8019e34:	20015208 	.word	0x20015208
 8019e38:	fffd8f01 	.word	0xfffd8f01
 8019e3c:	00027100 	.word	0x00027100
 8019e40:	0004e1ff 	.word	0x0004e1ff
 8019e44:	0004e1fe 	.word	0x0004e1fe
 8019e48:	20015210 	.word	0x20015210
 8019e4c:	4613      	mov	r3, r2
 8019e4e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019e50:	469e      	mov	lr, r3
 8019e52:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019e54:	469c      	mov	ip, r3
 8019e56:	9111      	str	r1, [sp, #68]	; 0x44
 8019e58:	f04f 0900 	mov.w	r9, #0
 8019e5c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019e60:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019e64:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019e68:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019e6c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019e70:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019e74:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019e78:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019e7c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019e80:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019e84:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019e88:	f1bc 0f00 	cmp.w	ip, #0
 8019e8c:	d147      	bne.n	8019f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019e8e:	eb03 0c07 	add.w	ip, r3, r7
 8019e92:	1ad7      	subs	r7, r2, r3
 8019e94:	f1b9 0f00 	cmp.w	r9, #0
 8019e98:	d009      	beq.n	8019eae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019e9a:	9029      	str	r0, [sp, #164]	; 0xa4
 8019e9c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019ea0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019ea4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019ea8:	912d      	str	r1, [sp, #180]	; 0xb4
 8019eaa:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019eae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019eb0:	f04f 0800 	mov.w	r8, #0
 8019eb4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019eb8:	9111      	str	r1, [sp, #68]	; 0x44
 8019eba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019ebe:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019ec2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019ec6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019eca:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019ece:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019ed2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019ed6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019eda:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019ede:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019ee2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019ee6:	f1be 0f00 	cmp.w	lr, #0
 8019eea:	d031      	beq.n	8019f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019eec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019eee:	4450      	add	r0, sl
 8019ef0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019ef4:	4431      	add	r1, r6
 8019ef6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019efa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019efe:	4549      	cmp	r1, r9
 8019f00:	db08      	blt.n	8019f14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019f02:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019f06:	3001      	adds	r0, #1
 8019f08:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019f0c:	eba1 0109 	sub.w	r1, r1, r9
 8019f10:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019f14:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019f18:	f04f 0801 	mov.w	r8, #1
 8019f1c:	e7e3      	b.n	8019ee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019f1e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019f20:	4450      	add	r0, sl
 8019f22:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019f26:	4431      	add	r1, r6
 8019f28:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019f2c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019f30:	4541      	cmp	r1, r8
 8019f32:	db08      	blt.n	8019f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019f34:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019f38:	3001      	adds	r0, #1
 8019f3a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019f3e:	eba1 0108 	sub.w	r1, r1, r8
 8019f42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019f46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019f4a:	f04f 0901 	mov.w	r9, #1
 8019f4e:	e79b      	b.n	8019e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019f50:	449c      	add	ip, r3
 8019f52:	1aff      	subs	r7, r7, r3
 8019f54:	f1b8 0f00 	cmp.w	r8, #0
 8019f58:	d009      	beq.n	8019f6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019f5a:	9019      	str	r0, [sp, #100]	; 0x64
 8019f5c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019f60:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019f64:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019f68:	911d      	str	r1, [sp, #116]	; 0x74
 8019f6a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019f6e:	1ad2      	subs	r2, r2, r3
 8019f70:	e68b      	b.n	8019c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f74:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	f000 80d1 	beq.w	801a11e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019f7c:	ad19      	add	r5, sp, #100	; 0x64
 8019f7e:	ac39      	add	r4, sp, #228	; 0xe4
 8019f80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019f82:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019f86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8019f8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019f8e:	6963      	ldr	r3, [r4, #20]
 8019f90:	440b      	add	r3, r1
 8019f92:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019f96:	4408      	add	r0, r1
 8019f98:	b200      	sxth	r0, r0
 8019f9a:	4283      	cmp	r3, r0
 8019f9c:	900d      	str	r0, [sp, #52]	; 0x34
 8019f9e:	f280 80c1 	bge.w	801a124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019fa2:	428b      	cmp	r3, r1
 8019fa4:	da08      	bge.n	8019fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019fa6:	2a00      	cmp	r2, #0
 8019fa8:	dd06      	ble.n	8019fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019faa:	1acb      	subs	r3, r1, r3
 8019fac:	429a      	cmp	r2, r3
 8019fae:	f2c0 80bb 	blt.w	801a128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	f300 80b9 	bgt.w	801a12a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019fb8:	6967      	ldr	r7, [r4, #20]
 8019fba:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fc0:	443b      	add	r3, r7
 8019fc2:	461f      	mov	r7, r3
 8019fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fc6:	1bdf      	subs	r7, r3, r7
 8019fc8:	4297      	cmp	r7, r2
 8019fca:	bfa8      	it	ge
 8019fcc:	4617      	movge	r7, r2
 8019fce:	2f00      	cmp	r7, #0
 8019fd0:	f340 813c 	ble.w	801a24c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019fd4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019fd6:	6829      	ldr	r1, [r5, #0]
 8019fd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fdc:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019fe0:	4411      	add	r1, r2
 8019fe2:	6820      	ldr	r0, [r4, #0]
 8019fe4:	4299      	cmp	r1, r3
 8019fe6:	dd1a      	ble.n	801a01e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019fe8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019fec:	4402      	add	r2, r0
 8019fee:	440b      	add	r3, r1
 8019ff0:	b21b      	sxth	r3, r3
 8019ff2:	429a      	cmp	r2, r3
 8019ff4:	dc13      	bgt.n	801a01e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019ff8:	a912      	add	r1, sp, #72	; 0x48
 8019ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	9206      	str	r2, [sp, #24]
 801a002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a004:	9500      	str	r5, [sp, #0]
 801a006:	9205      	str	r2, [sp, #20]
 801a008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a00a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a00e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a010:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a014:	aa49      	add	r2, sp, #292	; 0x124
 801a016:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a01a:	4623      	mov	r3, r4
 801a01c:	47c8      	blx	r9
 801a01e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a022:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a026:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a02a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a02e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a032:	68a1      	ldr	r1, [r4, #8]
 801a034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a038:	ed94 6a08 	vldr	s12, [r4, #32]
 801a03c:	edd4 6a07 	vldr	s13, [r4, #28]
 801a040:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a044:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a048:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a04c:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a050:	edc4 6a07 	vstr	s13, [r4, #28]
 801a054:	441a      	add	r2, r3
 801a056:	6963      	ldr	r3, [r4, #20]
 801a058:	3301      	adds	r3, #1
 801a05a:	6022      	str	r2, [r4, #0]
 801a05c:	6163      	str	r3, [r4, #20]
 801a05e:	69a3      	ldr	r3, [r4, #24]
 801a060:	3b01      	subs	r3, #1
 801a062:	61a3      	str	r3, [r4, #24]
 801a064:	6923      	ldr	r3, [r4, #16]
 801a066:	440b      	add	r3, r1
 801a068:	68e1      	ldr	r1, [r4, #12]
 801a06a:	428b      	cmp	r3, r1
 801a06c:	6123      	str	r3, [r4, #16]
 801a06e:	db15      	blt.n	801a09c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a070:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a074:	3201      	adds	r2, #1
 801a076:	1a5b      	subs	r3, r3, r1
 801a078:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a07c:	6022      	str	r2, [r4, #0]
 801a07e:	6123      	str	r3, [r4, #16]
 801a080:	edc4 6a07 	vstr	s13, [r4, #28]
 801a084:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a088:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a08c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a090:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a094:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a098:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a09c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a0a0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a0a4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a0a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a0ac:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a0b0:	68a9      	ldr	r1, [r5, #8]
 801a0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a0b6:	ed95 6a08 	vldr	s12, [r5, #32]
 801a0ba:	edd5 6a07 	vldr	s13, [r5, #28]
 801a0be:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a0c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a0c6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a0ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a0ce:	edc5 6a07 	vstr	s13, [r5, #28]
 801a0d2:	441a      	add	r2, r3
 801a0d4:	696b      	ldr	r3, [r5, #20]
 801a0d6:	3301      	adds	r3, #1
 801a0d8:	602a      	str	r2, [r5, #0]
 801a0da:	616b      	str	r3, [r5, #20]
 801a0dc:	69ab      	ldr	r3, [r5, #24]
 801a0de:	3b01      	subs	r3, #1
 801a0e0:	61ab      	str	r3, [r5, #24]
 801a0e2:	692b      	ldr	r3, [r5, #16]
 801a0e4:	440b      	add	r3, r1
 801a0e6:	68e9      	ldr	r1, [r5, #12]
 801a0e8:	428b      	cmp	r3, r1
 801a0ea:	612b      	str	r3, [r5, #16]
 801a0ec:	db15      	blt.n	801a11a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a0ee:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a0f2:	3201      	adds	r2, #1
 801a0f4:	1a5b      	subs	r3, r3, r1
 801a0f6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a0fa:	602a      	str	r2, [r5, #0]
 801a0fc:	612b      	str	r3, [r5, #16]
 801a0fe:	edc5 6a07 	vstr	s13, [r5, #28]
 801a102:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a106:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a10a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a10e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a112:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a116:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a11a:	3f01      	subs	r7, #1
 801a11c:	e757      	b.n	8019fce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a11e:	ad39      	add	r5, sp, #228	; 0xe4
 801a120:	ac19      	add	r4, sp, #100	; 0x64
 801a122:	e72d      	b.n	8019f80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a124:	4613      	mov	r3, r2
 801a126:	e744      	b.n	8019fb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a128:	4613      	mov	r3, r2
 801a12a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801a12c:	469e      	mov	lr, r3
 801a12e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801a132:	461f      	mov	r7, r3
 801a134:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801a138:	f04f 0900 	mov.w	r9, #0
 801a13c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801a140:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801a144:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801a148:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801a14c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801a150:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801a152:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801a156:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801a15a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801a15e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801a162:	960e      	str	r6, [sp, #56]	; 0x38
 801a164:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801a168:	2f00      	cmp	r7, #0
 801a16a:	d146      	bne.n	801a1fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a16c:	449c      	add	ip, r3
 801a16e:	1ad7      	subs	r7, r2, r3
 801a170:	f1b9 0f00 	cmp.w	r9, #0
 801a174:	d009      	beq.n	801a18a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a176:	9039      	str	r0, [sp, #228]	; 0xe4
 801a178:	913d      	str	r1, [sp, #244]	; 0xf4
 801a17a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801a17e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801a182:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801a186:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801a18a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a18c:	f04f 0800 	mov.w	r8, #0
 801a190:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a194:	910e      	str	r1, [sp, #56]	; 0x38
 801a196:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a19a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a19e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a1a2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a1a6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a1aa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a1ae:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a1b2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a1b6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a1ba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a1be:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a1c2:	f1be 0f00 	cmp.w	lr, #0
 801a1c6:	d030      	beq.n	801a22a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a1c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a1ca:	4450      	add	r0, sl
 801a1cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a1d0:	4431      	add	r1, r6
 801a1d2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a1d6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a1da:	4549      	cmp	r1, r9
 801a1dc:	db08      	blt.n	801a1f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a1de:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a1e8:	eba1 0109 	sub.w	r1, r1, r9
 801a1ec:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a1f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a1f4:	f04f 0801 	mov.w	r8, #1
 801a1f8:	e7e3      	b.n	801a1c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a1fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a1fc:	4450      	add	r0, sl
 801a1fe:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a202:	4431      	add	r1, r6
 801a204:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a208:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a20c:	4541      	cmp	r1, r8
 801a20e:	db08      	blt.n	801a222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a210:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a214:	3001      	adds	r0, #1
 801a216:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a21a:	eba1 0108 	sub.w	r1, r1, r8
 801a21e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a222:	3f01      	subs	r7, #1
 801a224:	f04f 0901 	mov.w	r9, #1
 801a228:	e79e      	b.n	801a168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a22a:	449c      	add	ip, r3
 801a22c:	1aff      	subs	r7, r7, r3
 801a22e:	f1b8 0f00 	cmp.w	r8, #0
 801a232:	d009      	beq.n	801a248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a234:	9019      	str	r0, [sp, #100]	; 0x64
 801a236:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a23a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a23e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a242:	911d      	str	r1, [sp, #116]	; 0x74
 801a244:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a248:	1ad2      	subs	r2, r2, r3
 801a24a:	e6b5      	b.n	8019fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a24c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	b923      	cbnz	r3, 801a25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a252:	4b04      	ldr	r3, [pc, #16]	; (801a264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a254:	6818      	ldr	r0, [r3, #0]
 801a256:	6803      	ldr	r3, [r0, #0]
 801a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a25a:	4798      	blx	r3
 801a25c:	b05b      	add	sp, #364	; 0x16c
 801a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a262:	bf00      	nop
 801a264:	20015210 	.word	0x20015210

0801a268 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801a268:	b570      	push	{r4, r5, r6, lr}
 801a26a:	4604      	mov	r4, r0
 801a26c:	2500      	movs	r5, #0
 801a26e:	9805      	ldr	r0, [sp, #20]
 801a270:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801a274:	6061      	str	r1, [r4, #4]
 801a276:	8263      	strh	r3, [r4, #18]
 801a278:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801a27c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a280:	8025      	strh	r5, [r4, #0]
 801a282:	7221      	strb	r1, [r4, #8]
 801a284:	7266      	strb	r6, [r4, #9]
 801a286:	60e0      	str	r0, [r4, #12]
 801a288:	8222      	strh	r2, [r4, #16]
 801a28a:	82a3      	strh	r3, [r4, #20]
 801a28c:	82e5      	strh	r5, [r4, #22]
 801a28e:	8325      	strh	r5, [r4, #24]
 801a290:	8365      	strh	r5, [r4, #26]
 801a292:	83a5      	strh	r5, [r4, #28]
 801a294:	83e5      	strh	r5, [r4, #30]
 801a296:	8425      	strh	r5, [r4, #32]
 801a298:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801a29c:	b32e      	cbz	r6, 801a2ea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a29e:	6803      	ldr	r3, [r0, #0]
 801a2a0:	695b      	ldr	r3, [r3, #20]
 801a2a2:	4798      	blx	r3
 801a2a4:	4606      	mov	r6, r0
 801a2a6:	b300      	cbz	r0, 801a2ea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a2a8:	68e0      	ldr	r0, [r4, #12]
 801a2aa:	4631      	mov	r1, r6
 801a2ac:	6803      	ldr	r3, [r0, #0]
 801a2ae:	68db      	ldr	r3, [r3, #12]
 801a2b0:	4798      	blx	r3
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	b1c8      	cbz	r0, 801a2ea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a2b6:	7b43      	ldrb	r3, [r0, #13]
 801a2b8:	7a82      	ldrb	r2, [r0, #10]
 801a2ba:	005b      	lsls	r3, r3, #1
 801a2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a2c0:	4313      	orrs	r3, r2
 801a2c2:	8423      	strh	r3, [r4, #32]
 801a2c4:	7a63      	ldrb	r3, [r4, #9]
 801a2c6:	2b06      	cmp	r3, #6
 801a2c8:	d10f      	bne.n	801a2ea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a2ca:	68e0      	ldr	r0, [r4, #12]
 801a2cc:	462a      	mov	r2, r5
 801a2ce:	4631      	mov	r1, r6
 801a2d0:	6803      	ldr	r3, [r0, #0]
 801a2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2d4:	4798      	blx	r3
 801a2d6:	7b6b      	ldrb	r3, [r5, #13]
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a2de:	7aab      	ldrb	r3, [r5, #10]
 801a2e0:	4313      	orrs	r3, r2
 801a2e2:	4418      	add	r0, r3
 801a2e4:	8c23      	ldrh	r3, [r4, #32]
 801a2e6:	4418      	add	r0, r3
 801a2e8:	8420      	strh	r0, [r4, #32]
 801a2ea:	4620      	mov	r0, r4
 801a2ec:	bd70      	pop	{r4, r5, r6, pc}

0801a2ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a2ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f2:	2400      	movs	r4, #0
 801a2f4:	b085      	sub	sp, #20
 801a2f6:	4681      	mov	r9, r0
 801a2f8:	4688      	mov	r8, r1
 801a2fa:	4692      	mov	sl, r2
 801a2fc:	469b      	mov	fp, r3
 801a2fe:	4627      	mov	r7, r4
 801a300:	4625      	mov	r5, r4
 801a302:	4626      	mov	r6, r4
 801a304:	4554      	cmp	r4, sl
 801a306:	da2a      	bge.n	801a35e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a308:	2300      	movs	r3, #0
 801a30a:	9303      	str	r3, [sp, #12]
 801a30c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a310:	429d      	cmp	r5, r3
 801a312:	d004      	beq.n	801a31e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a314:	f242 030b 	movw	r3, #8203	; 0x200b
 801a318:	429d      	cmp	r5, r3
 801a31a:	bf18      	it	ne
 801a31c:	462f      	movne	r7, r5
 801a31e:	ab03      	add	r3, sp, #12
 801a320:	4642      	mov	r2, r8
 801a322:	4659      	mov	r1, fp
 801a324:	4648      	mov	r0, r9
 801a326:	f002 ff5b 	bl	801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a32a:	4605      	mov	r5, r0
 801a32c:	b1b8      	cbz	r0, 801a35e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a32e:	280a      	cmp	r0, #10
 801a330:	d015      	beq.n	801a35e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a332:	9a03      	ldr	r2, [sp, #12]
 801a334:	b18a      	cbz	r2, 801a35a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a336:	7b50      	ldrb	r0, [r2, #13]
 801a338:	4639      	mov	r1, r7
 801a33a:	7a93      	ldrb	r3, [r2, #10]
 801a33c:	0040      	lsls	r0, r0, #1
 801a33e:	8895      	ldrh	r5, [r2, #4]
 801a340:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a344:	4303      	orrs	r3, r0
 801a346:	4640      	mov	r0, r8
 801a348:	9301      	str	r3, [sp, #4]
 801a34a:	f8d8 3000 	ldr.w	r3, [r8]
 801a34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a350:	4798      	blx	r3
 801a352:	9b01      	ldr	r3, [sp, #4]
 801a354:	4418      	add	r0, r3
 801a356:	4406      	add	r6, r0
 801a358:	b2b6      	uxth	r6, r6
 801a35a:	3401      	adds	r4, #1
 801a35c:	e7d2      	b.n	801a304 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a35e:	4630      	mov	r0, r6
 801a360:	b005      	add	sp, #20
 801a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a366 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a366:	2a02      	cmp	r2, #2
 801a368:	b530      	push	{r4, r5, lr}
 801a36a:	d011      	beq.n	801a390 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a36c:	2a03      	cmp	r2, #3
 801a36e:	d01c      	beq.n	801a3aa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a370:	2a01      	cmp	r2, #1
 801a372:	d10c      	bne.n	801a38e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a374:	888b      	ldrh	r3, [r1, #4]
 801a376:	8801      	ldrh	r1, [r0, #0]
 801a378:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a37c:	1a5b      	subs	r3, r3, r1
 801a37e:	8844      	ldrh	r4, [r0, #2]
 801a380:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a384:	1a9b      	subs	r3, r3, r2
 801a386:	8004      	strh	r4, [r0, #0]
 801a388:	8081      	strh	r1, [r0, #4]
 801a38a:	8043      	strh	r3, [r0, #2]
 801a38c:	80c2      	strh	r2, [r0, #6]
 801a38e:	bd30      	pop	{r4, r5, pc}
 801a390:	88cb      	ldrh	r3, [r1, #6]
 801a392:	8842      	ldrh	r2, [r0, #2]
 801a394:	1a9b      	subs	r3, r3, r2
 801a396:	88c2      	ldrh	r2, [r0, #6]
 801a398:	1a9b      	subs	r3, r3, r2
 801a39a:	888a      	ldrh	r2, [r1, #4]
 801a39c:	8801      	ldrh	r1, [r0, #0]
 801a39e:	8043      	strh	r3, [r0, #2]
 801a3a0:	1a52      	subs	r2, r2, r1
 801a3a2:	8881      	ldrh	r1, [r0, #4]
 801a3a4:	1a52      	subs	r2, r2, r1
 801a3a6:	8002      	strh	r2, [r0, #0]
 801a3a8:	e7f1      	b.n	801a38e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a3aa:	88cb      	ldrh	r3, [r1, #6]
 801a3ac:	8841      	ldrh	r1, [r0, #2]
 801a3ae:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a3b2:	1a5b      	subs	r3, r3, r1
 801a3b4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a3b8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a3bc:	1a9b      	subs	r3, r3, r2
 801a3be:	8045      	strh	r5, [r0, #2]
 801a3c0:	8082      	strh	r2, [r0, #4]
 801a3c2:	8003      	strh	r3, [r0, #0]
 801a3c4:	80c4      	strh	r4, [r0, #6]
 801a3c6:	e7e2      	b.n	801a38e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a3c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3cc:	b09f      	sub	sp, #124	; 0x7c
 801a3ce:	9116      	str	r1, [sp, #88]	; 0x58
 801a3d0:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3d2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a3d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a3d6:	8809      	ldrh	r1, [r1, #0]
 801a3d8:	889b      	ldrh	r3, [r3, #4]
 801a3da:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a3de:	440b      	add	r3, r1
 801a3e0:	9212      	str	r2, [sp, #72]	; 0x48
 801a3e2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a3e6:	b21b      	sxth	r3, r3
 801a3e8:	9011      	str	r0, [sp, #68]	; 0x44
 801a3ea:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a3ee:	9310      	str	r3, [sp, #64]	; 0x40
 801a3f0:	f8d8 3000 	ldr.w	r3, [r8]
 801a3f4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801a3f8:	7b19      	ldrb	r1, [r3, #12]
 801a3fa:	7adb      	ldrb	r3, [r3, #11]
 801a3fc:	9114      	str	r1, [sp, #80]	; 0x50
 801a3fe:	9315      	str	r3, [sp, #84]	; 0x54
 801a400:	2a00      	cmp	r2, #0
 801a402:	d06a      	beq.n	801a4da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a404:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a408:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a40a:	2b06      	cmp	r3, #6
 801a40c:	bf14      	ite	ne
 801a40e:	2301      	movne	r3, #1
 801a410:	2302      	moveq	r3, #2
 801a412:	4413      	add	r3, r2
 801a414:	f04f 0900 	mov.w	r9, #0
 801a418:	930f      	str	r3, [sp, #60]	; 0x3c
 801a41a:	464c      	mov	r4, r9
 801a41c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a420:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a424:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a428:	4293      	cmp	r3, r2
 801a42a:	f280 808f 	bge.w	801a54c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801a42e:	2300      	movs	r3, #0
 801a430:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801a434:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801a438:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a43c:	429c      	cmp	r4, r3
 801a43e:	d006      	beq.n	801a44e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801a440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a442:	f242 020b 	movw	r2, #8203	; 0x200b
 801a446:	4294      	cmp	r4, r2
 801a448:	bf18      	it	ne
 801a44a:	4623      	movne	r3, r4
 801a44c:	930d      	str	r3, [sp, #52]	; 0x34
 801a44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a450:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a452:	f8d8 2000 	ldr.w	r2, [r8]
 801a456:	428b      	cmp	r3, r1
 801a458:	db41      	blt.n	801a4de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a45a:	6813      	ldr	r3, [r2, #0]
 801a45c:	4610      	mov	r0, r2
 801a45e:	695b      	ldr	r3, [r3, #20]
 801a460:	4798      	blx	r3
 801a462:	4604      	mov	r4, r0
 801a464:	f8d8 0000 	ldr.w	r0, [r8]
 801a468:	aa1d      	add	r2, sp, #116	; 0x74
 801a46a:	4621      	mov	r1, r4
 801a46c:	6803      	ldr	r3, [r0, #0]
 801a46e:	689d      	ldr	r5, [r3, #8]
 801a470:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a474:	47a8      	blx	r5
 801a476:	901c      	str	r0, [sp, #112]	; 0x70
 801a478:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a47c:	429c      	cmp	r4, r3
 801a47e:	f000 80ec 	beq.w	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a482:	f242 030b 	movw	r3, #8203	; 0x200b
 801a486:	429c      	cmp	r4, r3
 801a488:	f000 80e7 	beq.w	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a48c:	2c00      	cmp	r4, #0
 801a48e:	f000 80f9 	beq.w	801a684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801a492:	2c0a      	cmp	r4, #10
 801a494:	d060      	beq.n	801a558 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a496:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a498:	b36a      	cbz	r2, 801a4f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a49a:	8894      	ldrh	r4, [r2, #4]
 801a49c:	f1bb 0f00 	cmp.w	fp, #0
 801a4a0:	d03b      	beq.n	801a51a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a4a2:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a4a6:	f1bb 0f01 	cmp.w	fp, #1
 801a4aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a4ae:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a4b2:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a4b6:	ea49 0903 	orr.w	r9, r9, r3
 801a4ba:	d134      	bne.n	801a526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801a4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4be:	eba6 0609 	sub.w	r6, r6, r9
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d14f      	bne.n	801a566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801a4c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a4c8:	eb09 0306 	add.w	r3, r9, r6
 801a4cc:	4413      	add	r3, r2
 801a4ce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a4d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a4d4:	4293      	cmp	r3, r2
 801a4d6:	da51      	bge.n	801a57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801a4d8:	e038      	b.n	801a54c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801a4da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a4dc:	e79a      	b.n	801a414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801a4de:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a4e2:	4659      	mov	r1, fp
 801a4e4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a4e6:	9301      	str	r3, [sp, #4]
 801a4e8:	ab1d      	add	r3, sp, #116	; 0x74
 801a4ea:	9300      	str	r3, [sp, #0]
 801a4ec:	ab1c      	add	r3, sp, #112	; 0x70
 801a4ee:	f002 fec0 	bl	801d272 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a4f2:	4604      	mov	r4, r0
 801a4f4:	e7c0      	b.n	801a478 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a4f6:	f8d8 0000 	ldr.w	r0, [r8]
 801a4fa:	6803      	ldr	r3, [r0, #0]
 801a4fc:	691b      	ldr	r3, [r3, #16]
 801a4fe:	4798      	blx	r3
 801a500:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a504:	4298      	cmp	r0, r3
 801a506:	f000 80a8 	beq.w	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a50a:	f242 030b 	movw	r3, #8203	; 0x200b
 801a50e:	4298      	cmp	r0, r3
 801a510:	f000 80a3 	beq.w	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a514:	f1bb 0f00 	cmp.w	fp, #0
 801a518:	d100      	bne.n	801a51c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a51a:	444e      	add	r6, r9
 801a51c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a51e:	2a00      	cmp	r2, #0
 801a520:	d1bf      	bne.n	801a4a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a522:	4691      	mov	r9, r2
 801a524:	e099      	b.n	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a528:	2b00      	cmp	r3, #0
 801a52a:	f000 80ad 	beq.w	801a688 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801a52e:	f1bb 0f00 	cmp.w	fp, #0
 801a532:	d118      	bne.n	801a566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801a534:	f8d8 0000 	ldr.w	r0, [r8]
 801a538:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a53a:	6803      	ldr	r3, [r0, #0]
 801a53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a53e:	4798      	blx	r3
 801a540:	4406      	add	r6, r0
 801a542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a546:	1af3      	subs	r3, r6, r3
 801a548:	4293      	cmp	r3, r2
 801a54a:	dd17      	ble.n	801a57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801a54c:	2c00      	cmp	r4, #0
 801a54e:	f000 8099 	beq.w	801a684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801a552:	2c0a      	cmp	r4, #10
 801a554:	f040 8087 	bne.w	801a666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801a558:	240a      	movs	r4, #10
 801a55a:	fab4 f084 	clz	r0, r4
 801a55e:	0940      	lsrs	r0, r0, #5
 801a560:	b01f      	add	sp, #124	; 0x7c
 801a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a566:	f8d8 0000 	ldr.w	r0, [r8]
 801a56a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a56c:	6803      	ldr	r3, [r0, #0]
 801a56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a570:	4798      	blx	r3
 801a572:	f1bb 0f01 	cmp.w	fp, #1
 801a576:	eba6 0600 	sub.w	r6, r6, r0
 801a57a:	d0a4      	beq.n	801a4c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a57c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a57e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a580:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a584:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a588:	7b43      	ldrb	r3, [r0, #13]
 801a58a:	4431      	add	r1, r6
 801a58c:	015b      	lsls	r3, r3, #5
 801a58e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a592:	7983      	ldrb	r3, [r0, #6]
 801a594:	4313      	orrs	r3, r2
 801a596:	440b      	add	r3, r1
 801a598:	42bb      	cmp	r3, r7
 801a59a:	db5e      	blt.n	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a59e:	4299      	cmp	r1, r3
 801a5a0:	da5b      	bge.n	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a5a2:	f8d8 0000 	ldr.w	r0, [r8]
 801a5a6:	42b7      	cmp	r7, r6
 801a5a8:	6803      	ldr	r3, [r0, #0]
 801a5aa:	bfcc      	ite	gt
 801a5ac:	1bbf      	subgt	r7, r7, r6
 801a5ae:	2700      	movle	r7, #0
 801a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5b2:	bfc8      	it	gt
 801a5b4:	b2bf      	uxthgt	r7, r7
 801a5b6:	4798      	blx	r3
 801a5b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a5ba:	7b5a      	ldrb	r2, [r3, #13]
 801a5bc:	00d1      	lsls	r1, r2, #3
 801a5be:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801a5c2:	7a19      	ldrb	r1, [r3, #8]
 801a5c4:	4329      	orrs	r1, r5
 801a5c6:	0655      	lsls	r5, r2, #25
 801a5c8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801a5ca:	bf48      	it	mi
 801a5cc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a5d0:	4405      	add	r5, r0
 801a5d2:	bf48      	it	mi
 801a5d4:	b209      	sxthmi	r1, r1
 801a5d6:	1a6d      	subs	r5, r5, r1
 801a5d8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a5da:	b2ad      	uxth	r5, r5
 801a5dc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a5e0:	fa0f fa85 	sxth.w	sl, r5
 801a5e4:	4551      	cmp	r1, sl
 801a5e6:	dd3c      	ble.n	801a662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801a5e8:	0112      	lsls	r2, r2, #4
 801a5ea:	79d8      	ldrb	r0, [r3, #7]
 801a5ec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a5f0:	4302      	orrs	r2, r0
 801a5f2:	4492      	add	sl, r2
 801a5f4:	4551      	cmp	r1, sl
 801a5f6:	dc30      	bgt.n	801a65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a5f8:	1b4d      	subs	r5, r1, r5
 801a5fa:	468a      	mov	sl, r1
 801a5fc:	b22d      	sxth	r5, r5
 801a5fe:	9319      	str	r3, [sp, #100]	; 0x64
 801a600:	b2ad      	uxth	r5, r5
 801a602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a604:	f8d8 0000 	ldr.w	r0, [r8]
 801a608:	681a      	ldr	r2, [r3, #0]
 801a60a:	6801      	ldr	r1, [r0, #0]
 801a60c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801a60e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a610:	9313      	str	r3, [sp, #76]	; 0x4c
 801a612:	9218      	str	r2, [sp, #96]	; 0x60
 801a614:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a616:	4788      	blx	r1
 801a618:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a61c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a61e:	910b      	str	r1, [sp, #44]	; 0x2c
 801a620:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a624:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a626:	910a      	str	r1, [sp, #40]	; 0x28
 801a628:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a62c:	9109      	str	r1, [sp, #36]	; 0x24
 801a62e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a632:	9305      	str	r3, [sp, #20]
 801a634:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a636:	9206      	str	r2, [sp, #24]
 801a638:	9304      	str	r3, [sp, #16]
 801a63a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a63c:	f8cd a004 	str.w	sl, [sp, #4]
 801a640:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801a644:	4437      	add	r7, r6
 801a646:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a648:	b23f      	sxth	r7, r7
 801a64a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a64e:	9700      	str	r7, [sp, #0]
 801a650:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a652:	681a      	ldr	r2, [r3, #0]
 801a654:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a656:	685b      	ldr	r3, [r3, #4]
 801a658:	47a8      	blx	r5
 801a65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a65c:	3301      	adds	r3, #1
 801a65e:	930e      	str	r3, [sp, #56]	; 0x38
 801a660:	e6e0      	b.n	801a424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801a662:	2500      	movs	r5, #0
 801a664:	e7cb      	b.n	801a5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801a666:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a668:	3501      	adds	r5, #1
 801a66a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a66c:	429d      	cmp	r5, r3
 801a66e:	f6bf af74 	bge.w	801a55a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a672:	4659      	mov	r1, fp
 801a674:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a676:	f7e9 fa21 	bl	8003abc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a67a:	4604      	mov	r4, r0
 801a67c:	b110      	cbz	r0, 801a684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801a67e:	280a      	cmp	r0, #10
 801a680:	d1f2      	bne.n	801a668 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801a682:	e769      	b.n	801a558 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a684:	2400      	movs	r4, #0
 801a686:	e768      	b.n	801a55a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a688:	f1bb 0f00 	cmp.w	fp, #0
 801a68c:	f43f af59 	beq.w	801a542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801a690:	e774      	b.n	801a57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801a692 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a692:	b530      	push	{r4, r5, lr}
 801a694:	8ac4      	ldrh	r4, [r0, #22]
 801a696:	8b45      	ldrh	r5, [r0, #26]
 801a698:	8343      	strh	r3, [r0, #26]
 801a69a:	442c      	add	r4, r5
 801a69c:	1ae4      	subs	r4, r4, r3
 801a69e:	8b83      	ldrh	r3, [r0, #28]
 801a6a0:	82c4      	strh	r4, [r0, #22]
 801a6a2:	8b04      	ldrh	r4, [r0, #24]
 801a6a4:	4422      	add	r2, r4
 801a6a6:	440c      	add	r4, r1
 801a6a8:	1a59      	subs	r1, r3, r1
 801a6aa:	83c2      	strh	r2, [r0, #30]
 801a6ac:	8304      	strh	r4, [r0, #24]
 801a6ae:	8381      	strh	r1, [r0, #28]
 801a6b0:	bd30      	pop	{r4, r5, pc}

0801a6b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801a6b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	8a47      	ldrh	r7, [r0, #18]
 801a6ba:	68c0      	ldr	r0, [r0, #12]
 801a6bc:	b085      	sub	sp, #20
 801a6be:	6803      	ldr	r3, [r0, #0]
 801a6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6c2:	4798      	blx	r3
 801a6c4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801a6c8:	7a63      	ldrb	r3, [r4, #9]
 801a6ca:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a6ce:	3b01      	subs	r3, #1
 801a6d0:	42b7      	cmp	r7, r6
 801a6d2:	bfac      	ite	ge
 801a6d4:	f04f 0900 	movge.w	r9, #0
 801a6d8:	f04f 0901 	movlt.w	r9, #1
 801a6dc:	2b05      	cmp	r3, #5
 801a6de:	d804      	bhi.n	801a6ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801a6e0:	e8df f003 	tbb	[pc, r3]
 801a6e4:	470f0854 	.word	0x470f0854
 801a6e8:	4c4c      	.short	0x4c4c
 801a6ea:	2500      	movs	r5, #0
 801a6ec:	46a9      	mov	r9, r5
 801a6ee:	462e      	mov	r6, r5
 801a6f0:	462f      	mov	r7, r5
 801a6f2:	e00e      	b.n	801a712 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a6f4:	42b7      	cmp	r7, r6
 801a6f6:	f04f 0500 	mov.w	r5, #0
 801a6fa:	bfb4      	ite	lt
 801a6fc:	2600      	movlt	r6, #0
 801a6fe:	2601      	movge	r6, #1
 801a700:	e7f6      	b.n	801a6f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a702:	42b7      	cmp	r7, r6
 801a704:	464d      	mov	r5, r9
 801a706:	f04f 0900 	mov.w	r9, #0
 801a70a:	bfb4      	ite	lt
 801a70c:	2600      	movlt	r6, #0
 801a70e:	2601      	movge	r6, #1
 801a710:	464f      	mov	r7, r9
 801a712:	f04f 0800 	mov.w	r8, #0
 801a716:	f8a4 8016 	strh.w	r8, [r4, #22]
 801a71a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801a71e:	f8cd 8004 	str.w	r8, [sp, #4]
 801a722:	2300      	movs	r3, #0
 801a724:	9303      	str	r3, [sp, #12]
 801a726:	8823      	ldrh	r3, [r4, #0]
 801a728:	2b20      	cmp	r3, #32
 801a72a:	d033      	beq.n	801a794 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801a72c:	f242 010b 	movw	r1, #8203	; 0x200b
 801a730:	1a5a      	subs	r2, r3, r1
 801a732:	f1d2 0a00 	rsbs	sl, r2, #0
 801a736:	eb4a 0a02 	adc.w	sl, sl, r2
 801a73a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a73e:	4293      	cmp	r3, r2
 801a740:	d008      	beq.n	801a754 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a742:	428b      	cmp	r3, r1
 801a744:	9a01      	ldr	r2, [sp, #4]
 801a746:	bf0e      	itee	eq
 801a748:	f04f 0a01 	moveq.w	sl, #1
 801a74c:	461a      	movne	r2, r3
 801a74e:	f04f 0a00 	movne.w	sl, #0
 801a752:	9201      	str	r2, [sp, #4]
 801a754:	ab03      	add	r3, sp, #12
 801a756:	68e2      	ldr	r2, [r4, #12]
 801a758:	7a21      	ldrb	r1, [r4, #8]
 801a75a:	6860      	ldr	r0, [r4, #4]
 801a75c:	f002 fd40 	bl	801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a760:	8020      	strh	r0, [r4, #0]
 801a762:	b9d8      	cbnz	r0, 801a79c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801a764:	8ba2      	ldrh	r2, [r4, #28]
 801a766:	2300      	movs	r3, #0
 801a768:	4611      	mov	r1, r2
 801a76a:	4620      	mov	r0, r4
 801a76c:	f7ff ff91 	bl	801a692 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a770:	e06e      	b.n	801a850 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a772:	2500      	movs	r5, #0
 801a774:	2701      	movs	r7, #1
 801a776:	46a9      	mov	r9, r5
 801a778:	462e      	mov	r6, r5
 801a77a:	e7ca      	b.n	801a712 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a77c:	42b7      	cmp	r7, r6
 801a77e:	f04f 0500 	mov.w	r5, #0
 801a782:	bfb4      	ite	lt
 801a784:	2700      	movlt	r7, #0
 801a786:	2701      	movge	r7, #1
 801a788:	462e      	mov	r6, r5
 801a78a:	e7c2      	b.n	801a712 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a78c:	2500      	movs	r5, #0
 801a78e:	2601      	movs	r6, #1
 801a790:	46a9      	mov	r9, r5
 801a792:	e7ad      	b.n	801a6f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a794:	9301      	str	r3, [sp, #4]
 801a796:	f04f 0a01 	mov.w	sl, #1
 801a79a:	e7db      	b.n	801a754 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a79c:	8b63      	ldrh	r3, [r4, #26]
 801a79e:	280a      	cmp	r0, #10
 801a7a0:	f103 0301 	add.w	r3, r3, #1
 801a7a4:	8363      	strh	r3, [r4, #26]
 801a7a6:	d0dd      	beq.n	801a764 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801a7a8:	9a03      	ldr	r2, [sp, #12]
 801a7aa:	bb62      	cbnz	r2, 801a806 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801a7ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a7b0:	4298      	cmp	r0, r3
 801a7b2:	d003      	beq.n	801a7bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a7b4:	f242 030b 	movw	r3, #8203	; 0x200b
 801a7b8:	4298      	cmp	r0, r3
 801a7ba:	d1b2      	bne.n	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7bc:	8823      	ldrh	r3, [r4, #0]
 801a7be:	8ba1      	ldrh	r1, [r4, #28]
 801a7c0:	2b20      	cmp	r3, #32
 801a7c2:	d003      	beq.n	801a7cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801a7c4:	f242 000b 	movw	r0, #8203	; 0x200b
 801a7c8:	4283      	cmp	r3, r0
 801a7ca:	d131      	bne.n	801a830 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801a7cc:	f1ba 0f00 	cmp.w	sl, #0
 801a7d0:	bf0a      	itet	eq
 801a7d2:	4688      	moveq	r8, r1
 801a7d4:	4650      	movne	r0, sl
 801a7d6:	2001      	moveq	r0, #1
 801a7d8:	440a      	add	r2, r1
 801a7da:	8b23      	ldrh	r3, [r4, #24]
 801a7dc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a7e0:	b292      	uxth	r2, r2
 801a7e2:	83a2      	strh	r2, [r4, #28]
 801a7e4:	4413      	add	r3, r2
 801a7e6:	f1b9 0f00 	cmp.w	r9, #0
 801a7ea:	d102      	bne.n	801a7f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801a7ec:	2d00      	cmp	r5, #0
 801a7ee:	d042      	beq.n	801a876 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801a7f0:	b300      	cbz	r0, 801a834 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801a7f2:	8c21      	ldrh	r1, [r4, #32]
 801a7f4:	4419      	add	r1, r3
 801a7f6:	458c      	cmp	ip, r1
 801a7f8:	da37      	bge.n	801a86a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a7fa:	8ae1      	ldrh	r1, [r4, #22]
 801a7fc:	2900      	cmp	r1, #0
 801a7fe:	d034      	beq.n	801a86a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a800:	4563      	cmp	r3, ip
 801a802:	dd8e      	ble.n	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a804:	e01d      	b.n	801a842 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801a806:	8893      	ldrh	r3, [r2, #4]
 801a808:	9901      	ldr	r1, [sp, #4]
 801a80a:	8023      	strh	r3, [r4, #0]
 801a80c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801a810:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801a814:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801a818:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a81c:	ea4b 0b00 	orr.w	fp, fp, r0
 801a820:	68e0      	ldr	r0, [r4, #12]
 801a822:	6803      	ldr	r3, [r0, #0]
 801a824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a826:	4798      	blx	r3
 801a828:	eb0b 0200 	add.w	r2, fp, r0
 801a82c:	b292      	uxth	r2, r2
 801a82e:	e7c5      	b.n	801a7bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a830:	2000      	movs	r0, #0
 801a832:	e7d1      	b.n	801a7d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801a834:	4563      	cmp	r3, ip
 801a836:	f77f af74 	ble.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a83a:	8ae3      	ldrh	r3, [r4, #22]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	f43f af70 	beq.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a842:	2301      	movs	r3, #1
 801a844:	8c22      	ldrh	r2, [r4, #32]
 801a846:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801a84a:	8be3      	ldrh	r3, [r4, #30]
 801a84c:	4413      	add	r3, r2
 801a84e:	83e3      	strh	r3, [r4, #30]
 801a850:	68e0      	ldr	r0, [r4, #12]
 801a852:	6803      	ldr	r3, [r0, #0]
 801a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a856:	4798      	blx	r3
 801a858:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a85c:	4418      	add	r0, r3
 801a85e:	8a63      	ldrh	r3, [r4, #18]
 801a860:	1a18      	subs	r0, r3, r0
 801a862:	8260      	strh	r0, [r4, #18]
 801a864:	b005      	add	sp, #20
 801a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a86a:	2300      	movs	r3, #0
 801a86c:	4611      	mov	r1, r2
 801a86e:	4620      	mov	r0, r4
 801a870:	f7ff ff0f 	bl	801a692 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a874:	e755      	b.n	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a876:	4563      	cmp	r3, ip
 801a878:	dd14      	ble.n	801a8a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a87a:	b117      	cbz	r7, 801a882 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a87c:	2301      	movs	r3, #1
 801a87e:	460a      	mov	r2, r1
 801a880:	e772      	b.n	801a768 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a882:	2e00      	cmp	r6, #0
 801a884:	f43f af4d 	beq.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a888:	2800      	cmp	r0, #0
 801a88a:	f47f af4a 	bne.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a88e:	f1ba 0f00 	cmp.w	sl, #0
 801a892:	d002      	beq.n	801a89a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a894:	2301      	movs	r3, #1
 801a896:	4642      	mov	r2, r8
 801a898:	e767      	b.n	801a76a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a89a:	8ae3      	ldrh	r3, [r4, #22]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	f43f af40 	beq.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a8a2:	e7d5      	b.n	801a850 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	f47f af3c 	bne.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a8aa:	f1ba 0f00 	cmp.w	sl, #0
 801a8ae:	f43f af38 	beq.w	801a722 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	4642      	mov	r2, r8
 801a8b6:	e7da      	b.n	801a86e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a8b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8ba:	4605      	mov	r5, r0
 801a8bc:	b08f      	sub	sp, #60	; 0x3c
 801a8be:	4617      	mov	r7, r2
 801a8c0:	461c      	mov	r4, r3
 801a8c2:	460e      	mov	r6, r1
 801a8c4:	b1d1      	cbz	r1, 801a8fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	4620      	mov	r0, r4
 801a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8cc:	4798      	blx	r3
 801a8ce:	4240      	negs	r0, r0
 801a8d0:	9603      	str	r6, [sp, #12]
 801a8d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8d6:	b200      	sxth	r0, r0
 801a8d8:	9700      	str	r7, [sp, #0]
 801a8da:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a8de:	4629      	mov	r1, r5
 801a8e0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a8e4:	2401      	movs	r4, #1
 801a8e6:	a805      	add	r0, sp, #20
 801a8e8:	f7ff fcbe 	bl	801a268 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a8ec:	a805      	add	r0, sp, #20
 801a8ee:	f7ff fee0 	bl	801a6b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a8f2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a8f6:	b163      	cbz	r3, 801a912 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a8f8:	3401      	adds	r4, #1
 801a8fa:	e7f7      	b.n	801a8ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a8fc:	2401      	movs	r4, #1
 801a8fe:	f002 fd3b 	bl	801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a902:	280a      	cmp	r0, #10
 801a904:	4628      	mov	r0, r5
 801a906:	bf08      	it	eq
 801a908:	3401      	addeq	r4, #1
 801a90a:	f002 fd35 	bl	801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a90e:	2800      	cmp	r0, #0
 801a910:	d1f7      	bne.n	801a902 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a912:	b2a0      	uxth	r0, r4
 801a914:	b00f      	add	sp, #60	; 0x3c
 801a916:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a91c:	b0e3      	sub	sp, #396	; 0x18c
 801a91e:	461c      	mov	r4, r3
 801a920:	4683      	mov	fp, r0
 801a922:	4688      	mov	r8, r1
 801a924:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801a926:	2b00      	cmp	r3, #0
 801a928:	f000 810f 	beq.w	801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801a92c:	6823      	ldr	r3, [r4, #0]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	f000 810b 	beq.w	801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801a934:	7ba3      	ldrb	r3, [r4, #14]
 801a936:	2b00      	cmp	r3, #0
 801a938:	f000 8107 	beq.w	801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801a93c:	ad0a      	add	r5, sp, #40	; 0x28
 801a93e:	6810      	ldr	r0, [r2, #0]
 801a940:	6851      	ldr	r1, [r2, #4]
 801a942:	462b      	mov	r3, r5
 801a944:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a948:	c303      	stmia	r3!, {r0, r1}
 801a94a:	2100      	movs	r1, #0
 801a94c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a950:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a954:	4628      	mov	r0, r5
 801a956:	910c      	str	r1, [sp, #48]	; 0x30
 801a958:	a90c      	add	r1, sp, #48	; 0x30
 801a95a:	79a2      	ldrb	r2, [r4, #6]
 801a95c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a960:	f7ff fd01 	bl	801a366 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a964:	a90c      	add	r1, sp, #48	; 0x30
 801a966:	79a2      	ldrb	r2, [r4, #6]
 801a968:	4608      	mov	r0, r1
 801a96a:	f7ff fcfc 	bl	801a366 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a96e:	a817      	add	r0, sp, #92	; 0x5c
 801a970:	f002 f8d5 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 801a974:	6820      	ldr	r0, [r4, #0]
 801a976:	6803      	ldr	r3, [r0, #0]
 801a978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a97a:	4798      	blx	r3
 801a97c:	4606      	mov	r6, r0
 801a97e:	6820      	ldr	r0, [r4, #0]
 801a980:	6803      	ldr	r3, [r0, #0]
 801a982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a984:	4798      	blx	r3
 801a986:	4633      	mov	r3, r6
 801a988:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801a98a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801a98c:	9000      	str	r0, [sp, #0]
 801a98e:	a817      	add	r0, sp, #92	; 0x5c
 801a990:	f002 f920 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a994:	6820      	ldr	r0, [r4, #0]
 801a996:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a99a:	6803      	ldr	r3, [r0, #0]
 801a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a99e:	4798      	blx	r3
 801a9a0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a9a4:	6823      	ldr	r3, [r4, #0]
 801a9a6:	4607      	mov	r7, r0
 801a9a8:	4406      	add	r6, r0
 801a9aa:	a830      	add	r0, sp, #192	; 0xc0
 801a9ac:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a9b0:	f002 f8b5 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 801a9b4:	7c23      	ldrb	r3, [r4, #16]
 801a9b6:	b17b      	cbz	r3, 801a9d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a9b8:	6820      	ldr	r0, [r4, #0]
 801a9ba:	6803      	ldr	r3, [r0, #0]
 801a9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a9be:	4798      	blx	r3
 801a9c0:	9009      	str	r0, [sp, #36]	; 0x24
 801a9c2:	6820      	ldr	r0, [r4, #0]
 801a9c4:	6802      	ldr	r2, [r0, #0]
 801a9c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a9c8:	4790      	blx	r2
 801a9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9cc:	9000      	str	r0, [sp, #0]
 801a9ce:	a830      	add	r0, sp, #192	; 0xc0
 801a9d0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801a9d2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801a9d4:	f002 f8fe 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a9d8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a9dc:	a80e      	add	r0, sp, #56	; 0x38
 801a9de:	7be2      	ldrb	r2, [r4, #15]
 801a9e0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a9e4:	1a8a      	subs	r2, r1, r2
 801a9e6:	7c21      	ldrb	r1, [r4, #16]
 801a9e8:	9103      	str	r1, [sp, #12]
 801a9ea:	b292      	uxth	r2, r2
 801a9ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a9f0:	9102      	str	r1, [sp, #8]
 801a9f2:	6821      	ldr	r1, [r4, #0]
 801a9f4:	9101      	str	r1, [sp, #4]
 801a9f6:	7961      	ldrb	r1, [r4, #5]
 801a9f8:	9100      	str	r1, [sp, #0]
 801a9fa:	a930      	add	r1, sp, #192	; 0xc0
 801a9fc:	f7ff fc34 	bl	801a268 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801aa00:	2e00      	cmp	r6, #0
 801aa02:	dc5b      	bgt.n	801aabc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801aa04:	af17      	add	r7, sp, #92	; 0x5c
 801aa06:	f04f 0900 	mov.w	r9, #0
 801aa0a:	7c23      	ldrb	r3, [r4, #16]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	f000 80ae 	beq.w	801ab6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801aa12:	a80e      	add	r0, sp, #56	; 0x38
 801aa14:	f7ff fe4d 	bl	801a6b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801aa18:	f1ba 0f00 	cmp.w	sl, #0
 801aa1c:	f000 80a2 	beq.w	801ab64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801aa20:	7c23      	ldrb	r3, [r4, #16]
 801aa22:	2264      	movs	r2, #100	; 0x64
 801aa24:	4639      	mov	r1, r7
 801aa26:	a849      	add	r0, sp, #292	; 0x124
 801aa28:	9309      	str	r3, [sp, #36]	; 0x24
 801aa2a:	f00e ff3d 	bl	80298a8 <memcpy>
 801aa2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	f000 80a4 	beq.w	801ab7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801aa36:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801aa3a:	7922      	ldrb	r2, [r4, #4]
 801aa3c:	2a01      	cmp	r2, #1
 801aa3e:	f040 8087 	bne.w	801ab50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa42:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801aa46:	1ac0      	subs	r0, r0, r3
 801aa48:	2302      	movs	r3, #2
 801aa4a:	fb90 f0f3 	sdiv	r0, r0, r3
 801aa4e:	b200      	sxth	r0, r0
 801aa50:	7c23      	ldrb	r3, [r4, #16]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	f000 8088 	beq.w	801ab68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801aa58:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801aa5c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801aa60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801aa64:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801aa68:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801aa6c:	2100      	movs	r1, #0
 801aa6e:	4410      	add	r0, r2
 801aa70:	4642      	mov	r2, r8
 801aa72:	b200      	sxth	r0, r0
 801aa74:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801aa78:	9000      	str	r0, [sp, #0]
 801aa7a:	4658      	mov	r0, fp
 801aa7c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801aa80:	f7ff fca2 	bl	801a3c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801aa84:	2800      	cmp	r0, #0
 801aa86:	d160      	bne.n	801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801aa88:	b2b2      	uxth	r2, r6
 801aa8a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801aa8e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801aa92:	4413      	add	r3, r2
 801aa94:	1a8a      	subs	r2, r1, r2
 801aa96:	b21b      	sxth	r3, r3
 801aa98:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801aa9c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801aaa0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801aaa4:	2a00      	cmp	r2, #0
 801aaa6:	d150      	bne.n	801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801aaa8:	6822      	ldr	r2, [r4, #0]
 801aaaa:	8869      	ldrh	r1, [r5, #2]
 801aaac:	7a12      	ldrb	r2, [r2, #8]
 801aaae:	1a9b      	subs	r3, r3, r2
 801aab0:	88ea      	ldrh	r2, [r5, #6]
 801aab2:	440a      	add	r2, r1
 801aab4:	b212      	sxth	r2, r2
 801aab6:	4293      	cmp	r3, r2
 801aab8:	dda7      	ble.n	801aa0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801aaba:	e046      	b.n	801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801aabc:	7c23      	ldrb	r3, [r4, #16]
 801aabe:	444f      	add	r7, r9
 801aac0:	b1c3      	cbz	r3, 801aaf4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801aac2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801aac6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801aaca:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aace:	443b      	add	r3, r7
 801aad0:	4293      	cmp	r3, r2
 801aad2:	da97      	bge.n	801aa04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801aad4:	a80e      	add	r0, sp, #56	; 0x38
 801aad6:	f7ff fdec 	bl	801a6b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801aada:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801aade:	3b01      	subs	r3, #1
 801aae0:	b29b      	uxth	r3, r3
 801aae2:	454b      	cmp	r3, r9
 801aae4:	9309      	str	r3, [sp, #36]	; 0x24
 801aae6:	d021      	beq.n	801ab2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801aae8:	7961      	ldrb	r1, [r4, #5]
 801aaea:	a817      	add	r0, sp, #92	; 0x5c
 801aaec:	f7e8 ffe6 	bl	8003abc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aaf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaf2:	e7f4      	b.n	801aade <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801aaf4:	fa1f f986 	uxth.w	r9, r6
 801aaf8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801aafc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ab00:	443b      	add	r3, r7
 801ab02:	4293      	cmp	r3, r2
 801ab04:	f6bf af7e 	bge.w	801aa04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801ab08:	a817      	add	r0, sp, #92	; 0x5c
 801ab0a:	f002 fc35 	bl	801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ab0e:	b1e0      	cbz	r0, 801ab4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801ab10:	280a      	cmp	r0, #10
 801ab12:	d1f1      	bne.n	801aaf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801ab14:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ab18:	444b      	add	r3, r9
 801ab1a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ab1e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801ab22:	eba3 0309 	sub.w	r3, r3, r9
 801ab26:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801ab2a:	e7e5      	b.n	801aaf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801ab2c:	b2b3      	uxth	r3, r6
 801ab2e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ab32:	441a      	add	r2, r3
 801ab34:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801ab38:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801ab3c:	1ad3      	subs	r3, r2, r3
 801ab3e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801ab42:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d1bd      	bne.n	801aac6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801ab4a:	b063      	add	sp, #396	; 0x18c
 801ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab50:	2a02      	cmp	r2, #2
 801ab52:	d105      	bne.n	801ab60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801ab54:	7be2      	ldrb	r2, [r4, #15]
 801ab56:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801ab5a:	1a80      	subs	r0, r0, r2
 801ab5c:	1ac0      	subs	r0, r0, r3
 801ab5e:	e776      	b.n	801aa4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801ab60:	2000      	movs	r0, #0
 801ab62:	e775      	b.n	801aa50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801ab64:	7be0      	ldrb	r0, [r4, #15]
 801ab66:	e773      	b.n	801aa50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801ab68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ab6c:	e776      	b.n	801aa5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801ab6e:	f1ba 0f00 	cmp.w	sl, #0
 801ab72:	d0f7      	beq.n	801ab64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801ab74:	2264      	movs	r2, #100	; 0x64
 801ab76:	4639      	mov	r1, r7
 801ab78:	a849      	add	r0, sp, #292	; 0x124
 801ab7a:	f00e fe95 	bl	80298a8 <memcpy>
 801ab7e:	2300      	movs	r3, #0
 801ab80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ab84:	6821      	ldr	r1, [r4, #0]
 801ab86:	a849      	add	r0, sp, #292	; 0x124
 801ab88:	f7ff fbb1 	bl	801a2ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ab8c:	b203      	sxth	r3, r0
 801ab8e:	e754      	b.n	801aa3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801ab90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ab90:	2b03      	cmp	r3, #3
 801ab92:	d818      	bhi.n	801abc6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801ab94:	e8df f003 	tbb	[pc, r3]
 801ab98:	130d0602 	.word	0x130d0602
 801ab9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801aba0:	1850      	adds	r0, r2, r1
 801aba2:	4770      	bx	lr
 801aba4:	8803      	ldrh	r3, [r0, #0]
 801aba6:	8880      	ldrh	r0, [r0, #4]
 801aba8:	4418      	add	r0, r3
 801abaa:	b200      	sxth	r0, r0
 801abac:	1a80      	subs	r0, r0, r2
 801abae:	3801      	subs	r0, #1
 801abb0:	4770      	bx	lr
 801abb2:	8803      	ldrh	r3, [r0, #0]
 801abb4:	8880      	ldrh	r0, [r0, #4]
 801abb6:	4418      	add	r0, r3
 801abb8:	b200      	sxth	r0, r0
 801abba:	1a40      	subs	r0, r0, r1
 801abbc:	e7f7      	b.n	801abae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801abbe:	f9b0 0000 	ldrsh.w	r0, [r0]
 801abc2:	4410      	add	r0, r2
 801abc4:	4770      	bx	lr
 801abc6:	2000      	movs	r0, #0
 801abc8:	4770      	bx	lr

0801abca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801abca:	2b03      	cmp	r3, #3
 801abcc:	d817      	bhi.n	801abfe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801abce:	e8df f003 	tbb	[pc, r3]
 801abd2:	0602      	.short	0x0602
 801abd4:	1009      	.short	0x1009
 801abd6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801abda:	1850      	adds	r0, r2, r1
 801abdc:	4770      	bx	lr
 801abde:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801abe2:	e7fa      	b.n	801abda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801abe4:	8843      	ldrh	r3, [r0, #2]
 801abe6:	88c0      	ldrh	r0, [r0, #6]
 801abe8:	4418      	add	r0, r3
 801abea:	b200      	sxth	r0, r0
 801abec:	1a80      	subs	r0, r0, r2
 801abee:	3801      	subs	r0, #1
 801abf0:	4770      	bx	lr
 801abf2:	8843      	ldrh	r3, [r0, #2]
 801abf4:	88c0      	ldrh	r0, [r0, #6]
 801abf6:	4418      	add	r0, r3
 801abf8:	b200      	sxth	r0, r0
 801abfa:	1a40      	subs	r0, r0, r1
 801abfc:	e7f7      	b.n	801abee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801abfe:	2000      	movs	r0, #0
 801ac00:	4770      	bx	lr
	...

0801ac04 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ac04:	4b01      	ldr	r3, [pc, #4]	; (801ac0c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ac06:	2200      	movs	r2, #0
 801ac08:	601a      	str	r2, [r3, #0]
 801ac0a:	4770      	bx	lr
 801ac0c:	20015218 	.word	0x20015218

0801ac10 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ac10:	4603      	mov	r3, r0
 801ac12:	b1c8      	cbz	r0, 801ac48 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ac14:	0c02      	lsrs	r2, r0, #16
 801ac16:	0412      	lsls	r2, r2, #16
 801ac18:	b9a2      	cbnz	r2, 801ac44 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ac1a:	0403      	lsls	r3, r0, #16
 801ac1c:	2010      	movs	r0, #16
 801ac1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ac22:	bf04      	itt	eq
 801ac24:	021b      	lsleq	r3, r3, #8
 801ac26:	3008      	addeq	r0, #8
 801ac28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ac2c:	bf04      	itt	eq
 801ac2e:	011b      	lsleq	r3, r3, #4
 801ac30:	3004      	addeq	r0, #4
 801ac32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ac36:	bf04      	itt	eq
 801ac38:	009b      	lsleq	r3, r3, #2
 801ac3a:	3002      	addeq	r0, #2
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	db04      	blt.n	801ac4a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ac40:	3001      	adds	r0, #1
 801ac42:	4770      	bx	lr
 801ac44:	2000      	movs	r0, #0
 801ac46:	e7ea      	b.n	801ac1e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ac48:	2020      	movs	r0, #32
 801ac4a:	4770      	bx	lr

0801ac4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac50:	b087      	sub	sp, #28
 801ac52:	4681      	mov	r9, r0
 801ac54:	4698      	mov	r8, r3
 801ac56:	4610      	mov	r0, r2
 801ac58:	460d      	mov	r5, r1
 801ac5a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ac5e:	b981      	cbnz	r1, 801ac82 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ac60:	b14b      	cbz	r3, 801ac76 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ac62:	460b      	mov	r3, r1
 801ac64:	464a      	mov	r2, r9
 801ac66:	4641      	mov	r1, r8
 801ac68:	e9cd 4700 	strd	r4, r7, [sp]
 801ac6c:	f7ff ffee 	bl	801ac4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ac70:	b007      	add	sp, #28
 801ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac76:	f04f 33ff 	mov.w	r3, #4294967295
 801ac7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ac7e:	603b      	str	r3, [r7, #0]
 801ac80:	e7f6      	b.n	801ac70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ac82:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ac86:	d107      	bne.n	801ac98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ac88:	fb09 f602 	mul.w	r6, r9, r2
 801ac8c:	fbb6 f0f4 	udiv	r0, r6, r4
 801ac90:	fb04 6610 	mls	r6, r4, r0, r6
 801ac94:	603e      	str	r6, [r7, #0]
 801ac96:	e7eb      	b.n	801ac70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ac98:	2601      	movs	r6, #1
 801ac9a:	fa09 fb01 	lsl.w	fp, r9, r1
 801ac9e:	408e      	lsls	r6, r1
 801aca0:	fbbb f3f4 	udiv	r3, fp, r4
 801aca4:	3e01      	subs	r6, #1
 801aca6:	9302      	str	r3, [sp, #8]
 801aca8:	fb0a f303 	mul.w	r3, sl, r3
 801acac:	4016      	ands	r6, r2
 801acae:	9303      	str	r3, [sp, #12]
 801acb0:	4630      	mov	r0, r6
 801acb2:	f7ff ffad 	bl	801ac10 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801acb6:	464a      	mov	r2, r9
 801acb8:	460b      	mov	r3, r1
 801acba:	4601      	mov	r1, r0
 801acbc:	4630      	mov	r0, r6
 801acbe:	e9cd 4700 	strd	r4, r7, [sp]
 801acc2:	f7ff ffc3 	bl	801ac4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801acc6:	9b02      	ldr	r3, [sp, #8]
 801acc8:	4606      	mov	r6, r0
 801acca:	eb05 0108 	add.w	r1, r5, r8
 801acce:	fb04 bb13 	mls	fp, r4, r3, fp
 801acd2:	4658      	mov	r0, fp
 801acd4:	f7ff ff9c 	bl	801ac10 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801acd8:	ab05      	add	r3, sp, #20
 801acda:	465a      	mov	r2, fp
 801acdc:	e9cd 4300 	strd	r4, r3, [sp]
 801ace0:	4603      	mov	r3, r0
 801ace2:	4650      	mov	r0, sl
 801ace4:	f7ff ffb2 	bl	801ac4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ace8:	6839      	ldr	r1, [r7, #0]
 801acea:	9a05      	ldr	r2, [sp, #20]
 801acec:	9b03      	ldr	r3, [sp, #12]
 801acee:	4411      	add	r1, r2
 801acf0:	fbb1 f2f4 	udiv	r2, r1, r4
 801acf4:	18d3      	adds	r3, r2, r3
 801acf6:	fb04 1412 	mls	r4, r4, r2, r1
 801acfa:	441e      	add	r6, r3
 801acfc:	603c      	str	r4, [r7, #0]
 801acfe:	4430      	add	r0, r6
 801ad00:	e7b6      	b.n	801ac70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ad02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ad02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad06:	b085      	sub	sp, #20
 801ad08:	f1b0 0900 	subs.w	r9, r0, #0
 801ad0c:	461d      	mov	r5, r3
 801ad0e:	4617      	mov	r7, r2
 801ad10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ad12:	bfbb      	ittet	lt
 801ad14:	f1c9 0900 	rsblt	r9, r9, #0
 801ad18:	f04f 36ff 	movlt.w	r6, #4294967295
 801ad1c:	2601      	movge	r6, #1
 801ad1e:	6823      	ldrlt	r3, [r4, #0]
 801ad20:	bfbc      	itt	lt
 801ad22:	425b      	neglt	r3, r3
 801ad24:	6023      	strlt	r3, [r4, #0]
 801ad26:	2a00      	cmp	r2, #0
 801ad28:	da04      	bge.n	801ad34 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ad2a:	6823      	ldr	r3, [r4, #0]
 801ad2c:	4257      	negs	r7, r2
 801ad2e:	4276      	negs	r6, r6
 801ad30:	425b      	negs	r3, r3
 801ad32:	6023      	str	r3, [r4, #0]
 801ad34:	2d00      	cmp	r5, #0
 801ad36:	4638      	mov	r0, r7
 801ad38:	bfba      	itte	lt
 801ad3a:	426d      	neglt	r5, r5
 801ad3c:	f04f 38ff 	movlt.w	r8, #4294967295
 801ad40:	f04f 0801 	movge.w	r8, #1
 801ad44:	f7ff ff64 	bl	801ac10 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ad48:	ab03      	add	r3, sp, #12
 801ad4a:	463a      	mov	r2, r7
 801ad4c:	e9cd 5300 	strd	r5, r3, [sp]
 801ad50:	4603      	mov	r3, r0
 801ad52:	4648      	mov	r0, r9
 801ad54:	f7ff ff7a 	bl	801ac4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ad58:	6823      	ldr	r3, [r4, #0]
 801ad5a:	9a03      	ldr	r2, [sp, #12]
 801ad5c:	4546      	cmp	r6, r8
 801ad5e:	441a      	add	r2, r3
 801ad60:	fb92 f3f5 	sdiv	r3, r2, r5
 801ad64:	4418      	add	r0, r3
 801ad66:	fb05 2313 	mls	r3, r5, r3, r2
 801ad6a:	bf18      	it	ne
 801ad6c:	4240      	negne	r0, r0
 801ad6e:	1c72      	adds	r2, r6, #1
 801ad70:	6023      	str	r3, [r4, #0]
 801ad72:	d105      	bne.n	801ad80 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	f1c3 0200 	rsb	r2, r3, #0
 801ad7a:	db0b      	blt.n	801ad94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ad7c:	6022      	str	r2, [r4, #0]
 801ad7e:	e006      	b.n	801ad8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ad80:	2e01      	cmp	r6, #1
 801ad82:	d104      	bne.n	801ad8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	da02      	bge.n	801ad8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ad88:	442b      	add	r3, r5
 801ad8a:	3801      	subs	r0, #1
 801ad8c:	6023      	str	r3, [r4, #0]
 801ad8e:	b005      	add	sp, #20
 801ad90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad94:	3801      	subs	r0, #1
 801ad96:	1b52      	subs	r2, r2, r5
 801ad98:	e7f0      	b.n	801ad7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801ad9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ad9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ada0:	4c1c      	ldr	r4, [pc, #112]	; (801ae14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ada2:	4605      	mov	r5, r0
 801ada4:	6807      	ldr	r7, [r0, #0]
 801ada6:	69a3      	ldr	r3, [r4, #24]
 801ada8:	b92b      	cbnz	r3, 801adb6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801adaa:	6840      	ldr	r0, [r0, #4]
 801adac:	e9c5 7000 	strd	r7, r0, [r5]
 801adb0:	b004      	add	sp, #16
 801adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adb6:	f04f 0802 	mov.w	r8, #2
 801adba:	68a2      	ldr	r2, [r4, #8]
 801adbc:	ae04      	add	r6, sp, #16
 801adbe:	6820      	ldr	r0, [r4, #0]
 801adc0:	fb93 f1f8 	sdiv	r1, r3, r8
 801adc4:	440a      	add	r2, r1
 801adc6:	69e1      	ldr	r1, [r4, #28]
 801adc8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801adcc:	463a      	mov	r2, r7
 801adce:	9600      	str	r6, [sp, #0]
 801add0:	f7ff ff97 	bl	801ad02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801add4:	69a3      	ldr	r3, [r4, #24]
 801add6:	4607      	mov	r7, r0
 801add8:	686a      	ldr	r2, [r5, #4]
 801adda:	6a21      	ldr	r1, [r4, #32]
 801addc:	9600      	str	r6, [sp, #0]
 801adde:	6860      	ldr	r0, [r4, #4]
 801ade0:	f7ff ff8f 	bl	801ad02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ade4:	69a3      	ldr	r3, [r4, #24]
 801ade6:	6962      	ldr	r2, [r4, #20]
 801ade8:	4407      	add	r7, r0
 801adea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801adec:	9600      	str	r6, [sp, #0]
 801adee:	68e0      	ldr	r0, [r4, #12]
 801adf0:	fb93 f8f8 	sdiv	r8, r3, r8
 801adf4:	4442      	add	r2, r8
 801adf6:	9203      	str	r2, [sp, #12]
 801adf8:	682a      	ldr	r2, [r5, #0]
 801adfa:	f7ff ff82 	bl	801ad02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801adfe:	4680      	mov	r8, r0
 801ae00:	9600      	str	r6, [sp, #0]
 801ae02:	69a3      	ldr	r3, [r4, #24]
 801ae04:	686a      	ldr	r2, [r5, #4]
 801ae06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ae08:	6920      	ldr	r0, [r4, #16]
 801ae0a:	f7ff ff7a 	bl	801ad02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ae0e:	4440      	add	r0, r8
 801ae10:	e7cc      	b.n	801adac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801ae12:	bf00      	nop
 801ae14:	2001521c 	.word	0x2001521c

0801ae18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ae18:	4b07      	ldr	r3, [pc, #28]	; (801ae38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801ae1a:	781b      	ldrb	r3, [r3, #0]
 801ae1c:	2b01      	cmp	r3, #1
 801ae1e:	d109      	bne.n	801ae34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801ae20:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ae24:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ae28:	8003      	strh	r3, [r0, #0]
 801ae2a:	4b04      	ldr	r3, [pc, #16]	; (801ae3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ae2c:	881b      	ldrh	r3, [r3, #0]
 801ae2e:	3b01      	subs	r3, #1
 801ae30:	1a9b      	subs	r3, r3, r2
 801ae32:	800b      	strh	r3, [r1, #0]
 801ae34:	4770      	bx	lr
 801ae36:	bf00      	nop
 801ae38:	20015208 	.word	0x20015208
 801ae3c:	20015204 	.word	0x20015204

0801ae40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ae40:	4b07      	ldr	r3, [pc, #28]	; (801ae60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ae42:	b510      	push	{r4, lr}
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	2b01      	cmp	r3, #1
 801ae48:	d108      	bne.n	801ae5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ae4a:	4b06      	ldr	r3, [pc, #24]	; (801ae64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ae4c:	880c      	ldrh	r4, [r1, #0]
 801ae4e:	881b      	ldrh	r3, [r3, #0]
 801ae50:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ae54:	3b01      	subs	r3, #1
 801ae56:	1b1b      	subs	r3, r3, r4
 801ae58:	8003      	strh	r3, [r0, #0]
 801ae5a:	800a      	strh	r2, [r1, #0]
 801ae5c:	bd10      	pop	{r4, pc}
 801ae5e:	bf00      	nop
 801ae60:	20015208 	.word	0x20015208
 801ae64:	20015204 	.word	0x20015204

0801ae68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ae68:	4b0a      	ldr	r3, [pc, #40]	; (801ae94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ae6a:	b510      	push	{r4, lr}
 801ae6c:	781b      	ldrb	r3, [r3, #0]
 801ae6e:	2b01      	cmp	r3, #1
 801ae70:	d10e      	bne.n	801ae90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ae72:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ae76:	8843      	ldrh	r3, [r0, #2]
 801ae78:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ae7c:	18ca      	adds	r2, r1, r3
 801ae7e:	4b06      	ldr	r3, [pc, #24]	; (801ae98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ae80:	8044      	strh	r4, [r0, #2]
 801ae82:	881b      	ldrh	r3, [r3, #0]
 801ae84:	1a9b      	subs	r3, r3, r2
 801ae86:	8003      	strh	r3, [r0, #0]
 801ae88:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ae8c:	8081      	strh	r1, [r0, #4]
 801ae8e:	80c3      	strh	r3, [r0, #6]
 801ae90:	bd10      	pop	{r4, pc}
 801ae92:	bf00      	nop
 801ae94:	20015208 	.word	0x20015208
 801ae98:	20015204 	.word	0x20015204

0801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ae9c:	4b08      	ldr	r3, [pc, #32]	; (801aec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ae9e:	781b      	ldrb	r3, [r3, #0]
 801aea0:	2b01      	cmp	r3, #1
 801aea2:	d10c      	bne.n	801aebe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801aea4:	8803      	ldrh	r3, [r0, #0]
 801aea6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801aeaa:	8842      	ldrh	r2, [r0, #2]
 801aeac:	8002      	strh	r2, [r0, #0]
 801aeae:	185a      	adds	r2, r3, r1
 801aeb0:	4b04      	ldr	r3, [pc, #16]	; (801aec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801aeb2:	881b      	ldrh	r3, [r3, #0]
 801aeb4:	1a9b      	subs	r3, r3, r2
 801aeb6:	8043      	strh	r3, [r0, #2]
 801aeb8:	88c3      	ldrh	r3, [r0, #6]
 801aeba:	80c1      	strh	r1, [r0, #6]
 801aebc:	8083      	strh	r3, [r0, #4]
 801aebe:	4770      	bx	lr
 801aec0:	20015208 	.word	0x20015208
 801aec4:	20015204 	.word	0x20015204

0801aec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801aec8:	4b07      	ldr	r3, [pc, #28]	; (801aee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801aeca:	b510      	push	{r4, lr}
 801aecc:	781b      	ldrb	r3, [r3, #0]
 801aece:	2b01      	cmp	r3, #1
 801aed0:	d108      	bne.n	801aee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801aed2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801aed6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aeda:	8003      	strh	r3, [r0, #0]
 801aedc:	8893      	ldrh	r3, [r2, #4]
 801aede:	3b01      	subs	r3, #1
 801aee0:	1b1b      	subs	r3, r3, r4
 801aee2:	800b      	strh	r3, [r1, #0]
 801aee4:	bd10      	pop	{r4, pc}
 801aee6:	bf00      	nop
 801aee8:	20015208 	.word	0x20015208

0801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801aeec:	4b0a      	ldr	r3, [pc, #40]	; (801af18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801aeee:	460a      	mov	r2, r1
 801aef0:	b510      	push	{r4, lr}
 801aef2:	781b      	ldrb	r3, [r3, #0]
 801aef4:	2b01      	cmp	r3, #1
 801aef6:	d10d      	bne.n	801af14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801aef8:	8881      	ldrh	r1, [r0, #4]
 801aefa:	8803      	ldrh	r3, [r0, #0]
 801aefc:	440b      	add	r3, r1
 801aefe:	4601      	mov	r1, r0
 801af00:	3b01      	subs	r3, #1
 801af02:	f821 3b02 	strh.w	r3, [r1], #2
 801af06:	f7ff ffdf 	bl	801aec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801af0a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af0e:	88c2      	ldrh	r2, [r0, #6]
 801af10:	80c3      	strh	r3, [r0, #6]
 801af12:	8082      	strh	r2, [r0, #4]
 801af14:	bd10      	pop	{r4, pc}
 801af16:	bf00      	nop
 801af18:	20015208 	.word	0x20015208

0801af1c <_ZN8touchgfx11Application13requestRedrawEv>:
 801af1c:	4b06      	ldr	r3, [pc, #24]	; (801af38 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801af1e:	2100      	movs	r1, #0
 801af20:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af24:	4b05      	ldr	r3, [pc, #20]	; (801af3c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801af26:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801af2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af2e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801af32:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801af36:	4770      	bx	lr
 801af38:	20015204 	.word	0x20015204
 801af3c:	20015206 	.word	0x20015206

0801af40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801af40:	4b03      	ldr	r3, [pc, #12]	; (801af50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801af42:	6818      	ldr	r0, [r3, #0]
 801af44:	b110      	cbz	r0, 801af4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801af46:	6803      	ldr	r3, [r0, #0]
 801af48:	699b      	ldr	r3, [r3, #24]
 801af4a:	4718      	bx	r3
 801af4c:	4770      	bx	lr
 801af4e:	bf00      	nop
 801af50:	2001524c 	.word	0x2001524c

0801af54 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801af54:	4770      	bx	lr
	...

0801af58 <_ZN8touchgfx11Application4drawEv>:
 801af58:	4b09      	ldr	r3, [pc, #36]	; (801af80 <_ZN8touchgfx11Application4drawEv+0x28>)
 801af5a:	b507      	push	{r0, r1, r2, lr}
 801af5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af60:	2100      	movs	r1, #0
 801af62:	4b08      	ldr	r3, [pc, #32]	; (801af84 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801af64:	9100      	str	r1, [sp, #0]
 801af66:	4669      	mov	r1, sp
 801af68:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af70:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af74:	6803      	ldr	r3, [r0, #0]
 801af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af78:	4798      	blx	r3
 801af7a:	b003      	add	sp, #12
 801af7c:	f85d fb04 	ldr.w	pc, [sp], #4
 801af80:	20015204 	.word	0x20015204
 801af84:	20015206 	.word	0x20015206

0801af88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801af88:	4b03      	ldr	r3, [pc, #12]	; (801af98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801af8a:	6818      	ldr	r0, [r3, #0]
 801af8c:	b110      	cbz	r0, 801af94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801af8e:	6803      	ldr	r3, [r0, #0]
 801af90:	69db      	ldr	r3, [r3, #28]
 801af92:	4718      	bx	r3
 801af94:	4770      	bx	lr
 801af96:	bf00      	nop
 801af98:	2001524c 	.word	0x2001524c

0801af9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801af9c:	4b03      	ldr	r3, [pc, #12]	; (801afac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801af9e:	6818      	ldr	r0, [r3, #0]
 801afa0:	b110      	cbz	r0, 801afa8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801afa2:	6803      	ldr	r3, [r0, #0]
 801afa4:	6a1b      	ldr	r3, [r3, #32]
 801afa6:	4718      	bx	r3
 801afa8:	4770      	bx	lr
 801afaa:	bf00      	nop
 801afac:	2001524c 	.word	0x2001524c

0801afb0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801afb0:	2300      	movs	r3, #0
 801afb2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801afb6:	4770      	bx	lr

0801afb8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801afb8:	4b03      	ldr	r3, [pc, #12]	; (801afc8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801afba:	6818      	ldr	r0, [r3, #0]
 801afbc:	b110      	cbz	r0, 801afc4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801afbe:	6803      	ldr	r3, [r0, #0]
 801afc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afc2:	4718      	bx	r3
 801afc4:	4770      	bx	lr
 801afc6:	bf00      	nop
 801afc8:	2001524c 	.word	0x2001524c

0801afcc <_ZN8touchgfx11ApplicationD1Ev>:
 801afcc:	4770      	bx	lr

0801afce <_ZN8touchgfx11ApplicationD0Ev>:
 801afce:	b510      	push	{r4, lr}
 801afd0:	4604      	mov	r4, r0
 801afd2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801afd6:	f00e fbb7 	bl	8029748 <_ZdlPvj>
 801afda:	4620      	mov	r0, r4
 801afdc:	bd10      	pop	{r4, pc}

0801afde <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801afde:	b510      	push	{r4, lr}
 801afe0:	f9b1 4000 	ldrsh.w	r4, [r1]
 801afe4:	888a      	ldrh	r2, [r1, #4]
 801afe6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801afea:	4422      	add	r2, r4
 801afec:	b212      	sxth	r2, r2
 801afee:	4293      	cmp	r3, r2
 801aff0:	da15      	bge.n	801b01e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801aff2:	8882      	ldrh	r2, [r0, #4]
 801aff4:	4413      	add	r3, r2
 801aff6:	b21b      	sxth	r3, r3
 801aff8:	429c      	cmp	r4, r3
 801affa:	da10      	bge.n	801b01e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801affc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b000:	88c9      	ldrh	r1, [r1, #6]
 801b002:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b006:	4419      	add	r1, r3
 801b008:	b209      	sxth	r1, r1
 801b00a:	428a      	cmp	r2, r1
 801b00c:	da07      	bge.n	801b01e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b00e:	88c0      	ldrh	r0, [r0, #6]
 801b010:	4410      	add	r0, r2
 801b012:	b200      	sxth	r0, r0
 801b014:	4283      	cmp	r3, r0
 801b016:	bfac      	ite	ge
 801b018:	2000      	movge	r0, #0
 801b01a:	2001      	movlt	r0, #1
 801b01c:	bd10      	pop	{r4, pc}
 801b01e:	2000      	movs	r0, #0
 801b020:	e7fc      	b.n	801b01c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b022 <_ZN8touchgfx4Rect10restrictToEss>:
 801b022:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b026:	2b00      	cmp	r3, #0
 801b028:	b510      	push	{r4, lr}
 801b02a:	da04      	bge.n	801b036 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b02c:	8884      	ldrh	r4, [r0, #4]
 801b02e:	4423      	add	r3, r4
 801b030:	8083      	strh	r3, [r0, #4]
 801b032:	2300      	movs	r3, #0
 801b034:	8003      	strh	r3, [r0, #0]
 801b036:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b03a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b03e:	1b09      	subs	r1, r1, r4
 801b040:	428b      	cmp	r3, r1
 801b042:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b046:	bfc8      	it	gt
 801b048:	8081      	strhgt	r1, [r0, #4]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	da04      	bge.n	801b058 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b04e:	88c1      	ldrh	r1, [r0, #6]
 801b050:	440b      	add	r3, r1
 801b052:	80c3      	strh	r3, [r0, #6]
 801b054:	2300      	movs	r3, #0
 801b056:	8043      	strh	r3, [r0, #2]
 801b058:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b05c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b060:	1a52      	subs	r2, r2, r1
 801b062:	4293      	cmp	r3, r2
 801b064:	bfc8      	it	gt
 801b066:	80c2      	strhgt	r2, [r0, #6]
 801b068:	bd10      	pop	{r4, pc}
	...

0801b06c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b06c:	4b10      	ldr	r3, [pc, #64]	; (801b0b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b06e:	b510      	push	{r4, lr}
 801b070:	460c      	mov	r4, r1
 801b072:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b076:	4b0f      	ldr	r3, [pc, #60]	; (801b0b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b078:	4620      	mov	r0, r4
 801b07a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b07e:	f7ff ffd0 	bl	801b022 <_ZN8touchgfx4Rect10restrictToEss>
 801b082:	4b0d      	ldr	r3, [pc, #52]	; (801b0b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b084:	6818      	ldr	r0, [r3, #0]
 801b086:	b190      	cbz	r0, 801b0ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b088:	6803      	ldr	r3, [r0, #0]
 801b08a:	4621      	mov	r1, r4
 801b08c:	689b      	ldr	r3, [r3, #8]
 801b08e:	4798      	blx	r3
 801b090:	4b0a      	ldr	r3, [pc, #40]	; (801b0bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b092:	6818      	ldr	r0, [r3, #0]
 801b094:	b118      	cbz	r0, 801b09e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b096:	6803      	ldr	r3, [r0, #0]
 801b098:	4621      	mov	r1, r4
 801b09a:	689b      	ldr	r3, [r3, #8]
 801b09c:	4798      	blx	r3
 801b09e:	4b08      	ldr	r3, [pc, #32]	; (801b0c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b0a0:	4621      	mov	r1, r4
 801b0a2:	6818      	ldr	r0, [r3, #0]
 801b0a4:	6803      	ldr	r3, [r0, #0]
 801b0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0aa:	69db      	ldr	r3, [r3, #28]
 801b0ac:	4718      	bx	r3
 801b0ae:	bd10      	pop	{r4, pc}
 801b0b0:	20015206 	.word	0x20015206
 801b0b4:	20015204 	.word	0x20015204
 801b0b8:	2001524c 	.word	0x2001524c
 801b0bc:	20015248 	.word	0x20015248
 801b0c0:	20015210 	.word	0x20015210

0801b0c4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0c6:	4606      	mov	r6, r0
 801b0c8:	4608      	mov	r0, r1
 801b0ca:	460f      	mov	r7, r1
 801b0cc:	f7fb ff13 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0d0:	b9e8      	cbnz	r0, 801b10e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0d2:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b0d6:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b0da:	42a5      	cmp	r5, r4
 801b0dc:	db17      	blt.n	801b10e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b0e2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b0e6:	429a      	cmp	r2, r3
 801b0e8:	db11      	blt.n	801b10e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0ea:	88b9      	ldrh	r1, [r7, #4]
 801b0ec:	440d      	add	r5, r1
 801b0ee:	88b1      	ldrh	r1, [r6, #4]
 801b0f0:	440c      	add	r4, r1
 801b0f2:	b22d      	sxth	r5, r5
 801b0f4:	b224      	sxth	r4, r4
 801b0f6:	42a5      	cmp	r5, r4
 801b0f8:	dc09      	bgt.n	801b10e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0fa:	88f8      	ldrh	r0, [r7, #6]
 801b0fc:	4410      	add	r0, r2
 801b0fe:	88f2      	ldrh	r2, [r6, #6]
 801b100:	4413      	add	r3, r2
 801b102:	b200      	sxth	r0, r0
 801b104:	b21b      	sxth	r3, r3
 801b106:	4298      	cmp	r0, r3
 801b108:	bfcc      	ite	gt
 801b10a:	2000      	movgt	r0, #0
 801b10c:	2001      	movle	r0, #1
 801b10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b110 <_ZN8touchgfx11Application11getInstanceEv>:
 801b110:	4b01      	ldr	r3, [pc, #4]	; (801b118 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b112:	6818      	ldr	r0, [r3, #0]
 801b114:	4770      	bx	lr
 801b116:	bf00      	nop
 801b118:	2001525c 	.word	0x2001525c

0801b11c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801b11c:	2300      	movs	r3, #0
 801b11e:	b510      	push	{r4, lr}
 801b120:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801b124:	4604      	mov	r4, r0
 801b126:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b12a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801b12e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801b132:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801b136:	429a      	cmp	r2, r3
 801b138:	d90e      	bls.n	801b158 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801b13a:	18e2      	adds	r2, r4, r3
 801b13c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801b140:	b122      	cbz	r2, 801b14c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801b142:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b146:	6803      	ldr	r3, [r0, #0]
 801b148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b14a:	4798      	blx	r3
 801b14c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801b150:	3301      	adds	r3, #1
 801b152:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801b156:	e7ea      	b.n	801b12e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801b158:	bd10      	pop	{r4, pc}

0801b15a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801b15a:	b530      	push	{r4, r5, lr}
 801b15c:	2200      	movs	r2, #0
 801b15e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801b162:	b293      	uxth	r3, r2
 801b164:	429d      	cmp	r5, r3
 801b166:	d90e      	bls.n	801b186 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b168:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801b16c:	428b      	cmp	r3, r1
 801b16e:	d10b      	bne.n	801b188 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b170:	1884      	adds	r4, r0, r2
 801b172:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801b176:	b13b      	cbz	r3, 801b188 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b178:	3b01      	subs	r3, #1
 801b17a:	b2db      	uxtb	r3, r3
 801b17c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801b180:	b90b      	cbnz	r3, 801b186 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b182:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b186:	bd30      	pop	{r4, r5, pc}
 801b188:	3201      	adds	r2, #1
 801b18a:	e7ea      	b.n	801b162 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801b18c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b18c:	2300      	movs	r3, #0
 801b18e:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801b192:	30a4      	adds	r0, #164	; 0xa4
 801b194:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b198:	f802 3b01 	strb.w	r3, [r2], #1
 801b19c:	4282      	cmp	r2, r0
 801b19e:	d1fb      	bne.n	801b198 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b1a0:	4770      	bx	lr
	...

0801b1a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b1a4:	b570      	push	{r4, r5, r6, lr}
 801b1a6:	4c0b      	ldr	r4, [pc, #44]	; (801b1d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b1a8:	4605      	mov	r5, r0
 801b1aa:	460e      	mov	r6, r1
 801b1ac:	6820      	ldr	r0, [r4, #0]
 801b1ae:	b110      	cbz	r0, 801b1b6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b1b0:	6803      	ldr	r3, [r0, #0]
 801b1b2:	695b      	ldr	r3, [r3, #20]
 801b1b4:	4798      	blx	r3
 801b1b6:	1d28      	adds	r0, r5, #4
 801b1b8:	f7ff ffe8 	bl	801b18c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b1bc:	6026      	str	r6, [r4, #0]
 801b1be:	6833      	ldr	r3, [r6, #0]
 801b1c0:	4630      	mov	r0, r6
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	4798      	blx	r3
 801b1c6:	682b      	ldr	r3, [r5, #0]
 801b1c8:	4628      	mov	r0, r5
 801b1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1d0:	4718      	bx	r3
 801b1d2:	bf00      	nop
 801b1d4:	2001524c 	.word	0x2001524c

0801b1d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b1d8:	2300      	movs	r3, #0
 801b1da:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801b1de:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801b1e2:	461a      	mov	r2, r3
 801b1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1e6:	461c      	mov	r4, r3
 801b1e8:	461d      	mov	r5, r3
 801b1ea:	459c      	cmp	ip, r3
 801b1ec:	dd1a      	ble.n	801b224 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b1ee:	18c6      	adds	r6, r0, r3
 801b1f0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801b1f4:	b16e      	cbz	r6, 801b212 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	d008      	beq.n	801b20c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b1fa:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b1fe:	fa1f fe82 	uxth.w	lr, r2
 801b202:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b206:	1887      	adds	r7, r0, r2
 801b208:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801b20c:	3201      	adds	r2, #1
 801b20e:	3301      	adds	r3, #1
 801b210:	e7eb      	b.n	801b1ea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b212:	4299      	cmp	r1, r3
 801b214:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801b218:	bfa8      	it	ge
 801b21a:	3501      	addge	r5, #1
 801b21c:	429e      	cmp	r6, r3
 801b21e:	bfc8      	it	gt
 801b220:	3401      	addgt	r4, #1
 801b222:	e7f4      	b.n	801b20e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b224:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801b228:	1b49      	subs	r1, r1, r5
 801b22a:	1b1b      	subs	r3, r3, r4
 801b22c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801b230:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801b234:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b238:	4293      	cmp	r3, r2
 801b23a:	dd03      	ble.n	801b244 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b23c:	3b01      	subs	r3, #1
 801b23e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801b242:	e7f7      	b.n	801b234 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b244:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b248 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b248:	b570      	push	{r4, r5, r6, lr}
 801b24a:	4d16      	ldr	r5, [pc, #88]	; (801b2a4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b24c:	4604      	mov	r4, r0
 801b24e:	6828      	ldr	r0, [r5, #0]
 801b250:	b140      	cbz	r0, 801b264 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b252:	7a03      	ldrb	r3, [r0, #8]
 801b254:	b933      	cbnz	r3, 801b264 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b256:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801b25a:	6803      	ldr	r3, [r0, #0]
 801b25c:	689b      	ldr	r3, [r3, #8]
 801b25e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b262:	4718      	bx	r3
 801b264:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801b268:	4e0f      	ldr	r6, [pc, #60]	; (801b2a8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b26a:	b973      	cbnz	r3, 801b28a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b26c:	b168      	cbz	r0, 801b28a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b26e:	7a03      	ldrb	r3, [r0, #8]
 801b270:	b15b      	cbz	r3, 801b28a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b272:	6830      	ldr	r0, [r6, #0]
 801b274:	b110      	cbz	r0, 801b27c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b276:	6803      	ldr	r3, [r0, #0]
 801b278:	691b      	ldr	r3, [r3, #16]
 801b27a:	4798      	blx	r3
 801b27c:	6828      	ldr	r0, [r5, #0]
 801b27e:	6803      	ldr	r3, [r0, #0]
 801b280:	68db      	ldr	r3, [r3, #12]
 801b282:	4798      	blx	r3
 801b284:	2301      	movs	r3, #1
 801b286:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801b28a:	3404      	adds	r4, #4
 801b28c:	4620      	mov	r0, r4
 801b28e:	f7ff ff45 	bl	801b11c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b292:	4620      	mov	r0, r4
 801b294:	f7ff ffa0 	bl	801b1d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b298:	6830      	ldr	r0, [r6, #0]
 801b29a:	b110      	cbz	r0, 801b2a2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b29c:	6803      	ldr	r3, [r0, #0]
 801b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2a0:	e7dd      	b.n	801b25e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b2a2:	bd70      	pop	{r4, r5, r6, pc}
 801b2a4:	20015250 	.word	0x20015250
 801b2a8:	2001524c 	.word	0x2001524c

0801b2ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	460d      	mov	r5, r1
 801b2b4:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	b29a      	uxth	r2, r3
 801b2bc:	4291      	cmp	r1, r2
 801b2be:	d912      	bls.n	801b2e6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801b2c0:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801b2c4:	18e6      	adds	r6, r4, r3
 801b2c6:	42af      	cmp	r7, r5
 801b2c8:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 801b2cc:	d105      	bne.n	801b2da <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801b2ce:	2aff      	cmp	r2, #255	; 0xff
 801b2d0:	d002      	beq.n	801b2d8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b2d2:	3201      	adds	r2, #1
 801b2d4:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 801b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2da:	2a00      	cmp	r2, #0
 801b2dc:	f103 0301 	add.w	r3, r3, #1
 801b2e0:	bf08      	it	eq
 801b2e2:	2001      	moveq	r0, #1
 801b2e4:	e7e9      	b.n	801b2ba <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801b2e6:	b120      	cbz	r0, 801b2f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b2e8:	2920      	cmp	r1, #32
 801b2ea:	d102      	bne.n	801b2f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	f7ff ff73 	bl	801b1d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b2f2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801b2f6:	2b1f      	cmp	r3, #31
 801b2f8:	d8ee      	bhi.n	801b2d8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b2fa:	18e2      	adds	r2, r4, r3
 801b2fc:	2101      	movs	r1, #1
 801b2fe:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801b302:	185a      	adds	r2, r3, r1
 801b304:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 801b308:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b30c:	e7e4      	b.n	801b2d8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801b30e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b30e:	4603      	mov	r3, r0
 801b310:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b314:	2200      	movs	r2, #0
 801b316:	801a      	strh	r2, [r3, #0]
 801b318:	3308      	adds	r3, #8
 801b31a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b31e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b322:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b326:	428b      	cmp	r3, r1
 801b328:	d1f5      	bne.n	801b316 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b32a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b32e:	4770      	bx	lr

0801b330 <_ZN8touchgfx11ApplicationC1Ev>:
 801b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b332:	4b1d      	ldr	r3, [pc, #116]	; (801b3a8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b334:	4606      	mov	r6, r0
 801b336:	4604      	mov	r4, r0
 801b338:	2500      	movs	r5, #0
 801b33a:	f846 3b04 	str.w	r3, [r6], #4
 801b33e:	22a8      	movs	r2, #168	; 0xa8
 801b340:	2100      	movs	r1, #0
 801b342:	4630      	mov	r0, r6
 801b344:	f00e fabe 	bl	80298c4 <memset>
 801b348:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801b34c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801b350:	4f16      	ldr	r7, [pc, #88]	; (801b3ac <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b352:	f7ff ffdc 	bl	801b30e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b356:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801b35a:	f7ff ffd8 	bl	801b30e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b35e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b362:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b366:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801b36a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801b36e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801b372:	490f      	ldr	r1, [pc, #60]	; (801b3b0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b374:	480f      	ldr	r0, [pc, #60]	; (801b3b4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b376:	f00e f8bf 	bl	80294f8 <CRC_Lock>
 801b37a:	4b0f      	ldr	r3, [pc, #60]	; (801b3b8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b37c:	b158      	cbz	r0, 801b396 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b37e:	801d      	strh	r5, [r3, #0]
 801b380:	2300      	movs	r3, #0
 801b382:	4a0e      	ldr	r2, [pc, #56]	; (801b3bc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b384:	4630      	mov	r0, r6
 801b386:	6013      	str	r3, [r2, #0]
 801b388:	4a0d      	ldr	r2, [pc, #52]	; (801b3c0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b38a:	603b      	str	r3, [r7, #0]
 801b38c:	6013      	str	r3, [r2, #0]
 801b38e:	f7ff fefd 	bl	801b18c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b392:	4620      	mov	r0, r4
 801b394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b39a:	2002      	movs	r0, #2
 801b39c:	801a      	strh	r2, [r3, #0]
 801b39e:	6038      	str	r0, [r7, #0]
 801b3a0:	f001 fa10 	bl	801c7c4 <_ZN8touchgfx6Screen4drawEv>
 801b3a4:	e7ec      	b.n	801b380 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b3a6:	bf00      	nop
 801b3a8:	0802f3e4 	.word	0x0802f3e4
 801b3ac:	2001524c 	.word	0x2001524c
 801b3b0:	b5e8b5cd 	.word	0xb5e8b5cd
 801b3b4:	f407a5c2 	.word	0xf407a5c2
 801b3b8:	20000044 	.word	0x20000044
 801b3bc:	2001525c 	.word	0x2001525c
 801b3c0:	20015250 	.word	0x20015250

0801b3c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b3c4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b3c8:	3b01      	subs	r3, #1
 801b3ca:	b29b      	uxth	r3, r3
 801b3cc:	428b      	cmp	r3, r1
 801b3ce:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b3d2:	b510      	push	{r4, lr}
 801b3d4:	d908      	bls.n	801b3e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b3d6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b3da:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b3de:	681a      	ldr	r2, [r3, #0]
 801b3e0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b3e4:	685a      	ldr	r2, [r3, #4]
 801b3e6:	6062      	str	r2, [r4, #4]
 801b3e8:	bd10      	pop	{r4, pc}
	...

0801b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f0:	b08f      	sub	sp, #60	; 0x3c
 801b3f2:	4b8f      	ldr	r3, [pc, #572]	; (801b630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b3f4:	4683      	mov	fp, r0
 801b3f6:	ac0a      	add	r4, sp, #40	; 0x28
 801b3f8:	e884 0006 	stmia.w	r4, {r1, r2}
 801b3fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b400:	4620      	mov	r0, r4
 801b402:	4b8c      	ldr	r3, [pc, #560]	; (801b634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b404:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b408:	f7ff fe0b 	bl	801b022 <_ZN8touchgfx4Rect10restrictToEss>
 801b40c:	4620      	mov	r0, r4
 801b40e:	f7fb fd72 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b412:	2800      	cmp	r0, #0
 801b414:	d16a      	bne.n	801b4ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b416:	9403      	str	r4, [sp, #12]
 801b418:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801b41c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801b420:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b424:	9301      	str	r3, [sp, #4]
 801b426:	35a4      	adds	r5, #164	; 0xa4
 801b428:	b15c      	cbz	r4, 801b442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b42a:	4629      	mov	r1, r5
 801b42c:	9803      	ldr	r0, [sp, #12]
 801b42e:	f7ff fe49 	bl	801b0c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b432:	3c01      	subs	r4, #1
 801b434:	b118      	cbz	r0, 801b43e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b436:	b2a1      	uxth	r1, r4
 801b438:	9801      	ldr	r0, [sp, #4]
 801b43a:	f7ff ffc3 	bl	801b3c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b43e:	3d08      	subs	r5, #8
 801b440:	e7f2      	b.n	801b428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b442:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801b446:	f108 33ff 	add.w	r3, r8, #4294967295
 801b44a:	f8cd 8010 	str.w	r8, [sp, #16]
 801b44e:	9302      	str	r3, [sp, #8]
 801b450:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801b454:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b458:	9306      	str	r3, [sp, #24]
 801b45a:	445c      	add	r4, fp
 801b45c:	2500      	movs	r5, #0
 801b45e:	4626      	mov	r6, r4
 801b460:	f8cd 8014 	str.w	r8, [sp, #20]
 801b464:	462f      	mov	r7, r5
 801b466:	9b05      	ldr	r3, [sp, #20]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d073      	beq.n	801b554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b46c:	9903      	ldr	r1, [sp, #12]
 801b46e:	4630      	mov	r0, r6
 801b470:	f7ff fdb5 	bl	801afde <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b474:	b350      	cbz	r0, 801b4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b476:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b47a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b47e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801b482:	45e6      	cmp	lr, ip
 801b484:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b488:	db33      	blt.n	801b4f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b48a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b48e:	88b3      	ldrh	r3, [r6, #4]
 801b490:	4472      	add	r2, lr
 801b492:	4463      	add	r3, ip
 801b494:	b212      	sxth	r2, r2
 801b496:	b21b      	sxth	r3, r3
 801b498:	429a      	cmp	r2, r3
 801b49a:	dc2a      	bgt.n	801b4f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b49c:	fa1f f289 	uxth.w	r2, r9
 801b4a0:	88f3      	ldrh	r3, [r6, #6]
 801b4a2:	45ca      	cmp	sl, r9
 801b4a4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b4a8:	4413      	add	r3, r2
 801b4aa:	fa1f fc8a 	uxth.w	ip, sl
 801b4ae:	b29b      	uxth	r3, r3
 801b4b0:	fa0f fe83 	sxth.w	lr, r3
 801b4b4:	db0f      	blt.n	801b4d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b4b6:	eba3 030c 	sub.w	r3, r3, ip
 801b4ba:	1ac9      	subs	r1, r1, r3
 801b4bc:	b209      	sxth	r1, r1
 801b4be:	2900      	cmp	r1, #0
 801b4c0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b4c4:	dd12      	ble.n	801b4ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b4c6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801b4ca:	4605      	mov	r5, r0
 801b4cc:	9b05      	ldr	r3, [sp, #20]
 801b4ce:	3e08      	subs	r6, #8
 801b4d0:	3b01      	subs	r3, #1
 801b4d2:	9305      	str	r3, [sp, #20]
 801b4d4:	e7c7      	b.n	801b466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b4d6:	4461      	add	r1, ip
 801b4d8:	b209      	sxth	r1, r1
 801b4da:	4571      	cmp	r1, lr
 801b4dc:	dc38      	bgt.n	801b550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4de:	eba2 020c 	sub.w	r2, r2, ip
 801b4e2:	b212      	sxth	r2, r2
 801b4e4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801b4e8:	2a00      	cmp	r2, #0
 801b4ea:	dcee      	bgt.n	801b4ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b4ec:	b00f      	add	sp, #60	; 0x3c
 801b4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4f2:	45ca      	cmp	sl, r9
 801b4f4:	db2c      	blt.n	801b550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4f6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801b4fa:	449a      	add	sl, r3
 801b4fc:	88f3      	ldrh	r3, [r6, #6]
 801b4fe:	4499      	add	r9, r3
 801b500:	fa0f fa8a 	sxth.w	sl, sl
 801b504:	fa0f f989 	sxth.w	r9, r9
 801b508:	45ca      	cmp	sl, r9
 801b50a:	dc21      	bgt.n	801b550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b50c:	fa1f f28c 	uxth.w	r2, ip
 801b510:	88b3      	ldrh	r3, [r6, #4]
 801b512:	45e6      	cmp	lr, ip
 801b514:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b518:	4413      	add	r3, r2
 801b51a:	fa1f f98e 	uxth.w	r9, lr
 801b51e:	b29b      	uxth	r3, r3
 801b520:	fa0f fa83 	sxth.w	sl, r3
 801b524:	db0a      	blt.n	801b53c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801b526:	eba3 0309 	sub.w	r3, r3, r9
 801b52a:	1ac9      	subs	r1, r1, r3
 801b52c:	b209      	sxth	r1, r1
 801b52e:	2900      	cmp	r1, #0
 801b530:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b534:	ddda      	ble.n	801b4ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b536:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b53a:	e7c6      	b.n	801b4ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b53c:	4449      	add	r1, r9
 801b53e:	b209      	sxth	r1, r1
 801b540:	4551      	cmp	r1, sl
 801b542:	dc05      	bgt.n	801b550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b544:	eba2 0209 	sub.w	r2, r2, r9
 801b548:	b212      	sxth	r2, r2
 801b54a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b54e:	e7cb      	b.n	801b4e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b550:	4607      	mov	r7, r0
 801b552:	e7bb      	b.n	801b4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b554:	2d00      	cmp	r5, #0
 801b556:	d181      	bne.n	801b45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801b558:	2f00      	cmp	r7, #0
 801b55a:	f000 81dd 	beq.w	801b918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b55e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801b562:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801b566:	b2b3      	uxth	r3, r6
 801b568:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b56c:	b2b9      	uxth	r1, r7
 801b56e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801b572:	441a      	add	r2, r3
 801b574:	448a      	add	sl, r1
 801b576:	9105      	str	r1, [sp, #20]
 801b578:	b292      	uxth	r2, r2
 801b57a:	fa1f fa8a 	uxth.w	sl, sl
 801b57e:	fa0f f882 	sxth.w	r8, r2
 801b582:	fa0f f98a 	sxth.w	r9, sl
 801b586:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b58a:	9b04      	ldr	r3, [sp, #16]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d053      	beq.n	801b638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b590:	9903      	ldr	r1, [sp, #12]
 801b592:	4620      	mov	r0, r4
 801b594:	f7ff fd23 	bl	801afde <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b598:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b59c:	b1c0      	cbz	r0, 801b5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b59e:	f9b4 e000 	ldrsh.w	lr, [r4]
 801b5a2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b5a6:	4576      	cmp	r6, lr
 801b5a8:	dc23      	bgt.n	801b5f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b5aa:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b5ae:	44f4      	add	ip, lr
 801b5b0:	fa0f fc8c 	sxth.w	ip, ip
 801b5b4:	45e0      	cmp	r8, ip
 801b5b6:	db1c      	blt.n	801b5f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b5b8:	428f      	cmp	r7, r1
 801b5ba:	fa1f fc81 	uxth.w	ip, r1
 801b5be:	88e1      	ldrh	r1, [r4, #6]
 801b5c0:	dc0d      	bgt.n	801b5de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801b5c2:	ebaa 0c0c 	sub.w	ip, sl, ip
 801b5c6:	f8a4 9002 	strh.w	r9, [r4, #2]
 801b5ca:	eba1 010c 	sub.w	r1, r1, ip
 801b5ce:	80e1      	strh	r1, [r4, #6]
 801b5d0:	4628      	mov	r0, r5
 801b5d2:	9904      	ldr	r1, [sp, #16]
 801b5d4:	3c08      	subs	r4, #8
 801b5d6:	4605      	mov	r5, r0
 801b5d8:	3901      	subs	r1, #1
 801b5da:	9104      	str	r1, [sp, #16]
 801b5dc:	e7d3      	b.n	801b586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801b5de:	4461      	add	r1, ip
 801b5e0:	b209      	sxth	r1, r1
 801b5e2:	4549      	cmp	r1, r9
 801b5e4:	dcf5      	bgt.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5e6:	9905      	ldr	r1, [sp, #20]
 801b5e8:	eba1 0c0c 	sub.w	ip, r1, ip
 801b5ec:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b5f0:	e7ee      	b.n	801b5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b5f2:	428f      	cmp	r7, r1
 801b5f4:	dced      	bgt.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5f6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801b5fa:	4461      	add	r1, ip
 801b5fc:	b209      	sxth	r1, r1
 801b5fe:	4589      	cmp	r9, r1
 801b600:	dbe7      	blt.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b602:	4576      	cmp	r6, lr
 801b604:	fa1f fc8e 	uxth.w	ip, lr
 801b608:	88a1      	ldrh	r1, [r4, #4]
 801b60a:	dc07      	bgt.n	801b61c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801b60c:	eba2 0c0c 	sub.w	ip, r2, ip
 801b610:	f8a4 8000 	strh.w	r8, [r4]
 801b614:	eba1 010c 	sub.w	r1, r1, ip
 801b618:	80a1      	strh	r1, [r4, #4]
 801b61a:	e7d9      	b.n	801b5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b61c:	4461      	add	r1, ip
 801b61e:	b209      	sxth	r1, r1
 801b620:	4588      	cmp	r8, r1
 801b622:	dbd6      	blt.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b624:	eba3 0c0c 	sub.w	ip, r3, ip
 801b628:	f8a4 c004 	strh.w	ip, [r4, #4]
 801b62c:	e7d0      	b.n	801b5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b62e:	bf00      	nop
 801b630:	20015206 	.word	0x20015206
 801b634:	20015204 	.word	0x20015204
 801b638:	2d00      	cmp	r5, #0
 801b63a:	f000 816d 	beq.w	801b918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b63e:	9b06      	ldr	r3, [sp, #24]
 801b640:	445b      	add	r3, fp
 801b642:	461c      	mov	r4, r3
 801b644:	9b02      	ldr	r3, [sp, #8]
 801b646:	3301      	adds	r3, #1
 801b648:	f000 8166 	beq.w	801b918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b64c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801b650:	9803      	ldr	r0, [sp, #12]
 801b652:	4629      	mov	r1, r5
 801b654:	f7ff fd36 	bl	801b0c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b658:	b120      	cbz	r0, 801b664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b65a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b65e:	9801      	ldr	r0, [sp, #4]
 801b660:	f7ff feb0 	bl	801b3c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b664:	9903      	ldr	r1, [sp, #12]
 801b666:	4628      	mov	r0, r5
 801b668:	f7ff fcb9 	bl	801afde <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b66c:	2800      	cmp	r0, #0
 801b66e:	f000 809c 	beq.w	801b7aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b672:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801b676:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b67a:	fa1f f189 	uxth.w	r1, r9
 801b67e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b682:	9309      	str	r3, [sp, #36]	; 0x24
 801b684:	eb01 0c03 	add.w	ip, r1, r3
 801b688:	b283      	uxth	r3, r0
 801b68a:	4548      	cmp	r0, r9
 801b68c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b690:	fa1f fa8c 	uxth.w	sl, ip
 801b694:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b698:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801b69c:	eb03 050c 	add.w	r5, r3, ip
 801b6a0:	b2ad      	uxth	r5, r5
 801b6a2:	9505      	str	r5, [sp, #20]
 801b6a4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b6a8:	9504      	str	r5, [sp, #16]
 801b6aa:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801b6ae:	f340 8099 	ble.w	801b7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b6b2:	1a5b      	subs	r3, r3, r1
 801b6b4:	4596      	cmp	lr, r2
 801b6b6:	fa0f f08a 	sxth.w	r0, sl
 801b6ba:	b29b      	uxth	r3, r3
 801b6bc:	b21e      	sxth	r6, r3
 801b6be:	dd2e      	ble.n	801b71e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b6c0:	9f02      	ldr	r7, [sp, #8]
 801b6c2:	fa1f fe8e 	uxth.w	lr, lr
 801b6c6:	b292      	uxth	r2, r2
 801b6c8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801b6cc:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b6d0:	9f04      	ldr	r7, [sp, #16]
 801b6d2:	ebae 0102 	sub.w	r1, lr, r2
 801b6d6:	44a6      	add	lr, r4
 801b6d8:	1a3f      	subs	r7, r7, r0
 801b6da:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801b6de:	b289      	uxth	r1, r1
 801b6e0:	4402      	add	r2, r0
 801b6e2:	fa0f fe8e 	sxth.w	lr, lr
 801b6e6:	b20d      	sxth	r5, r1
 801b6e8:	b212      	sxth	r2, r2
 801b6ea:	436f      	muls	r7, r5
 801b6ec:	ebae 0202 	sub.w	r2, lr, r2
 801b6f0:	4372      	muls	r2, r6
 801b6f2:	4297      	cmp	r7, r2
 801b6f4:	db09      	blt.n	801b70a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b6f6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801b6fa:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801b6fe:	449c      	add	ip, r3
 801b700:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b704:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b708:	e686      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b70a:	4421      	add	r1, r4
 801b70c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801b710:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801b714:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b718:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b71c:	e67c      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b71e:	9f04      	ldr	r7, [sp, #16]
 801b720:	42b8      	cmp	r0, r7
 801b722:	da27      	bge.n	801b774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b724:	9902      	ldr	r1, [sp, #8]
 801b726:	1a3f      	subs	r7, r7, r0
 801b728:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801b72c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b730:	eb05 010e 	add.w	r1, r5, lr
 801b734:	fa1f f881 	uxth.w	r8, r1
 801b738:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801b73c:	4411      	add	r1, r2
 801b73e:	fa0f f988 	sxth.w	r9, r8
 801b742:	eba2 020e 	sub.w	r2, r2, lr
 801b746:	eba1 0108 	sub.w	r1, r1, r8
 801b74a:	4372      	muls	r2, r6
 801b74c:	b289      	uxth	r1, r1
 801b74e:	fa0f f881 	sxth.w	r8, r1
 801b752:	fb08 f707 	mul.w	r7, r8, r7
 801b756:	42ba      	cmp	r2, r7
 801b758:	dc06      	bgt.n	801b768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b75a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801b75e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801b762:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801b766:	e7ca      	b.n	801b6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b768:	4429      	add	r1, r5
 801b76a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801b76e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b772:	e651      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b774:	9805      	ldr	r0, [sp, #20]
 801b776:	2d06      	cmp	r5, #6
 801b778:	ebaa 0000 	sub.w	r0, sl, r0
 801b77c:	b280      	uxth	r0, r0
 801b77e:	fa0f fe80 	sxth.w	lr, r0
 801b782:	d817      	bhi.n	801b7b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b784:	9b04      	ldr	r3, [sp, #16]
 801b786:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801b78a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801b78e:	1c6b      	adds	r3, r5, #1
 801b790:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801b794:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b798:	9b01      	ldr	r3, [sp, #4]
 801b79a:	9801      	ldr	r0, [sp, #4]
 801b79c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b7a0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b7a4:	805a      	strh	r2, [r3, #2]
 801b7a6:	809e      	strh	r6, [r3, #4]
 801b7a8:	80d9      	strh	r1, [r3, #6]
 801b7aa:	9b02      	ldr	r3, [sp, #8]
 801b7ac:	3c08      	subs	r4, #8
 801b7ae:	3b01      	subs	r3, #1
 801b7b0:	9302      	str	r3, [sp, #8]
 801b7b2:	e747      	b.n	801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b7b4:	9a02      	ldr	r2, [sp, #8]
 801b7b6:	45b6      	cmp	lr, r6
 801b7b8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b7bc:	db0d      	blt.n	801b7da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b7be:	449c      	add	ip, r3
 801b7c0:	445a      	add	r2, fp
 801b7c2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b7c6:	fa1f fc8c 	uxth.w	ip, ip
 801b7ca:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801b7ce:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b7d2:	448c      	add	ip, r1
 801b7d4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801b7d8:	e61e      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b7da:	445a      	add	r2, fp
 801b7dc:	4484      	add	ip, r0
 801b7de:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801b7e2:	e78f      	b.n	801b704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b7e4:	fa1f f18e 	uxth.w	r1, lr
 801b7e8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b7ec:	b293      	uxth	r3, r2
 801b7ee:	4596      	cmp	lr, r2
 801b7f0:	eb01 0806 	add.w	r8, r1, r6
 801b7f4:	9306      	str	r3, [sp, #24]
 801b7f6:	fa1f f888 	uxth.w	r8, r8
 801b7fa:	9f06      	ldr	r7, [sp, #24]
 801b7fc:	fa0f f388 	sxth.w	r3, r8
 801b800:	9307      	str	r3, [sp, #28]
 801b802:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801b806:	443b      	add	r3, r7
 801b808:	b29b      	uxth	r3, r3
 801b80a:	9308      	str	r3, [sp, #32]
 801b80c:	da24      	bge.n	801b858 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b80e:	9905      	ldr	r1, [sp, #20]
 801b810:	eba3 0308 	sub.w	r3, r3, r8
 801b814:	eba2 020e 	sub.w	r2, r2, lr
 801b818:	eba9 0000 	sub.w	r0, r9, r0
 801b81c:	ebaa 0401 	sub.w	r4, sl, r1
 801b820:	b29b      	uxth	r3, r3
 801b822:	b2a4      	uxth	r4, r4
 801b824:	b219      	sxth	r1, r3
 801b826:	b225      	sxth	r5, r4
 801b828:	4348      	muls	r0, r1
 801b82a:	436a      	muls	r2, r5
 801b82c:	4282      	cmp	r2, r0
 801b82e:	9a02      	ldr	r2, [sp, #8]
 801b830:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b834:	445a      	add	r2, fp
 801b836:	dc06      	bgt.n	801b846 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b838:	9b07      	ldr	r3, [sp, #28]
 801b83a:	44a4      	add	ip, r4
 801b83c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801b840:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801b844:	e75e      	b.n	801b704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b846:	9904      	ldr	r1, [sp, #16]
 801b848:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801b84c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801b850:	4433      	add	r3, r6
 801b852:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b856:	e5df      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b858:	9f06      	ldr	r7, [sp, #24]
 801b85a:	9b04      	ldr	r3, [sp, #16]
 801b85c:	1bc9      	subs	r1, r1, r7
 801b85e:	fa0f f78a 	sxth.w	r7, sl
 801b862:	b289      	uxth	r1, r1
 801b864:	429f      	cmp	r7, r3
 801b866:	fa0f fe81 	sxth.w	lr, r1
 801b86a:	dd23      	ble.n	801b8b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b86c:	9a05      	ldr	r2, [sp, #20]
 801b86e:	eba9 0000 	sub.w	r0, r9, r0
 801b872:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b876:	ebaa 0202 	sub.w	r2, sl, r2
 801b87a:	9d07      	ldr	r5, [sp, #28]
 801b87c:	fb0e f000 	mul.w	r0, lr, r0
 801b880:	b292      	uxth	r2, r2
 801b882:	eba5 0a03 	sub.w	sl, r5, r3
 801b886:	9b02      	ldr	r3, [sp, #8]
 801b888:	b214      	sxth	r4, r2
 801b88a:	00db      	lsls	r3, r3, #3
 801b88c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b890:	445b      	add	r3, fp
 801b892:	4550      	cmp	r0, sl
 801b894:	db03      	blt.n	801b89e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b896:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801b89a:	4494      	add	ip, r2
 801b89c:	e732      	b.n	801b704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b89e:	9a04      	ldr	r2, [sp, #16]
 801b8a0:	4431      	add	r1, r6
 801b8a2:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801b8a6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801b8aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801b8ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b8b2:	e75c      	b.n	801b76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b8b4:	9b08      	ldr	r3, [sp, #32]
 801b8b6:	2d06      	cmp	r5, #6
 801b8b8:	eba3 0308 	sub.w	r3, r3, r8
 801b8bc:	b29b      	uxth	r3, r3
 801b8be:	b218      	sxth	r0, r3
 801b8c0:	d813      	bhi.n	801b8ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b8c2:	9b07      	ldr	r3, [sp, #28]
 801b8c4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801b8c8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801b8cc:	1c6b      	adds	r3, r5, #1
 801b8ce:	9901      	ldr	r1, [sp, #4]
 801b8d0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b8d4:	9b01      	ldr	r3, [sp, #4]
 801b8d6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b8da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b8de:	805a      	strh	r2, [r3, #2]
 801b8e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8e2:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b8e6:	809a      	strh	r2, [r3, #4]
 801b8e8:	e75f      	b.n	801b7aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b8ea:	9c02      	ldr	r4, [sp, #8]
 801b8ec:	4570      	cmp	r0, lr
 801b8ee:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b8f2:	db0d      	blt.n	801b910 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b8f4:	4431      	add	r1, r6
 801b8f6:	9b06      	ldr	r3, [sp, #24]
 801b8f8:	445c      	add	r4, fp
 801b8fa:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b8fe:	b289      	uxth	r1, r1
 801b900:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801b904:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b908:	4419      	add	r1, r3
 801b90a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801b90e:	e583      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b910:	445c      	add	r4, fp
 801b912:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801b916:	e79b      	b.n	801b850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b918:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801b91c:	2e07      	cmp	r6, #7
 801b91e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b922:	d812      	bhi.n	801b94a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801b924:	1c75      	adds	r5, r6, #1
 801b926:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b92a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801b92e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801b932:	9d01      	ldr	r5, [sp, #4]
 801b934:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b938:	442c      	add	r4, r5
 801b93a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b93e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b942:	8061      	strh	r1, [r4, #2]
 801b944:	80a2      	strh	r2, [r4, #4]
 801b946:	80e3      	strh	r3, [r4, #6]
 801b948:	e5d0      	b.n	801b4ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b94a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801b94e:	3e01      	subs	r6, #1
 801b950:	445c      	add	r4, fp
 801b952:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b956:	f04f 37ff 	mov.w	r7, #4294967295
 801b95a:	2500      	movs	r5, #0
 801b95c:	9305      	str	r3, [sp, #20]
 801b95e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b962:	1e72      	subs	r2, r6, #1
 801b964:	9302      	str	r3, [sp, #8]
 801b966:	4691      	mov	r9, r2
 801b968:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801b96c:	9304      	str	r3, [sp, #16]
 801b96e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801b972:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b976:	6818      	ldr	r0, [r3, #0]
 801b978:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b97c:	9207      	str	r2, [sp, #28]
 801b97e:	bf16      	itet	ne
 801b980:	9905      	ldrne	r1, [sp, #20]
 801b982:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b986:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b98a:	9306      	str	r3, [sp, #24]
 801b98c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b990:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b994:	fb18 f801 	smulbb	r8, r8, r1
 801b998:	6859      	ldr	r1, [r3, #4]
 801b99a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b99e:	4671      	mov	r1, lr
 801b9a0:	a80c      	add	r0, sp, #48	; 0x30
 801b9a2:	f7fb fe05 	bl	80175b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b9a6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b9aa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b9ae:	f04f 0c08 	mov.w	ip, #8
 801b9b2:	9b04      	ldr	r3, [sp, #16]
 801b9b4:	9a02      	ldr	r2, [sp, #8]
 801b9b6:	fb10 f001 	smulbb	r0, r0, r1
 801b9ba:	fb02 8803 	mla	r8, r2, r3, r8
 801b9be:	eba0 0108 	sub.w	r1, r0, r8
 801b9c2:	fb90 f0fc 	sdiv	r0, r0, ip
 801b9c6:	4288      	cmp	r0, r1
 801b9c8:	dc20      	bgt.n	801ba0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801b9ca:	4551      	cmp	r1, sl
 801b9cc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b9d0:	da03      	bge.n	801b9da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801b9d2:	b1d9      	cbz	r1, 801ba0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801b9d4:	468a      	mov	sl, r1
 801b9d6:	464f      	mov	r7, r9
 801b9d8:	4635      	mov	r5, r6
 801b9da:	f109 39ff 	add.w	r9, r9, #4294967295
 801b9de:	f119 0f02 	cmn.w	r9, #2
 801b9e2:	d1c6      	bne.n	801b972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801b9e4:	4616      	mov	r6, r2
 801b9e6:	3201      	adds	r2, #1
 801b9e8:	f1a4 0408 	sub.w	r4, r4, #8
 801b9ec:	d1b7      	bne.n	801b95e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801b9ee:	9b01      	ldr	r3, [sp, #4]
 801b9f0:	b2ac      	uxth	r4, r5
 801b9f2:	00ed      	lsls	r5, r5, #3
 801b9f4:	1958      	adds	r0, r3, r5
 801b9f6:	1c7b      	adds	r3, r7, #1
 801b9f8:	d10b      	bne.n	801ba12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801b9fa:	4601      	mov	r1, r0
 801b9fc:	9803      	ldr	r0, [sp, #12]
 801b9fe:	f7fb fdd7 	bl	80175b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba02:	4621      	mov	r1, r4
 801ba04:	9801      	ldr	r0, [sp, #4]
 801ba06:	f7ff fcdd 	bl	801b3c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ba0a:	e505      	b.n	801b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ba0c:	464f      	mov	r7, r9
 801ba0e:	4635      	mov	r5, r6
 801ba10:	e7ed      	b.n	801b9ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801ba12:	9b01      	ldr	r3, [sp, #4]
 801ba14:	00ff      	lsls	r7, r7, #3
 801ba16:	445d      	add	r5, fp
 801ba18:	19d9      	adds	r1, r3, r7
 801ba1a:	445f      	add	r7, fp
 801ba1c:	f7fb fdc8 	bl	80175b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba20:	9b03      	ldr	r3, [sp, #12]
 801ba22:	cb03      	ldmia	r3!, {r0, r1}
 801ba24:	9b03      	ldr	r3, [sp, #12]
 801ba26:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801ba2a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801ba2e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801ba32:	6869      	ldr	r1, [r5, #4]
 801ba34:	c303      	stmia	r3!, {r0, r1}
 801ba36:	e7e4      	b.n	801ba02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801ba38 <_ZN8touchgfx11Application10invalidateEv>:
 801ba38:	4b09      	ldr	r3, [pc, #36]	; (801ba60 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801ba3a:	b082      	sub	sp, #8
 801ba3c:	2100      	movs	r1, #0
 801ba3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ba42:	4b08      	ldr	r3, [pc, #32]	; (801ba64 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801ba44:	9100      	str	r1, [sp, #0]
 801ba46:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba4a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ba4e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ba52:	ab02      	add	r3, sp, #8
 801ba54:	e913 0006 	ldmdb	r3, {r1, r2}
 801ba58:	b002      	add	sp, #8
 801ba5a:	f7ff bcc7 	b.w	801b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ba5e:	bf00      	nop
 801ba60:	20015204 	.word	0x20015204
 801ba64:	20015206 	.word	0x20015206

0801ba68 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba6c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801ba70:	b09b      	sub	sp, #108	; 0x6c
 801ba72:	4604      	mov	r4, r0
 801ba74:	4630      	mov	r0, r6
 801ba76:	f7fb fa3e 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ba7a:	4605      	mov	r5, r0
 801ba7c:	b940      	cbnz	r0, 801ba90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801ba7e:	4620      	mov	r0, r4
 801ba80:	e896 0006 	ldmia.w	r6, {r1, r2}
 801ba84:	f7ff fcb2 	bl	801b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ba88:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801ba8c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801ba90:	4bc8      	ldr	r3, [pc, #800]	; (801bdb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d03e      	beq.n	801bb16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ba98:	4dc7      	ldr	r5, [pc, #796]	; (801bdb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801ba9a:	4628      	mov	r0, r5
 801ba9c:	f7fb fa2b 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801baa0:	4606      	mov	r6, r0
 801baa2:	2800      	cmp	r0, #0
 801baa4:	d137      	bne.n	801bb16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801baa6:	4628      	mov	r0, r5
 801baa8:	f7ff f9de 	bl	801ae68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801baac:	6829      	ldr	r1, [r5, #0]
 801baae:	686a      	ldr	r2, [r5, #4]
 801bab0:	4620      	mov	r0, r4
 801bab2:	f7ff fc9b 	bl	801b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bab6:	802e      	strh	r6, [r5, #0]
 801bab8:	806e      	strh	r6, [r5, #2]
 801baba:	80ae      	strh	r6, [r5, #4]
 801babc:	80ee      	strh	r6, [r5, #6]
 801babe:	ae09      	add	r6, sp, #36	; 0x24
 801bac0:	4630      	mov	r0, r6
 801bac2:	f7ff fc24 	bl	801b30e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bac6:	4abd      	ldr	r2, [pc, #756]	; (801bdbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bac8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801bacc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801bad0:	8815      	ldrh	r5, [r2, #0]
 801bad2:	9202      	str	r2, [sp, #8]
 801bad4:	462b      	mov	r3, r5
 801bad6:	429f      	cmp	r7, r3
 801bad8:	d924      	bls.n	801bb24 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801bada:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801bade:	2907      	cmp	r1, #7
 801bae0:	d816      	bhi.n	801bb10 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801bae2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801bae6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801baea:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801baee:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801baf2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801baf6:	1c4a      	adds	r2, r1, #1
 801baf8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801bafc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801bb00:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801bb04:	f8a2 9002 	strh.w	r9, [r2, #2]
 801bb08:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bb0c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bb10:	3301      	adds	r3, #1
 801bb12:	b29b      	uxth	r3, r3
 801bb14:	e7df      	b.n	801bad6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801bb16:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d1cf      	bne.n	801babe <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801bb1e:	b01b      	add	sp, #108	; 0x6c
 801bb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb24:	462f      	mov	r7, r5
 801bb26:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801bb2a:	42bb      	cmp	r3, r7
 801bb2c:	d90b      	bls.n	801bb46 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801bb2e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801bb32:	3701      	adds	r7, #1
 801bb34:	4620      	mov	r0, r4
 801bb36:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801bb3a:	b2bf      	uxth	r7, r7
 801bb3c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801bb40:	f7ff fc54 	bl	801b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb44:	e7ef      	b.n	801bb26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801bb46:	4a9e      	ldr	r2, [pc, #632]	; (801bdc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bb48:	6813      	ldr	r3, [r2, #0]
 801bb4a:	4690      	mov	r8, r2
 801bb4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bb50:	2b01      	cmp	r3, #1
 801bb52:	f040 80e4 	bne.w	801bd1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801bb56:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bb5a:	4629      	mov	r1, r5
 801bb5c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801bb60:	2500      	movs	r5, #0
 801bb62:	33ae      	adds	r3, #174	; 0xae
 801bb64:	428f      	cmp	r7, r1
 801bb66:	f103 0308 	add.w	r3, r3, #8
 801bb6a:	dd0a      	ble.n	801bb82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801bb6c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bb70:	3101      	adds	r1, #1
 801bb72:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801bb76:	4402      	add	r2, r0
 801bb78:	b212      	sxth	r2, r2
 801bb7a:	4295      	cmp	r5, r2
 801bb7c:	bfb8      	it	lt
 801bb7e:	4615      	movlt	r5, r2
 801bb80:	e7f0      	b.n	801bb64 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801bb82:	4b90      	ldr	r3, [pc, #576]	; (801bdc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bb84:	f8df b238 	ldr.w	fp, [pc, #568]	; 801bdc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801bb88:	881b      	ldrh	r3, [r3, #0]
 801bb8a:	46d8      	mov	r8, fp
 801bb8c:	2b0f      	cmp	r3, #15
 801bb8e:	bf8c      	ite	hi
 801bb90:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801bb94:	f04f 0a01 	movls.w	sl, #1
 801bb98:	2300      	movs	r3, #0
 801bb9a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bb9e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801bba2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801bba6:	4438      	add	r0, r7
 801bba8:	b207      	sxth	r7, r0
 801bbaa:	f8db 0000 	ldr.w	r0, [fp]
 801bbae:	42bd      	cmp	r5, r7
 801bbb0:	6803      	ldr	r3, [r0, #0]
 801bbb2:	f340 8084 	ble.w	801bcbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801bbb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bbba:	4798      	blx	r3
 801bbbc:	eb07 030a 	add.w	r3, r7, sl
 801bbc0:	4298      	cmp	r0, r3
 801bbc2:	da07      	bge.n	801bbd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801bbc4:	4285      	cmp	r5, r0
 801bbc6:	dd05      	ble.n	801bbd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801bbc8:	4287      	cmp	r7, r0
 801bbca:	dd6d      	ble.n	801bca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bbcc:	2f00      	cmp	r7, #0
 801bbce:	dd6b      	ble.n	801bca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	e004      	b.n	801bbde <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801bbd4:	4287      	cmp	r7, r0
 801bbd6:	dcfb      	bgt.n	801bbd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801bbd8:	42a8      	cmp	r0, r5
 801bbda:	bfa8      	it	ge
 801bbdc:	4628      	movge	r0, r5
 801bbde:	4b7a      	ldr	r3, [pc, #488]	; (801bdc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801bbe0:	1bc0      	subs	r0, r0, r7
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bbe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bbec:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bbf0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bbf4:	9b02      	ldr	r3, [sp, #8]
 801bbf6:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bbfa:	881f      	ldrh	r7, [r3, #0]
 801bbfc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801bc00:	42bb      	cmp	r3, r7
 801bc02:	d9cc      	bls.n	801bb9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801bc04:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801bc08:	ab07      	add	r3, sp, #28
 801bc0a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bc0e:	6851      	ldr	r1, [r2, #4]
 801bc10:	c303      	stmia	r3!, {r0, r1}
 801bc12:	a905      	add	r1, sp, #20
 801bc14:	a807      	add	r0, sp, #28
 801bc16:	f7ff f9e2 	bl	801afde <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bc1a:	2800      	cmp	r0, #0
 801bc1c:	d04c      	beq.n	801bcb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801bc1e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bc22:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801bc26:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801bc2a:	4686      	mov	lr, r0
 801bc2c:	4290      	cmp	r0, r2
 801bc2e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bc32:	4448      	add	r0, r9
 801bc34:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801bc38:	bfb8      	it	lt
 801bc3a:	4696      	movlt	lr, r2
 801bc3c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bc40:	444a      	add	r2, r9
 801bc42:	b280      	uxth	r0, r0
 801bc44:	4299      	cmp	r1, r3
 801bc46:	468c      	mov	ip, r1
 801bc48:	b292      	uxth	r2, r2
 801bc4a:	9303      	str	r3, [sp, #12]
 801bc4c:	bfb8      	it	lt
 801bc4e:	469c      	movlt	ip, r3
 801bc50:	b203      	sxth	r3, r0
 801bc52:	fa0f f982 	sxth.w	r9, r2
 801bc56:	f8ad e01c 	strh.w	lr, [sp, #28]
 801bc5a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bc5e:	454b      	cmp	r3, r9
 801bc60:	bfb8      	it	lt
 801bc62:	4602      	movlt	r2, r0
 801bc64:	9b03      	ldr	r3, [sp, #12]
 801bc66:	eba2 020e 	sub.w	r2, r2, lr
 801bc6a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bc6e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bc72:	4411      	add	r1, r2
 801bc74:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bc78:	4413      	add	r3, r2
 801bc7a:	b289      	uxth	r1, r1
 801bc7c:	b29b      	uxth	r3, r3
 801bc7e:	b208      	sxth	r0, r1
 801bc80:	b21a      	sxth	r2, r3
 801bc82:	4290      	cmp	r0, r2
 801bc84:	bfb8      	it	lt
 801bc86:	460b      	movlt	r3, r1
 801bc88:	eba3 030c 	sub.w	r3, r3, ip
 801bc8c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bc90:	a807      	add	r0, sp, #28
 801bc92:	f7fb f930 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc96:	b920      	cbnz	r0, 801bca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801bc98:	6823      	ldr	r3, [r4, #0]
 801bc9a:	a907      	add	r1, sp, #28
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bca0:	4798      	blx	r3
 801bca2:	3701      	adds	r7, #1
 801bca4:	b2bf      	uxth	r7, r7
 801bca6:	e7a9      	b.n	801bbfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801bca8:	f8d8 0000 	ldr.w	r0, [r8]
 801bcac:	2101      	movs	r1, #1
 801bcae:	6803      	ldr	r3, [r0, #0]
 801bcb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bcb4:	4798      	blx	r3
 801bcb6:	e772      	b.n	801bb9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801bcb8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bcbc:	e7e8      	b.n	801bc90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcc0:	4798      	blx	r3
 801bcc2:	4b42      	ldr	r3, [pc, #264]	; (801bdcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801bcc4:	781b      	ldrb	r3, [r3, #0]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	f43f af29 	beq.w	801bb1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801bccc:	2300      	movs	r3, #0
 801bcce:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801bcd2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801bcd6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801bcda:	9b02      	ldr	r3, [sp, #8]
 801bcdc:	881b      	ldrh	r3, [r3, #0]
 801bcde:	429d      	cmp	r5, r3
 801bce0:	f67f af1d 	bls.w	801bb1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801bce4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801bce8:	2907      	cmp	r1, #7
 801bcea:	d815      	bhi.n	801bd18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801bcec:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801bcf0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801bcf4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801bcf8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801bcfc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801bd00:	1c4a      	adds	r2, r1, #1
 801bd02:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801bd06:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801bd0a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801bd0e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801bd12:	f8a2 c004 	strh.w	ip, [r2, #4]
 801bd16:	80d7      	strh	r7, [r2, #6]
 801bd18:	3301      	adds	r3, #1
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	e7df      	b.n	801bcde <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801bd1e:	2b02      	cmp	r3, #2
 801bd20:	f040 8135 	bne.w	801bf8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801bd24:	4b2a      	ldr	r3, [pc, #168]	; (801bdd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801bd26:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801bd2a:	781b      	ldrb	r3, [r3, #0]
 801bd2c:	2b01      	cmp	r3, #1
 801bd2e:	f000 809c 	beq.w	801be6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801bd32:	9b02      	ldr	r3, [sp, #8]
 801bd34:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801bd38:	f8b3 b000 	ldrh.w	fp, [r3]
 801bd3c:	f10b 0b01 	add.w	fp, fp, #1
 801bd40:	fa1f fb8b 	uxth.w	fp, fp
 801bd44:	2a00      	cmp	r2, #0
 801bd46:	d0bc      	beq.n	801bcc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bd48:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801bd4c:	4659      	mov	r1, fp
 801bd4e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801bd52:	f04f 0800 	mov.w	r8, #0
 801bd56:	441d      	add	r5, r3
 801bd58:	b22d      	sxth	r5, r5
 801bd5a:	b28b      	uxth	r3, r1
 801bd5c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801bd60:	429a      	cmp	r2, r3
 801bd62:	f240 80c0 	bls.w	801bee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801bd66:	4427      	add	r7, r4
 801bd68:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801bd6c:	4608      	mov	r0, r1
 801bd6e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801bd72:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801bd76:	4563      	cmp	r3, ip
 801bd78:	f340 80a2 	ble.w	801bec0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801bd7c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801bd80:	4465      	add	r5, ip
 801bd82:	b22d      	sxth	r5, r5
 801bd84:	429d      	cmp	r5, r3
 801bd86:	bfa8      	it	ge
 801bd88:	461d      	movge	r5, r3
 801bd8a:	3101      	adds	r1, #1
 801bd8c:	4680      	mov	r8, r0
 801bd8e:	e7e4      	b.n	801bd5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801bd90:	d10b      	bne.n	801bdaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801bd92:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801bd96:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801bd9a:	458c      	cmp	ip, r1
 801bd9c:	bfb4      	ite	lt
 801bd9e:	469c      	movlt	ip, r3
 801bda0:	46bc      	movge	ip, r7
 801bda2:	4572      	cmp	r2, lr
 801bda4:	bfb8      	it	lt
 801bda6:	4672      	movlt	r2, lr
 801bda8:	e087      	b.n	801beba <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801bdaa:	428a      	cmp	r2, r1
 801bdac:	46bc      	mov	ip, r7
 801bdae:	bfb8      	it	lt
 801bdb0:	460a      	movlt	r2, r1
 801bdb2:	e082      	b.n	801beba <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801bdb4:	20015248 	.word	0x20015248
 801bdb8:	20015254 	.word	0x20015254
 801bdbc:	20000044 	.word	0x20000044
 801bdc0:	20015210 	.word	0x20015210
 801bdc4:	20015206 	.word	0x20015206
 801bdc8:	20015204 	.word	0x20015204
 801bdcc:	2001520e 	.word	0x2001520e
 801bdd0:	20015208 	.word	0x20015208
 801bdd4:	1961      	adds	r1, r4, r5
 801bdd6:	ab07      	add	r3, sp, #28
 801bdd8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801bddc:	6849      	ldr	r1, [r1, #4]
 801bdde:	c303      	stmia	r3!, {r0, r1}
 801bde0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bde4:	a807      	add	r0, sp, #28
 801bde6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bdea:	2b13      	cmp	r3, #19
 801bdec:	440b      	add	r3, r1
 801bdee:	bfd8      	it	le
 801bdf0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bdf4:	1a9b      	subs	r3, r3, r2
 801bdf6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bdfa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bdfe:	f7ff f84d 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be02:	a807      	add	r0, sp, #28
 801be04:	f7fb f877 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be08:	bb78      	cbnz	r0, 801be6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801be0a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801be0e:	4425      	add	r5, r4
 801be10:	f8d8 0000 	ldr.w	r0, [r8]
 801be14:	f1bc 0f14 	cmp.w	ip, #20
 801be18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801be1c:	f8d0 e000 	ldr.w	lr, [r0]
 801be20:	bfa8      	it	ge
 801be22:	f04f 0c14 	movge.w	ip, #20
 801be26:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801be2a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be2e:	fa1f fc8c 	uxth.w	ip, ip
 801be32:	f8cd c000 	str.w	ip, [sp]
 801be36:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801be3a:	47d0      	blx	sl
 801be3c:	4682      	mov	sl, r0
 801be3e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801be42:	a807      	add	r0, sp, #28
 801be44:	f7ff f810 	bl	801ae68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801be48:	6823      	ldr	r3, [r4, #0]
 801be4a:	4620      	mov	r0, r4
 801be4c:	a907      	add	r1, sp, #28
 801be4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be50:	4798      	blx	r3
 801be52:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801be56:	eba0 000a 	sub.w	r0, r0, sl
 801be5a:	b200      	sxth	r0, r0
 801be5c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801be60:	b918      	cbnz	r0, 801be6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801be62:	b2b9      	uxth	r1, r7
 801be64:	4648      	mov	r0, r9
 801be66:	f7ff faad 	bl	801b3c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be6a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801be6e:	f1bb 0f00 	cmp.w	fp, #0
 801be72:	f43f af26 	beq.w	801bcc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801be76:	9b02      	ldr	r3, [sp, #8]
 801be78:	2700      	movs	r7, #0
 801be7a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801be7e:	881b      	ldrh	r3, [r3, #0]
 801be80:	3301      	adds	r3, #1
 801be82:	b29b      	uxth	r3, r3
 801be84:	b299      	uxth	r1, r3
 801be86:	00fd      	lsls	r5, r7, #3
 801be88:	458b      	cmp	fp, r1
 801be8a:	d9a3      	bls.n	801bdd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801be8c:	4425      	add	r5, r4
 801be8e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801be92:	469c      	mov	ip, r3
 801be94:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801be98:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801be9c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801bea0:	4408      	add	r0, r1
 801bea2:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801bea6:	4471      	add	r1, lr
 801bea8:	b200      	sxth	r0, r0
 801beaa:	b209      	sxth	r1, r1
 801beac:	4288      	cmp	r0, r1
 801beae:	f6bf af6f 	bge.w	801bd90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801beb2:	4586      	cmp	lr, r0
 801beb4:	4672      	mov	r2, lr
 801beb6:	bfb8      	it	lt
 801beb8:	4602      	movlt	r2, r0
 801beba:	3301      	adds	r3, #1
 801bebc:	4667      	mov	r7, ip
 801bebe:	e7e1      	b.n	801be84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801bec0:	d10c      	bne.n	801bedc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801bec2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801bec6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801beca:	4287      	cmp	r7, r0
 801becc:	bfb4      	ite	lt
 801bece:	4608      	movlt	r0, r1
 801bed0:	4640      	movge	r0, r8
 801bed2:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801bed6:	443b      	add	r3, r7
 801bed8:	b21b      	sxth	r3, r3
 801beda:	e753      	b.n	801bd84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801bedc:	4565      	cmp	r5, ip
 801bede:	4640      	mov	r0, r8
 801bee0:	bfa8      	it	ge
 801bee2:	4665      	movge	r5, ip
 801bee4:	e751      	b.n	801bd8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801bee6:	eb09 0007 	add.w	r0, r9, r7
 801beea:	4427      	add	r7, r4
 801beec:	9203      	str	r2, [sp, #12]
 801beee:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801bef2:	f1ba 0f13 	cmp.w	sl, #19
 801bef6:	bfde      	ittt	le
 801bef8:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801befc:	4455      	addle	r5, sl
 801befe:	b22d      	sxthle	r5, r5
 801bf00:	f7fa fff9 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf04:	9a03      	ldr	r2, [sp, #12]
 801bf06:	2800      	cmp	r0, #0
 801bf08:	f47f af1c 	bne.w	801bd44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801bf0c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801bf10:	fa1f fa8a 	uxth.w	sl, sl
 801bf14:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bf18:	1aad      	subs	r5, r5, r2
 801bf1a:	4829      	ldr	r0, [pc, #164]	; (801bfc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801bf1c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801bf20:	2d14      	cmp	r5, #20
 801bf22:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801bf26:	6800      	ldr	r0, [r0, #0]
 801bf28:	bfa8      	it	ge
 801bf2a:	2514      	movge	r5, #20
 801bf2c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bf30:	f8ad 201e 	strh.w	r2, [sp, #30]
 801bf34:	b289      	uxth	r1, r1
 801bf36:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bf3a:	b2ad      	uxth	r5, r5
 801bf3c:	f8d0 c000 	ldr.w	ip, [r0]
 801bf40:	b292      	uxth	r2, r2
 801bf42:	4555      	cmp	r5, sl
 801bf44:	bf94      	ite	ls
 801bf46:	9500      	strls	r5, [sp, #0]
 801bf48:	f8cd a000 	strhi.w	sl, [sp]
 801bf4c:	b29b      	uxth	r3, r3
 801bf4e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801bf52:	47a8      	blx	r5
 801bf54:	6823      	ldr	r3, [r4, #0]
 801bf56:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bf5a:	a907      	add	r1, sp, #28
 801bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf5e:	4620      	mov	r0, r4
 801bf60:	4798      	blx	r3
 801bf62:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801bf66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801bf6a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801bf6e:	1a5b      	subs	r3, r3, r1
 801bf70:	440a      	add	r2, r1
 801bf72:	b21b      	sxth	r3, r3
 801bf74:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801bf78:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	f47f aed8 	bne.w	801bd32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801bf82:	fa1f f188 	uxth.w	r1, r8
 801bf86:	4648      	mov	r0, r9
 801bf88:	f7ff fa1c 	bl	801b3c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bf8c:	e6d1      	b.n	801bd32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801bf8e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801bf92:	42ab      	cmp	r3, r5
 801bf94:	f67f ae95 	bls.w	801bcc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bf98:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801bf9c:	ab07      	add	r3, sp, #28
 801bf9e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bfa2:	6851      	ldr	r1, [r2, #4]
 801bfa4:	c303      	stmia	r3!, {r0, r1}
 801bfa6:	a807      	add	r0, sp, #28
 801bfa8:	f7fa ffa5 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfac:	b920      	cbnz	r0, 801bfb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801bfae:	6823      	ldr	r3, [r4, #0]
 801bfb0:	a907      	add	r1, sp, #28
 801bfb2:	4620      	mov	r0, r4
 801bfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfb6:	4798      	blx	r3
 801bfb8:	3501      	adds	r5, #1
 801bfba:	b2ad      	uxth	r5, r5
 801bfbc:	e7e7      	b.n	801bf8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801bfbe:	bf00      	nop
 801bfc0:	20015210 	.word	0x20015210

0801bfc4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801bfc4:	4b03      	ldr	r3, [pc, #12]	; (801bfd4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	801a      	strh	r2, [r3, #0]
 801bfca:	805a      	strh	r2, [r3, #2]
 801bfcc:	809a      	strh	r2, [r3, #4]
 801bfce:	80da      	strh	r2, [r3, #6]
 801bfd0:	4770      	bx	lr
 801bfd2:	bf00      	nop
 801bfd4:	20015254 	.word	0x20015254

0801bfd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfdc:	b09d      	sub	sp, #116	; 0x74
 801bfde:	4606      	mov	r6, r0
 801bfe0:	4614      	mov	r4, r2
 801bfe2:	468a      	mov	sl, r1
 801bfe4:	a803      	add	r0, sp, #12
 801bfe6:	461d      	mov	r5, r3
 801bfe8:	f000 fd99 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 801bfec:	6833      	ldr	r3, [r6, #0]
 801bfee:	4630      	mov	r0, r6
 801bff0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801bff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bff6:	4798      	blx	r3
 801bff8:	6833      	ldr	r3, [r6, #0]
 801bffa:	4607      	mov	r7, r0
 801bffc:	4630      	mov	r0, r6
 801bffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c000:	4798      	blx	r3
 801c002:	462a      	mov	r2, r5
 801c004:	2500      	movs	r5, #0
 801c006:	4621      	mov	r1, r4
 801c008:	9000      	str	r0, [sp, #0]
 801c00a:	463b      	mov	r3, r7
 801c00c:	462c      	mov	r4, r5
 801c00e:	46a9      	mov	r9, r5
 801c010:	46a8      	mov	r8, r5
 801c012:	a803      	add	r0, sp, #12
 801c014:	f000 fdde 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c018:	2300      	movs	r3, #0
 801c01a:	9302      	str	r3, [sp, #8]
 801c01c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c020:	429c      	cmp	r4, r3
 801c022:	d002      	beq.n	801c02a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c024:	455c      	cmp	r4, fp
 801c026:	bf18      	it	ne
 801c028:	4625      	movne	r5, r4
 801c02a:	ab02      	add	r3, sp, #8
 801c02c:	4632      	mov	r2, r6
 801c02e:	4651      	mov	r1, sl
 801c030:	a803      	add	r0, sp, #12
 801c032:	f001 f8d5 	bl	801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c036:	4604      	mov	r4, r0
 801c038:	b108      	cbz	r0, 801c03e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c03a:	280a      	cmp	r0, #10
 801c03c:	d10a      	bne.n	801c054 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c03e:	45c1      	cmp	r9, r8
 801c040:	bf38      	it	cc
 801c042:	46c1      	movcc	r9, r8
 801c044:	f04f 0800 	mov.w	r8, #0
 801c048:	2c00      	cmp	r4, #0
 801c04a:	d1e5      	bne.n	801c018 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c04c:	4648      	mov	r0, r9
 801c04e:	b01d      	add	sp, #116	; 0x74
 801c050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c054:	9a02      	ldr	r2, [sp, #8]
 801c056:	2a00      	cmp	r2, #0
 801c058:	d0de      	beq.n	801c018 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c05a:	7b57      	ldrb	r7, [r2, #13]
 801c05c:	4629      	mov	r1, r5
 801c05e:	6833      	ldr	r3, [r6, #0]
 801c060:	007f      	lsls	r7, r7, #1
 801c062:	8894      	ldrh	r4, [r2, #4]
 801c064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c066:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c06a:	7a97      	ldrb	r7, [r2, #10]
 801c06c:	4307      	orrs	r7, r0
 801c06e:	4630      	mov	r0, r6
 801c070:	4798      	blx	r3
 801c072:	4438      	add	r0, r7
 801c074:	4480      	add	r8, r0
 801c076:	fa1f f888 	uxth.w	r8, r8
 801c07a:	e7e5      	b.n	801c048 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c07c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c07c:	b508      	push	{r3, lr}
 801c07e:	6803      	ldr	r3, [r0, #0]
 801c080:	68db      	ldr	r3, [r3, #12]
 801c082:	4798      	blx	r3
 801c084:	b128      	cbz	r0, 801c092 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c086:	7b43      	ldrb	r3, [r0, #13]
 801c088:	7a80      	ldrb	r0, [r0, #10]
 801c08a:	005b      	lsls	r3, r3, #1
 801c08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c090:	4318      	orrs	r0, r3
 801c092:	bd08      	pop	{r3, pc}

0801c094 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c094:	b40e      	push	{r1, r2, r3}
 801c096:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c098:	b09e      	sub	sp, #120	; 0x78
 801c09a:	4605      	mov	r5, r0
 801c09c:	ab23      	add	r3, sp, #140	; 0x8c
 801c09e:	a805      	add	r0, sp, #20
 801c0a0:	f853 4b04 	ldr.w	r4, [r3], #4
 801c0a4:	9303      	str	r3, [sp, #12]
 801c0a6:	f000 fd3a 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 801c0aa:	682b      	ldr	r3, [r5, #0]
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0b0:	4798      	blx	r3
 801c0b2:	682b      	ldr	r3, [r5, #0]
 801c0b4:	4606      	mov	r6, r0
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c0ba:	4798      	blx	r3
 801c0bc:	4633      	mov	r3, r6
 801c0be:	4621      	mov	r1, r4
 801c0c0:	ae1e      	add	r6, sp, #120	; 0x78
 801c0c2:	2400      	movs	r4, #0
 801c0c4:	9000      	str	r0, [sp, #0]
 801c0c6:	9a03      	ldr	r2, [sp, #12]
 801c0c8:	a805      	add	r0, sp, #20
 801c0ca:	f000 fd83 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c0ce:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c0d2:	462a      	mov	r2, r5
 801c0d4:	4633      	mov	r3, r6
 801c0d6:	4621      	mov	r1, r4
 801c0d8:	a805      	add	r0, sp, #20
 801c0da:	f001 f881 	bl	801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c0de:	b300      	cbz	r0, 801c122 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c0e0:	280a      	cmp	r0, #10
 801c0e2:	d01a      	beq.n	801c11a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c0e4:	9f04      	ldr	r7, [sp, #16]
 801c0e6:	b1c7      	cbz	r7, 801c11a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c0e8:	7b78      	ldrb	r0, [r7, #13]
 801c0ea:	7a3b      	ldrb	r3, [r7, #8]
 801c0ec:	00c1      	lsls	r1, r0, #3
 801c0ee:	88ea      	ldrh	r2, [r5, #6]
 801c0f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c0f4:	4319      	orrs	r1, r3
 801c0f6:	0643      	lsls	r3, r0, #25
 801c0f8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c0fc:	bf48      	it	mi
 801c0fe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c102:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c106:	bf48      	it	mi
 801c108:	b219      	sxthmi	r1, r3
 801c10a:	79fb      	ldrb	r3, [r7, #7]
 801c10c:	4303      	orrs	r3, r0
 801c10e:	4413      	add	r3, r2
 801c110:	1a5b      	subs	r3, r3, r1
 801c112:	b21b      	sxth	r3, r3
 801c114:	429c      	cmp	r4, r3
 801c116:	bfb8      	it	lt
 801c118:	461c      	movlt	r4, r3
 801c11a:	4633      	mov	r3, r6
 801c11c:	462a      	mov	r2, r5
 801c11e:	2100      	movs	r1, #0
 801c120:	e7da      	b.n	801c0d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c122:	b2a0      	uxth	r0, r4
 801c124:	b01e      	add	sp, #120	; 0x78
 801c126:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c12a:	b003      	add	sp, #12
 801c12c:	4770      	bx	lr

0801c12e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c12e:	7a43      	ldrb	r3, [r0, #9]
 801c130:	8880      	ldrh	r0, [r0, #4]
 801c132:	4418      	add	r0, r3
 801c134:	b280      	uxth	r0, r0
 801c136:	4770      	bx	lr

0801c138 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c138:	6803      	ldr	r3, [r0, #0]
 801c13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c13c:	4718      	bx	r3

0801c13e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c13e:	b40e      	push	{r1, r2, r3}
 801c140:	b570      	push	{r4, r5, r6, lr}
 801c142:	b09d      	sub	sp, #116	; 0x74
 801c144:	4604      	mov	r4, r0
 801c146:	ab21      	add	r3, sp, #132	; 0x84
 801c148:	a803      	add	r0, sp, #12
 801c14a:	f853 5b04 	ldr.w	r5, [r3], #4
 801c14e:	9302      	str	r3, [sp, #8]
 801c150:	f000 fce5 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 801c154:	6823      	ldr	r3, [r4, #0]
 801c156:	4620      	mov	r0, r4
 801c158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c15a:	4798      	blx	r3
 801c15c:	6823      	ldr	r3, [r4, #0]
 801c15e:	4606      	mov	r6, r0
 801c160:	4620      	mov	r0, r4
 801c162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c164:	2401      	movs	r4, #1
 801c166:	4798      	blx	r3
 801c168:	4633      	mov	r3, r6
 801c16a:	9000      	str	r0, [sp, #0]
 801c16c:	4629      	mov	r1, r5
 801c16e:	9a02      	ldr	r2, [sp, #8]
 801c170:	a803      	add	r0, sp, #12
 801c172:	f000 fd2f 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c176:	a803      	add	r0, sp, #12
 801c178:	f001 f8fe 	bl	801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c17c:	b2a3      	uxth	r3, r4
 801c17e:	b138      	cbz	r0, 801c190 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c180:	280a      	cmp	r0, #10
 801c182:	a803      	add	r0, sp, #12
 801c184:	bf04      	itt	eq
 801c186:	3301      	addeq	r3, #1
 801c188:	b21c      	sxtheq	r4, r3
 801c18a:	f001 f8f5 	bl	801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c18e:	e7f5      	b.n	801c17c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c190:	4618      	mov	r0, r3
 801c192:	b01d      	add	sp, #116	; 0x74
 801c194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c198:	b003      	add	sp, #12
 801c19a:	4770      	bx	lr

0801c19c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c19c:	b40e      	push	{r1, r2, r3}
 801c19e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1a0:	b09e      	sub	sp, #120	; 0x78
 801c1a2:	4604      	mov	r4, r0
 801c1a4:	ab23      	add	r3, sp, #140	; 0x8c
 801c1a6:	a805      	add	r0, sp, #20
 801c1a8:	f853 5b04 	ldr.w	r5, [r3], #4
 801c1ac:	9303      	str	r3, [sp, #12]
 801c1ae:	f000 fcb6 	bl	801cb1e <_ZN8touchgfx12TextProviderC1Ev>
 801c1b2:	6823      	ldr	r3, [r4, #0]
 801c1b4:	4620      	mov	r0, r4
 801c1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c1b8:	4798      	blx	r3
 801c1ba:	6823      	ldr	r3, [r4, #0]
 801c1bc:	4606      	mov	r6, r0
 801c1be:	4620      	mov	r0, r4
 801c1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1c2:	4798      	blx	r3
 801c1c4:	4633      	mov	r3, r6
 801c1c6:	4629      	mov	r1, r5
 801c1c8:	9000      	str	r0, [sp, #0]
 801c1ca:	9a03      	ldr	r2, [sp, #12]
 801c1cc:	a805      	add	r0, sp, #20
 801c1ce:	f000 fd01 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c1d2:	ad1e      	add	r5, sp, #120	; 0x78
 801c1d4:	2100      	movs	r1, #0
 801c1d6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801c1da:	4622      	mov	r2, r4
 801c1dc:	a805      	add	r0, sp, #20
 801c1de:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c1e2:	462b      	mov	r3, r5
 801c1e4:	f000 fffc 	bl	801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c1e8:	b1d8      	cbz	r0, 801c222 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c1ea:	280a      	cmp	r0, #10
 801c1ec:	d012      	beq.n	801c214 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c1ee:	9804      	ldr	r0, [sp, #16]
 801c1f0:	b180      	cbz	r0, 801c214 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c1f2:	7b47      	ldrb	r7, [r0, #13]
 801c1f4:	88e2      	ldrh	r2, [r4, #6]
 801c1f6:	00fb      	lsls	r3, r7, #3
 801c1f8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c1fc:	7a03      	ldrb	r3, [r0, #8]
 801c1fe:	430b      	orrs	r3, r1
 801c200:	0679      	lsls	r1, r7, #25
 801c202:	bf44      	itt	mi
 801c204:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c208:	b21b      	sxthmi	r3, r3
 801c20a:	1ad3      	subs	r3, r2, r3
 801c20c:	b21b      	sxth	r3, r3
 801c20e:	429e      	cmp	r6, r3
 801c210:	bfa8      	it	ge
 801c212:	461e      	movge	r6, r3
 801c214:	462b      	mov	r3, r5
 801c216:	4622      	mov	r2, r4
 801c218:	2100      	movs	r1, #0
 801c21a:	a805      	add	r0, sp, #20
 801c21c:	f000 ffe0 	bl	801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c220:	e7e2      	b.n	801c1e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c222:	4630      	mov	r0, r6
 801c224:	b01e      	add	sp, #120	; 0x78
 801c226:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c22a:	b003      	add	sp, #12
 801c22c:	4770      	bx	lr

0801c22e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c22e:	b513      	push	{r0, r1, r4, lr}
 801c230:	6803      	ldr	r3, [r0, #0]
 801c232:	2400      	movs	r4, #0
 801c234:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c238:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c23c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c240:	4669      	mov	r1, sp
 801c242:	691b      	ldr	r3, [r3, #16]
 801c244:	9400      	str	r4, [sp, #0]
 801c246:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c24a:	4798      	blx	r3
 801c24c:	b002      	add	sp, #8
 801c24e:	bd10      	pop	{r4, pc}

0801c250 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c250:	b538      	push	{r3, r4, r5, lr}
 801c252:	680b      	ldr	r3, [r1, #0]
 801c254:	460c      	mov	r4, r1
 801c256:	4605      	mov	r5, r0
 801c258:	68db      	ldr	r3, [r3, #12]
 801c25a:	4798      	blx	r3
 801c25c:	6823      	ldr	r3, [r4, #0]
 801c25e:	4620      	mov	r0, r4
 801c260:	4629      	mov	r1, r5
 801c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c264:	4798      	blx	r3
 801c266:	4628      	mov	r0, r5
 801c268:	bd38      	pop	{r3, r4, r5, pc}

0801c26a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c26a:	b410      	push	{r4}
 801c26c:	880a      	ldrh	r2, [r1, #0]
 801c26e:	8884      	ldrh	r4, [r0, #4]
 801c270:	4422      	add	r2, r4
 801c272:	800a      	strh	r2, [r1, #0]
 801c274:	884a      	ldrh	r2, [r1, #2]
 801c276:	88c4      	ldrh	r4, [r0, #6]
 801c278:	4422      	add	r2, r4
 801c27a:	804a      	strh	r2, [r1, #2]
 801c27c:	6940      	ldr	r0, [r0, #20]
 801c27e:	b120      	cbz	r0, 801c28a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c280:	6803      	ldr	r3, [r0, #0]
 801c282:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c288:	4718      	bx	r3
 801c28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c28e:	4770      	bx	lr

0801c290 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c290:	b570      	push	{r4, r5, r6, lr}
 801c292:	8882      	ldrh	r2, [r0, #4]
 801c294:	460c      	mov	r4, r1
 801c296:	880b      	ldrh	r3, [r1, #0]
 801c298:	4605      	mov	r5, r0
 801c29a:	4413      	add	r3, r2
 801c29c:	800b      	strh	r3, [r1, #0]
 801c29e:	884b      	ldrh	r3, [r1, #2]
 801c2a0:	88c2      	ldrh	r2, [r0, #6]
 801c2a2:	4413      	add	r3, r2
 801c2a4:	804b      	strh	r3, [r1, #2]
 801c2a6:	1d01      	adds	r1, r0, #4
 801c2a8:	4620      	mov	r0, r4
 801c2aa:	f7fa fde1 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801c2ae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	dd0b      	ble.n	801c2ce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	dd07      	ble.n	801c2ce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2be:	6968      	ldr	r0, [r5, #20]
 801c2c0:	b128      	cbz	r0, 801c2ce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2c2:	6803      	ldr	r3, [r0, #0]
 801c2c4:	4621      	mov	r1, r4
 801c2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2cc:	4718      	bx	r3
 801c2ce:	bd70      	pop	{r4, r5, r6, pc}

0801c2d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c2d0:	b570      	push	{r4, r5, r6, lr}
 801c2d2:	8882      	ldrh	r2, [r0, #4]
 801c2d4:	460c      	mov	r4, r1
 801c2d6:	880b      	ldrh	r3, [r1, #0]
 801c2d8:	4605      	mov	r5, r0
 801c2da:	4413      	add	r3, r2
 801c2dc:	800b      	strh	r3, [r1, #0]
 801c2de:	884b      	ldrh	r3, [r1, #2]
 801c2e0:	88c2      	ldrh	r2, [r0, #6]
 801c2e2:	4413      	add	r3, r2
 801c2e4:	804b      	strh	r3, [r1, #2]
 801c2e6:	1d01      	adds	r1, r0, #4
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	f7fa fdc1 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801c2ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	dd18      	ble.n	801c328 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c2f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	dd14      	ble.n	801c328 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c2fe:	6968      	ldr	r0, [r5, #20]
 801c300:	b128      	cbz	r0, 801c30e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c302:	6803      	ldr	r3, [r0, #0]
 801c304:	4621      	mov	r1, r4
 801c306:	691b      	ldr	r3, [r3, #16]
 801c308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c30c:	4718      	bx	r3
 801c30e:	4b07      	ldr	r3, [pc, #28]	; (801c32c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	3304      	adds	r3, #4
 801c314:	429d      	cmp	r5, r3
 801c316:	d107      	bne.n	801c328 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c318:	f7fe fefa 	bl	801b110 <_ZN8touchgfx11Application11getInstanceEv>
 801c31c:	6821      	ldr	r1, [r4, #0]
 801c31e:	6862      	ldr	r2, [r4, #4]
 801c320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c324:	f7ff b862 	b.w	801b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c328:	bd70      	pop	{r4, r5, r6, pc}
 801c32a:	bf00      	nop
 801c32c:	2001524c 	.word	0x2001524c

0801c330 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c330:	b570      	push	{r4, r5, r6, lr}
 801c332:	4604      	mov	r4, r0
 801c334:	4616      	mov	r6, r2
 801c336:	460d      	mov	r5, r1
 801c338:	b901      	cbnz	r1, 801c33c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c33a:	b192      	cbz	r2, 801c362 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c33c:	6823      	ldr	r3, [r4, #0]
 801c33e:	4620      	mov	r0, r4
 801c340:	699b      	ldr	r3, [r3, #24]
 801c342:	4798      	blx	r3
 801c344:	88e2      	ldrh	r2, [r4, #6]
 801c346:	88a1      	ldrh	r1, [r4, #4]
 801c348:	4620      	mov	r0, r4
 801c34a:	4432      	add	r2, r6
 801c34c:	4429      	add	r1, r5
 801c34e:	b212      	sxth	r2, r2
 801c350:	b209      	sxth	r1, r1
 801c352:	f7e7 fca5 	bl	8003ca0 <_ZN8touchgfx8Drawable5setXYEss>
 801c356:	6823      	ldr	r3, [r4, #0]
 801c358:	4620      	mov	r0, r4
 801c35a:	699b      	ldr	r3, [r3, #24]
 801c35c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c360:	4718      	bx	r3
 801c362:	bd70      	pop	{r4, r5, r6, pc}

0801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c364:	b510      	push	{r4, lr}
 801c366:	2300      	movs	r3, #0
 801c368:	4604      	mov	r4, r0
 801c36a:	4608      	mov	r0, r1
 801c36c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c370:	8023      	strh	r3, [r4, #0]
 801c372:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c376:	8063      	strh	r3, [r4, #2]
 801c378:	6803      	ldr	r3, [r0, #0]
 801c37a:	80a1      	strh	r1, [r4, #4]
 801c37c:	4621      	mov	r1, r4
 801c37e:	80e2      	strh	r2, [r4, #6]
 801c380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c382:	4798      	blx	r3
 801c384:	4620      	mov	r0, r4
 801c386:	bd10      	pop	{r4, pc}

0801c388 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c388:	b530      	push	{r4, r5, lr}
 801c38a:	8083      	strh	r3, [r0, #4]
 801c38c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c390:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c394:	80c3      	strh	r3, [r0, #6]
 801c396:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c39a:	6141      	str	r1, [r0, #20]
 801c39c:	7203      	strb	r3, [r0, #8]
 801c39e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c3a2:	8302      	strh	r2, [r0, #24]
 801c3a4:	7243      	strb	r3, [r0, #9]
 801c3a6:	7a83      	ldrb	r3, [r0, #10]
 801c3a8:	f365 0306 	bfi	r3, r5, #0, #7
 801c3ac:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c3b0:	f365 13c7 	bfi	r3, r5, #7, #1
 801c3b4:	7283      	strb	r3, [r0, #10]
 801c3b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c3ba:	72c3      	strb	r3, [r0, #11]
 801c3bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801c3c0:	7303      	strb	r3, [r0, #12]
 801c3c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c3c6:	81c3      	strh	r3, [r0, #14]
 801c3c8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801c3cc:	8203      	strh	r3, [r0, #16]
 801c3ce:	4b01      	ldr	r3, [pc, #4]	; (801c3d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c3d0:	6003      	str	r3, [r0, #0]
 801c3d2:	bd30      	pop	{r4, r5, pc}
 801c3d4:	0802f430 	.word	0x0802f430

0801c3d8 <_ZNK8touchgfx9ConstFont4findEt>:
 801c3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3da:	6944      	ldr	r4, [r0, #20]
 801c3dc:	b3bc      	cbz	r4, 801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c3de:	88a3      	ldrh	r3, [r4, #4]
 801c3e0:	8b02      	ldrh	r2, [r0, #24]
 801c3e2:	1acb      	subs	r3, r1, r3
 801c3e4:	f102 32ff 	add.w	r2, r2, #4294967295
 801c3e8:	d431      	bmi.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c3ea:	4293      	cmp	r3, r2
 801c3ec:	dd0c      	ble.n	801c408 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c3ee:	230e      	movs	r3, #14
 801c3f0:	fb03 4302 	mla	r3, r3, r2, r4
 801c3f4:	889b      	ldrh	r3, [r3, #4]
 801c3f6:	1a5b      	subs	r3, r3, r1
 801c3f8:	1ad3      	subs	r3, r2, r3
 801c3fa:	429a      	cmp	r2, r3
 801c3fc:	db27      	blt.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	bfbc      	itt	lt
 801c402:	2302      	movlt	r3, #2
 801c404:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c408:	2500      	movs	r5, #0
 801c40a:	260e      	movs	r6, #14
 801c40c:	4295      	cmp	r5, r2
 801c40e:	dc1e      	bgt.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c410:	fb06 4003 	mla	r0, r6, r3, r4
 801c414:	8887      	ldrh	r7, [r0, #4]
 801c416:	42b9      	cmp	r1, r7
 801c418:	d01a      	beq.n	801c450 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c41a:	d20d      	bcs.n	801c438 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c41c:	1e5a      	subs	r2, r3, #1
 801c41e:	4295      	cmp	r5, r2
 801c420:	dc15      	bgt.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c422:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c426:	1a5b      	subs	r3, r3, r1
 801c428:	1ad3      	subs	r3, r2, r3
 801c42a:	429a      	cmp	r2, r3
 801c42c:	db0f      	blt.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c42e:	429d      	cmp	r5, r3
 801c430:	ddec      	ble.n	801c40c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c432:	1953      	adds	r3, r2, r5
 801c434:	105b      	asrs	r3, r3, #1
 801c436:	e7e9      	b.n	801c40c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c438:	1c5d      	adds	r5, r3, #1
 801c43a:	42aa      	cmp	r2, r5
 801c43c:	db07      	blt.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c43e:	8a43      	ldrh	r3, [r0, #18]
 801c440:	1acb      	subs	r3, r1, r3
 801c442:	442b      	add	r3, r5
 801c444:	429d      	cmp	r5, r3
 801c446:	dc02      	bgt.n	801c44e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c448:	429a      	cmp	r2, r3
 801c44a:	dadf      	bge.n	801c40c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c44c:	e7f1      	b.n	801c432 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c44e:	2000      	movs	r0, #0
 801c450:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c452 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c454:	4604      	mov	r4, r0
 801c456:	4617      	mov	r7, r2
 801c458:	461e      	mov	r6, r3
 801c45a:	b911      	cbnz	r1, 801c462 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c45c:	2500      	movs	r5, #0
 801c45e:	4628      	mov	r0, r5
 801c460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c462:	290a      	cmp	r1, #10
 801c464:	d0fa      	beq.n	801c45c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c466:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c46a:	4291      	cmp	r1, r2
 801c46c:	d0f6      	beq.n	801c45c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c46e:	f242 020b 	movw	r2, #8203	; 0x200b
 801c472:	4291      	cmp	r1, r2
 801c474:	d0f2      	beq.n	801c45c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c476:	f7ff ffaf 	bl	801c3d8 <_ZNK8touchgfx9ConstFont4findEt>
 801c47a:	4605      	mov	r5, r0
 801c47c:	b950      	cbnz	r0, 801c494 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c47e:	6823      	ldr	r3, [r4, #0]
 801c480:	4620      	mov	r0, r4
 801c482:	691b      	ldr	r3, [r3, #16]
 801c484:	4798      	blx	r3
 801c486:	4601      	mov	r1, r0
 801c488:	4620      	mov	r0, r4
 801c48a:	f7ff ffa5 	bl	801c3d8 <_ZNK8touchgfx9ConstFont4findEt>
 801c48e:	4605      	mov	r5, r0
 801c490:	2800      	cmp	r0, #0
 801c492:	d0e3      	beq.n	801c45c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c494:	6823      	ldr	r3, [r4, #0]
 801c496:	4629      	mov	r1, r5
 801c498:	4620      	mov	r0, r4
 801c49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c49c:	4798      	blx	r3
 801c49e:	6038      	str	r0, [r7, #0]
 801c4a0:	6823      	ldr	r3, [r4, #0]
 801c4a2:	4620      	mov	r0, r4
 801c4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c4a6:	4798      	blx	r3
 801c4a8:	7030      	strb	r0, [r6, #0]
 801c4aa:	e7d8      	b.n	801c45e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c4ac <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c4ac:	2002      	movs	r0, #2
 801c4ae:	4770      	bx	lr

0801c4b0 <_ZN8touchgfx6ScreenD1Ev>:
 801c4b0:	4770      	bx	lr

0801c4b2 <_ZN8touchgfx12GestureEventD1Ev>:
 801c4b2:	4770      	bx	lr

0801c4b4 <_ZN8touchgfx12GestureEventD0Ev>:
 801c4b4:	b510      	push	{r4, lr}
 801c4b6:	4604      	mov	r4, r0
 801c4b8:	210c      	movs	r1, #12
 801c4ba:	f00d f945 	bl	8029748 <_ZdlPvj>
 801c4be:	4620      	mov	r0, r4
 801c4c0:	bd10      	pop	{r4, pc}

0801c4c2 <_ZN8touchgfx6ScreenD0Ev>:
 801c4c2:	b510      	push	{r4, lr}
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	213c      	movs	r1, #60	; 0x3c
 801c4c8:	f00d f93e 	bl	8029748 <_ZdlPvj>
 801c4cc:	4620      	mov	r0, r4
 801c4ce:	bd10      	pop	{r4, pc}

0801c4d0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c4d0:	b530      	push	{r4, r5, lr}
 801c4d2:	460d      	mov	r5, r1
 801c4d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c4d6:	b087      	sub	sp, #28
 801c4d8:	4604      	mov	r4, r0
 801c4da:	b301      	cbz	r1, 801c51e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c4dc:	a801      	add	r0, sp, #4
 801c4de:	f7ff ff41 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4e2:	892a      	ldrh	r2, [r5, #8]
 801c4e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c4e8:	7928      	ldrb	r0, [r5, #4]
 801c4ea:	1ad2      	subs	r2, r2, r3
 801c4ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c4ee:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c4f2:	441a      	add	r2, r3
 801c4f4:	896b      	ldrh	r3, [r5, #10]
 801c4f6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c4fa:	f88d 0010 	strb.w	r0, [sp, #16]
 801c4fe:	1b5b      	subs	r3, r3, r5
 801c500:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c502:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c504:	442b      	add	r3, r5
 801c506:	4d07      	ldr	r5, [pc, #28]	; (801c524 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c508:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c50c:	a903      	add	r1, sp, #12
 801c50e:	9503      	str	r5, [sp, #12]
 801c510:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c514:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c518:	6803      	ldr	r3, [r0, #0]
 801c51a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c51c:	4798      	blx	r3
 801c51e:	b007      	add	sp, #28
 801c520:	bd30      	pop	{r4, r5, pc}
 801c522:	bf00      	nop
 801c524:	0802f490 	.word	0x0802f490

0801c528 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c52c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c52e:	b08a      	sub	sp, #40	; 0x28
 801c530:	4604      	mov	r4, r0
 801c532:	460d      	mov	r5, r1
 801c534:	b113      	cbz	r3, 801c53c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c536:	790b      	ldrb	r3, [r1, #4]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d044      	beq.n	801c5c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c53c:	f104 0804 	add.w	r8, r4, #4
 801c540:	a803      	add	r0, sp, #12
 801c542:	4641      	mov	r1, r8
 801c544:	f7ff ff0e 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c548:	792b      	ldrb	r3, [r5, #4]
 801c54a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c54e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c552:	b983      	cbnz	r3, 801c576 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c554:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c558:	892a      	ldrh	r2, [r5, #8]
 801c55a:	88e9      	ldrh	r1, [r5, #6]
 801c55c:	4640      	mov	r0, r8
 801c55e:	1b92      	subs	r2, r2, r6
 801c560:	9301      	str	r3, [sp, #4]
 801c562:	1bc9      	subs	r1, r1, r7
 801c564:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c568:	b212      	sxth	r2, r2
 801c56a:	9300      	str	r3, [sp, #0]
 801c56c:	b209      	sxth	r1, r1
 801c56e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c572:	f7fa fb9b 	bl	8016cac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c576:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c578:	b329      	cbz	r1, 801c5c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c57a:	a805      	add	r0, sp, #20
 801c57c:	f7ff fef2 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c580:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c584:	792b      	ldrb	r3, [r5, #4]
 801c586:	a907      	add	r1, sp, #28
 801c588:	1abf      	subs	r7, r7, r2
 801c58a:	88ea      	ldrh	r2, [r5, #6]
 801c58c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c58e:	4417      	add	r7, r2
 801c590:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c592:	f88d 3020 	strb.w	r3, [sp, #32]
 801c596:	4417      	add	r7, r2
 801c598:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c59c:	1ab6      	subs	r6, r6, r2
 801c59e:	892a      	ldrh	r2, [r5, #8]
 801c5a0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c5a4:	4416      	add	r6, r2
 801c5a6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c5a8:	4416      	add	r6, r2
 801c5aa:	4a08      	ldr	r2, [pc, #32]	; (801c5cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c5ac:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c5b0:	2600      	movs	r6, #0
 801c5b2:	9207      	str	r2, [sp, #28]
 801c5b4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c5b8:	6803      	ldr	r3, [r0, #0]
 801c5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5bc:	4798      	blx	r3
 801c5be:	792b      	ldrb	r3, [r5, #4]
 801c5c0:	b10b      	cbz	r3, 801c5c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c5c2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c5c6:	b00a      	add	sp, #40	; 0x28
 801c5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5cc:	0802f118 	.word	0x0802f118

0801c5d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5d4:	460c      	mov	r4, r1
 801c5d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c5d8:	b088      	sub	sp, #32
 801c5da:	4605      	mov	r5, r0
 801c5dc:	2900      	cmp	r1, #0
 801c5de:	d06d      	beq.n	801c6bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c5e0:	4668      	mov	r0, sp
 801c5e2:	f7ff febf 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5e6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c5e8:	88e3      	ldrh	r3, [r4, #6]
 801c5ea:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c5ee:	440b      	add	r3, r1
 801c5f0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c5f4:	b21b      	sxth	r3, r3
 801c5f6:	4543      	cmp	r3, r8
 801c5f8:	db31      	blt.n	801c65e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c5fa:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c5fe:	44c4      	add	ip, r8
 801c600:	fa0f fc8c 	sxth.w	ip, ip
 801c604:	4563      	cmp	r3, ip
 801c606:	da2a      	bge.n	801c65e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c608:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c60a:	8926      	ldrh	r6, [r4, #8]
 801c60c:	4416      	add	r6, r2
 801c60e:	b236      	sxth	r6, r6
 801c610:	42be      	cmp	r6, r7
 801c612:	db24      	blt.n	801c65e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c614:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c618:	4438      	add	r0, r7
 801c61a:	b200      	sxth	r0, r0
 801c61c:	4286      	cmp	r6, r0
 801c61e:	da1e      	bge.n	801c65e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c620:	8963      	ldrh	r3, [r4, #10]
 801c622:	4419      	add	r1, r3
 801c624:	b209      	sxth	r1, r1
 801c626:	4541      	cmp	r1, r8
 801c628:	db08      	blt.n	801c63c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c62a:	4561      	cmp	r1, ip
 801c62c:	da06      	bge.n	801c63c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c62e:	89a3      	ldrh	r3, [r4, #12]
 801c630:	441a      	add	r2, r3
 801c632:	b212      	sxth	r2, r2
 801c634:	42ba      	cmp	r2, r7
 801c636:	db01      	blt.n	801c63c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c638:	4282      	cmp	r2, r0
 801c63a:	db10      	blt.n	801c65e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c63c:	4b21      	ldr	r3, [pc, #132]	; (801c6c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c63e:	a904      	add	r1, sp, #16
 801c640:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c642:	9304      	str	r3, [sp, #16]
 801c644:	2302      	movs	r3, #2
 801c646:	f88d 3014 	strb.w	r3, [sp, #20]
 801c64a:	2300      	movs	r3, #0
 801c64c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c650:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c654:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c658:	6803      	ldr	r3, [r0, #0]
 801c65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c65c:	4798      	blx	r3
 801c65e:	1d29      	adds	r1, r5, #4
 801c660:	a802      	add	r0, sp, #8
 801c662:	f7ff fe7f 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c666:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c66a:	88e0      	ldrh	r0, [r4, #6]
 801c66c:	eba3 0808 	sub.w	r8, r3, r8
 801c670:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c674:	7921      	ldrb	r1, [r4, #4]
 801c676:	fa1f f888 	uxth.w	r8, r8
 801c67a:	1bdf      	subs	r7, r3, r7
 801c67c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c680:	b2bb      	uxth	r3, r7
 801c682:	4440      	add	r0, r8
 801c684:	8922      	ldrh	r2, [r4, #8]
 801c686:	8967      	ldrh	r7, [r4, #10]
 801c688:	4460      	add	r0, ip
 801c68a:	89a4      	ldrh	r4, [r4, #12]
 801c68c:	441a      	add	r2, r3
 801c68e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c690:	44b8      	add	r8, r7
 801c692:	4423      	add	r3, r4
 801c694:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c698:	4432      	add	r2, r6
 801c69a:	44e0      	add	r8, ip
 801c69c:	4433      	add	r3, r6
 801c69e:	4c0a      	ldr	r4, [pc, #40]	; (801c6c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c6a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c6a2:	f88d 1014 	strb.w	r1, [sp, #20]
 801c6a6:	a904      	add	r1, sp, #16
 801c6a8:	9404      	str	r4, [sp, #16]
 801c6aa:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c6ae:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c6b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c6b6:	6803      	ldr	r3, [r0, #0]
 801c6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c6ba:	4798      	blx	r3
 801c6bc:	b008      	add	sp, #32
 801c6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6c2:	bf00      	nop
 801c6c4:	0802f118 	.word	0x0802f118
 801c6c8:	0802f12c 	.word	0x0802f12c

0801c6cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c6ce:	4604      	mov	r4, r0
 801c6d0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c6d4:	3201      	adds	r2, #1
 801c6d6:	d112      	bne.n	801c6fe <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c6d8:	2500      	movs	r5, #0
 801c6da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c6de:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c6e2:	6803      	ldr	r3, [r0, #0]
 801c6e4:	9500      	str	r5, [sp, #0]
 801c6e6:	466d      	mov	r5, sp
 801c6e8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c6ec:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c6f0:	4629      	mov	r1, r5
 801c6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6f4:	4798      	blx	r3
 801c6f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c6fa:	e884 0003 	stmia.w	r4, {r0, r1}
 801c6fe:	4620      	mov	r0, r4
 801c700:	b003      	add	sp, #12
 801c702:	bd30      	pop	{r4, r5, pc}

0801c704 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c704:	b513      	push	{r0, r1, r4, lr}
 801c706:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c70a:	4604      	mov	r4, r0
 801c70c:	3301      	adds	r3, #1
 801c70e:	d109      	bne.n	801c724 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c710:	4601      	mov	r1, r0
 801c712:	4668      	mov	r0, sp
 801c714:	f7ff fe26 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c718:	f8bd 3000 	ldrh.w	r3, [sp]
 801c71c:	8423      	strh	r3, [r4, #32]
 801c71e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c722:	8463      	strh	r3, [r4, #34]	; 0x22
 801c724:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c728:	b002      	add	sp, #8
 801c72a:	bd10      	pop	{r4, pc}

0801c72c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c72c:	b513      	push	{r0, r1, r4, lr}
 801c72e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c732:	4604      	mov	r4, r0
 801c734:	3301      	adds	r3, #1
 801c736:	d109      	bne.n	801c74c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c738:	4601      	mov	r1, r0
 801c73a:	4668      	mov	r0, sp
 801c73c:	f7ff fe12 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c740:	f8bd 3000 	ldrh.w	r3, [sp]
 801c744:	8423      	strh	r3, [r4, #32]
 801c746:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c74a:	8463      	strh	r3, [r4, #34]	; 0x22
 801c74c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c750:	b002      	add	sp, #8
 801c752:	bd10      	pop	{r4, pc}

0801c754 <_ZN8touchgfx6ScreenC1Ev>:
 801c754:	b570      	push	{r4, r5, r6, lr}
 801c756:	4b17      	ldr	r3, [pc, #92]	; (801c7b4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c758:	4605      	mov	r5, r0
 801c75a:	4a17      	ldr	r2, [pc, #92]	; (801c7b8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c75c:	2101      	movs	r1, #1
 801c75e:	f845 3b04 	str.w	r3, [r5], #4
 801c762:	2300      	movs	r3, #0
 801c764:	6042      	str	r2, [r0, #4]
 801c766:	4604      	mov	r4, r0
 801c768:	8103      	strh	r3, [r0, #8]
 801c76a:	8143      	strh	r3, [r0, #10]
 801c76c:	8183      	strh	r3, [r0, #12]
 801c76e:	81c3      	strh	r3, [r0, #14]
 801c770:	8203      	strh	r3, [r0, #16]
 801c772:	8243      	strh	r3, [r0, #18]
 801c774:	8283      	strh	r3, [r0, #20]
 801c776:	82c3      	strh	r3, [r0, #22]
 801c778:	6203      	str	r3, [r0, #32]
 801c77a:	8483      	strh	r3, [r0, #36]	; 0x24
 801c77c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c77e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c782:	6343      	str	r3, [r0, #52]	; 0x34
 801c784:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c788:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c78c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c790:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c794:	4b09      	ldr	r3, [pc, #36]	; (801c7bc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c796:	4628      	mov	r0, r5
 801c798:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c79c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801c79e:	4a08      	ldr	r2, [pc, #32]	; (801c7c0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c7a0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c7a4:	4798      	blx	r3
 801c7a6:	6863      	ldr	r3, [r4, #4]
 801c7a8:	4628      	mov	r0, r5
 801c7aa:	4631      	mov	r1, r6
 801c7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7ae:	4798      	blx	r3
 801c7b0:	4620      	mov	r0, r4
 801c7b2:	bd70      	pop	{r4, r5, r6, pc}
 801c7b4:	0802f4a4 	.word	0x0802f4a4
 801c7b8:	0802f088 	.word	0x0802f088
 801c7bc:	20015206 	.word	0x20015206
 801c7c0:	20015204 	.word	0x20015204

0801c7c4 <_ZN8touchgfx6Screen4drawEv>:
 801c7c4:	4b09      	ldr	r3, [pc, #36]	; (801c7ec <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c7c6:	b507      	push	{r0, r1, r2, lr}
 801c7c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c7cc:	2100      	movs	r1, #0
 801c7ce:	4b08      	ldr	r3, [pc, #32]	; (801c7f0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c7d0:	9100      	str	r1, [sp, #0]
 801c7d2:	4669      	mov	r1, sp
 801c7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c7dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c7e0:	6803      	ldr	r3, [r0, #0]
 801c7e2:	689b      	ldr	r3, [r3, #8]
 801c7e4:	4798      	blx	r3
 801c7e6:	b003      	add	sp, #12
 801c7e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c7ec:	20015204 	.word	0x20015204
 801c7f0:	20015206 	.word	0x20015206

0801c7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c7fc:	b089      	sub	sp, #36	; 0x24
 801c7fe:	4680      	mov	r8, r0
 801c800:	460c      	mov	r4, r1
 801c802:	2b00      	cmp	r3, #0
 801c804:	4615      	mov	r5, r2
 801c806:	dd0e      	ble.n	801c826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c808:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	dd0a      	ble.n	801c826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c810:	4628      	mov	r0, r5
 801c812:	f7ff ff5b 	bl	801c6cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c816:	4621      	mov	r1, r4
 801c818:	f7fe fbe1 	bl	801afde <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c81c:	69eb      	ldr	r3, [r5, #28]
 801c81e:	b928      	cbnz	r0, 801c82c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c820:	461d      	mov	r5, r3
 801c822:	2b00      	cmp	r3, #0
 801c824:	d1f4      	bne.n	801c810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c826:	b009      	add	sp, #36	; 0x24
 801c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c82c:	ae04      	add	r6, sp, #16
 801c82e:	2b00      	cmp	r3, #0
 801c830:	f000 80b5 	beq.w	801c99e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c834:	682b      	ldr	r3, [r5, #0]
 801c836:	4629      	mov	r1, r5
 801c838:	a802      	add	r0, sp, #8
 801c83a:	68db      	ldr	r3, [r3, #12]
 801c83c:	4798      	blx	r3
 801c83e:	4628      	mov	r0, r5
 801c840:	f7ff ff60 	bl	801c704 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c844:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c848:	4407      	add	r7, r0
 801c84a:	4628      	mov	r0, r5
 801c84c:	f7ff ff6e 	bl	801c72c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c850:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c854:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c858:	b23f      	sxth	r7, r7
 801c85a:	4418      	add	r0, r3
 801c85c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c860:	4621      	mov	r1, r4
 801c862:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c866:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c86a:	4630      	mov	r0, r6
 801c86c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c870:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c874:	f7fa fafc 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801c878:	4628      	mov	r0, r5
 801c87a:	f7ff ff27 	bl	801c6cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c87e:	ab06      	add	r3, sp, #24
 801c880:	4602      	mov	r2, r0
 801c882:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c886:	e883 0003 	stmia.w	r3, {r0, r1}
 801c88a:	4611      	mov	r1, r2
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7fa faef 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801c892:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c896:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c89a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c89e:	4299      	cmp	r1, r3
 801c8a0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c8a4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c8a8:	d10b      	bne.n	801c8c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c8aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c8ae:	4552      	cmp	r2, sl
 801c8b0:	d107      	bne.n	801c8c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c8b2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c8b6:	455a      	cmp	r2, fp
 801c8b8:	d103      	bne.n	801c8c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c8ba:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c8be:	454a      	cmp	r2, r9
 801c8c0:	d06d      	beq.n	801c99e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c8c2:	f1bb 0f00 	cmp.w	fp, #0
 801c8c6:	dd65      	ble.n	801c994 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c8c8:	f1b9 0f00 	cmp.w	r9, #0
 801c8cc:	dd62      	ble.n	801c994 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c8ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c8d2:	fa1f f08a 	uxth.w	r0, sl
 801c8d6:	4552      	cmp	r2, sl
 801c8d8:	9000      	str	r0, [sp, #0]
 801c8da:	da12      	bge.n	801c902 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c8dc:	9301      	str	r3, [sp, #4]
 801c8de:	9b00      	ldr	r3, [sp, #0]
 801c8e0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c8e4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c8e8:	1a9a      	subs	r2, r3, r2
 801c8ea:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c8ee:	4631      	mov	r1, r6
 801c8f0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c8f4:	4640      	mov	r0, r8
 801c8f6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c8fa:	69ea      	ldr	r2, [r5, #28]
 801c8fc:	f7ff ff7a 	bl	801c7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c900:	9b01      	ldr	r3, [sp, #4]
 801c902:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c906:	b29f      	uxth	r7, r3
 801c908:	429a      	cmp	r2, r3
 801c90a:	da0d      	bge.n	801c928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c90c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c910:	1aba      	subs	r2, r7, r2
 801c912:	f8ad a012 	strh.w	sl, [sp, #18]
 801c916:	4631      	mov	r1, r6
 801c918:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c91c:	4640      	mov	r0, r8
 801c91e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c922:	69ea      	ldr	r2, [r5, #28]
 801c924:	f7ff ff66 	bl	801c7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c928:	8822      	ldrh	r2, [r4, #0]
 801c92a:	445f      	add	r7, fp
 801c92c:	88a3      	ldrh	r3, [r4, #4]
 801c92e:	b2bf      	uxth	r7, r7
 801c930:	4413      	add	r3, r2
 801c932:	b23a      	sxth	r2, r7
 801c934:	b29b      	uxth	r3, r3
 801c936:	b219      	sxth	r1, r3
 801c938:	4291      	cmp	r1, r2
 801c93a:	dd0d      	ble.n	801c958 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c93c:	1bdb      	subs	r3, r3, r7
 801c93e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c942:	f8ad a012 	strh.w	sl, [sp, #18]
 801c946:	4631      	mov	r1, r6
 801c948:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c94c:	4640      	mov	r0, r8
 801c94e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c952:	69ea      	ldr	r2, [r5, #28]
 801c954:	f7ff ff4e 	bl	801c7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c958:	88e2      	ldrh	r2, [r4, #6]
 801c95a:	8863      	ldrh	r3, [r4, #2]
 801c95c:	4413      	add	r3, r2
 801c95e:	9a00      	ldr	r2, [sp, #0]
 801c960:	444a      	add	r2, r9
 801c962:	b29b      	uxth	r3, r3
 801c964:	fa1f f982 	uxth.w	r9, r2
 801c968:	b219      	sxth	r1, r3
 801c96a:	fa0f f289 	sxth.w	r2, r9
 801c96e:	428a      	cmp	r2, r1
 801c970:	da15      	bge.n	801c99e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c972:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c976:	eba3 0309 	sub.w	r3, r3, r9
 801c97a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c97e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c982:	4631      	mov	r1, r6
 801c984:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c988:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c98c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c990:	69ea      	ldr	r2, [r5, #28]
 801c992:	e001      	b.n	801c998 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c994:	69ea      	ldr	r2, [r5, #28]
 801c996:	4621      	mov	r1, r4
 801c998:	4640      	mov	r0, r8
 801c99a:	f7ff ff2b 	bl	801c7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c99e:	4628      	mov	r0, r5
 801c9a0:	f7ff fe94 	bl	801c6cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c9a4:	6861      	ldr	r1, [r4, #4]
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	4633      	mov	r3, r6
 801c9aa:	6820      	ldr	r0, [r4, #0]
 801c9ac:	c303      	stmia	r3!, {r0, r1}
 801c9ae:	4611      	mov	r1, r2
 801c9b0:	4630      	mov	r0, r6
 801c9b2:	f7fa fa5d 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801c9b6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	f77f af33 	ble.w	801c826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c9c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	f77f af2e 	ble.w	801c826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c9ca:	4628      	mov	r0, r5
 801c9cc:	f7ff fe9a 	bl	801c704 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c9d0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c9d4:	1a18      	subs	r0, r3, r0
 801c9d6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c9da:	4628      	mov	r0, r5
 801c9dc:	f7ff fea6 	bl	801c72c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c9e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c9e4:	4631      	mov	r1, r6
 801c9e6:	1a18      	subs	r0, r3, r0
 801c9e8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c9ec:	4628      	mov	r0, r5
 801c9ee:	682b      	ldr	r3, [r5, #0]
 801c9f0:	689b      	ldr	r3, [r3, #8]
 801c9f2:	4798      	blx	r3
 801c9f4:	e717      	b.n	801c826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c9f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c9f6:	b570      	push	{r4, r5, r6, lr}
 801c9f8:	1d06      	adds	r6, r0, #4
 801c9fa:	b086      	sub	sp, #24
 801c9fc:	460c      	mov	r4, r1
 801c9fe:	2300      	movs	r3, #0
 801ca00:	4631      	mov	r1, r6
 801ca02:	4605      	mov	r5, r0
 801ca04:	a802      	add	r0, sp, #8
 801ca06:	9301      	str	r3, [sp, #4]
 801ca08:	f7ff fcac 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca0c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ca10:	8822      	ldrh	r2, [r4, #0]
 801ca12:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ca16:	1ad2      	subs	r2, r2, r3
 801ca18:	8863      	ldrh	r3, [r4, #2]
 801ca1a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ca1e:	1a5b      	subs	r3, r3, r1
 801ca20:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ca24:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca28:	aa01      	add	r2, sp, #4
 801ca2a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ca2e:	4630      	mov	r0, r6
 801ca30:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ca34:	a904      	add	r1, sp, #16
 801ca36:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ca3a:	f7fa faf1 	bl	8017020 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ca3e:	9a01      	ldr	r2, [sp, #4]
 801ca40:	b11a      	cbz	r2, 801ca4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ca42:	4621      	mov	r1, r4
 801ca44:	4628      	mov	r0, r5
 801ca46:	f7ff fed5 	bl	801c7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca4a:	b006      	add	sp, #24
 801ca4c:	bd70      	pop	{r4, r5, r6, pc}

0801ca4e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ca4e:	4602      	mov	r2, r0
 801ca50:	b530      	push	{r4, r5, lr}
 801ca52:	4604      	mov	r4, r0
 801ca54:	b085      	sub	sp, #20
 801ca56:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ca5a:	460d      	mov	r5, r1
 801ca5c:	466b      	mov	r3, sp
 801ca5e:	6851      	ldr	r1, [r2, #4]
 801ca60:	c303      	stmia	r3!, {r0, r1}
 801ca62:	4629      	mov	r1, r5
 801ca64:	4668      	mov	r0, sp
 801ca66:	f7fa fa03 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801ca6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ca6e:	b12b      	cbz	r3, 801ca7c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ca70:	4669      	mov	r1, sp
 801ca72:	4620      	mov	r0, r4
 801ca74:	f7ff ffbf 	bl	801c9f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ca78:	b005      	add	sp, #20
 801ca7a:	bd30      	pop	{r4, r5, pc}
 801ca7c:	3404      	adds	r4, #4
 801ca7e:	a802      	add	r0, sp, #8
 801ca80:	4621      	mov	r1, r4
 801ca82:	f7ff fc6f 	bl	801c364 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca86:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca8a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ca8e:	4669      	mov	r1, sp
 801ca90:	4620      	mov	r0, r4
 801ca92:	1a9b      	subs	r3, r3, r2
 801ca94:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ca98:	f8ad 3000 	strh.w	r3, [sp]
 801ca9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801caa0:	1a9b      	subs	r3, r3, r2
 801caa2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801caa6:	f7fa fa82 	bl	8016fae <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801caaa:	e7e5      	b.n	801ca78 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801caac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801caac:	460b      	mov	r3, r1
 801caae:	680a      	ldr	r2, [r1, #0]
 801cab0:	1d01      	adds	r1, r0, #4
 801cab2:	6992      	ldr	r2, [r2, #24]
 801cab4:	4618      	mov	r0, r3
 801cab6:	4710      	bx	r2

0801cab8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cab8:	4298      	cmp	r0, r3
 801caba:	d200      	bcs.n	801cabe <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cabc:	b913      	cbnz	r3, 801cac4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cabe:	440a      	add	r2, r1
 801cac0:	b210      	sxth	r0, r2
 801cac2:	4770      	bx	lr
 801cac4:	ee07 0a90 	vmov	s15, r0
 801cac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cacc:	ee07 3a90 	vmov	s15, r3
 801cad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cad8:	ee07 2a90 	vmov	s15, r2
 801cadc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cae0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cae4:	ee07 1a90 	vmov	s15, r1
 801cae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801caec:	ee37 7a66 	vsub.f32	s14, s14, s13
 801caf0:	ee67 5a07 	vmul.f32	s11, s14, s14
 801caf4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801caf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cafc:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cb00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb08:	bfcc      	ite	gt
 801cb0a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cb0e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cb12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb16:	ee17 3a90 	vmov	r3, s15
 801cb1a:	b218      	sxth	r0, r3
 801cb1c:	4770      	bx	lr

0801cb1e <_ZN8touchgfx12TextProviderC1Ev>:
 801cb1e:	b538      	push	{r3, r4, r5, lr}
 801cb20:	2500      	movs	r5, #0
 801cb22:	2302      	movs	r3, #2
 801cb24:	4604      	mov	r4, r0
 801cb26:	220e      	movs	r2, #14
 801cb28:	7403      	strb	r3, [r0, #16]
 801cb2a:	4629      	mov	r1, r5
 801cb2c:	6145      	str	r5, [r0, #20]
 801cb2e:	7605      	strb	r5, [r0, #24]
 801cb30:	83c5      	strh	r5, [r0, #30]
 801cb32:	8405      	strh	r5, [r0, #32]
 801cb34:	86c5      	strh	r5, [r0, #54]	; 0x36
 801cb36:	8705      	strh	r5, [r0, #56]	; 0x38
 801cb38:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801cb3a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801cb3e:	e9c0 5500 	strd	r5, r5, [r0]
 801cb42:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801cb46:	304c      	adds	r0, #76	; 0x4c
 801cb48:	f00c febc 	bl	80298c4 <memset>
 801cb4c:	2301      	movs	r3, #1
 801cb4e:	4620      	mov	r0, r4
 801cb50:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801cb54:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cb58:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801cb5c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801cb60:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801cb64:	f7e6 ffec 	bl	8003b40 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801cb68:	4620      	mov	r0, r4
 801cb6a:	bd38      	pop	{r3, r4, r5, pc}

0801cb6c <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801cb6c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cb6e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cb72:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801cb74:	fab0 f080 	clz	r0, r0
 801cb78:	0940      	lsrs	r0, r0, #5
 801cb7a:	4770      	bx	lr

0801cb7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cb7c:	b530      	push	{r4, r5, lr}
 801cb7e:	2500      	movs	r5, #0
 801cb80:	2401      	movs	r4, #1
 801cb82:	6843      	ldr	r3, [r0, #4]
 801cb84:	b913      	cbnz	r3, 801cb8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cb86:	6803      	ldr	r3, [r0, #0]
 801cb88:	b313      	cbz	r3, 801cbd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cb8a:	6043      	str	r3, [r0, #4]
 801cb8c:	7e03      	ldrb	r3, [r0, #24]
 801cb8e:	b143      	cbz	r3, 801cba2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cb90:	6943      	ldr	r3, [r0, #20]
 801cb92:	b12b      	cbz	r3, 801cba0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cb94:	881a      	ldrh	r2, [r3, #0]
 801cb96:	b11a      	cbz	r2, 801cba0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cb98:	1c9a      	adds	r2, r3, #2
 801cb9a:	6142      	str	r2, [r0, #20]
 801cb9c:	8818      	ldrh	r0, [r3, #0]
 801cb9e:	bd30      	pop	{r4, r5, pc}
 801cba0:	7605      	strb	r5, [r0, #24]
 801cba2:	6843      	ldr	r3, [r0, #4]
 801cba4:	8819      	ldrh	r1, [r3, #0]
 801cba6:	b199      	cbz	r1, 801cbd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cba8:	1c9a      	adds	r2, r3, #2
 801cbaa:	2902      	cmp	r1, #2
 801cbac:	6042      	str	r2, [r0, #4]
 801cbae:	d1f5      	bne.n	801cb9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801cbb0:	7c03      	ldrb	r3, [r0, #16]
 801cbb2:	2b01      	cmp	r3, #1
 801cbb4:	d8e5      	bhi.n	801cb82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cbb6:	1c5a      	adds	r2, r3, #1
 801cbb8:	3302      	adds	r3, #2
 801cbba:	7402      	strb	r2, [r0, #16]
 801cbbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cbc0:	6143      	str	r3, [r0, #20]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d0dd      	beq.n	801cb82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cbc6:	881b      	ldrh	r3, [r3, #0]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d0da      	beq.n	801cb82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cbcc:	7604      	strb	r4, [r0, #24]
 801cbce:	e7d8      	b.n	801cb82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cbd0:	2000      	movs	r0, #0
 801cbd2:	e7e4      	b.n	801cb9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801cbd4:	6001      	str	r1, [r0, #0]
 801cbd6:	2100      	movs	r1, #0
 801cbd8:	b430      	push	{r4, r5}
 801cbda:	6041      	str	r1, [r0, #4]
 801cbdc:	6815      	ldr	r5, [r2, #0]
 801cbde:	6085      	str	r5, [r0, #8]
 801cbe0:	6852      	ldr	r2, [r2, #4]
 801cbe2:	6443      	str	r3, [r0, #68]	; 0x44
 801cbe4:	9b02      	ldr	r3, [sp, #8]
 801cbe6:	60c2      	str	r2, [r0, #12]
 801cbe8:	7401      	strb	r1, [r0, #16]
 801cbea:	6141      	str	r1, [r0, #20]
 801cbec:	7601      	strb	r1, [r0, #24]
 801cbee:	8701      	strh	r1, [r0, #56]	; 0x38
 801cbf0:	8401      	strh	r1, [r0, #32]
 801cbf2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801cbf6:	6483      	str	r3, [r0, #72]	; 0x48
 801cbf8:	bc30      	pop	{r4, r5}
 801cbfa:	f7e6 bfa1 	b.w	8003b40 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cbfe <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801cbfe:	b408      	push	{r3}
 801cc00:	b510      	push	{r4, lr}
 801cc02:	b085      	sub	sp, #20
 801cc04:	ac07      	add	r4, sp, #28
 801cc06:	f854 3b04 	ldr.w	r3, [r4], #4
 801cc0a:	9300      	str	r3, [sp, #0]
 801cc0c:	4613      	mov	r3, r2
 801cc0e:	4622      	mov	r2, r4
 801cc10:	9403      	str	r4, [sp, #12]
 801cc12:	f7ff ffdf 	bl	801cbd4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cc16:	b005      	add	sp, #20
 801cc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc1c:	b001      	add	sp, #4
 801cc1e:	4770      	bx	lr

0801cc20 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc22:	4605      	mov	r5, r0
 801cc24:	4608      	mov	r0, r1
 801cc26:	b1f1      	cbz	r1, 801cc66 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801cc28:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801cc2c:	460b      	mov	r3, r1
 801cc2e:	f101 0708 	add.w	r7, r1, #8
 801cc32:	4622      	mov	r2, r4
 801cc34:	6818      	ldr	r0, [r3, #0]
 801cc36:	3308      	adds	r3, #8
 801cc38:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cc3c:	4626      	mov	r6, r4
 801cc3e:	42bb      	cmp	r3, r7
 801cc40:	c603      	stmia	r6!, {r0, r1}
 801cc42:	4634      	mov	r4, r6
 801cc44:	d1f6      	bne.n	801cc34 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cc46:	6818      	ldr	r0, [r3, #0]
 801cc48:	6030      	str	r0, [r6, #0]
 801cc4a:	4610      	mov	r0, r2
 801cc4c:	889b      	ldrh	r3, [r3, #4]
 801cc4e:	80b3      	strh	r3, [r6, #4]
 801cc50:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801cc54:	015b      	lsls	r3, r3, #5
 801cc56:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cc5a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801cc5e:	430b      	orrs	r3, r1
 801cc60:	425b      	negs	r3, r3
 801cc62:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc68 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cc68:	b538      	push	{r3, r4, r5, lr}
 801cc6a:	460c      	mov	r4, r1
 801cc6c:	6811      	ldr	r1, [r2, #0]
 801cc6e:	4610      	mov	r0, r2
 801cc70:	68cd      	ldr	r5, [r1, #12]
 801cc72:	4619      	mov	r1, r3
 801cc74:	47a8      	blx	r5
 801cc76:	2800      	cmp	r0, #0
 801cc78:	bf08      	it	eq
 801cc7a:	4620      	moveq	r0, r4
 801cc7c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801cc80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc82:	4604      	mov	r4, r0
 801cc84:	4615      	mov	r5, r2
 801cc86:	4608      	mov	r0, r1
 801cc88:	b93a      	cbnz	r2, 801cc9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801cc8a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cc8e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801cc92:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801cc96:	4628      	mov	r0, r5
 801cc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc9a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801cc9e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801cca2:	8893      	ldrh	r3, [r2, #4]
 801cca4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801cca8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ccac:	79ee      	ldrb	r6, [r5, #7]
 801ccae:	4316      	orrs	r6, r2
 801ccb0:	19da      	adds	r2, r3, r7
 801ccb2:	b291      	uxth	r1, r2
 801ccb4:	b2b7      	uxth	r7, r6
 801ccb6:	291d      	cmp	r1, #29
 801ccb8:	d87b      	bhi.n	801cdb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ccba:	2201      	movs	r2, #1
 801ccbc:	10f6      	asrs	r6, r6, #3
 801ccbe:	408a      	lsls	r2, r1
 801ccc0:	4974      	ldr	r1, [pc, #464]	; (801ce94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ccc2:	420a      	tst	r2, r1
 801ccc4:	d12e      	bne.n	801cd24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ccc6:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ccca:	d072      	beq.n	801cdb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801cccc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ccd0:	462b      	mov	r3, r5
 801ccd2:	f105 0e08 	add.w	lr, r5, #8
 801ccd6:	4615      	mov	r5, r2
 801ccd8:	6818      	ldr	r0, [r3, #0]
 801ccda:	3308      	adds	r3, #8
 801ccdc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cce0:	4694      	mov	ip, r2
 801cce2:	4573      	cmp	r3, lr
 801cce4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cce8:	4662      	mov	r2, ip
 801ccea:	d1f5      	bne.n	801ccd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ccec:	6818      	ldr	r0, [r3, #0]
 801ccee:	f8cc 0000 	str.w	r0, [ip]
 801ccf2:	889b      	ldrh	r3, [r3, #4]
 801ccf4:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ccf8:	b2b3      	uxth	r3, r6
 801ccfa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ccfe:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801cd02:	1aca      	subs	r2, r1, r3
 801cd04:	1bcf      	subs	r7, r1, r7
 801cd06:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801cd0a:	b292      	uxth	r2, r2
 801cd0c:	1afb      	subs	r3, r7, r3
 801cd0e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801cd12:	10d2      	asrs	r2, r2, #3
 801cd14:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801cd18:	4302      	orrs	r2, r0
 801cd1a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801cd1e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801cd22:	e7b8      	b.n	801cc96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cd24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801cd26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd2a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801cd2c:	f640 6333 	movw	r3, #3635	; 0xe33
 801cd30:	4299      	cmp	r1, r3
 801cd32:	d110      	bne.n	801cd56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801cd34:	6803      	ldr	r3, [r0, #0]
 801cd36:	68db      	ldr	r3, [r3, #12]
 801cd38:	4798      	blx	r3
 801cd3a:	7b41      	ldrb	r1, [r0, #13]
 801cd3c:	00cb      	lsls	r3, r1, #3
 801cd3e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cd42:	7a03      	ldrb	r3, [r0, #8]
 801cd44:	0648      	lsls	r0, r1, #25
 801cd46:	ea43 0302 	orr.w	r3, r3, r2
 801cd4a:	bf44      	itt	mi
 801cd4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cd50:	b21b      	sxthmi	r3, r3
 801cd52:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cd56:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801cd5a:	462a      	mov	r2, r5
 801cd5c:	f105 0c08 	add.w	ip, r5, #8
 801cd60:	443b      	add	r3, r7
 801cd62:	4433      	add	r3, r6
 801cd64:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801cd68:	b29b      	uxth	r3, r3
 801cd6a:	4635      	mov	r5, r6
 801cd6c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cd70:	6810      	ldr	r0, [r2, #0]
 801cd72:	3208      	adds	r2, #8
 801cd74:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801cd78:	4637      	mov	r7, r6
 801cd7a:	4562      	cmp	r2, ip
 801cd7c:	c703      	stmia	r7!, {r0, r1}
 801cd7e:	463e      	mov	r6, r7
 801cd80:	d1f6      	bne.n	801cd70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801cd82:	6810      	ldr	r0, [r2, #0]
 801cd84:	6038      	str	r0, [r7, #0]
 801cd86:	8892      	ldrh	r2, [r2, #4]
 801cd88:	80ba      	strh	r2, [r7, #4]
 801cd8a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cd8e:	10db      	asrs	r3, r3, #3
 801cd90:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cd94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cd98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cd9c:	4313      	orrs	r3, r2
 801cd9e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801cda2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cda6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801cdaa:	1a9b      	subs	r3, r3, r2
 801cdac:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801cdb0:	e771      	b.n	801cc96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cdb2:	f023 0204 	bic.w	r2, r3, #4
 801cdb6:	f640 611b 	movw	r1, #3611	; 0xe1b
 801cdba:	428a      	cmp	r2, r1
 801cdbc:	d003      	beq.n	801cdc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801cdbe:	f640 621d 	movw	r2, #3613	; 0xe1d
 801cdc2:	4293      	cmp	r3, r2
 801cdc4:	d120      	bne.n	801ce08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801cdc6:	3b01      	subs	r3, #1
 801cdc8:	4602      	mov	r2, r0
 801cdca:	4629      	mov	r1, r5
 801cdcc:	4620      	mov	r0, r4
 801cdce:	b29b      	uxth	r3, r3
 801cdd0:	f7ff ff4a 	bl	801cc68 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cdd4:	7b41      	ldrb	r1, [r0, #13]
 801cdd6:	00cb      	lsls	r3, r1, #3
 801cdd8:	0649      	lsls	r1, r1, #25
 801cdda:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cdde:	7a03      	ldrb	r3, [r0, #8]
 801cde0:	ea43 0302 	orr.w	r3, r3, r2
 801cde4:	bf44      	itt	mi
 801cde6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cdea:	b21b      	sxthmi	r3, r3
 801cdec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cdf0:	7b6b      	ldrb	r3, [r5, #13]
 801cdf2:	7aaa      	ldrb	r2, [r5, #10]
 801cdf4:	005b      	lsls	r3, r3, #1
 801cdf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cdfa:	4313      	orrs	r3, r2
 801cdfc:	115a      	asrs	r2, r3, #5
 801cdfe:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801ce02:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ce06:	e035      	b.n	801ce74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801ce08:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ce0c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801ce10:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801ce14:	7a2a      	ldrb	r2, [r5, #8]
 801ce16:	ea42 0201 	orr.w	r2, r2, r1
 801ce1a:	f640 6109 	movw	r1, #3593	; 0xe09
 801ce1e:	bf1c      	itt	ne
 801ce20:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801ce24:	b212      	sxthne	r2, r2
 801ce26:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ce2a:	f023 0210 	bic.w	r2, r3, #16
 801ce2e:	428a      	cmp	r2, r1
 801ce30:	d003      	beq.n	801ce3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801ce32:	f640 6213 	movw	r2, #3603	; 0xe13
 801ce36:	4293      	cmp	r3, r2
 801ce38:	d129      	bne.n	801ce8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801ce3a:	7b6e      	ldrb	r6, [r5, #13]
 801ce3c:	4629      	mov	r1, r5
 801ce3e:	0076      	lsls	r6, r6, #1
 801ce40:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ce44:	7aae      	ldrb	r6, [r5, #10]
 801ce46:	4316      	orrs	r6, r2
 801ce48:	f640 6213 	movw	r2, #3603	; 0xe13
 801ce4c:	4293      	cmp	r3, r2
 801ce4e:	4602      	mov	r2, r0
 801ce50:	4620      	mov	r0, r4
 801ce52:	bf16      	itet	ne
 801ce54:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ce58:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ce5c:	b29b      	uxthne	r3, r3
 801ce5e:	f7ff ff03 	bl	801cc68 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ce62:	7b43      	ldrb	r3, [r0, #13]
 801ce64:	7a82      	ldrb	r2, [r0, #10]
 801ce66:	005b      	lsls	r3, r3, #1
 801ce68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce6c:	4313      	orrs	r3, r2
 801ce6e:	1af6      	subs	r6, r6, r3
 801ce70:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801ce74:	7b69      	ldrb	r1, [r5, #13]
 801ce76:	00cb      	lsls	r3, r1, #3
 801ce78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ce7c:	7a2b      	ldrb	r3, [r5, #8]
 801ce7e:	4313      	orrs	r3, r2
 801ce80:	064a      	lsls	r2, r1, #25
 801ce82:	bf44      	itt	mi
 801ce84:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ce88:	b21b      	sxthmi	r3, r3
 801ce8a:	1bdb      	subs	r3, r3, r7
 801ce8c:	e747      	b.n	801cd1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801ce8e:	2300      	movs	r3, #0
 801ce90:	e7b7      	b.n	801ce02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801ce92:	bf00      	nop
 801ce94:	3fc00079 	.word	0x3fc00079

0801ce98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ce98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce9c:	4604      	mov	r4, r0
 801ce9e:	b942      	cbnz	r2, 801ceb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801cea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cea4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801cea8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801ceac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ceb0:	e047      	b.n	801cf42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ceb2:	7b51      	ldrb	r1, [r2, #13]
 801ceb4:	8893      	ldrh	r3, [r2, #4]
 801ceb6:	010d      	lsls	r5, r1, #4
 801ceb8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801cebc:	79d5      	ldrb	r5, [r2, #7]
 801cebe:	4305      	orrs	r5, r0
 801cec0:	2d04      	cmp	r5, #4
 801cec2:	bfcc      	ite	gt
 801cec4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801cec8:	f04f 0e01 	movle.w	lr, #1
 801cecc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ced0:	f200 80ab 	bhi.w	801d02a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ced4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ced8:	4283      	cmp	r3, r0
 801ceda:	d216      	bcs.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cedc:	f240 605b 	movw	r0, #1627	; 0x65b
 801cee0:	4283      	cmp	r3, r0
 801cee2:	d859      	bhi.n	801cf98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801cee4:	f240 6057 	movw	r0, #1623	; 0x657
 801cee8:	4283      	cmp	r3, r0
 801ceea:	d20e      	bcs.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ceec:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cef0:	d24a      	bcs.n	801cf88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801cef2:	f240 604e 	movw	r0, #1614	; 0x64e
 801cef6:	4283      	cmp	r3, r0
 801cef8:	d207      	bcs.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cefa:	f240 601a 	movw	r0, #1562	; 0x61a
 801cefe:	4283      	cmp	r3, r0
 801cf00:	d02a      	beq.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf02:	d821      	bhi.n	801cf48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801cf04:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801cf08:	d35b      	bcc.n	801cfc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cf0a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801cf0e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cf12:	f040 80d0 	bne.w	801d0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801cf16:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801cf1a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cf1e:	f040 80ca 	bne.w	801d0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801cf22:	00cb      	lsls	r3, r1, #3
 801cf24:	0649      	lsls	r1, r1, #25
 801cf26:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cf2a:	7a13      	ldrb	r3, [r2, #8]
 801cf2c:	ea43 0300 	orr.w	r3, r3, r0
 801cf30:	bf44      	itt	mi
 801cf32:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf36:	b21b      	sxthmi	r3, r3
 801cf38:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cf3c:	1b5d      	subs	r5, r3, r5
 801cf3e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cf42:	4610      	mov	r0, r2
 801cf44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf48:	f240 604b 	movw	r0, #1611	; 0x64b
 801cf4c:	4283      	cmp	r3, r0
 801cf4e:	d338      	bcc.n	801cfc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cf50:	f240 604c 	movw	r0, #1612	; 0x64c
 801cf54:	4283      	cmp	r3, r0
 801cf56:	d9d8      	bls.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cf58:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801cf5c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801cf60:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cf64:	f040 80f3 	bne.w	801d14e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801cf68:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cf6c:	f040 80ef 	bne.w	801d14e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801cf70:	00cb      	lsls	r3, r1, #3
 801cf72:	064e      	lsls	r6, r1, #25
 801cf74:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cf78:	7a13      	ldrb	r3, [r2, #8]
 801cf7a:	ea43 0300 	orr.w	r3, r3, r0
 801cf7e:	bf44      	itt	mi
 801cf80:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf84:	b21b      	sxthmi	r3, r3
 801cf86:	e7d9      	b.n	801cf3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801cf88:	f240 6054 	movw	r0, #1620	; 0x654
 801cf8c:	4283      	cmp	r3, r0
 801cf8e:	d8e3      	bhi.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf90:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cf94:	d9e0      	bls.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf96:	e7b8      	b.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cf98:	f240 6074 	movw	r0, #1652	; 0x674
 801cf9c:	4283      	cmp	r3, r0
 801cf9e:	d0b4      	beq.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfa0:	d82d      	bhi.n	801cffe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801cfa2:	f240 605e 	movw	r0, #1630	; 0x65e
 801cfa6:	4283      	cmp	r3, r0
 801cfa8:	d804      	bhi.n	801cfb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801cfaa:	f240 605d 	movw	r0, #1629	; 0x65d
 801cfae:	4283      	cmp	r3, r0
 801cfb0:	d3d2      	bcc.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cfb2:	e7aa      	b.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfb4:	f240 605f 	movw	r0, #1631	; 0x65f
 801cfb8:	4283      	cmp	r3, r0
 801cfba:	d0cd      	beq.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cfbc:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801cfc0:	d0a3      	beq.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfc2:	00cb      	lsls	r3, r1, #3
 801cfc4:	0649      	lsls	r1, r1, #25
 801cfc6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cfca:	7a13      	ldrb	r3, [r2, #8]
 801cfcc:	ea43 0300 	orr.w	r3, r3, r0
 801cfd0:	bf44      	itt	mi
 801cfd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cfd6:	b21b      	sxthmi	r3, r3
 801cfd8:	1b5d      	subs	r5, r3, r5
 801cfda:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cfde:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cfe2:	7b53      	ldrb	r3, [r2, #13]
 801cfe4:	015b      	lsls	r3, r3, #5
 801cfe6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cfea:	7993      	ldrb	r3, [r2, #6]
 801cfec:	430b      	orrs	r3, r1
 801cfee:	2105      	movs	r1, #5
 801cff0:	005b      	lsls	r3, r3, #1
 801cff2:	fb93 f3f1 	sdiv	r3, r3, r1
 801cff6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801cffa:	440b      	add	r3, r1
 801cffc:	e756      	b.n	801ceac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801cffe:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d002:	4283      	cmp	r3, r0
 801d004:	d809      	bhi.n	801d01a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d006:	f240 60df 	movw	r0, #1759	; 0x6df
 801d00a:	4283      	cmp	r3, r0
 801d00c:	f4bf af7d 	bcs.w	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d010:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d014:	2b05      	cmp	r3, #5
 801d016:	d8d4      	bhi.n	801cfc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d018:	e777      	b.n	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d01a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d01e:	4283      	cmp	r3, r0
 801d020:	d09a      	beq.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d022:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d026:	4283      	cmp	r3, r0
 801d028:	e7ca      	b.n	801cfc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d02a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d02e:	d22b      	bcs.n	801d088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d030:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d034:	4283      	cmp	r3, r0
 801d036:	d28f      	bcs.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d038:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d03c:	4283      	cmp	r3, r0
 801d03e:	d816      	bhi.n	801d06e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d040:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d044:	4283      	cmp	r3, r0
 801d046:	f4bf af60 	bcs.w	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d04a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d04e:	4283      	cmp	r3, r0
 801d050:	d80a      	bhi.n	801d068 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d052:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d056:	4283      	cmp	r3, r0
 801d058:	f4bf af57 	bcs.w	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d05c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d060:	4283      	cmp	r3, r0
 801d062:	f43f af79 	beq.w	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d066:	e7ac      	b.n	801cfc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d068:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d06c:	e7f8      	b.n	801d060 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d06e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d072:	4283      	cmp	r3, r0
 801d074:	d802      	bhi.n	801d07c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d076:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d07a:	e798      	b.n	801cfae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d07c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d080:	4283      	cmp	r3, r0
 801d082:	f47f af42 	bne.w	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d086:	e767      	b.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d088:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d08c:	4283      	cmp	r3, r0
 801d08e:	f43f af63 	beq.w	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d092:	d802      	bhi.n	801d09a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d094:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d098:	e7f2      	b.n	801d080 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d09a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d09e:	4283      	cmp	r3, r0
 801d0a0:	d805      	bhi.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d0a2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d0a6:	4283      	cmp	r3, r0
 801d0a8:	f4ff af2f 	bcc.w	801cf0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d0ac:	e754      	b.n	801cf58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d0ae:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d0b2:	4283      	cmp	r3, r0
 801d0b4:	e7af      	b.n	801d016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d0b6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d0ba:	4617      	mov	r7, r2
 801d0bc:	f102 0808 	add.w	r8, r2, #8
 801d0c0:	4666      	mov	r6, ip
 801d0c2:	6838      	ldr	r0, [r7, #0]
 801d0c4:	3708      	adds	r7, #8
 801d0c6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d0ca:	46e6      	mov	lr, ip
 801d0cc:	4547      	cmp	r7, r8
 801d0ce:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d0d2:	46f4      	mov	ip, lr
 801d0d4:	d1f5      	bne.n	801d0c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d0d6:	6838      	ldr	r0, [r7, #0]
 801d0d8:	f8ce 0000 	str.w	r0, [lr]
 801d0dc:	88b9      	ldrh	r1, [r7, #4]
 801d0de:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d0e2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d0e6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d0ea:	d009      	beq.n	801d100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d0ec:	7b51      	ldrb	r1, [r2, #13]
 801d0ee:	7992      	ldrb	r2, [r2, #6]
 801d0f0:	0149      	lsls	r1, r1, #5
 801d0f2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d0f6:	4311      	orrs	r1, r2
 801d0f8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d0fc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d100:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d104:	b2ad      	uxth	r5, r5
 801d106:	d00d      	beq.n	801d124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d108:	442b      	add	r3, r5
 801d10a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d10e:	b29b      	uxth	r3, r3
 801d110:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d114:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d118:	10db      	asrs	r3, r3, #3
 801d11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d11e:	4313      	orrs	r3, r2
 801d120:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d124:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d128:	00cb      	lsls	r3, r1, #3
 801d12a:	064f      	lsls	r7, r1, #25
 801d12c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d130:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d134:	ea43 0302 	orr.w	r3, r3, r2
 801d138:	bf44      	itt	mi
 801d13a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d13e:	b21b      	sxthmi	r3, r3
 801d140:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d144:	1b5b      	subs	r3, r3, r5
 801d146:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d14a:	4632      	mov	r2, r6
 801d14c:	e6f9      	b.n	801cf42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d14e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d152:	4617      	mov	r7, r2
 801d154:	f102 0908 	add.w	r9, r2, #8
 801d158:	4666      	mov	r6, ip
 801d15a:	6838      	ldr	r0, [r7, #0]
 801d15c:	3708      	adds	r7, #8
 801d15e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d162:	46e0      	mov	r8, ip
 801d164:	454f      	cmp	r7, r9
 801d166:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d16a:	46c4      	mov	ip, r8
 801d16c:	d1f5      	bne.n	801d15a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d16e:	6838      	ldr	r0, [r7, #0]
 801d170:	f8c8 0000 	str.w	r0, [r8]
 801d174:	88b9      	ldrh	r1, [r7, #4]
 801d176:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d17a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d17e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d182:	d009      	beq.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d184:	7b51      	ldrb	r1, [r2, #13]
 801d186:	7992      	ldrb	r2, [r2, #6]
 801d188:	0149      	lsls	r1, r1, #5
 801d18a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d18e:	4311      	orrs	r1, r2
 801d190:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d194:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d198:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d19c:	d00e      	beq.n	801d1bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d19e:	eba3 030e 	sub.w	r3, r3, lr
 801d1a2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d1a6:	b29b      	uxth	r3, r3
 801d1a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d1ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d1b0:	10db      	asrs	r3, r3, #3
 801d1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d1b6:	4313      	orrs	r3, r2
 801d1b8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d1bc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d1c0:	00cb      	lsls	r3, r1, #3
 801d1c2:	0648      	lsls	r0, r1, #25
 801d1c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d1c8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d1cc:	ea43 0302 	orr.w	r3, r3, r2
 801d1d0:	bf44      	itt	mi
 801d1d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d1d6:	b21b      	sxthmi	r3, r3
 801d1d8:	1b5d      	subs	r5, r3, r5
 801d1da:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d1de:	e7b4      	b.n	801d14a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1e4:	461e      	mov	r6, r3
 801d1e6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d1e8:	4604      	mov	r4, r0
 801d1ea:	4617      	mov	r7, r2
 801d1ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d1f0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d1f4:	f7e6 fc62 	bl	8003abc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d1f8:	4605      	mov	r5, r0
 801d1fa:	b918      	cbnz	r0, 801d204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d1fc:	6030      	str	r0, [r6, #0]
 801d1fe:	4628      	mov	r0, r5
 801d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	4601      	mov	r1, r0
 801d208:	4638      	mov	r0, r7
 801d20a:	68db      	ldr	r3, [r3, #12]
 801d20c:	4798      	blx	r3
 801d20e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d212:	4602      	mov	r2, r0
 801d214:	6030      	str	r0, [r6, #0]
 801d216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d21a:	d213      	bcs.n	801d244 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d21c:	4643      	mov	r3, r8
 801d21e:	4639      	mov	r1, r7
 801d220:	4620      	mov	r0, r4
 801d222:	f7ff fe39 	bl	801ce98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d226:	6030      	str	r0, [r6, #0]
 801d228:	6833      	ldr	r3, [r6, #0]
 801d22a:	b143      	cbz	r3, 801d23e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d22c:	7b5a      	ldrb	r2, [r3, #13]
 801d22e:	7a9b      	ldrb	r3, [r3, #10]
 801d230:	0052      	lsls	r2, r2, #1
 801d232:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d236:	4313      	orrs	r3, r2
 801d238:	bf0c      	ite	eq
 801d23a:	2301      	moveq	r3, #1
 801d23c:	2300      	movne	r3, #0
 801d23e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d242:	e7dc      	b.n	801d1fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d244:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d248:	b29b      	uxth	r3, r3
 801d24a:	2b7f      	cmp	r3, #127	; 0x7f
 801d24c:	d804      	bhi.n	801d258 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d24e:	4639      	mov	r1, r7
 801d250:	4620      	mov	r0, r4
 801d252:	f7ff fd15 	bl	801cc80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d256:	e7e6      	b.n	801d226 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d258:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d0e3      	beq.n	801d228 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d260:	f640 1302 	movw	r3, #2306	; 0x902
 801d264:	429d      	cmp	r5, r3
 801d266:	d1df      	bne.n	801d228 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d268:	4601      	mov	r1, r0
 801d26a:	4620      	mov	r0, r4
 801d26c:	f7ff fcd8 	bl	801cc20 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d270:	e7d9      	b.n	801d226 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d272 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d276:	461e      	mov	r6, r3
 801d278:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d27a:	4604      	mov	r4, r0
 801d27c:	4617      	mov	r7, r2
 801d27e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d282:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d286:	f7e6 fc19 	bl	8003abc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d28a:	4605      	mov	r5, r0
 801d28c:	b918      	cbnz	r0, 801d296 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d28e:	6030      	str	r0, [r6, #0]
 801d290:	4628      	mov	r0, r5
 801d292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d296:	683b      	ldr	r3, [r7, #0]
 801d298:	4601      	mov	r1, r0
 801d29a:	4638      	mov	r0, r7
 801d29c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d2a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d2a4:	47c8      	blx	r9
 801d2a6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d2aa:	4602      	mov	r2, r0
 801d2ac:	6030      	str	r0, [r6, #0]
 801d2ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d2b2:	d213      	bcs.n	801d2dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d2b4:	4643      	mov	r3, r8
 801d2b6:	4639      	mov	r1, r7
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	f7ff fded 	bl	801ce98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d2be:	6030      	str	r0, [r6, #0]
 801d2c0:	6833      	ldr	r3, [r6, #0]
 801d2c2:	b143      	cbz	r3, 801d2d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d2c4:	7b5a      	ldrb	r2, [r3, #13]
 801d2c6:	7a9b      	ldrb	r3, [r3, #10]
 801d2c8:	0052      	lsls	r2, r2, #1
 801d2ca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d2ce:	4313      	orrs	r3, r2
 801d2d0:	bf0c      	ite	eq
 801d2d2:	2301      	moveq	r3, #1
 801d2d4:	2300      	movne	r3, #0
 801d2d6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d2da:	e7d9      	b.n	801d290 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d2dc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d2e0:	b29b      	uxth	r3, r3
 801d2e2:	2b7f      	cmp	r3, #127	; 0x7f
 801d2e4:	d804      	bhi.n	801d2f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d2e6:	4639      	mov	r1, r7
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	f7ff fcc9 	bl	801cc80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d2ee:	e7e6      	b.n	801d2be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d2f0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d0e3      	beq.n	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d2f8:	f640 1302 	movw	r3, #2306	; 0x902
 801d2fc:	429d      	cmp	r5, r3
 801d2fe:	d1df      	bne.n	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d300:	4601      	mov	r1, r0
 801d302:	4620      	mov	r0, r4
 801d304:	f7ff fc8c 	bl	801cc20 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d308:	e7d9      	b.n	801d2be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d30a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d30a:	b510      	push	{r4, lr}
 801d30c:	4604      	mov	r4, r0
 801d30e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d312:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d314:	b1e1      	cbz	r1, 801d350 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d316:	2b0a      	cmp	r3, #10
 801d318:	d02d      	beq.n	801d376 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d31a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d31c:	3901      	subs	r1, #1
 801d31e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d322:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d324:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d328:	1c51      	adds	r1, r2, #1
 801d32a:	b289      	uxth	r1, r1
 801d32c:	2901      	cmp	r1, #1
 801d32e:	bf8a      	itet	hi
 801d330:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d334:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d336:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d338:	1c5a      	adds	r2, r3, #1
 801d33a:	8722      	strh	r2, [r4, #56]	; 0x38
 801d33c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d33e:	4413      	add	r3, r2
 801d340:	b29b      	uxth	r3, r3
 801d342:	2b09      	cmp	r3, #9
 801d344:	bf88      	it	hi
 801d346:	3b0a      	subhi	r3, #10
 801d348:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d34c:	8458      	strh	r0, [r3, #34]	; 0x22
 801d34e:	e7de      	b.n	801d30e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d350:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d352:	2b0a      	cmp	r3, #10
 801d354:	d00f      	beq.n	801d376 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d356:	4620      	mov	r0, r4
 801d358:	f7ff fc10 	bl	801cb7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d35c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d35e:	1c5a      	adds	r2, r3, #1
 801d360:	8722      	strh	r2, [r4, #56]	; 0x38
 801d362:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d364:	4413      	add	r3, r2
 801d366:	b29b      	uxth	r3, r3
 801d368:	2b09      	cmp	r3, #9
 801d36a:	bf88      	it	hi
 801d36c:	3b0a      	subhi	r3, #10
 801d36e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d372:	8458      	strh	r0, [r3, #34]	; 0x22
 801d374:	e7ec      	b.n	801d350 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d376:	bd10      	pop	{r4, pc}

0801d378 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d378:	b538      	push	{r3, r4, r5, lr}
 801d37a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d37c:	4604      	mov	r4, r0
 801d37e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d382:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801d384:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d386:	3a01      	subs	r2, #1
 801d388:	8702      	strh	r2, [r0, #56]	; 0x38
 801d38a:	1c5a      	adds	r2, r3, #1
 801d38c:	b292      	uxth	r2, r2
 801d38e:	2a09      	cmp	r2, #9
 801d390:	bf8a      	itet	hi
 801d392:	3b09      	subhi	r3, #9
 801d394:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d396:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d398:	f7ff ffb7 	bl	801d30a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d39c:	8c23      	ldrh	r3, [r4, #32]
 801d39e:	2b01      	cmp	r3, #1
 801d3a0:	bf9c      	itt	ls
 801d3a2:	3301      	addls	r3, #1
 801d3a4:	8423      	strhls	r3, [r4, #32]
 801d3a6:	8be3      	ldrh	r3, [r4, #30]
 801d3a8:	b90b      	cbnz	r3, 801d3ae <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d3aa:	2302      	movs	r3, #2
 801d3ac:	83e3      	strh	r3, [r4, #30]
 801d3ae:	8be3      	ldrh	r3, [r4, #30]
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	3b01      	subs	r3, #1
 801d3b4:	b29b      	uxth	r3, r3
 801d3b6:	83e3      	strh	r3, [r4, #30]
 801d3b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d3bc:	8365      	strh	r5, [r4, #26]
 801d3be:	bd38      	pop	{r3, r4, r5, pc}

0801d3c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d3c0:	428a      	cmp	r2, r1
 801d3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3c6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801d3c8:	d932      	bls.n	801d430 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d3ca:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801d3cc:	1a54      	subs	r4, r2, r1
 801d3ce:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801d3d2:	19ee      	adds	r6, r5, r7
 801d3d4:	fa1f fe84 	uxth.w	lr, r4
 801d3d8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801d3dc:	3e01      	subs	r6, #1
 801d3de:	b2b4      	uxth	r4, r6
 801d3e0:	eba4 090e 	sub.w	r9, r4, lr
 801d3e4:	fa1f f989 	uxth.w	r9, r9
 801d3e8:	2c09      	cmp	r4, #9
 801d3ea:	4626      	mov	r6, r4
 801d3ec:	bf88      	it	hi
 801d3ee:	f1a4 060a 	subhi.w	r6, r4, #10
 801d3f2:	f1bc 0f00 	cmp.w	ip, #0
 801d3f6:	f104 34ff 	add.w	r4, r4, #4294967295
 801d3fa:	bf08      	it	eq
 801d3fc:	f04f 0c02 	moveq.w	ip, #2
 801d400:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d404:	b2a4      	uxth	r4, r4
 801d406:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d40a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801d40e:	454c      	cmp	r4, r9
 801d410:	fa1f fc8c 	uxth.w	ip, ip
 801d414:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d418:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801d41c:	d1e4      	bne.n	801d3e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d41e:	eba5 050e 	sub.w	r5, r5, lr
 801d422:	eb0e 0408 	add.w	r4, lr, r8
 801d426:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801d42a:	8705      	strh	r5, [r0, #56]	; 0x38
 801d42c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801d430:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d432:	250a      	movs	r5, #10
 801d434:	1a64      	subs	r4, r4, r1
 801d436:	4439      	add	r1, r7
 801d438:	b289      	uxth	r1, r1
 801d43a:	8704      	strh	r4, [r0, #56]	; 0x38
 801d43c:	2909      	cmp	r1, #9
 801d43e:	bf88      	it	hi
 801d440:	390a      	subhi	r1, #10
 801d442:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d444:	b18a      	cbz	r2, 801d46a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d446:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d448:	3a01      	subs	r2, #1
 801d44a:	3101      	adds	r1, #1
 801d44c:	b292      	uxth	r2, r2
 801d44e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d452:	8701      	strh	r1, [r0, #56]	; 0x38
 801d454:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d456:	b901      	cbnz	r1, 801d45a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d458:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d45a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d45c:	3901      	subs	r1, #1
 801d45e:	b289      	uxth	r1, r1
 801d460:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d462:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d466:	844c      	strh	r4, [r1, #34]	; 0x22
 801d468:	e7ec      	b.n	801d444 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d46a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d46e:	f7ff bf4c 	b.w	801d30a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d472 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d472:	b570      	push	{r4, r5, r6, lr}
 801d474:	2500      	movs	r5, #0
 801d476:	4295      	cmp	r5, r2
 801d478:	d011      	beq.n	801d49e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d47a:	8bc4      	ldrh	r4, [r0, #30]
 801d47c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d480:	4414      	add	r4, r2
 801d482:	3c01      	subs	r4, #1
 801d484:	1b64      	subs	r4, r4, r5
 801d486:	b2a4      	uxth	r4, r4
 801d488:	2c01      	cmp	r4, #1
 801d48a:	bf88      	it	hi
 801d48c:	3c02      	subhi	r4, #2
 801d48e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d492:	8b64      	ldrh	r4, [r4, #26]
 801d494:	42b4      	cmp	r4, r6
 801d496:	d117      	bne.n	801d4c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d498:	3501      	adds	r5, #1
 801d49a:	b2ad      	uxth	r5, r5
 801d49c:	e7eb      	b.n	801d476 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d49e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d4a2:	2400      	movs	r4, #0
 801d4a4:	4413      	add	r3, r2
 801d4a6:	b2a2      	uxth	r2, r4
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	da0f      	bge.n	801d4cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d4ac:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d4ae:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d4b2:	3401      	adds	r4, #1
 801d4b4:	4432      	add	r2, r6
 801d4b6:	b292      	uxth	r2, r2
 801d4b8:	2a09      	cmp	r2, #9
 801d4ba:	bf88      	it	hi
 801d4bc:	3a0a      	subhi	r2, #10
 801d4be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d4c2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d4c4:	42aa      	cmp	r2, r5
 801d4c6:	d0ee      	beq.n	801d4a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d4c8:	2000      	movs	r0, #0
 801d4ca:	bd70      	pop	{r4, r5, r6, pc}
 801d4cc:	2001      	movs	r0, #1
 801d4ce:	e7fc      	b.n	801d4ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d4d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d4:	4605      	mov	r5, r0
 801d4d6:	4616      	mov	r6, r2
 801d4d8:	1c8c      	adds	r4, r1, #2
 801d4da:	8809      	ldrh	r1, [r1, #0]
 801d4dc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d4e0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d4e4:	42b3      	cmp	r3, r6
 801d4e6:	d124      	bne.n	801d532 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d4e8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d4ec:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d4f0:	f001 070f 	and.w	r7, r1, #15
 801d4f4:	4652      	mov	r2, sl
 801d4f6:	f8cd 8000 	str.w	r8, [sp]
 801d4fa:	464b      	mov	r3, r9
 801d4fc:	4621      	mov	r1, r4
 801d4fe:	4628      	mov	r0, r5
 801d500:	f7ff ffb7 	bl	801d472 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d504:	4683      	mov	fp, r0
 801d506:	b168      	cbz	r0, 801d524 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d508:	eb0a 0109 	add.w	r1, sl, r9
 801d50c:	463a      	mov	r2, r7
 801d50e:	4628      	mov	r0, r5
 801d510:	4441      	add	r1, r8
 801d512:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d516:	4649      	mov	r1, r9
 801d518:	f7ff ff52 	bl	801d3c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d51c:	4658      	mov	r0, fp
 801d51e:	b003      	add	sp, #12
 801d520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d524:	eb07 010a 	add.w	r1, r7, sl
 801d528:	4449      	add	r1, r9
 801d52a:	4441      	add	r1, r8
 801d52c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d530:	e7d2      	b.n	801d4d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d532:	f04f 0b00 	mov.w	fp, #0
 801d536:	e7f1      	b.n	801d51c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d538 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d538:	b570      	push	{r4, r5, r6, lr}
 801d53a:	8810      	ldrh	r0, [r2, #0]
 801d53c:	4298      	cmp	r0, r3
 801d53e:	d817      	bhi.n	801d570 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d540:	1e48      	subs	r0, r1, #1
 801d542:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d546:	4298      	cmp	r0, r3
 801d548:	d312      	bcc.n	801d570 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d54a:	2400      	movs	r4, #0
 801d54c:	428c      	cmp	r4, r1
 801d54e:	d20f      	bcs.n	801d570 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d550:	1860      	adds	r0, r4, r1
 801d552:	1040      	asrs	r0, r0, #1
 801d554:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d558:	0085      	lsls	r5, r0, #2
 801d55a:	42b3      	cmp	r3, r6
 801d55c:	d902      	bls.n	801d564 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d55e:	3001      	adds	r0, #1
 801d560:	b284      	uxth	r4, r0
 801d562:	e7f3      	b.n	801d54c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d564:	d201      	bcs.n	801d56a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d566:	b281      	uxth	r1, r0
 801d568:	e7f0      	b.n	801d54c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d56a:	442a      	add	r2, r5
 801d56c:	8850      	ldrh	r0, [r2, #2]
 801d56e:	bd70      	pop	{r4, r5, r6, pc}
 801d570:	2000      	movs	r0, #0
 801d572:	e7fc      	b.n	801d56e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d574 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d578:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d57a:	4604      	mov	r4, r0
 801d57c:	260b      	movs	r6, #11
 801d57e:	886f      	ldrh	r7, [r5, #2]
 801d580:	087f      	lsrs	r7, r7, #1
 801d582:	3e01      	subs	r6, #1
 801d584:	d013      	beq.n	801d5ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d586:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d588:	462a      	mov	r2, r5
 801d58a:	4639      	mov	r1, r7
 801d58c:	4620      	mov	r0, r4
 801d58e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d592:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d596:	4643      	mov	r3, r8
 801d598:	f7ff ffce 	bl	801d538 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d59c:	b138      	cbz	r0, 801d5ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d59e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d5a2:	4642      	mov	r2, r8
 801d5a4:	4620      	mov	r0, r4
 801d5a6:	f7ff ff93 	bl	801d4d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d5aa:	2800      	cmp	r0, #0
 801d5ac:	d1e9      	bne.n	801d582 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d5b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d5b4:	b570      	push	{r4, r5, r6, lr}
 801d5b6:	694a      	ldr	r2, [r1, #20]
 801d5b8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d5ba:	684b      	ldr	r3, [r1, #4]
 801d5bc:	1b54      	subs	r4, r2, r5
 801d5be:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d5c0:	f000 8106 	beq.w	801d7d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d5c4:	1b9b      	subs	r3, r3, r6
 801d5c6:	d003      	beq.n	801d5d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d5c8:	4363      	muls	r3, r4
 801d5ca:	2210      	movs	r2, #16
 801d5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 801d5d0:	680c      	ldr	r4, [r1, #0]
 801d5d2:	698a      	ldr	r2, [r1, #24]
 801d5d4:	1b65      	subs	r5, r4, r5
 801d5d6:	f000 80fd 	beq.w	801d7d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d5da:	1b92      	subs	r2, r2, r6
 801d5dc:	d003      	beq.n	801d5e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d5de:	436a      	muls	r2, r5
 801d5e0:	2410      	movs	r4, #16
 801d5e2:	fb92 f2f4 	sdiv	r2, r2, r4
 801d5e6:	1a9b      	subs	r3, r3, r2
 801d5e8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d810 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5f0:	460a      	mov	r2, r1
 801d5f2:	ee07 3a90 	vmov	s15, r3
 801d5f6:	f100 040c 	add.w	r4, r0, #12
 801d5fa:	4603      	mov	r3, r0
 801d5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d600:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d604:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d608:	eeb1 6a43 	vneg.f32	s12, s6
 801d60c:	edd2 7a02 	vldr	s15, [r2, #8]
 801d610:	3214      	adds	r2, #20
 801d612:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d616:	ece3 6a01 	vstmia	r3!, {s13}
 801d61a:	429c      	cmp	r4, r3
 801d61c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d620:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d624:	edc3 7a02 	vstr	s15, [r3, #8]
 801d628:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d62c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d630:	edc3 7a05 	vstr	s15, [r3, #20]
 801d634:	d1ea      	bne.n	801d60c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d636:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d638:	698b      	ldr	r3, [r1, #24]
 801d63a:	edd0 4a02 	vldr	s9, [r0, #8]
 801d63e:	1a9b      	subs	r3, r3, r2
 801d640:	edd0 3a00 	vldr	s7, [r0]
 801d644:	edd0 6a01 	vldr	s13, [r0, #4]
 801d648:	ee07 3a90 	vmov	s15, r3
 801d64c:	684b      	ldr	r3, [r1, #4]
 801d64e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d652:	ed90 5a05 	vldr	s10, [r0, #20]
 801d656:	1a9b      	subs	r3, r3, r2
 801d658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d65c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d660:	ed90 2a03 	vldr	s4, [r0, #12]
 801d664:	ee07 3a10 	vmov	s14, r3
 801d668:	edd0 5a04 	vldr	s11, [r0, #16]
 801d66c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d670:	ed90 1a07 	vldr	s2, [r0, #28]
 801d674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d678:	edd0 2a06 	vldr	s5, [r0, #24]
 801d67c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d680:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d684:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d688:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d68c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d690:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d694:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d698:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d69a:	694a      	ldr	r2, [r1, #20]
 801d69c:	1b13      	subs	r3, r2, r4
 801d69e:	ee07 3a10 	vmov	s14, r3
 801d6a2:	680b      	ldr	r3, [r1, #0]
 801d6a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6a8:	1b1b      	subs	r3, r3, r4
 801d6aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d6ae:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d6b2:	ee07 3a10 	vmov	s14, r3
 801d6b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d6be:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d6c2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d6c6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d6ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d6cc:	698b      	ldr	r3, [r1, #24]
 801d6ce:	1a9b      	subs	r3, r3, r2
 801d6d0:	ee06 3a90 	vmov	s13, r3
 801d6d4:	684b      	ldr	r3, [r1, #4]
 801d6d6:	1a9b      	subs	r3, r3, r2
 801d6d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d6dc:	ee07 3a10 	vmov	s14, r3
 801d6e0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d6e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6e8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d6ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d6f0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d6f4:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d6f8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d6fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d6fe:	694a      	ldr	r2, [r1, #20]
 801d700:	1b13      	subs	r3, r2, r4
 801d702:	ee07 3a10 	vmov	s14, r3
 801d706:	680b      	ldr	r3, [r1, #0]
 801d708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d70c:	1b1b      	subs	r3, r3, r4
 801d70e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d712:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d716:	ee07 3a10 	vmov	s14, r3
 801d71a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d71e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d722:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d726:	edd0 5a08 	vldr	s11, [r0, #32]
 801d72a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d72e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d732:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d736:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d73a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d73c:	698b      	ldr	r3, [r1, #24]
 801d73e:	1a9b      	subs	r3, r3, r2
 801d740:	ee07 3a10 	vmov	s14, r3
 801d744:	684b      	ldr	r3, [r1, #4]
 801d746:	1a9b      	subs	r3, r3, r2
 801d748:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d74c:	ee01 3a90 	vmov	s3, r3
 801d750:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d754:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d758:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d75c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d760:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d764:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d768:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d76c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d76e:	694a      	ldr	r2, [r1, #20]
 801d770:	1b13      	subs	r3, r2, r4
 801d772:	ee03 3a10 	vmov	s6, r3
 801d776:	680b      	ldr	r3, [r1, #0]
 801d778:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d77c:	1b1b      	subs	r3, r3, r4
 801d77e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d782:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d786:	ee03 3a10 	vmov	s6, r3
 801d78a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d78e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d792:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d796:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d79a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d79e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d7a2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d7a6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7ae:	dd13      	ble.n	801d7d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d7b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d7b4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d7b8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d7ba:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d7be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7c6:	dd15      	ble.n	801d7f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d7c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d7cc:	6403      	str	r3, [r0, #64]	; 0x40
 801d7ce:	bd70      	pop	{r4, r5, r6, pc}
 801d7d0:	4623      	mov	r3, r4
 801d7d2:	e6fd      	b.n	801d5d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d7d4:	462a      	mov	r2, r5
 801d7d6:	e706      	b.n	801d5e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d7d8:	d502      	bpl.n	801d7e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d7da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d7de:	e7e9      	b.n	801d7b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d7e0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d7e4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d7e8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7f0:	dade      	bge.n	801d7b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d7f2:	e7f2      	b.n	801d7da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d7f4:	d502      	bpl.n	801d7fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d7f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d7fa:	e7e7      	b.n	801d7cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d7fc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d800:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d804:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d80c:	dadc      	bge.n	801d7c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d80e:	e7f2      	b.n	801d7f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d810:	3d800000 	.word	0x3d800000

0801d814 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d818:	2714      	movs	r7, #20
 801d81a:	435f      	muls	r7, r3
 801d81c:	eb02 0c07 	add.w	ip, r2, r7
 801d820:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d824:	f115 0e0f 	adds.w	lr, r5, #15
 801d828:	f100 80a2 	bmi.w	801d970 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d82c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d830:	9c08      	ldr	r4, [sp, #32]
 801d832:	2614      	movs	r6, #20
 801d834:	f8c0 e014 	str.w	lr, [r0, #20]
 801d838:	4366      	muls	r6, r4
 801d83a:	eb02 0806 	add.w	r8, r2, r6
 801d83e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d842:	f115 040f 	adds.w	r4, r5, #15
 801d846:	f100 809f 	bmi.w	801d988 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d84a:	1124      	asrs	r4, r4, #4
 801d84c:	eba4 040e 	sub.w	r4, r4, lr
 801d850:	6184      	str	r4, [r0, #24]
 801d852:	2c00      	cmp	r4, #0
 801d854:	f000 808a 	beq.w	801d96c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d858:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d85c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d860:	5995      	ldr	r5, [r2, r6]
 801d862:	eba4 0809 	sub.w	r8, r4, r9
 801d866:	59d4      	ldr	r4, [r2, r7]
 801d868:	eba5 0a04 	sub.w	sl, r5, r4
 801d86c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d870:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d874:	fb0e fe05 	mul.w	lr, lr, r5
 801d878:	fb0a ee19 	mls	lr, sl, r9, lr
 801d87c:	fb08 e404 	mla	r4, r8, r4, lr
 801d880:	3c01      	subs	r4, #1
 801d882:	19a4      	adds	r4, r4, r6
 801d884:	f100 808c 	bmi.w	801d9a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d888:	fb94 fef6 	sdiv	lr, r4, r6
 801d88c:	fb06 441e 	mls	r4, r6, lr, r4
 801d890:	f8c0 e000 	str.w	lr, [r0]
 801d894:	6104      	str	r4, [r0, #16]
 801d896:	2d00      	cmp	r5, #0
 801d898:	f2c0 8095 	blt.w	801d9c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d89c:	fb95 f4f6 	sdiv	r4, r5, r6
 801d8a0:	fb06 5514 	mls	r5, r6, r4, r5
 801d8a4:	6044      	str	r4, [r0, #4]
 801d8a6:	6085      	str	r5, [r0, #8]
 801d8a8:	60c6      	str	r6, [r0, #12]
 801d8aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d8ae:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d8b2:	6945      	ldr	r5, [r0, #20]
 801d8b4:	59d2      	ldr	r2, [r2, r7]
 801d8b6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d8ba:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801d9e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d8be:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d8c2:	ee07 4a10 	vmov	s14, r4
 801d8c6:	6804      	ldr	r4, [r0, #0]
 801d8c8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d8cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8d0:	ee07 2a90 	vmov	s15, r2
 801d8d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d8e0:	edd3 6a00 	vldr	s13, [r3]
 801d8e4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d8e8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801d8ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d8f0:	edc0 6a07 	vstr	s13, [r0, #28]
 801d8f4:	edd0 6a01 	vldr	s13, [r0, #4]
 801d8f8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801d8fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d900:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d904:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d908:	ed80 6a08 	vstr	s12, [r0, #32]
 801d90c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801d90e:	6242      	str	r2, [r0, #36]	; 0x24
 801d910:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801d914:	ed93 6a03 	vldr	s12, [r3, #12]
 801d918:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d91c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d920:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d924:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801d928:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d92c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801d930:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d934:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801d938:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d93a:	6302      	str	r2, [r0, #48]	; 0x30
 801d93c:	ed93 6a06 	vldr	s12, [r3, #24]
 801d940:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801d944:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d948:	eeb0 7a46 	vmov.f32	s14, s12
 801d94c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801d950:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d954:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d958:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801d95c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801d960:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d964:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801d968:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801d96a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d970:	2410      	movs	r4, #16
 801d972:	f1c5 0501 	rsb	r5, r5, #1
 801d976:	fb9e fef4 	sdiv	lr, lr, r4
 801d97a:	f015 050f 	ands.w	r5, r5, #15
 801d97e:	bf18      	it	ne
 801d980:	2501      	movne	r5, #1
 801d982:	ebae 0e05 	sub.w	lr, lr, r5
 801d986:	e753      	b.n	801d830 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d988:	f04f 0910 	mov.w	r9, #16
 801d98c:	f1c5 0501 	rsb	r5, r5, #1
 801d990:	fb94 f4f9 	sdiv	r4, r4, r9
 801d994:	f015 050f 	ands.w	r5, r5, #15
 801d998:	bf18      	it	ne
 801d99a:	2501      	movne	r5, #1
 801d99c:	1b64      	subs	r4, r4, r5
 801d99e:	e755      	b.n	801d84c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d9a0:	4264      	negs	r4, r4
 801d9a2:	fb94 fef6 	sdiv	lr, r4, r6
 801d9a6:	f1ce 0800 	rsb	r8, lr, #0
 801d9aa:	fb06 441e 	mls	r4, r6, lr, r4
 801d9ae:	f8c0 8000 	str.w	r8, [r0]
 801d9b2:	6104      	str	r4, [r0, #16]
 801d9b4:	2c00      	cmp	r4, #0
 801d9b6:	f43f af6e 	beq.w	801d896 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d9ba:	ea6f 0e0e 	mvn.w	lr, lr
 801d9be:	1b34      	subs	r4, r6, r4
 801d9c0:	f8c0 e000 	str.w	lr, [r0]
 801d9c4:	e766      	b.n	801d894 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d9c6:	426d      	negs	r5, r5
 801d9c8:	fb95 f4f6 	sdiv	r4, r5, r6
 801d9cc:	f1c4 0e00 	rsb	lr, r4, #0
 801d9d0:	fb06 5514 	mls	r5, r6, r4, r5
 801d9d4:	f8c0 e004 	str.w	lr, [r0, #4]
 801d9d8:	6085      	str	r5, [r0, #8]
 801d9da:	2d00      	cmp	r5, #0
 801d9dc:	f43f af64 	beq.w	801d8a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d9e0:	43e4      	mvns	r4, r4
 801d9e2:	1b75      	subs	r5, r6, r5
 801d9e4:	6044      	str	r4, [r0, #4]
 801d9e6:	e75e      	b.n	801d8a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d9e8:	3d800000 	.word	0x3d800000

0801d9ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d9ec:	4b01      	ldr	r3, [pc, #4]	; (801d9f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d9ee:	6018      	str	r0, [r3, #0]
 801d9f0:	4770      	bx	lr
 801d9f2:	bf00      	nop
 801d9f4:	20015270 	.word	0x20015270

0801d9f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d9f8:	4b06      	ldr	r3, [pc, #24]	; (801da14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d9fa:	881a      	ldrh	r2, [r3, #0]
 801d9fc:	4282      	cmp	r2, r0
 801d9fe:	d807      	bhi.n	801da10 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801da00:	4b05      	ldr	r3, [pc, #20]	; (801da18 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801da02:	881b      	ldrh	r3, [r3, #0]
 801da04:	4413      	add	r3, r2
 801da06:	4298      	cmp	r0, r3
 801da08:	bfac      	ite	ge
 801da0a:	2000      	movge	r0, #0
 801da0c:	2001      	movlt	r0, #1
 801da0e:	4770      	bx	lr
 801da10:	2000      	movs	r0, #0
 801da12:	4770      	bx	lr
 801da14:	20015290 	.word	0x20015290
 801da18:	20015294 	.word	0x20015294

0801da1c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801da1c:	b508      	push	{r3, lr}
 801da1e:	4601      	mov	r1, r0
 801da20:	f7ff ffea 	bl	801d9f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801da24:	b118      	cbz	r0, 801da2e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801da26:	4b02      	ldr	r3, [pc, #8]	; (801da30 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801da2e:	bd08      	pop	{r3, pc}
 801da30:	20015274 	.word	0x20015274

0801da34 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da36:	4c24      	ldr	r4, [pc, #144]	; (801dac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801da38:	6823      	ldr	r3, [r4, #0]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d042      	beq.n	801dac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801da3e:	4a23      	ldr	r2, [pc, #140]	; (801dacc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801da40:	4d23      	ldr	r5, [pc, #140]	; (801dad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801da42:	8811      	ldrh	r1, [r2, #0]
 801da44:	f8b5 c000 	ldrh.w	ip, [r5]
 801da48:	4822      	ldr	r0, [pc, #136]	; (801dad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801da4a:	4461      	add	r1, ip
 801da4c:	1c4a      	adds	r2, r1, #1
 801da4e:	008f      	lsls	r7, r1, #2
 801da50:	f022 0201 	bic.w	r2, r2, #1
 801da54:	19de      	adds	r6, r3, r7
 801da56:	0412      	lsls	r2, r2, #16
 801da58:	6006      	str	r6, [r0, #0]
 801da5a:	4e1f      	ldr	r6, [pc, #124]	; (801dad8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801da5c:	0c12      	lsrs	r2, r2, #16
 801da5e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801da62:	19da      	adds	r2, r3, r7
 801da64:	6032      	str	r2, [r6, #0]
 801da66:	220e      	movs	r2, #14
 801da68:	fb02 f20c 	mul.w	r2, r2, ip
 801da6c:	3203      	adds	r2, #3
 801da6e:	f022 0203 	bic.w	r2, r2, #3
 801da72:	443a      	add	r2, r7
 801da74:	4f19      	ldr	r7, [pc, #100]	; (801dadc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801da76:	4413      	add	r3, r2
 801da78:	603b      	str	r3, [r7, #0]
 801da7a:	2300      	movs	r3, #0
 801da7c:	4f18      	ldr	r7, [pc, #96]	; (801dae0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801da7e:	469c      	mov	ip, r3
 801da80:	803b      	strh	r3, [r7, #0]
 801da82:	4f18      	ldr	r7, [pc, #96]	; (801dae4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801da84:	683f      	ldr	r7, [r7, #0]
 801da86:	1aba      	subs	r2, r7, r2
 801da88:	4f17      	ldr	r7, [pc, #92]	; (801dae8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801da8a:	603a      	str	r2, [r7, #0]
 801da8c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801da90:	4a16      	ldr	r2, [pc, #88]	; (801daec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801da92:	8013      	strh	r3, [r2, #0]
 801da94:	428b      	cmp	r3, r1
 801da96:	d10d      	bne.n	801dab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801da98:	882d      	ldrh	r5, [r5, #0]
 801da9a:	2300      	movs	r3, #0
 801da9c:	6830      	ldr	r0, [r6, #0]
 801da9e:	240e      	movs	r4, #14
 801daa0:	429d      	cmp	r5, r3
 801daa2:	d90f      	bls.n	801dac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801daa4:	fb04 0203 	mla	r2, r4, r3, r0
 801daa8:	3301      	adds	r3, #1
 801daaa:	7b11      	ldrb	r1, [r2, #12]
 801daac:	f36f 1145 	bfc	r1, #5, #1
 801dab0:	7311      	strb	r1, [r2, #12]
 801dab2:	e7f5      	b.n	801daa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801dab4:	6822      	ldr	r2, [r4, #0]
 801dab6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801daba:	6802      	ldr	r2, [r0, #0]
 801dabc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dac0:	3301      	adds	r3, #1
 801dac2:	e7e7      	b.n	801da94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dac6:	bf00      	nop
 801dac8:	20015274 	.word	0x20015274
 801dacc:	20015290 	.word	0x20015290
 801dad0:	20015294 	.word	0x20015294
 801dad4:	20015288 	.word	0x20015288
 801dad8:	20015278 	.word	0x20015278
 801dadc:	20015280 	.word	0x20015280
 801dae0:	20015292 	.word	0x20015292
 801dae4:	2001527c 	.word	0x2001527c
 801dae8:	2001528c 	.word	0x2001528c
 801daec:	20015284 	.word	0x20015284

0801daf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801daf0:	4b06      	ldr	r3, [pc, #24]	; (801db0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	b943      	cbnz	r3, 801db08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801daf6:	b139      	cbz	r1, 801db08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801daf8:	4b05      	ldr	r3, [pc, #20]	; (801db10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801dafa:	801a      	strh	r2, [r3, #0]
 801dafc:	4b05      	ldr	r3, [pc, #20]	; (801db14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801dafe:	6019      	str	r1, [r3, #0]
 801db00:	4b05      	ldr	r3, [pc, #20]	; (801db18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801db02:	6018      	str	r0, [r3, #0]
 801db04:	f7ff bf96 	b.w	801da34 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801db08:	4770      	bx	lr
 801db0a:	bf00      	nop
 801db0c:	20015280 	.word	0x20015280
 801db10:	20015294 	.word	0x20015294
 801db14:	2001527c 	.word	0x2001527c
 801db18:	20015274 	.word	0x20015274

0801db1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801db1c:	b470      	push	{r4, r5, r6}
 801db1e:	4c07      	ldr	r4, [pc, #28]	; (801db3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801db20:	4605      	mov	r5, r0
 801db22:	4610      	mov	r0, r2
 801db24:	9a03      	ldr	r2, [sp, #12]
 801db26:	6826      	ldr	r6, [r4, #0]
 801db28:	b936      	cbnz	r6, 801db38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801db2a:	6025      	str	r5, [r4, #0]
 801db2c:	4c04      	ldr	r4, [pc, #16]	; (801db40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801db2e:	8021      	strh	r1, [r4, #0]
 801db30:	4619      	mov	r1, r3
 801db32:	bc70      	pop	{r4, r5, r6}
 801db34:	f7ff bfdc 	b.w	801daf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801db38:	bc70      	pop	{r4, r5, r6}
 801db3a:	4770      	bx	lr
 801db3c:	20015298 	.word	0x20015298
 801db40:	20015290 	.word	0x20015290

0801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801db44:	4a12      	ldr	r2, [pc, #72]	; (801db90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801db46:	8803      	ldrh	r3, [r0, #0]
 801db48:	8812      	ldrh	r2, [r2, #0]
 801db4a:	4293      	cmp	r3, r2
 801db4c:	d207      	bcs.n	801db5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801db4e:	4a11      	ldr	r2, [pc, #68]	; (801db94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801db50:	2114      	movs	r1, #20
 801db52:	6812      	ldr	r2, [r2, #0]
 801db54:	fb01 2303 	mla	r3, r1, r3, r2
 801db58:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801db5c:	4770      	bx	lr
 801db5e:	490e      	ldr	r1, [pc, #56]	; (801db98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801db60:	8809      	ldrh	r1, [r1, #0]
 801db62:	4411      	add	r1, r2
 801db64:	428b      	cmp	r3, r1
 801db66:	da04      	bge.n	801db72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801db68:	1a9b      	subs	r3, r3, r2
 801db6a:	4a0c      	ldr	r2, [pc, #48]	; (801db9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801db6c:	210e      	movs	r1, #14
 801db6e:	6812      	ldr	r2, [r2, #0]
 801db70:	e7f0      	b.n	801db54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801db72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801db76:	4293      	cmp	r3, r2
 801db78:	d108      	bne.n	801db8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801db7a:	4b09      	ldr	r3, [pc, #36]	; (801dba0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801db7c:	781b      	ldrb	r3, [r3, #0]
 801db7e:	b91b      	cbnz	r3, 801db88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801db80:	4b08      	ldr	r3, [pc, #32]	; (801dba4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801db82:	f9b3 0000 	ldrsh.w	r0, [r3]
 801db86:	4770      	bx	lr
 801db88:	4b07      	ldr	r3, [pc, #28]	; (801dba8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801db8a:	e7fa      	b.n	801db82 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801db8c:	2000      	movs	r0, #0
 801db8e:	4770      	bx	lr
 801db90:	20015290 	.word	0x20015290
 801db94:	20015298 	.word	0x20015298
 801db98:	20015294 	.word	0x20015294
 801db9c:	20015278 	.word	0x20015278
 801dba0:	20015208 	.word	0x20015208
 801dba4:	2001520a 	.word	0x2001520a
 801dba8:	2001520c 	.word	0x2001520c

0801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dbac:	4a12      	ldr	r2, [pc, #72]	; (801dbf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801dbae:	8803      	ldrh	r3, [r0, #0]
 801dbb0:	8812      	ldrh	r2, [r2, #0]
 801dbb2:	4293      	cmp	r3, r2
 801dbb4:	d207      	bcs.n	801dbc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dbb6:	4a11      	ldr	r2, [pc, #68]	; (801dbfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dbb8:	2114      	movs	r1, #20
 801dbba:	6812      	ldr	r2, [r2, #0]
 801dbbc:	fb01 2303 	mla	r3, r1, r3, r2
 801dbc0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dbc4:	4770      	bx	lr
 801dbc6:	490e      	ldr	r1, [pc, #56]	; (801dc00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dbc8:	8809      	ldrh	r1, [r1, #0]
 801dbca:	4411      	add	r1, r2
 801dbcc:	428b      	cmp	r3, r1
 801dbce:	da04      	bge.n	801dbda <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dbd0:	1a9b      	subs	r3, r3, r2
 801dbd2:	4a0c      	ldr	r2, [pc, #48]	; (801dc04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dbd4:	210e      	movs	r1, #14
 801dbd6:	6812      	ldr	r2, [r2, #0]
 801dbd8:	e7f0      	b.n	801dbbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dbda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dbde:	4293      	cmp	r3, r2
 801dbe0:	d108      	bne.n	801dbf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dbe2:	4b09      	ldr	r3, [pc, #36]	; (801dc08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dbe4:	781b      	ldrb	r3, [r3, #0]
 801dbe6:	b91b      	cbnz	r3, 801dbf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dbe8:	4b08      	ldr	r3, [pc, #32]	; (801dc0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dbea:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dbee:	4770      	bx	lr
 801dbf0:	4b07      	ldr	r3, [pc, #28]	; (801dc10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dbf2:	e7fa      	b.n	801dbea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dbf4:	2000      	movs	r0, #0
 801dbf6:	4770      	bx	lr
 801dbf8:	20015290 	.word	0x20015290
 801dbfc:	20015298 	.word	0x20015298
 801dc00:	20015294 	.word	0x20015294
 801dc04:	20015278 	.word	0x20015278
 801dc08:	20015208 	.word	0x20015208
 801dc0c:	2001520c 	.word	0x2001520c
 801dc10:	2001520a 	.word	0x2001520a

0801dc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dc14:	4a1f      	ldr	r2, [pc, #124]	; (801dc94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801dc16:	b510      	push	{r4, lr}
 801dc18:	880b      	ldrh	r3, [r1, #0]
 801dc1a:	8812      	ldrh	r2, [r2, #0]
 801dc1c:	4293      	cmp	r3, r2
 801dc1e:	d213      	bcs.n	801dc48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801dc20:	4a1d      	ldr	r2, [pc, #116]	; (801dc98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801dc22:	2114      	movs	r1, #20
 801dc24:	6812      	ldr	r2, [r2, #0]
 801dc26:	fb01 2303 	mla	r3, r1, r3, r2
 801dc2a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dc2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dc32:	8a1a      	ldrh	r2, [r3, #16]
 801dc34:	8a5b      	ldrh	r3, [r3, #18]
 801dc36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dc3a:	8004      	strh	r4, [r0, #0]
 801dc3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc40:	8041      	strh	r1, [r0, #2]
 801dc42:	8082      	strh	r2, [r0, #4]
 801dc44:	80c3      	strh	r3, [r0, #6]
 801dc46:	e00e      	b.n	801dc66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801dc48:	4914      	ldr	r1, [pc, #80]	; (801dc9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801dc4a:	8809      	ldrh	r1, [r1, #0]
 801dc4c:	4411      	add	r1, r2
 801dc4e:	428b      	cmp	r3, r1
 801dc50:	da0a      	bge.n	801dc68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801dc52:	1a9b      	subs	r3, r3, r2
 801dc54:	4a12      	ldr	r2, [pc, #72]	; (801dca0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801dc56:	210e      	movs	r1, #14
 801dc58:	6812      	ldr	r2, [r2, #0]
 801dc5a:	fb01 2303 	mla	r3, r1, r3, r2
 801dc5e:	681a      	ldr	r2, [r3, #0]
 801dc60:	6002      	str	r2, [r0, #0]
 801dc62:	685a      	ldr	r2, [r3, #4]
 801dc64:	6042      	str	r2, [r0, #4]
 801dc66:	bd10      	pop	{r4, pc}
 801dc68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc6c:	4293      	cmp	r3, r2
 801dc6e:	d10b      	bne.n	801dc88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801dc70:	4b0c      	ldr	r3, [pc, #48]	; (801dca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dc72:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dc76:	4b0c      	ldr	r3, [pc, #48]	; (801dca8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dc78:	8081      	strh	r1, [r0, #4]
 801dc7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dc7e:	2300      	movs	r3, #0
 801dc80:	80c2      	strh	r2, [r0, #6]
 801dc82:	8003      	strh	r3, [r0, #0]
 801dc84:	8043      	strh	r3, [r0, #2]
 801dc86:	e7ee      	b.n	801dc66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801dc88:	2300      	movs	r3, #0
 801dc8a:	8003      	strh	r3, [r0, #0]
 801dc8c:	8043      	strh	r3, [r0, #2]
 801dc8e:	8083      	strh	r3, [r0, #4]
 801dc90:	e7d8      	b.n	801dc44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801dc92:	bf00      	nop
 801dc94:	20015290 	.word	0x20015290
 801dc98:	20015298 	.word	0x20015298
 801dc9c:	20015294 	.word	0x20015294
 801dca0:	20015278 	.word	0x20015278
 801dca4:	20015204 	.word	0x20015204
 801dca8:	20015206 	.word	0x20015206

0801dcac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dcac:	4a17      	ldr	r2, [pc, #92]	; (801dd0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801dcae:	8803      	ldrh	r3, [r0, #0]
 801dcb0:	8812      	ldrh	r2, [r2, #0]
 801dcb2:	4293      	cmp	r3, r2
 801dcb4:	d213      	bcs.n	801dcde <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801dcb6:	4a16      	ldr	r2, [pc, #88]	; (801dd10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801dcb8:	2114      	movs	r1, #20
 801dcba:	6812      	ldr	r2, [r2, #0]
 801dcbc:	fb01 2303 	mla	r3, r1, r3, r2
 801dcc0:	8a1a      	ldrh	r2, [r3, #16]
 801dcc2:	8919      	ldrh	r1, [r3, #8]
 801dcc4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dcc8:	428a      	cmp	r2, r1
 801dcca:	db1d      	blt.n	801dd08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801dccc:	8a58      	ldrh	r0, [r3, #18]
 801dcce:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801dcd2:	895b      	ldrh	r3, [r3, #10]
 801dcd4:	4298      	cmp	r0, r3
 801dcd6:	bfac      	ite	ge
 801dcd8:	2000      	movge	r0, #0
 801dcda:	2001      	movlt	r0, #1
 801dcdc:	4770      	bx	lr
 801dcde:	490d      	ldr	r1, [pc, #52]	; (801dd14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801dce0:	8809      	ldrh	r1, [r1, #0]
 801dce2:	4411      	add	r1, r2
 801dce4:	428b      	cmp	r3, r1
 801dce6:	da0d      	bge.n	801dd04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801dce8:	1a9b      	subs	r3, r3, r2
 801dcea:	4a0b      	ldr	r2, [pc, #44]	; (801dd18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801dcec:	210e      	movs	r1, #14
 801dcee:	6812      	ldr	r2, [r2, #0]
 801dcf0:	fb01 2303 	mla	r3, r1, r3, r2
 801dcf4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801dcf8:	891a      	ldrh	r2, [r3, #8]
 801dcfa:	4291      	cmp	r1, r2
 801dcfc:	db04      	blt.n	801dd08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801dcfe:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801dd02:	e7e6      	b.n	801dcd2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801dd04:	2000      	movs	r0, #0
 801dd06:	4770      	bx	lr
 801dd08:	2001      	movs	r0, #1
 801dd0a:	4770      	bx	lr
 801dd0c:	20015290 	.word	0x20015290
 801dd10:	20015298 	.word	0x20015298
 801dd14:	20015294 	.word	0x20015294
 801dd18:	20015278 	.word	0x20015278

0801dd1c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801dd1c:	4a12      	ldr	r2, [pc, #72]	; (801dd68 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801dd1e:	8803      	ldrh	r3, [r0, #0]
 801dd20:	8811      	ldrh	r1, [r2, #0]
 801dd22:	428b      	cmp	r3, r1
 801dd24:	d20b      	bcs.n	801dd3e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801dd26:	4a11      	ldr	r2, [pc, #68]	; (801dd6c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dd28:	6812      	ldr	r2, [r2, #0]
 801dd2a:	b112      	cbz	r2, 801dd32 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dd2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dd30:	b9c0      	cbnz	r0, 801dd64 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801dd32:	4a0f      	ldr	r2, [pc, #60]	; (801dd70 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dd34:	6811      	ldr	r1, [r2, #0]
 801dd36:	2214      	movs	r2, #20
 801dd38:	4353      	muls	r3, r2
 801dd3a:	58c8      	ldr	r0, [r1, r3]
 801dd3c:	4770      	bx	lr
 801dd3e:	4a0d      	ldr	r2, [pc, #52]	; (801dd74 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801dd40:	8812      	ldrh	r2, [r2, #0]
 801dd42:	440a      	add	r2, r1
 801dd44:	4293      	cmp	r3, r2
 801dd46:	da04      	bge.n	801dd52 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801dd48:	4a08      	ldr	r2, [pc, #32]	; (801dd6c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dd4a:	6812      	ldr	r2, [r2, #0]
 801dd4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dd50:	4770      	bx	lr
 801dd52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd56:	4293      	cmp	r3, r2
 801dd58:	d103      	bne.n	801dd62 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801dd5a:	4b07      	ldr	r3, [pc, #28]	; (801dd78 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801dd60:	4770      	bx	lr
 801dd62:	2000      	movs	r0, #0
 801dd64:	4770      	bx	lr
 801dd66:	bf00      	nop
 801dd68:	20015290 	.word	0x20015290
 801dd6c:	20015274 	.word	0x20015274
 801dd70:	20015298 	.word	0x20015298
 801dd74:	20015294 	.word	0x20015294
 801dd78:	20015210 	.word	0x20015210

0801dd7c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801dd7c:	4b24      	ldr	r3, [pc, #144]	; (801de10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801dd7e:	8802      	ldrh	r2, [r0, #0]
 801dd80:	8818      	ldrh	r0, [r3, #0]
 801dd82:	4282      	cmp	r2, r0
 801dd84:	d221      	bcs.n	801ddca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801dd86:	4b23      	ldr	r3, [pc, #140]	; (801de14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801dd88:	6819      	ldr	r1, [r3, #0]
 801dd8a:	2314      	movs	r3, #20
 801dd8c:	fb03 1302 	mla	r3, r3, r2, r1
 801dd90:	6858      	ldr	r0, [r3, #4]
 801dd92:	2800      	cmp	r0, #0
 801dd94:	d03a      	beq.n	801de0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801dd96:	4920      	ldr	r1, [pc, #128]	; (801de18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801dd98:	6809      	ldr	r1, [r1, #0]
 801dd9a:	2900      	cmp	r1, #0
 801dd9c:	d036      	beq.n	801de0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801dd9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801dda2:	2900      	cmp	r1, #0
 801dda4:	d032      	beq.n	801de0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801dda6:	891a      	ldrh	r2, [r3, #8]
 801dda8:	8958      	ldrh	r0, [r3, #10]
 801ddaa:	4350      	muls	r0, r2
 801ddac:	7c5a      	ldrb	r2, [r3, #17]
 801ddae:	7cdb      	ldrb	r3, [r3, #19]
 801ddb0:	0952      	lsrs	r2, r2, #5
 801ddb2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ddb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ddba:	2b0b      	cmp	r3, #11
 801ddbc:	bf18      	it	ne
 801ddbe:	0040      	lslne	r0, r0, #1
 801ddc0:	3003      	adds	r0, #3
 801ddc2:	f020 0003 	bic.w	r0, r0, #3
 801ddc6:	4408      	add	r0, r1
 801ddc8:	4770      	bx	lr
 801ddca:	4b14      	ldr	r3, [pc, #80]	; (801de1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ddcc:	881b      	ldrh	r3, [r3, #0]
 801ddce:	4403      	add	r3, r0
 801ddd0:	429a      	cmp	r2, r3
 801ddd2:	da1a      	bge.n	801de0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ddd4:	4b12      	ldr	r3, [pc, #72]	; (801de20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ddd6:	1a10      	subs	r0, r2, r0
 801ddd8:	210e      	movs	r1, #14
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	fb01 3000 	mla	r0, r1, r0, r3
 801dde0:	7b03      	ldrb	r3, [r0, #12]
 801dde2:	f003 031f 	and.w	r3, r3, #31
 801dde6:	2b0b      	cmp	r3, #11
 801dde8:	d10b      	bne.n	801de02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ddea:	8903      	ldrh	r3, [r0, #8]
 801ddec:	8940      	ldrh	r0, [r0, #10]
 801ddee:	4358      	muls	r0, r3
 801ddf0:	4b09      	ldr	r3, [pc, #36]	; (801de18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ddf2:	3003      	adds	r0, #3
 801ddf4:	6819      	ldr	r1, [r3, #0]
 801ddf6:	f020 0303 	bic.w	r3, r0, #3
 801ddfa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ddfe:	4418      	add	r0, r3
 801de00:	4770      	bx	lr
 801de02:	2b0d      	cmp	r3, #13
 801de04:	d101      	bne.n	801de0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801de06:	300d      	adds	r0, #13
 801de08:	4770      	bx	lr
 801de0a:	2000      	movs	r0, #0
 801de0c:	4770      	bx	lr
 801de0e:	bf00      	nop
 801de10:	20015290 	.word	0x20015290
 801de14:	20015298 	.word	0x20015298
 801de18:	20015274 	.word	0x20015274
 801de1c:	20015294 	.word	0x20015294
 801de20:	20015278 	.word	0x20015278

0801de24 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801de24:	4a17      	ldr	r2, [pc, #92]	; (801de84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801de26:	b510      	push	{r4, lr}
 801de28:	8803      	ldrh	r3, [r0, #0]
 801de2a:	8812      	ldrh	r2, [r2, #0]
 801de2c:	4293      	cmp	r3, r2
 801de2e:	d20c      	bcs.n	801de4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801de30:	4a15      	ldr	r2, [pc, #84]	; (801de88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801de32:	2114      	movs	r1, #20
 801de34:	6812      	ldr	r2, [r2, #0]
 801de36:	fb01 2303 	mla	r3, r1, r3, r2
 801de3a:	7c58      	ldrb	r0, [r3, #17]
 801de3c:	0942      	lsrs	r2, r0, #5
 801de3e:	7cd8      	ldrb	r0, [r3, #19]
 801de40:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801de44:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801de48:	bd10      	pop	{r4, pc}
 801de4a:	4910      	ldr	r1, [pc, #64]	; (801de8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801de4c:	8809      	ldrh	r1, [r1, #0]
 801de4e:	4411      	add	r1, r2
 801de50:	428b      	cmp	r3, r1
 801de52:	da09      	bge.n	801de68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801de54:	1a9b      	subs	r3, r3, r2
 801de56:	4a0e      	ldr	r2, [pc, #56]	; (801de90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801de58:	210e      	movs	r1, #14
 801de5a:	6812      	ldr	r2, [r2, #0]
 801de5c:	fb01 2303 	mla	r3, r1, r3, r2
 801de60:	7b18      	ldrb	r0, [r3, #12]
 801de62:	f000 001f 	and.w	r0, r0, #31
 801de66:	e7ef      	b.n	801de48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801de68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de6c:	4293      	cmp	r3, r2
 801de6e:	d106      	bne.n	801de7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801de70:	f7fa f93e 	bl	80180f0 <_ZN8touchgfx3HAL3lcdEv>
 801de74:	6803      	ldr	r3, [r0, #0]
 801de76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de7c:	4718      	bx	r3
 801de7e:	2000      	movs	r0, #0
 801de80:	e7e2      	b.n	801de48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801de82:	bf00      	nop
 801de84:	20015290 	.word	0x20015290
 801de88:	20015298 	.word	0x20015298
 801de8c:	20015294 	.word	0x20015294
 801de90:	20015278 	.word	0x20015278

0801de94 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801de94:	2010      	movs	r0, #16
 801de96:	4770      	bx	lr

0801de98 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801de98:	2000      	movs	r0, #0
 801de9a:	4770      	bx	lr

0801de9c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801de9c:	4b02      	ldr	r3, [pc, #8]	; (801dea8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801de9e:	8818      	ldrh	r0, [r3, #0]
 801dea0:	0040      	lsls	r0, r0, #1
 801dea2:	b280      	uxth	r0, r0
 801dea4:	4770      	bx	lr
 801dea6:	bf00      	nop
 801dea8:	2001520a 	.word	0x2001520a

0801deac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801deac:	2bff      	cmp	r3, #255	; 0xff
 801deae:	d050      	beq.n	801df52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801deb0:	2a0b      	cmp	r2, #11
 801deb2:	d04a      	beq.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801deb4:	d80e      	bhi.n	801ded4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801deb6:	2a03      	cmp	r2, #3
 801deb8:	d03f      	beq.n	801df3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801deba:	d804      	bhi.n	801dec6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801debc:	2a01      	cmp	r2, #1
 801debe:	d03e      	beq.n	801df3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801dec0:	d93f      	bls.n	801df42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801dec2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801dec4:	4770      	bx	lr
 801dec6:	2a09      	cmp	r2, #9
 801dec8:	d03f      	beq.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801deca:	d83c      	bhi.n	801df46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801decc:	2a08      	cmp	r2, #8
 801dece:	d03a      	beq.n	801df46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ded0:	2000      	movs	r0, #0
 801ded2:	4770      	bx	lr
 801ded4:	2a2f      	cmp	r2, #47	; 0x2f
 801ded6:	d024      	beq.n	801df22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ded8:	d80d      	bhi.n	801def6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801deda:	2a2d      	cmp	r2, #45	; 0x2d
 801dedc:	d014      	beq.n	801df08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801dede:	d826      	bhi.n	801df2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801dee0:	2a2c      	cmp	r2, #44	; 0x2c
 801dee2:	d1f5      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dee4:	684b      	ldr	r3, [r1, #4]
 801dee6:	781b      	ldrb	r3, [r3, #0]
 801dee8:	2b01      	cmp	r3, #1
 801deea:	d018      	beq.n	801df1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801deec:	d323      	bcc.n	801df36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801deee:	2b02      	cmp	r3, #2
 801def0:	d1ee      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801def2:	6880      	ldr	r0, [r0, #8]
 801def4:	4770      	bx	lr
 801def6:	2a31      	cmp	r2, #49	; 0x31
 801def8:	d004      	beq.n	801df04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801defa:	d328      	bcc.n	801df4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801defc:	2a32      	cmp	r2, #50	; 0x32
 801defe:	d026      	beq.n	801df4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801df00:	2a33      	cmp	r2, #51	; 0x33
 801df02:	d1e5      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df04:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801df06:	4770      	bx	lr
 801df08:	684b      	ldr	r3, [r1, #4]
 801df0a:	781b      	ldrb	r3, [r3, #0]
 801df0c:	2b01      	cmp	r3, #1
 801df0e:	d004      	beq.n	801df1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801df10:	d30b      	bcc.n	801df2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df12:	2b02      	cmp	r3, #2
 801df14:	d1dc      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df16:	6900      	ldr	r0, [r0, #16]
 801df18:	4770      	bx	lr
 801df1a:	6a00      	ldr	r0, [r0, #32]
 801df1c:	4770      	bx	lr
 801df1e:	6980      	ldr	r0, [r0, #24]
 801df20:	4770      	bx	lr
 801df22:	684b      	ldr	r3, [r1, #4]
 801df24:	781b      	ldrb	r3, [r3, #0]
 801df26:	2b00      	cmp	r3, #0
 801df28:	d1d2      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801df2c:	4770      	bx	lr
 801df2e:	684b      	ldr	r3, [r1, #4]
 801df30:	781b      	ldrb	r3, [r3, #0]
 801df32:	2b00      	cmp	r3, #0
 801df34:	d1cc      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df36:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801df38:	4770      	bx	lr
 801df3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801df3c:	4770      	bx	lr
 801df3e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801df40:	4770      	bx	lr
 801df42:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801df44:	4770      	bx	lr
 801df46:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801df48:	4770      	bx	lr
 801df4a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801df4c:	4770      	bx	lr
 801df4e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801df50:	4770      	bx	lr
 801df52:	2a0b      	cmp	r2, #11
 801df54:	d049      	beq.n	801dfea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801df56:	d80e      	bhi.n	801df76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801df58:	2a03      	cmp	r2, #3
 801df5a:	d040      	beq.n	801dfde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801df5c:	d804      	bhi.n	801df68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801df5e:	2a01      	cmp	r2, #1
 801df60:	d03f      	beq.n	801dfe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801df62:	d940      	bls.n	801dfe6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801df64:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801df66:	4770      	bx	lr
 801df68:	2a09      	cmp	r2, #9
 801df6a:	d03e      	beq.n	801dfea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801df6c:	d801      	bhi.n	801df72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801df6e:	2a08      	cmp	r2, #8
 801df70:	d1ae      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df72:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801df74:	4770      	bx	lr
 801df76:	2a2f      	cmp	r2, #47	; 0x2f
 801df78:	d024      	beq.n	801dfc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801df7a:	d80d      	bhi.n	801df98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801df7c:	2a2d      	cmp	r2, #45	; 0x2d
 801df7e:	d014      	beq.n	801dfaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801df80:	d826      	bhi.n	801dfd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801df82:	2a2c      	cmp	r2, #44	; 0x2c
 801df84:	d1a4      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df86:	684b      	ldr	r3, [r1, #4]
 801df88:	781b      	ldrb	r3, [r3, #0]
 801df8a:	2b01      	cmp	r3, #1
 801df8c:	d018      	beq.n	801dfc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801df8e:	d324      	bcc.n	801dfda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801df90:	2b02      	cmp	r3, #2
 801df92:	d19d      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df94:	68c0      	ldr	r0, [r0, #12]
 801df96:	4770      	bx	lr
 801df98:	2a31      	cmp	r2, #49	; 0x31
 801df9a:	d004      	beq.n	801dfa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801df9c:	d327      	bcc.n	801dfee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801df9e:	2a32      	cmp	r2, #50	; 0x32
 801dfa0:	d025      	beq.n	801dfee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801dfa2:	2a33      	cmp	r2, #51	; 0x33
 801dfa4:	d194      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfa6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801dfa8:	4770      	bx	lr
 801dfaa:	684b      	ldr	r3, [r1, #4]
 801dfac:	781b      	ldrb	r3, [r3, #0]
 801dfae:	2b01      	cmp	r3, #1
 801dfb0:	d004      	beq.n	801dfbc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801dfb2:	d30b      	bcc.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801dfb4:	2b02      	cmp	r3, #2
 801dfb6:	d18b      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfb8:	6940      	ldr	r0, [r0, #20]
 801dfba:	4770      	bx	lr
 801dfbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801dfbe:	4770      	bx	lr
 801dfc0:	69c0      	ldr	r0, [r0, #28]
 801dfc2:	4770      	bx	lr
 801dfc4:	684b      	ldr	r3, [r1, #4]
 801dfc6:	781b      	ldrb	r3, [r3, #0]
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	d181      	bne.n	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfcc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801dfce:	4770      	bx	lr
 801dfd0:	684b      	ldr	r3, [r1, #4]
 801dfd2:	781b      	ldrb	r3, [r3, #0]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	f47f af7b 	bne.w	801ded0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801dfdc:	4770      	bx	lr
 801dfde:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801dfe0:	4770      	bx	lr
 801dfe2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801dfe4:	4770      	bx	lr
 801dfe6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801dfe8:	4770      	bx	lr
 801dfea:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801dfec:	4770      	bx	lr
 801dfee:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801dff0:	4770      	bx	lr

0801dff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dff6:	b087      	sub	sp, #28
 801dff8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dffa:	9205      	str	r2, [sp, #20]
 801dffc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e000:	9101      	str	r1, [sp, #4]
 801e002:	9202      	str	r2, [sp, #8]
 801e004:	6841      	ldr	r1, [r0, #4]
 801e006:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e00a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e00e:	fb01 2404 	mla	r4, r1, r4, r2
 801e012:	6802      	ldr	r2, [r0, #0]
 801e014:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e018:	f8de 2000 	ldr.w	r2, [lr]
 801e01c:	9203      	str	r2, [sp, #12]
 801e01e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e022:	3204      	adds	r2, #4
 801e024:	9204      	str	r2, [sp, #16]
 801e026:	9a02      	ldr	r2, [sp, #8]
 801e028:	43d6      	mvns	r6, r2
 801e02a:	b2f6      	uxtb	r6, r6
 801e02c:	9a01      	ldr	r2, [sp, #4]
 801e02e:	2a00      	cmp	r2, #0
 801e030:	dc03      	bgt.n	801e03a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e032:	9a05      	ldr	r2, [sp, #20]
 801e034:	2a00      	cmp	r2, #0
 801e036:	f340 8129 	ble.w	801e28c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e03a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e03c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e040:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e046:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e04a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e04e:	2b00      	cmp	r3, #0
 801e050:	dd0e      	ble.n	801e070 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e052:	1408      	asrs	r0, r1, #16
 801e054:	d405      	bmi.n	801e062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e056:	4560      	cmp	r0, ip
 801e058:	da03      	bge.n	801e062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e05a:	1410      	asrs	r0, r2, #16
 801e05c:	d401      	bmi.n	801e062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e05e:	42b8      	cmp	r0, r7
 801e060:	db07      	blt.n	801e072 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e062:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e064:	3b01      	subs	r3, #1
 801e066:	3402      	adds	r4, #2
 801e068:	4401      	add	r1, r0
 801e06a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e06c:	4402      	add	r2, r0
 801e06e:	e7ee      	b.n	801e04e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e070:	d071      	beq.n	801e156 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e072:	1e58      	subs	r0, r3, #1
 801e074:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e076:	fb05 1500 	mla	r5, r5, r0, r1
 801e07a:	142d      	asrs	r5, r5, #16
 801e07c:	d45f      	bmi.n	801e13e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e07e:	4565      	cmp	r5, ip
 801e080:	da5d      	bge.n	801e13e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e082:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e084:	fb05 2000 	mla	r0, r5, r0, r2
 801e088:	1400      	asrs	r0, r0, #16
 801e08a:	d458      	bmi.n	801e13e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e08c:	42b8      	cmp	r0, r7
 801e08e:	da56      	bge.n	801e13e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e090:	4699      	mov	r9, r3
 801e092:	46a2      	mov	sl, r4
 801e094:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e098:	f1b9 0f00 	cmp.w	r9, #0
 801e09c:	dd57      	ble.n	801e14e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e09e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e0a2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e0a6:	9803      	ldr	r0, [sp, #12]
 801e0a8:	140d      	asrs	r5, r1, #16
 801e0aa:	f109 39ff 	add.w	r9, r9, #4294967295
 801e0ae:	fb07 000c 	mla	r0, r7, ip, r0
 801e0b2:	5d40      	ldrb	r0, [r0, r5]
 801e0b4:	9d04      	ldr	r5, [sp, #16]
 801e0b6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e0ba:	f8ba 5000 	ldrh.w	r5, [sl]
 801e0be:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e0c2:	122f      	asrs	r7, r5, #8
 801e0c4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e0c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e0cc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e0d0:	00ed      	lsls	r5, r5, #3
 801e0d2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e0d6:	fb17 f706 	smulbb	r7, r7, r6
 801e0da:	b2ed      	uxtb	r5, r5
 801e0dc:	fb18 f806 	smulbb	r8, r8, r6
 801e0e0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e0e4:	10c7      	asrs	r7, r0, #3
 801e0e6:	fb15 f506 	smulbb	r5, r5, r6
 801e0ea:	00c0      	lsls	r0, r0, #3
 801e0ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e0f0:	fa1f fc8c 	uxth.w	ip, ip
 801e0f4:	b2c0      	uxtb	r0, r0
 801e0f6:	fb07 870b 	mla	r7, r7, fp, r8
 801e0fa:	fb00 500b 	mla	r0, r0, fp, r5
 801e0fe:	f10c 0501 	add.w	r5, ip, #1
 801e102:	b2bf      	uxth	r7, r7
 801e104:	b280      	uxth	r0, r0
 801e106:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e10a:	f107 0801 	add.w	r8, r7, #1
 801e10e:	1c45      	adds	r5, r0, #1
 801e110:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e114:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e118:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e11c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e11e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e122:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e126:	4401      	add	r1, r0
 801e128:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e12c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e12e:	ea45 0c0c 	orr.w	ip, r5, ip
 801e132:	4402      	add	r2, r0
 801e134:	ea4c 0c08 	orr.w	ip, ip, r8
 801e138:	f82a cb02 	strh.w	ip, [sl], #2
 801e13c:	e7ac      	b.n	801e098 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e13e:	f04f 0800 	mov.w	r8, #0
 801e142:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e146:	eb03 0008 	add.w	r0, r3, r8
 801e14a:	2800      	cmp	r0, #0
 801e14c:	dc41      	bgt.n	801e1d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e14e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e152:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e156:	9b01      	ldr	r3, [sp, #4]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	f340 8097 	ble.w	801e28c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e162:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e164:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e168:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e16c:	eef0 6a62 	vmov.f32	s13, s5
 801e170:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e174:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e178:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e17c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e180:	eef0 6a43 	vmov.f32	s13, s6
 801e184:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e188:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e18c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e190:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e194:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e198:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e19c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e1a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e1a4:	ee12 2a90 	vmov	r2, s5
 801e1a8:	eef0 2a47 	vmov.f32	s5, s14
 801e1ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1b0:	ee13 2a10 	vmov	r2, s6
 801e1b4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e1b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e1b8:	eeb0 3a67 	vmov.f32	s6, s15
 801e1bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1c0:	9314      	str	r3, [sp, #80]	; 0x50
 801e1c2:	9b01      	ldr	r3, [sp, #4]
 801e1c4:	9a05      	ldr	r2, [sp, #20]
 801e1c6:	3b01      	subs	r3, #1
 801e1c8:	9301      	str	r3, [sp, #4]
 801e1ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e1cc:	bf08      	it	eq
 801e1ce:	4613      	moveq	r3, r2
 801e1d0:	e72c      	b.n	801e02c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e1d2:	140f      	asrs	r7, r1, #16
 801e1d4:	d453      	bmi.n	801e27e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e1d6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e1da:	42bd      	cmp	r5, r7
 801e1dc:	dd4f      	ble.n	801e27e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e1de:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e1e2:	d44c      	bmi.n	801e27e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e1e4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e1e8:	4560      	cmp	r0, ip
 801e1ea:	dd48      	ble.n	801e27e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e1ec:	9803      	ldr	r0, [sp, #12]
 801e1ee:	b22d      	sxth	r5, r5
 801e1f0:	fb0c 0505 	mla	r5, ip, r5, r0
 801e1f4:	5de8      	ldrb	r0, [r5, r7]
 801e1f6:	9d04      	ldr	r5, [sp, #16]
 801e1f8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e1fc:	f06f 0501 	mvn.w	r5, #1
 801e200:	fb05 fb08 	mul.w	fp, r5, r8
 801e204:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e208:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e20c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e210:	122f      	asrs	r7, r5, #8
 801e212:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e216:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e21a:	00ed      	lsls	r5, r5, #3
 801e21c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e220:	fb17 f706 	smulbb	r7, r7, r6
 801e224:	b2ed      	uxtb	r5, r5
 801e226:	fb19 f906 	smulbb	r9, r9, r6
 801e22a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e22e:	10c7      	asrs	r7, r0, #3
 801e230:	fb15 f506 	smulbb	r5, r5, r6
 801e234:	00c0      	lsls	r0, r0, #3
 801e236:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e23a:	fa1f fc8c 	uxth.w	ip, ip
 801e23e:	b2c0      	uxtb	r0, r0
 801e240:	fb07 970a 	mla	r7, r7, sl, r9
 801e244:	fb00 500a 	mla	r0, r0, sl, r5
 801e248:	f10c 0501 	add.w	r5, ip, #1
 801e24c:	b2bf      	uxth	r7, r7
 801e24e:	b280      	uxth	r0, r0
 801e250:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e254:	f107 0901 	add.w	r9, r7, #1
 801e258:	1c45      	adds	r5, r0, #1
 801e25a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e25e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e262:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e266:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e26a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e26e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e272:	ea45 0c0c 	orr.w	ip, r5, ip
 801e276:	ea4c 0c09 	orr.w	ip, ip, r9
 801e27a:	f824 c00b 	strh.w	ip, [r4, fp]
 801e27e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e280:	f108 38ff 	add.w	r8, r8, #4294967295
 801e284:	4401      	add	r1, r0
 801e286:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e288:	4402      	add	r2, r0
 801e28a:	e75c      	b.n	801e146 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e28c:	b007      	add	sp, #28
 801e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e292 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e296:	b085      	sub	sp, #20
 801e298:	4693      	mov	fp, r2
 801e29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e29e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e2a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e2a2:	6870      	ldr	r0, [r6, #4]
 801e2a4:	9100      	str	r1, [sp, #0]
 801e2a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e2aa:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e2ae:	fb00 2404 	mla	r4, r0, r4, r2
 801e2b2:	6832      	ldr	r2, [r6, #0]
 801e2b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e2b8:	682a      	ldr	r2, [r5, #0]
 801e2ba:	9201      	str	r2, [sp, #4]
 801e2bc:	686a      	ldr	r2, [r5, #4]
 801e2be:	3204      	adds	r2, #4
 801e2c0:	9202      	str	r2, [sp, #8]
 801e2c2:	9a00      	ldr	r2, [sp, #0]
 801e2c4:	2a00      	cmp	r2, #0
 801e2c6:	dc03      	bgt.n	801e2d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e2c8:	f1bb 0f00 	cmp.w	fp, #0
 801e2cc:	f340 80a0 	ble.w	801e410 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e2d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e2d2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e2d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e2da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e2dc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e2e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	dd0c      	ble.n	801e302 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e2e8:	1406      	asrs	r6, r0, #16
 801e2ea:	d405      	bmi.n	801e2f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e2ec:	454e      	cmp	r6, r9
 801e2ee:	da03      	bge.n	801e2f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e2f0:	1416      	asrs	r6, r2, #16
 801e2f2:	d401      	bmi.n	801e2f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e2f4:	4546      	cmp	r6, r8
 801e2f6:	db05      	blt.n	801e304 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e2f8:	4470      	add	r0, lr
 801e2fa:	4462      	add	r2, ip
 801e2fc:	3b01      	subs	r3, #1
 801e2fe:	3402      	adds	r4, #2
 801e300:	e7f0      	b.n	801e2e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e302:	d00f      	beq.n	801e324 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e304:	1e5e      	subs	r6, r3, #1
 801e306:	fb0e 0706 	mla	r7, lr, r6, r0
 801e30a:	143f      	asrs	r7, r7, #16
 801e30c:	d541      	bpl.n	801e392 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e30e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e312:	4698      	mov	r8, r3
 801e314:	9603      	str	r6, [sp, #12]
 801e316:	f1b8 0f00 	cmp.w	r8, #0
 801e31a:	dc59      	bgt.n	801e3d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e31c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e320:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e324:	9b00      	ldr	r3, [sp, #0]
 801e326:	2b00      	cmp	r3, #0
 801e328:	dd72      	ble.n	801e410 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e32a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e330:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e334:	eeb0 6a62 	vmov.f32	s12, s5
 801e338:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e33c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e340:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e344:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e348:	eeb0 6a43 	vmov.f32	s12, s6
 801e34c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e350:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e354:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e358:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e35c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e360:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e364:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e368:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e36c:	ee12 2a90 	vmov	r2, s5
 801e370:	eef0 2a47 	vmov.f32	s5, s14
 801e374:	fb92 fef3 	sdiv	lr, r2, r3
 801e378:	ee13 2a10 	vmov	r2, s6
 801e37c:	eeb0 3a67 	vmov.f32	s6, s15
 801e380:	fb92 fcf3 	sdiv	ip, r2, r3
 801e384:	9b00      	ldr	r3, [sp, #0]
 801e386:	3b01      	subs	r3, #1
 801e388:	9300      	str	r3, [sp, #0]
 801e38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e38c:	bf08      	it	eq
 801e38e:	465b      	moveq	r3, fp
 801e390:	e797      	b.n	801e2c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e392:	454f      	cmp	r7, r9
 801e394:	dabb      	bge.n	801e30e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e396:	fb0c 2606 	mla	r6, ip, r6, r2
 801e39a:	1436      	asrs	r6, r6, #16
 801e39c:	d4b7      	bmi.n	801e30e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e39e:	4546      	cmp	r6, r8
 801e3a0:	dab5      	bge.n	801e30e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e3a2:	461e      	mov	r6, r3
 801e3a4:	46a0      	mov	r8, r4
 801e3a6:	2e00      	cmp	r6, #0
 801e3a8:	ddb8      	ble.n	801e31c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e3aa:	1417      	asrs	r7, r2, #16
 801e3ac:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e3b0:	9901      	ldr	r1, [sp, #4]
 801e3b2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e3b6:	4462      	add	r2, ip
 801e3b8:	4470      	add	r0, lr
 801e3ba:	fb0a 1707 	mla	r7, sl, r7, r1
 801e3be:	9902      	ldr	r1, [sp, #8]
 801e3c0:	3e01      	subs	r6, #1
 801e3c2:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e3c6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e3ca:	f828 7b02 	strh.w	r7, [r8], #2
 801e3ce:	e7ea      	b.n	801e3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e3d0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e3d4:	d417      	bmi.n	801e406 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e3d6:	68ae      	ldr	r6, [r5, #8]
 801e3d8:	454e      	cmp	r6, r9
 801e3da:	dd14      	ble.n	801e406 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e3dc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e3e0:	d411      	bmi.n	801e406 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e3e2:	68ef      	ldr	r7, [r5, #12]
 801e3e4:	4557      	cmp	r7, sl
 801e3e6:	dd0e      	ble.n	801e406 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e3e8:	9f01      	ldr	r7, [sp, #4]
 801e3ea:	b236      	sxth	r6, r6
 801e3ec:	f06f 0101 	mvn.w	r1, #1
 801e3f0:	fb0a 7606 	mla	r6, sl, r6, r7
 801e3f4:	9f02      	ldr	r7, [sp, #8]
 801e3f6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e3fa:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e3fe:	fb01 f608 	mul.w	r6, r1, r8
 801e402:	9903      	ldr	r1, [sp, #12]
 801e404:	538f      	strh	r7, [r1, r6]
 801e406:	4470      	add	r0, lr
 801e408:	4462      	add	r2, ip
 801e40a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e40e:	e782      	b.n	801e316 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e410:	b005      	add	sp, #20
 801e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e416 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e41a:	b087      	sub	sp, #28
 801e41c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e41e:	9205      	str	r2, [sp, #20]
 801e420:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e424:	9102      	str	r1, [sp, #8]
 801e426:	9203      	str	r2, [sp, #12]
 801e428:	6861      	ldr	r1, [r4, #4]
 801e42a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e42e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e432:	fb01 2000 	mla	r0, r1, r0, r2
 801e436:	6822      	ldr	r2, [r4, #0]
 801e438:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e43c:	9200      	str	r2, [sp, #0]
 801e43e:	f8dc 2000 	ldr.w	r2, [ip]
 801e442:	9204      	str	r2, [sp, #16]
 801e444:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e448:	3204      	adds	r2, #4
 801e44a:	9201      	str	r2, [sp, #4]
 801e44c:	9a03      	ldr	r2, [sp, #12]
 801e44e:	43d5      	mvns	r5, r2
 801e450:	b2ed      	uxtb	r5, r5
 801e452:	9a02      	ldr	r2, [sp, #8]
 801e454:	2a00      	cmp	r2, #0
 801e456:	dc03      	bgt.n	801e460 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e458:	9a05      	ldr	r2, [sp, #20]
 801e45a:	2a00      	cmp	r2, #0
 801e45c:	f340 812c 	ble.w	801e6b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e460:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e462:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e466:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e46a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e46c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e470:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e474:	2b00      	cmp	r3, #0
 801e476:	dd10      	ble.n	801e49a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e478:	140c      	asrs	r4, r1, #16
 801e47a:	d405      	bmi.n	801e488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e47c:	4574      	cmp	r4, lr
 801e47e:	da03      	bge.n	801e488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e480:	1414      	asrs	r4, r2, #16
 801e482:	d401      	bmi.n	801e488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e484:	42bc      	cmp	r4, r7
 801e486:	db09      	blt.n	801e49c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e488:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e48a:	3b01      	subs	r3, #1
 801e48c:	9800      	ldr	r0, [sp, #0]
 801e48e:	4421      	add	r1, r4
 801e490:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e492:	3002      	adds	r0, #2
 801e494:	4422      	add	r2, r4
 801e496:	9000      	str	r0, [sp, #0]
 801e498:	e7ec      	b.n	801e474 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e49a:	d071      	beq.n	801e580 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e49c:	1e5c      	subs	r4, r3, #1
 801e49e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e4a0:	fb06 1604 	mla	r6, r6, r4, r1
 801e4a4:	1436      	asrs	r6, r6, #16
 801e4a6:	d45d      	bmi.n	801e564 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e4a8:	4576      	cmp	r6, lr
 801e4aa:	da5b      	bge.n	801e564 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e4ac:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e4ae:	fb06 2404 	mla	r4, r6, r4, r2
 801e4b2:	1424      	asrs	r4, r4, #16
 801e4b4:	d456      	bmi.n	801e564 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e4b6:	42bc      	cmp	r4, r7
 801e4b8:	da54      	bge.n	801e564 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e4ba:	4698      	mov	r8, r3
 801e4bc:	f8dd 9000 	ldr.w	r9, [sp]
 801e4c0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e4c4:	f1b8 0f00 	cmp.w	r8, #0
 801e4c8:	dd54      	ble.n	801e574 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e4ca:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e4ce:	1414      	asrs	r4, r2, #16
 801e4d0:	9804      	ldr	r0, [sp, #16]
 801e4d2:	140e      	asrs	r6, r1, #16
 801e4d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801e4d8:	fb07 0404 	mla	r4, r7, r4, r0
 801e4dc:	9801      	ldr	r0, [sp, #4]
 801e4de:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e4e2:	f8b9 4000 	ldrh.w	r4, [r9]
 801e4e6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e4ea:	1227      	asrs	r7, r4, #8
 801e4ec:	eb00 0b0e 	add.w	fp, r0, lr
 801e4f0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e4f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e4f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e4fa:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e4fe:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e502:	4401      	add	r1, r0
 801e504:	fb16 f60a 	smulbb	r6, r6, sl
 801e508:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e50a:	fb1b fb0a 	smulbb	fp, fp, sl
 801e50e:	fb07 6705 	mla	r7, r7, r5, r6
 801e512:	10e6      	asrs	r6, r4, #3
 801e514:	00e4      	lsls	r4, r4, #3
 801e516:	4402      	add	r2, r0
 801e518:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e51c:	b2bf      	uxth	r7, r7
 801e51e:	b2e4      	uxtb	r4, r4
 801e520:	fb06 b605 	mla	r6, r6, r5, fp
 801e524:	fb14 f405 	smulbb	r4, r4, r5
 801e528:	b2b6      	uxth	r6, r6
 801e52a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e52e:	1c7c      	adds	r4, r7, #1
 801e530:	f106 0b01 	add.w	fp, r6, #1
 801e534:	fa1f fe8e 	uxth.w	lr, lr
 801e538:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e53c:	f10e 0401 	add.w	r4, lr, #1
 801e540:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e544:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e548:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e54c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e550:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e554:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e558:	4327      	orrs	r7, r4
 801e55a:	ea47 070b 	orr.w	r7, r7, fp
 801e55e:	f829 7b02 	strh.w	r7, [r9], #2
 801e562:	e7af      	b.n	801e4c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e564:	f04f 0e00 	mov.w	lr, #0
 801e568:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e56c:	eb03 040e 	add.w	r4, r3, lr
 801e570:	2c00      	cmp	r4, #0
 801e572:	dc43      	bgt.n	801e5fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e574:	9a00      	ldr	r2, [sp, #0]
 801e576:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e57a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e57e:	9300      	str	r3, [sp, #0]
 801e580:	9b02      	ldr	r3, [sp, #8]
 801e582:	2b00      	cmp	r3, #0
 801e584:	f340 8098 	ble.w	801e6b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e58e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e592:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e596:	eef0 6a62 	vmov.f32	s13, s5
 801e59a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e59e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5a6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e5aa:	eef0 6a43 	vmov.f32	s13, s6
 801e5ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5b2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e5b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e5c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5ce:	ee12 2a90 	vmov	r2, s5
 801e5d2:	eef0 2a47 	vmov.f32	s5, s14
 801e5d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5da:	ee13 2a10 	vmov	r2, s6
 801e5de:	9313      	str	r3, [sp, #76]	; 0x4c
 801e5e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5e2:	eeb0 3a67 	vmov.f32	s6, s15
 801e5e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5ea:	9314      	str	r3, [sp, #80]	; 0x50
 801e5ec:	9b02      	ldr	r3, [sp, #8]
 801e5ee:	9a05      	ldr	r2, [sp, #20]
 801e5f0:	3b01      	subs	r3, #1
 801e5f2:	9302      	str	r3, [sp, #8]
 801e5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5f6:	bf08      	it	eq
 801e5f8:	4613      	moveq	r3, r2
 801e5fa:	e72a      	b.n	801e452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e5fc:	140f      	asrs	r7, r1, #16
 801e5fe:	d454      	bmi.n	801e6aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e600:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e604:	42be      	cmp	r6, r7
 801e606:	dd50      	ble.n	801e6aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e608:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e60c:	d44d      	bmi.n	801e6aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e60e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e612:	4544      	cmp	r4, r8
 801e614:	dd49      	ble.n	801e6aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e616:	9c04      	ldr	r4, [sp, #16]
 801e618:	b236      	sxth	r6, r6
 801e61a:	f06f 0001 	mvn.w	r0, #1
 801e61e:	fb08 4606 	mla	r6, r8, r6, r4
 801e622:	9c01      	ldr	r4, [sp, #4]
 801e624:	fb00 fa0e 	mul.w	sl, r0, lr
 801e628:	9800      	ldr	r0, [sp, #0]
 801e62a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e62e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e632:	eb04 0b08 	add.w	fp, r4, r8
 801e636:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e63a:	9801      	ldr	r0, [sp, #4]
 801e63c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e640:	1227      	asrs	r7, r4, #8
 801e642:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e646:	fb16 f609 	smulbb	r6, r6, r9
 801e64a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e64e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e652:	fb1b fb09 	smulbb	fp, fp, r9
 801e656:	fb07 6705 	mla	r7, r7, r5, r6
 801e65a:	10e6      	asrs	r6, r4, #3
 801e65c:	00e4      	lsls	r4, r4, #3
 801e65e:	9800      	ldr	r0, [sp, #0]
 801e660:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e664:	b2bf      	uxth	r7, r7
 801e666:	b2e4      	uxtb	r4, r4
 801e668:	fb06 b605 	mla	r6, r6, r5, fp
 801e66c:	fb14 f405 	smulbb	r4, r4, r5
 801e670:	b2b6      	uxth	r6, r6
 801e672:	fb08 4809 	mla	r8, r8, r9, r4
 801e676:	1c7c      	adds	r4, r7, #1
 801e678:	f106 0b01 	add.w	fp, r6, #1
 801e67c:	fa1f f888 	uxth.w	r8, r8
 801e680:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e684:	f108 0401 	add.w	r4, r8, #1
 801e688:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e68c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e690:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e694:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e698:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e69c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e6a0:	4327      	orrs	r7, r4
 801e6a2:	ea47 070b 	orr.w	r7, r7, fp
 801e6a6:	f820 700a 	strh.w	r7, [r0, sl]
 801e6aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e6ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e6b0:	4401      	add	r1, r0
 801e6b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e6b4:	4402      	add	r2, r0
 801e6b6:	e759      	b.n	801e56c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e6b8:	b007      	add	sp, #28
 801e6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e6c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c4:	b085      	sub	sp, #20
 801e6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e6ca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e6cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e6ce:	9203      	str	r2, [sp, #12]
 801e6d0:	6870      	ldr	r0, [r6, #4]
 801e6d2:	686f      	ldr	r7, [r5, #4]
 801e6d4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e6d8:	3704      	adds	r7, #4
 801e6da:	9101      	str	r1, [sp, #4]
 801e6dc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e6e0:	fb00 2404 	mla	r4, r0, r4, r2
 801e6e4:	6832      	ldr	r2, [r6, #0]
 801e6e6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e6ea:	682a      	ldr	r2, [r5, #0]
 801e6ec:	9202      	str	r2, [sp, #8]
 801e6ee:	9a01      	ldr	r2, [sp, #4]
 801e6f0:	2a00      	cmp	r2, #0
 801e6f2:	dc03      	bgt.n	801e6fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e6f4:	9a03      	ldr	r2, [sp, #12]
 801e6f6:	2a00      	cmp	r2, #0
 801e6f8:	f340 80cc 	ble.w	801e894 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e6fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e6fe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e702:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e706:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e708:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e70c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e710:	2b00      	cmp	r3, #0
 801e712:	dd0d      	ble.n	801e730 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e714:	1406      	asrs	r6, r0, #16
 801e716:	d405      	bmi.n	801e724 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e718:	454e      	cmp	r6, r9
 801e71a:	da03      	bge.n	801e724 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e71c:	1416      	asrs	r6, r2, #16
 801e71e:	d401      	bmi.n	801e724 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e720:	4546      	cmp	r6, r8
 801e722:	db06      	blt.n	801e732 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e724:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e726:	4460      	add	r0, ip
 801e728:	3b01      	subs	r3, #1
 801e72a:	3402      	adds	r4, #2
 801e72c:	4432      	add	r2, r6
 801e72e:	e7ef      	b.n	801e710 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e730:	d00f      	beq.n	801e752 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e732:	1e5e      	subs	r6, r3, #1
 801e734:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e738:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e73c:	d543      	bpl.n	801e7c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e73e:	4698      	mov	r8, r3
 801e740:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e744:	f1b8 0f00 	cmp.w	r8, #0
 801e748:	dc71      	bgt.n	801e82e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e74a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e74e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e752:	9b01      	ldr	r3, [sp, #4]
 801e754:	2b00      	cmp	r3, #0
 801e756:	f340 809d 	ble.w	801e894 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e75a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e75e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e760:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e764:	eeb0 6a62 	vmov.f32	s12, s5
 801e768:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e76c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e770:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e774:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e778:	eeb0 6a43 	vmov.f32	s12, s6
 801e77c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e780:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e784:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e788:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e78c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e790:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e794:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e798:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e79c:	ee12 2a90 	vmov	r2, s5
 801e7a0:	eef0 2a47 	vmov.f32	s5, s14
 801e7a4:	fb92 fcf3 	sdiv	ip, r2, r3
 801e7a8:	ee13 2a10 	vmov	r2, s6
 801e7ac:	eeb0 3a67 	vmov.f32	s6, s15
 801e7b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7b4:	9312      	str	r3, [sp, #72]	; 0x48
 801e7b6:	9b01      	ldr	r3, [sp, #4]
 801e7b8:	9a03      	ldr	r2, [sp, #12]
 801e7ba:	3b01      	subs	r3, #1
 801e7bc:	9301      	str	r3, [sp, #4]
 801e7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7c0:	bf08      	it	eq
 801e7c2:	4613      	moveq	r3, r2
 801e7c4:	e793      	b.n	801e6ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e7c6:	45ce      	cmp	lr, r9
 801e7c8:	dab9      	bge.n	801e73e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e7ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e7cc:	fb01 2606 	mla	r6, r1, r6, r2
 801e7d0:	1436      	asrs	r6, r6, #16
 801e7d2:	d4b4      	bmi.n	801e73e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e7d4:	4546      	cmp	r6, r8
 801e7d6:	dab2      	bge.n	801e73e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e7d8:	4698      	mov	r8, r3
 801e7da:	46a2      	mov	sl, r4
 801e7dc:	f1b8 0f00 	cmp.w	r8, #0
 801e7e0:	ddb3      	ble.n	801e74a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e7e2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e7e6:	1416      	asrs	r6, r2, #16
 801e7e8:	9902      	ldr	r1, [sp, #8]
 801e7ea:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e7ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7f2:	4460      	add	r0, ip
 801e7f4:	fb09 1606 	mla	r6, r9, r6, r1
 801e7f8:	4928      	ldr	r1, [pc, #160]	; (801e89c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e7fa:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e7fe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e802:	eb07 0b0e 	add.w	fp, r7, lr
 801e806:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e80a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e80e:	00f6      	lsls	r6, r6, #3
 801e810:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e814:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e816:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e81a:	440a      	add	r2, r1
 801e81c:	ea49 0606 	orr.w	r6, r9, r6
 801e820:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e824:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e828:	f82a 6b02 	strh.w	r6, [sl], #2
 801e82c:	e7d6      	b.n	801e7dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e82e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e832:	d429      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e834:	68ae      	ldr	r6, [r5, #8]
 801e836:	454e      	cmp	r6, r9
 801e838:	dd26      	ble.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e83a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e83e:	d423      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e840:	68e9      	ldr	r1, [r5, #12]
 801e842:	4559      	cmp	r1, fp
 801e844:	dd20      	ble.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e846:	fa0f fe86 	sxth.w	lr, r6
 801e84a:	9902      	ldr	r1, [sp, #8]
 801e84c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e850:	f06f 0101 	mvn.w	r1, #1
 801e854:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e858:	fb01 f908 	mul.w	r9, r1, r8
 801e85c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e860:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e864:	eb07 060e 	add.w	r6, r7, lr
 801e868:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e86c:	7876      	ldrb	r6, [r6, #1]
 801e86e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e872:	00f6      	lsls	r6, r6, #3
 801e874:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e878:	ea4b 0606 	orr.w	r6, fp, r6
 801e87c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e880:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e884:	f82a 6009 	strh.w	r6, [sl, r9]
 801e888:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e88a:	4460      	add	r0, ip
 801e88c:	f108 38ff 	add.w	r8, r8, #4294967295
 801e890:	440a      	add	r2, r1
 801e892:	e757      	b.n	801e744 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e894:	b005      	add	sp, #20
 801e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e89a:	bf00      	nop
 801e89c:	fffff800 	.word	0xfffff800

0801e8a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a4:	b087      	sub	sp, #28
 801e8a6:	468b      	mov	fp, r1
 801e8a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e8ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e8ae:	9204      	str	r2, [sp, #16]
 801e8b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e8b4:	6841      	ldr	r1, [r0, #4]
 801e8b6:	9205      	str	r2, [sp, #20]
 801e8b8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e8bc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e8c0:	fb01 2404 	mla	r4, r1, r4, r2
 801e8c4:	6802      	ldr	r2, [r0, #0]
 801e8c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e8ca:	f8dc 2000 	ldr.w	r2, [ip]
 801e8ce:	9201      	str	r2, [sp, #4]
 801e8d0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e8d4:	3204      	adds	r2, #4
 801e8d6:	9202      	str	r2, [sp, #8]
 801e8d8:	f1bb 0f00 	cmp.w	fp, #0
 801e8dc:	dc03      	bgt.n	801e8e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e8de:	9a04      	ldr	r2, [sp, #16]
 801e8e0:	2a00      	cmp	r2, #0
 801e8e2:	f340 8138 	ble.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e8e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e8e8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e8ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e8f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e8f2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e8f6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	dd0e      	ble.n	801e91c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8fe:	1402      	asrs	r2, r0, #16
 801e900:	d405      	bmi.n	801e90e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e902:	42ba      	cmp	r2, r7
 801e904:	da03      	bge.n	801e90e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e906:	140a      	asrs	r2, r1, #16
 801e908:	d401      	bmi.n	801e90e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e90a:	42b2      	cmp	r2, r6
 801e90c:	db07      	blt.n	801e91e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e90e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e910:	3b01      	subs	r3, #1
 801e912:	3402      	adds	r4, #2
 801e914:	4410      	add	r0, r2
 801e916:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e918:	4411      	add	r1, r2
 801e91a:	e7ee      	b.n	801e8fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e91c:	d019      	beq.n	801e952 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e91e:	1e5a      	subs	r2, r3, #1
 801e920:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e922:	fb05 0502 	mla	r5, r5, r2, r0
 801e926:	142d      	asrs	r5, r5, #16
 801e928:	d409      	bmi.n	801e93e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e92a:	42bd      	cmp	r5, r7
 801e92c:	da07      	bge.n	801e93e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e92e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e930:	fb05 1202 	mla	r2, r5, r2, r1
 801e934:	1412      	asrs	r2, r2, #16
 801e936:	d402      	bmi.n	801e93e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e938:	42b2      	cmp	r2, r6
 801e93a:	f2c0 80ac 	blt.w	801ea96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e93e:	f04f 0e00 	mov.w	lr, #0
 801e942:	eb03 020e 	add.w	r2, r3, lr
 801e946:	2a00      	cmp	r2, #0
 801e948:	dc3e      	bgt.n	801e9c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e94a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e94e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e952:	f1bb 0f00 	cmp.w	fp, #0
 801e956:	f340 80fe 	ble.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e95a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e95e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e960:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e964:	f1bb 0b01 	subs.w	fp, fp, #1
 801e968:	eeb0 6a62 	vmov.f32	s12, s5
 801e96c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e970:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e974:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e978:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e97c:	eeb0 6a43 	vmov.f32	s12, s6
 801e980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e984:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e988:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e98c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e990:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e994:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e998:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e99c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9a0:	ee12 2a90 	vmov	r2, s5
 801e9a4:	eef0 2a47 	vmov.f32	s5, s14
 801e9a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9ac:	ee13 2a10 	vmov	r2, s6
 801e9b0:	9313      	str	r3, [sp, #76]	; 0x4c
 801e9b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9b4:	eeb0 3a67 	vmov.f32	s6, s15
 801e9b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9bc:	9a04      	ldr	r2, [sp, #16]
 801e9be:	9314      	str	r3, [sp, #80]	; 0x50
 801e9c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9c2:	bf08      	it	eq
 801e9c4:	4613      	moveq	r3, r2
 801e9c6:	e787      	b.n	801e8d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e9c8:	1406      	asrs	r6, r0, #16
 801e9ca:	d45d      	bmi.n	801ea88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e9cc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801e9d0:	42b5      	cmp	r5, r6
 801e9d2:	dd59      	ble.n	801ea88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e9d4:	140f      	asrs	r7, r1, #16
 801e9d6:	d457      	bmi.n	801ea88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e9d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e9dc:	42ba      	cmp	r2, r7
 801e9de:	dd53      	ble.n	801ea88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e9e0:	9a01      	ldr	r2, [sp, #4]
 801e9e2:	b22d      	sxth	r5, r5
 801e9e4:	fb07 2505 	mla	r5, r7, r5, r2
 801e9e8:	5daa      	ldrb	r2, [r5, r6]
 801e9ea:	9d02      	ldr	r5, [sp, #8]
 801e9ec:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e9f0:	0e2e      	lsrs	r6, r5, #24
 801e9f2:	d049      	beq.n	801ea88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e9f4:	f06f 0201 	mvn.w	r2, #1
 801e9f8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e9fc:	fb02 f20e 	mul.w	r2, r2, lr
 801ea00:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ea04:	9203      	str	r2, [sp, #12]
 801ea06:	9a05      	ldr	r2, [sp, #20]
 801ea08:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ea0c:	4356      	muls	r6, r2
 801ea0e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea12:	1c72      	adds	r2, r6, #1
 801ea14:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ea18:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ea1c:	b2ed      	uxtb	r5, r5
 801ea1e:	1212      	asrs	r2, r2, #8
 801ea20:	fa1f f982 	uxth.w	r9, r2
 801ea24:	43d2      	mvns	r2, r2
 801ea26:	fb16 f609 	smulbb	r6, r6, r9
 801ea2a:	b2d2      	uxtb	r2, r2
 801ea2c:	fb15 f509 	smulbb	r5, r5, r9
 801ea30:	fb07 6702 	mla	r7, r7, r2, r6
 801ea34:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ea38:	fb1a fa09 	smulbb	sl, sl, r9
 801ea3c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ea40:	b2bf      	uxth	r7, r7
 801ea42:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ea46:	fa5f f888 	uxtb.w	r8, r8
 801ea4a:	fb06 a602 	mla	r6, r6, r2, sl
 801ea4e:	fb08 5502 	mla	r5, r8, r2, r5
 801ea52:	1c7a      	adds	r2, r7, #1
 801ea54:	b2b6      	uxth	r6, r6
 801ea56:	b2ad      	uxth	r5, r5
 801ea58:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ea5c:	9a03      	ldr	r2, [sp, #12]
 801ea5e:	f105 0a01 	add.w	sl, r5, #1
 801ea62:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ea66:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ea6a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ea6e:	ea4a 0707 	orr.w	r7, sl, r7
 801ea72:	f106 0a01 	add.w	sl, r6, #1
 801ea76:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ea7a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ea7e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ea82:	ea47 070a 	orr.w	r7, r7, sl
 801ea86:	52a7      	strh	r7, [r4, r2]
 801ea88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea8a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea8e:	4410      	add	r0, r2
 801ea90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea92:	4411      	add	r1, r2
 801ea94:	e755      	b.n	801e942 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ea96:	f04f 0800 	mov.w	r8, #0
 801ea9a:	eba3 0208 	sub.w	r2, r3, r8
 801ea9e:	2a00      	cmp	r2, #0
 801eaa0:	f77f af53 	ble.w	801e94a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801eaa4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801eaa8:	140a      	asrs	r2, r1, #16
 801eaaa:	9f01      	ldr	r7, [sp, #4]
 801eaac:	1405      	asrs	r5, r0, #16
 801eaae:	fb06 7202 	mla	r2, r6, r2, r7
 801eab2:	5d52      	ldrb	r2, [r2, r5]
 801eab4:	9d02      	ldr	r5, [sp, #8]
 801eab6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eaba:	0e2e      	lsrs	r6, r5, #24
 801eabc:	d044      	beq.n	801eb48 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801eabe:	9a05      	ldr	r2, [sp, #20]
 801eac0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eac4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801eac8:	4356      	muls	r6, r2
 801eaca:	ea4f 272e 	mov.w	r7, lr, asr #8
 801eace:	1c72      	adds	r2, r6, #1
 801ead0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ead4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ead8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eadc:	b2ed      	uxtb	r5, r5
 801eade:	1212      	asrs	r2, r2, #8
 801eae0:	fa1f f982 	uxth.w	r9, r2
 801eae4:	43d2      	mvns	r2, r2
 801eae6:	fb16 f609 	smulbb	r6, r6, r9
 801eaea:	b2d2      	uxtb	r2, r2
 801eaec:	fb15 f509 	smulbb	r5, r5, r9
 801eaf0:	fb07 6702 	mla	r7, r7, r2, r6
 801eaf4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801eaf8:	fb1a fa09 	smulbb	sl, sl, r9
 801eafc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eb00:	b2bf      	uxth	r7, r7
 801eb02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eb06:	fa5f fe8e 	uxtb.w	lr, lr
 801eb0a:	fb06 a602 	mla	r6, r6, r2, sl
 801eb0e:	fb0e 5502 	mla	r5, lr, r2, r5
 801eb12:	1c7a      	adds	r2, r7, #1
 801eb14:	b2b6      	uxth	r6, r6
 801eb16:	b2ad      	uxth	r5, r5
 801eb18:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801eb1c:	f105 0a01 	add.w	sl, r5, #1
 801eb20:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eb24:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb28:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb2c:	ea4a 0707 	orr.w	r7, sl, r7
 801eb30:	f106 0a01 	add.w	sl, r6, #1
 801eb34:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eb38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eb40:	ea47 070a 	orr.w	r7, r7, sl
 801eb44:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801eb48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb4a:	f108 0801 	add.w	r8, r8, #1
 801eb4e:	4410      	add	r0, r2
 801eb50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb52:	4411      	add	r1, r2
 801eb54:	e7a1      	b.n	801ea9a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eb56:	b007      	add	sp, #28
 801eb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb60:	b085      	sub	sp, #20
 801eb62:	468b      	mov	fp, r1
 801eb64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb68:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eb6a:	9203      	str	r2, [sp, #12]
 801eb6c:	6841      	ldr	r1, [r0, #4]
 801eb6e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801eb72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eb76:	fb01 2404 	mla	r4, r1, r4, r2
 801eb7a:	6802      	ldr	r2, [r0, #0]
 801eb7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb80:	f8de 2000 	ldr.w	r2, [lr]
 801eb84:	9200      	str	r2, [sp, #0]
 801eb86:	f8de 2004 	ldr.w	r2, [lr, #4]
 801eb8a:	3204      	adds	r2, #4
 801eb8c:	9201      	str	r2, [sp, #4]
 801eb8e:	f1bb 0f00 	cmp.w	fp, #0
 801eb92:	dc03      	bgt.n	801eb9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801eb94:	9a03      	ldr	r2, [sp, #12]
 801eb96:	2a00      	cmp	r2, #0
 801eb98:	f340 8153 	ble.w	801ee42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801eb9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb9e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801eba2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eba6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eba8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ebac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	dd0e      	ble.n	801ebd2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebb4:	1408      	asrs	r0, r1, #16
 801ebb6:	d405      	bmi.n	801ebc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebb8:	42b8      	cmp	r0, r7
 801ebba:	da03      	bge.n	801ebc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebbc:	1410      	asrs	r0, r2, #16
 801ebbe:	d401      	bmi.n	801ebc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebc0:	42b0      	cmp	r0, r6
 801ebc2:	db07      	blt.n	801ebd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ebc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ebc6:	3b01      	subs	r3, #1
 801ebc8:	3402      	adds	r4, #2
 801ebca:	4401      	add	r1, r0
 801ebcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ebce:	4402      	add	r2, r0
 801ebd0:	e7ee      	b.n	801ebb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ebd2:	d017      	beq.n	801ec04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ebd4:	1e58      	subs	r0, r3, #1
 801ebd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ebd8:	fb05 1500 	mla	r5, r5, r0, r1
 801ebdc:	142d      	asrs	r5, r5, #16
 801ebde:	d409      	bmi.n	801ebf4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ebe0:	42bd      	cmp	r5, r7
 801ebe2:	da07      	bge.n	801ebf4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ebe4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ebe6:	fb05 2000 	mla	r0, r5, r0, r2
 801ebea:	1400      	asrs	r0, r0, #16
 801ebec:	d402      	bmi.n	801ebf4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ebee:	42b0      	cmp	r0, r6
 801ebf0:	f2c0 80bc 	blt.w	801ed6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ebf4:	2600      	movs	r6, #0
 801ebf6:	1998      	adds	r0, r3, r6
 801ebf8:	2800      	cmp	r0, #0
 801ebfa:	dc3e      	bgt.n	801ec7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ebfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ec04:	f1bb 0f00 	cmp.w	fp, #0
 801ec08:	f340 811b 	ble.w	801ee42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ec0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec16:	f1bb 0b01 	subs.w	fp, fp, #1
 801ec1a:	eeb0 6a62 	vmov.f32	s12, s5
 801ec1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ec22:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec2a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ec2e:	eeb0 6a43 	vmov.f32	s12, s6
 801ec32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec36:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ec3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec52:	ee12 2a90 	vmov	r2, s5
 801ec56:	eef0 2a47 	vmov.f32	s5, s14
 801ec5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec5e:	ee13 2a10 	vmov	r2, s6
 801ec62:	9311      	str	r3, [sp, #68]	; 0x44
 801ec64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec66:	eeb0 3a67 	vmov.f32	s6, s15
 801ec6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec6e:	9a03      	ldr	r2, [sp, #12]
 801ec70:	9312      	str	r3, [sp, #72]	; 0x48
 801ec72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec74:	bf08      	it	eq
 801ec76:	4613      	moveq	r3, r2
 801ec78:	e789      	b.n	801eb8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ec7a:	140f      	asrs	r7, r1, #16
 801ec7c:	d426      	bmi.n	801eccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ec7e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ec82:	42bd      	cmp	r5, r7
 801ec84:	dd22      	ble.n	801eccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ec86:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ec8a:	d41f      	bmi.n	801eccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ec8c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ec90:	4560      	cmp	r0, ip
 801ec92:	dd1b      	ble.n	801eccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ec94:	9800      	ldr	r0, [sp, #0]
 801ec96:	b22d      	sxth	r5, r5
 801ec98:	fb0c 0505 	mla	r5, ip, r5, r0
 801ec9c:	5de8      	ldrb	r0, [r5, r7]
 801ec9e:	9d01      	ldr	r5, [sp, #4]
 801eca0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801eca4:	0e07      	lsrs	r7, r0, #24
 801eca6:	2fff      	cmp	r7, #255	; 0xff
 801eca8:	d116      	bne.n	801ecd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ecaa:	f06f 0501 	mvn.w	r5, #1
 801ecae:	fb05 f706 	mul.w	r7, r5, r6
 801ecb2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ecb6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ecba:	0945      	lsrs	r5, r0, #5
 801ecbc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ecc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ecc4:	ea4c 0505 	orr.w	r5, ip, r5
 801ecc8:	4305      	orrs	r5, r0
 801ecca:	53e5      	strh	r5, [r4, r7]
 801eccc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ecce:	3e01      	subs	r6, #1
 801ecd0:	4401      	add	r1, r0
 801ecd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecd4:	4402      	add	r2, r0
 801ecd6:	e78e      	b.n	801ebf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ecd8:	b2fd      	uxtb	r5, r7
 801ecda:	2f00      	cmp	r7, #0
 801ecdc:	d0f6      	beq.n	801eccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ecde:	f06f 0701 	mvn.w	r7, #1
 801ece2:	fa1f f985 	uxth.w	r9, r5
 801ece6:	43ed      	mvns	r5, r5
 801ece8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ecec:	4377      	muls	r7, r6
 801ecee:	fb1a fa09 	smulbb	sl, sl, r9
 801ecf2:	b2ed      	uxtb	r5, r5
 801ecf4:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ecf8:	9702      	str	r7, [sp, #8]
 801ecfa:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ecfe:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ed02:	fb17 f709 	smulbb	r7, r7, r9
 801ed06:	b2c0      	uxtb	r0, r0
 801ed08:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ed0c:	fb10 f009 	smulbb	r0, r0, r9
 801ed10:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ed14:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ed18:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ed1c:	fa1f fc8c 	uxth.w	ip, ip
 801ed20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ed24:	fa5f f888 	uxtb.w	r8, r8
 801ed28:	fb07 a705 	mla	r7, r7, r5, sl
 801ed2c:	fb08 0005 	mla	r0, r8, r5, r0
 801ed30:	f10c 0501 	add.w	r5, ip, #1
 801ed34:	b2bf      	uxth	r7, r7
 801ed36:	b280      	uxth	r0, r0
 801ed38:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ed3c:	f100 0a01 	add.w	sl, r0, #1
 801ed40:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ed44:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ed48:	9802      	ldr	r0, [sp, #8]
 801ed4a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ed4e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ed52:	f107 0a01 	add.w	sl, r7, #1
 801ed56:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ed5a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ed5e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ed62:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ed66:	f824 c000 	strh.w	ip, [r4, r0]
 801ed6a:	e7af      	b.n	801eccc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed6c:	f04f 0800 	mov.w	r8, #0
 801ed70:	eba3 0008 	sub.w	r0, r3, r8
 801ed74:	2800      	cmp	r0, #0
 801ed76:	f77f af41 	ble.w	801ebfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ed7a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ed7e:	1410      	asrs	r0, r2, #16
 801ed80:	9f00      	ldr	r7, [sp, #0]
 801ed82:	140d      	asrs	r5, r1, #16
 801ed84:	fb06 7000 	mla	r0, r6, r0, r7
 801ed88:	5d40      	ldrb	r0, [r0, r5]
 801ed8a:	9d01      	ldr	r5, [sp, #4]
 801ed8c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ed90:	0e2e      	lsrs	r6, r5, #24
 801ed92:	2eff      	cmp	r6, #255	; 0xff
 801ed94:	d112      	bne.n	801edbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ed96:	482c      	ldr	r0, [pc, #176]	; (801ee48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ed98:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ed9c:	0968      	lsrs	r0, r5, #5
 801ed9e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801eda2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801eda6:	4330      	orrs	r0, r6
 801eda8:	4328      	orrs	r0, r5
 801edaa:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801edae:	9811      	ldr	r0, [sp, #68]	; 0x44
 801edb0:	f108 0801 	add.w	r8, r8, #1
 801edb4:	4401      	add	r1, r0
 801edb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801edb8:	4402      	add	r2, r0
 801edba:	e7d9      	b.n	801ed70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801edbc:	b2f0      	uxtb	r0, r6
 801edbe:	2e00      	cmp	r6, #0
 801edc0:	d0f5      	beq.n	801edae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801edc2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801edc6:	fa1f f980 	uxth.w	r9, r0
 801edca:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801edce:	43c0      	mvns	r0, r0
 801edd0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801edd4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801edd8:	fb16 f609 	smulbb	r6, r6, r9
 801eddc:	b2c0      	uxtb	r0, r0
 801edde:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ede2:	b2ed      	uxtb	r5, r5
 801ede4:	fb1a fa09 	smulbb	sl, sl, r9
 801ede8:	fb07 6700 	mla	r7, r7, r0, r6
 801edec:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801edf0:	fb15 f509 	smulbb	r5, r5, r9
 801edf4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801edf8:	b2bf      	uxth	r7, r7
 801edfa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801edfe:	fa5f fc8c 	uxtb.w	ip, ip
 801ee02:	fb06 a600 	mla	r6, r6, r0, sl
 801ee06:	fb0c 5500 	mla	r5, ip, r0, r5
 801ee0a:	1c78      	adds	r0, r7, #1
 801ee0c:	b2b6      	uxth	r6, r6
 801ee0e:	b2ad      	uxth	r5, r5
 801ee10:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ee14:	f105 0a01 	add.w	sl, r5, #1
 801ee18:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ee1c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ee20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ee24:	ea4a 0707 	orr.w	r7, sl, r7
 801ee28:	f106 0a01 	add.w	sl, r6, #1
 801ee2c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ee30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ee34:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ee38:	ea47 070a 	orr.w	r7, r7, sl
 801ee3c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ee40:	e7b5      	b.n	801edae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ee42:	b005      	add	sp, #20
 801ee44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee48:	fffff800 	.word	0xfffff800

0801ee4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee50:	b087      	sub	sp, #28
 801ee52:	468b      	mov	fp, r1
 801ee54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee58:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee5a:	9204      	str	r2, [sp, #16]
 801ee5c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ee60:	6861      	ldr	r1, [r4, #4]
 801ee62:	9205      	str	r2, [sp, #20]
 801ee64:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ee68:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ee6c:	fb01 2000 	mla	r0, r1, r0, r2
 801ee70:	6822      	ldr	r2, [r4, #0]
 801ee72:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ee76:	f8de 2000 	ldr.w	r2, [lr]
 801ee7a:	9201      	str	r2, [sp, #4]
 801ee7c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ee80:	9202      	str	r2, [sp, #8]
 801ee82:	f1bb 0f00 	cmp.w	fp, #0
 801ee86:	dc03      	bgt.n	801ee90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ee88:	9a04      	ldr	r2, [sp, #16]
 801ee8a:	2a00      	cmp	r2, #0
 801ee8c:	f340 8142 	ble.w	801f114 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ee90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee92:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ee96:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ee9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee9c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801eea0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	dd0e      	ble.n	801eec6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eea8:	140c      	asrs	r4, r1, #16
 801eeaa:	d405      	bmi.n	801eeb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eeac:	42bc      	cmp	r4, r7
 801eeae:	da03      	bge.n	801eeb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eeb0:	1414      	asrs	r4, r2, #16
 801eeb2:	d401      	bmi.n	801eeb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eeb4:	42b4      	cmp	r4, r6
 801eeb6:	db07      	blt.n	801eec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eeb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eeba:	3b01      	subs	r3, #1
 801eebc:	3002      	adds	r0, #2
 801eebe:	4421      	add	r1, r4
 801eec0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eec2:	4422      	add	r2, r4
 801eec4:	e7ee      	b.n	801eea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801eec6:	d019      	beq.n	801eefc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801eec8:	1e5c      	subs	r4, r3, #1
 801eeca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eecc:	fb05 1504 	mla	r5, r5, r4, r1
 801eed0:	142d      	asrs	r5, r5, #16
 801eed2:	d409      	bmi.n	801eee8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801eed4:	42bd      	cmp	r5, r7
 801eed6:	da07      	bge.n	801eee8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801eed8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eeda:	fb05 2404 	mla	r4, r5, r4, r2
 801eede:	1424      	asrs	r4, r4, #16
 801eee0:	d402      	bmi.n	801eee8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801eee2:	42b4      	cmp	r4, r6
 801eee4:	f2c0 80b1 	blt.w	801f04a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801eee8:	f04f 0800 	mov.w	r8, #0
 801eeec:	eb03 0408 	add.w	r4, r3, r8
 801eef0:	2c00      	cmp	r4, #0
 801eef2:	dc3e      	bgt.n	801ef72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801eef4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eef8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eefc:	f1bb 0f00 	cmp.w	fp, #0
 801ef00:	f340 8108 	ble.w	801f114 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ef04:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef0e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ef12:	eeb0 6a62 	vmov.f32	s12, s5
 801ef16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef22:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ef26:	eeb0 6a43 	vmov.f32	s12, s6
 801ef2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef2e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ef32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef4a:	ee12 2a90 	vmov	r2, s5
 801ef4e:	eef0 2a47 	vmov.f32	s5, s14
 801ef52:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef56:	ee13 2a10 	vmov	r2, s6
 801ef5a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef5e:	eeb0 3a67 	vmov.f32	s6, s15
 801ef62:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef66:	9a04      	ldr	r2, [sp, #16]
 801ef68:	9314      	str	r3, [sp, #80]	; 0x50
 801ef6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef6c:	bf08      	it	eq
 801ef6e:	4613      	moveq	r3, r2
 801ef70:	e787      	b.n	801ee82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ef72:	140e      	asrs	r6, r1, #16
 801ef74:	d462      	bmi.n	801f03c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef76:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ef7a:	42b5      	cmp	r5, r6
 801ef7c:	dd5e      	ble.n	801f03c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef7e:	1417      	asrs	r7, r2, #16
 801ef80:	d45c      	bmi.n	801f03c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef82:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ef86:	42bc      	cmp	r4, r7
 801ef88:	dd58      	ble.n	801f03c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef8a:	b22d      	sxth	r5, r5
 801ef8c:	9c02      	ldr	r4, [sp, #8]
 801ef8e:	fb07 6505 	mla	r5, r7, r5, r6
 801ef92:	5d66      	ldrb	r6, [r4, r5]
 801ef94:	2e00      	cmp	r6, #0
 801ef96:	d051      	beq.n	801f03c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef98:	9c01      	ldr	r4, [sp, #4]
 801ef9a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801ef9e:	f06f 0401 	mvn.w	r4, #1
 801efa2:	fb04 f408 	mul.w	r4, r4, r8
 801efa6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801efaa:	5b05      	ldrh	r5, [r0, r4]
 801efac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801efb0:	9403      	str	r4, [sp, #12]
 801efb2:	9c05      	ldr	r4, [sp, #20]
 801efb4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801efb8:	4366      	muls	r6, r4
 801efba:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801efbe:	1c74      	adds	r4, r6, #1
 801efc0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801efc4:	122e      	asrs	r6, r5, #8
 801efc6:	1224      	asrs	r4, r4, #8
 801efc8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801efcc:	00ed      	lsls	r5, r5, #3
 801efce:	b2a7      	uxth	r7, r4
 801efd0:	43e4      	mvns	r4, r4
 801efd2:	b2ed      	uxtb	r5, r5
 801efd4:	b2e4      	uxtb	r4, r4
 801efd6:	fb16 f604 	smulbb	r6, r6, r4
 801efda:	fb15 f504 	smulbb	r5, r5, r4
 801efde:	fb0c 6c07 	mla	ip, ip, r7, r6
 801efe2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801efe6:	fb1a fa04 	smulbb	sl, sl, r4
 801efea:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801efee:	fa1f fc8c 	uxth.w	ip, ip
 801eff2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eff6:	fa5f f989 	uxtb.w	r9, r9
 801effa:	fb06 a607 	mla	r6, r6, r7, sl
 801effe:	f10c 0401 	add.w	r4, ip, #1
 801f002:	fb09 5507 	mla	r5, r9, r7, r5
 801f006:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f00a:	9c03      	ldr	r4, [sp, #12]
 801f00c:	b2ad      	uxth	r5, r5
 801f00e:	b2b6      	uxth	r6, r6
 801f010:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f014:	f105 0a01 	add.w	sl, r5, #1
 801f018:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f01c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f020:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f024:	f106 0a01 	add.w	sl, r6, #1
 801f028:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f02c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f030:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f034:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f038:	f820 c004 	strh.w	ip, [r0, r4]
 801f03c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f03e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f042:	4421      	add	r1, r4
 801f044:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f046:	4422      	add	r2, r4
 801f048:	e750      	b.n	801eeec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f04a:	f04f 0900 	mov.w	r9, #0
 801f04e:	eba3 0409 	sub.w	r4, r3, r9
 801f052:	2c00      	cmp	r4, #0
 801f054:	f77f af4e 	ble.w	801eef4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f058:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f05c:	140d      	asrs	r5, r1, #16
 801f05e:	1414      	asrs	r4, r2, #16
 801f060:	fb06 5404 	mla	r4, r6, r4, r5
 801f064:	9d02      	ldr	r5, [sp, #8]
 801f066:	5d2e      	ldrb	r6, [r5, r4]
 801f068:	2e00      	cmp	r6, #0
 801f06a:	d04c      	beq.n	801f106 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f06c:	9d01      	ldr	r5, [sp, #4]
 801f06e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f072:	9c05      	ldr	r4, [sp, #20]
 801f074:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f078:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f07c:	4366      	muls	r6, r4
 801f07e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f082:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f086:	1c74      	adds	r4, r6, #1
 801f088:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f08c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f090:	122e      	asrs	r6, r5, #8
 801f092:	1224      	asrs	r4, r4, #8
 801f094:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f098:	00ed      	lsls	r5, r5, #3
 801f09a:	b2a7      	uxth	r7, r4
 801f09c:	43e4      	mvns	r4, r4
 801f09e:	b2ed      	uxtb	r5, r5
 801f0a0:	b2e4      	uxtb	r4, r4
 801f0a2:	fb16 f604 	smulbb	r6, r6, r4
 801f0a6:	fb15 f504 	smulbb	r5, r5, r4
 801f0aa:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f0ae:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f0b2:	fb1a fa04 	smulbb	sl, sl, r4
 801f0b6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f0ba:	fa1f fc8c 	uxth.w	ip, ip
 801f0be:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f0c2:	fa5f f888 	uxtb.w	r8, r8
 801f0c6:	fb06 a607 	mla	r6, r6, r7, sl
 801f0ca:	f10c 0401 	add.w	r4, ip, #1
 801f0ce:	fb08 5507 	mla	r5, r8, r7, r5
 801f0d2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f0d6:	b2ad      	uxth	r5, r5
 801f0d8:	b2b6      	uxth	r6, r6
 801f0da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f0de:	f105 0a01 	add.w	sl, r5, #1
 801f0e2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f0e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f0ea:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f0ee:	f106 0a01 	add.w	sl, r6, #1
 801f0f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f0f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f0fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f0fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f102:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f106:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f108:	f109 0901 	add.w	r9, r9, #1
 801f10c:	4421      	add	r1, r4
 801f10e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f110:	4422      	add	r2, r4
 801f112:	e79c      	b.n	801f04e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f114:	b007      	add	sp, #28
 801f116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f11a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f11a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f11e:	b085      	sub	sp, #20
 801f120:	468b      	mov	fp, r1
 801f122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f126:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f128:	9203      	str	r2, [sp, #12]
 801f12a:	6861      	ldr	r1, [r4, #4]
 801f12c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f130:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f134:	fb01 2000 	mla	r0, r1, r0, r2
 801f138:	6822      	ldr	r2, [r4, #0]
 801f13a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f13e:	f8d8 2000 	ldr.w	r2, [r8]
 801f142:	9200      	str	r2, [sp, #0]
 801f144:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f148:	9201      	str	r2, [sp, #4]
 801f14a:	f1bb 0f00 	cmp.w	fp, #0
 801f14e:	dc03      	bgt.n	801f158 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f150:	9a03      	ldr	r2, [sp, #12]
 801f152:	2a00      	cmp	r2, #0
 801f154:	f340 8146 	ble.w	801f3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f15a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f15e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f164:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f168:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	dd0e      	ble.n	801f18e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f170:	140c      	asrs	r4, r1, #16
 801f172:	d405      	bmi.n	801f180 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f174:	42bc      	cmp	r4, r7
 801f176:	da03      	bge.n	801f180 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f178:	1414      	asrs	r4, r2, #16
 801f17a:	d401      	bmi.n	801f180 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f17c:	42b4      	cmp	r4, r6
 801f17e:	db07      	blt.n	801f190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f180:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f182:	3b01      	subs	r3, #1
 801f184:	3002      	adds	r0, #2
 801f186:	4421      	add	r1, r4
 801f188:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f18a:	4422      	add	r2, r4
 801f18c:	e7ee      	b.n	801f16c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f18e:	d017      	beq.n	801f1c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f190:	1e5c      	subs	r4, r3, #1
 801f192:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f194:	fb05 1504 	mla	r5, r5, r4, r1
 801f198:	142d      	asrs	r5, r5, #16
 801f19a:	d409      	bmi.n	801f1b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f19c:	42bd      	cmp	r5, r7
 801f19e:	da07      	bge.n	801f1b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f1a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f1a2:	fb05 2404 	mla	r4, r5, r4, r2
 801f1a6:	1424      	asrs	r4, r4, #16
 801f1a8:	d402      	bmi.n	801f1b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f1aa:	42b4      	cmp	r4, r6
 801f1ac:	f2c0 80b3 	blt.w	801f316 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f1b0:	2600      	movs	r6, #0
 801f1b2:	199c      	adds	r4, r3, r6
 801f1b4:	2c00      	cmp	r4, #0
 801f1b6:	dc3e      	bgt.n	801f236 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f1b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f1c0:	f1bb 0f00 	cmp.w	fp, #0
 801f1c4:	f340 810e 	ble.w	801f3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f1c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1d2:	f1bb 0b01 	subs.w	fp, fp, #1
 801f1d6:	eeb0 6a62 	vmov.f32	s12, s5
 801f1da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f1de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f1ea:	eeb0 6a43 	vmov.f32	s12, s6
 801f1ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f1f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f202:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f206:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f20a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f20e:	ee12 2a90 	vmov	r2, s5
 801f212:	eef0 2a47 	vmov.f32	s5, s14
 801f216:	fb92 f3f3 	sdiv	r3, r2, r3
 801f21a:	ee13 2a10 	vmov	r2, s6
 801f21e:	9311      	str	r3, [sp, #68]	; 0x44
 801f220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f222:	eeb0 3a67 	vmov.f32	s6, s15
 801f226:	fb92 f3f3 	sdiv	r3, r2, r3
 801f22a:	9a03      	ldr	r2, [sp, #12]
 801f22c:	9312      	str	r3, [sp, #72]	; 0x48
 801f22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f230:	bf08      	it	eq
 801f232:	4613      	moveq	r3, r2
 801f234:	e789      	b.n	801f14a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f236:	140f      	asrs	r7, r1, #16
 801f238:	d418      	bmi.n	801f26c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f23a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f23e:	42bd      	cmp	r5, r7
 801f240:	dd14      	ble.n	801f26c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f242:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f246:	d411      	bmi.n	801f26c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f248:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f24c:	4564      	cmp	r4, ip
 801f24e:	dd0d      	ble.n	801f26c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f250:	b22d      	sxth	r5, r5
 801f252:	9c01      	ldr	r4, [sp, #4]
 801f254:	fb0c 7505 	mla	r5, ip, r5, r7
 801f258:	5d64      	ldrb	r4, [r4, r5]
 801f25a:	2cff      	cmp	r4, #255	; 0xff
 801f25c:	d10c      	bne.n	801f278 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f25e:	9c00      	ldr	r4, [sp, #0]
 801f260:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f264:	f06f 0401 	mvn.w	r4, #1
 801f268:	4374      	muls	r4, r6
 801f26a:	5305      	strh	r5, [r0, r4]
 801f26c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f26e:	3e01      	subs	r6, #1
 801f270:	4421      	add	r1, r4
 801f272:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f274:	4422      	add	r2, r4
 801f276:	e79c      	b.n	801f1b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f278:	2c00      	cmp	r4, #0
 801f27a:	d0f7      	beq.n	801f26c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f27c:	9f00      	ldr	r7, [sp, #0]
 801f27e:	fa1f fc84 	uxth.w	ip, r4
 801f282:	43e4      	mvns	r4, r4
 801f284:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f288:	f06f 0501 	mvn.w	r5, #1
 801f28c:	b2e4      	uxtb	r4, r4
 801f28e:	4375      	muls	r5, r6
 801f290:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f294:	9502      	str	r5, [sp, #8]
 801f296:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f29a:	5b45      	ldrh	r5, [r0, r5]
 801f29c:	122f      	asrs	r7, r5, #8
 801f29e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f2a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f2a6:	00ed      	lsls	r5, r5, #3
 801f2a8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f2ac:	fb17 f704 	smulbb	r7, r7, r4
 801f2b0:	b2ed      	uxtb	r5, r5
 801f2b2:	fb1a fa04 	smulbb	sl, sl, r4
 801f2b6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f2ba:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f2be:	fb15 f504 	smulbb	r5, r5, r4
 801f2c2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f2c6:	fa1f fe8e 	uxth.w	lr, lr
 801f2ca:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f2ce:	fa5f f989 	uxtb.w	r9, r9
 801f2d2:	fb07 a70c 	mla	r7, r7, ip, sl
 801f2d6:	f10e 0401 	add.w	r4, lr, #1
 801f2da:	fb09 550c 	mla	r5, r9, ip, r5
 801f2de:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f2e2:	9c02      	ldr	r4, [sp, #8]
 801f2e4:	b2ad      	uxth	r5, r5
 801f2e6:	b2bf      	uxth	r7, r7
 801f2e8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f2ec:	f105 0a01 	add.w	sl, r5, #1
 801f2f0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f2f4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f2f8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f2fc:	f107 0a01 	add.w	sl, r7, #1
 801f300:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f304:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f308:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f30c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f310:	f820 e004 	strh.w	lr, [r0, r4]
 801f314:	e7aa      	b.n	801f26c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f316:	f04f 0900 	mov.w	r9, #0
 801f31a:	eba3 0409 	sub.w	r4, r3, r9
 801f31e:	2c00      	cmp	r4, #0
 801f320:	f77f af4a 	ble.w	801f1b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f324:	1414      	asrs	r4, r2, #16
 801f326:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f32a:	140d      	asrs	r5, r1, #16
 801f32c:	fb06 5504 	mla	r5, r6, r4, r5
 801f330:	9c01      	ldr	r4, [sp, #4]
 801f332:	5d64      	ldrb	r4, [r4, r5]
 801f334:	2cff      	cmp	r4, #255	; 0xff
 801f336:	d10b      	bne.n	801f350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f338:	9c00      	ldr	r4, [sp, #0]
 801f33a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f33e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f342:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f344:	f109 0901 	add.w	r9, r9, #1
 801f348:	4421      	add	r1, r4
 801f34a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f34c:	4422      	add	r2, r4
 801f34e:	e7e4      	b.n	801f31a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f350:	2c00      	cmp	r4, #0
 801f352:	d0f6      	beq.n	801f342 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f354:	9e00      	ldr	r6, [sp, #0]
 801f356:	b2a7      	uxth	r7, r4
 801f358:	43e4      	mvns	r4, r4
 801f35a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f35e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f362:	b2e4      	uxtb	r4, r4
 801f364:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f368:	122e      	asrs	r6, r5, #8
 801f36a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f36e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f372:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f376:	00ed      	lsls	r5, r5, #3
 801f378:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f37c:	fb16 f604 	smulbb	r6, r6, r4
 801f380:	b2ed      	uxtb	r5, r5
 801f382:	fb1a fa04 	smulbb	sl, sl, r4
 801f386:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f38a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f38e:	fb15 f504 	smulbb	r5, r5, r4
 801f392:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f396:	fa1f fc8c 	uxth.w	ip, ip
 801f39a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f39e:	fa5f fe8e 	uxtb.w	lr, lr
 801f3a2:	fb06 a607 	mla	r6, r6, r7, sl
 801f3a6:	f10c 0401 	add.w	r4, ip, #1
 801f3aa:	fb0e 5507 	mla	r5, lr, r7, r5
 801f3ae:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f3b2:	b2ad      	uxth	r5, r5
 801f3b4:	b2b6      	uxth	r6, r6
 801f3b6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f3ba:	f105 0a01 	add.w	sl, r5, #1
 801f3be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f3c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f3c6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f3ca:	f106 0a01 	add.w	sl, r6, #1
 801f3ce:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f3d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f3d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f3da:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f3de:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f3e2:	e7ae      	b.n	801f342 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f3e4:	b005      	add	sp, #20
 801f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ee:	b085      	sub	sp, #20
 801f3f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f3f2:	9203      	str	r2, [sp, #12]
 801f3f4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f3f8:	9100      	str	r1, [sp, #0]
 801f3fa:	9201      	str	r2, [sp, #4]
 801f3fc:	6841      	ldr	r1, [r0, #4]
 801f3fe:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f402:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f406:	fb01 2404 	mla	r4, r1, r4, r2
 801f40a:	6802      	ldr	r2, [r0, #0]
 801f40c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f410:	f8de 2000 	ldr.w	r2, [lr]
 801f414:	9202      	str	r2, [sp, #8]
 801f416:	9a01      	ldr	r2, [sp, #4]
 801f418:	43d6      	mvns	r6, r2
 801f41a:	b2f6      	uxtb	r6, r6
 801f41c:	9a00      	ldr	r2, [sp, #0]
 801f41e:	2a00      	cmp	r2, #0
 801f420:	dc03      	bgt.n	801f42a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f422:	9a03      	ldr	r2, [sp, #12]
 801f424:	2a00      	cmp	r2, #0
 801f426:	f340 8124 	ble.w	801f672 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f42a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f42c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f430:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f436:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f43a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f43e:	2b00      	cmp	r3, #0
 801f440:	dd0e      	ble.n	801f460 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f442:	1408      	asrs	r0, r1, #16
 801f444:	d405      	bmi.n	801f452 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f446:	4560      	cmp	r0, ip
 801f448:	da03      	bge.n	801f452 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f44a:	1410      	asrs	r0, r2, #16
 801f44c:	d401      	bmi.n	801f452 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f44e:	42b8      	cmp	r0, r7
 801f450:	db07      	blt.n	801f462 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f452:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f454:	3b01      	subs	r3, #1
 801f456:	3402      	adds	r4, #2
 801f458:	4401      	add	r1, r0
 801f45a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f45c:	4402      	add	r2, r0
 801f45e:	e7ee      	b.n	801f43e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f460:	d06e      	beq.n	801f540 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f462:	1e58      	subs	r0, r3, #1
 801f464:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f466:	fb05 1500 	mla	r5, r5, r0, r1
 801f46a:	142d      	asrs	r5, r5, #16
 801f46c:	d45c      	bmi.n	801f528 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f46e:	4565      	cmp	r5, ip
 801f470:	da5a      	bge.n	801f528 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f472:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f474:	fb05 2000 	mla	r0, r5, r0, r2
 801f478:	1400      	asrs	r0, r0, #16
 801f47a:	d455      	bmi.n	801f528 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f47c:	42b8      	cmp	r0, r7
 801f47e:	da53      	bge.n	801f528 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f480:	4699      	mov	r9, r3
 801f482:	46a2      	mov	sl, r4
 801f484:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f488:	f1b9 0f00 	cmp.w	r9, #0
 801f48c:	dd54      	ble.n	801f538 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f48e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f492:	140d      	asrs	r5, r1, #16
 801f494:	1410      	asrs	r0, r2, #16
 801f496:	f109 39ff 	add.w	r9, r9, #4294967295
 801f49a:	fb07 5000 	mla	r0, r7, r0, r5
 801f49e:	9d02      	ldr	r5, [sp, #8]
 801f4a0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f4a4:	f8ba 5000 	ldrh.w	r5, [sl]
 801f4a8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f4ac:	122f      	asrs	r7, r5, #8
 801f4ae:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f4b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f4b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f4ba:	00ed      	lsls	r5, r5, #3
 801f4bc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f4c0:	fb17 f706 	smulbb	r7, r7, r6
 801f4c4:	b2ed      	uxtb	r5, r5
 801f4c6:	fb18 f806 	smulbb	r8, r8, r6
 801f4ca:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f4ce:	10c7      	asrs	r7, r0, #3
 801f4d0:	fb15 f506 	smulbb	r5, r5, r6
 801f4d4:	00c0      	lsls	r0, r0, #3
 801f4d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f4da:	fa1f fc8c 	uxth.w	ip, ip
 801f4de:	b2c0      	uxtb	r0, r0
 801f4e0:	fb07 870b 	mla	r7, r7, fp, r8
 801f4e4:	fb00 500b 	mla	r0, r0, fp, r5
 801f4e8:	f10c 0501 	add.w	r5, ip, #1
 801f4ec:	b2bf      	uxth	r7, r7
 801f4ee:	b280      	uxth	r0, r0
 801f4f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f4f4:	f107 0801 	add.w	r8, r7, #1
 801f4f8:	1c45      	adds	r5, r0, #1
 801f4fa:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f4fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f502:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f506:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f508:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f50c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f510:	4401      	add	r1, r0
 801f512:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f516:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f518:	ea45 0c0c 	orr.w	ip, r5, ip
 801f51c:	4402      	add	r2, r0
 801f51e:	ea4c 0c08 	orr.w	ip, ip, r8
 801f522:	f82a cb02 	strh.w	ip, [sl], #2
 801f526:	e7af      	b.n	801f488 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f528:	f04f 0800 	mov.w	r8, #0
 801f52c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f530:	eb03 0008 	add.w	r0, r3, r8
 801f534:	2800      	cmp	r0, #0
 801f536:	dc41      	bgt.n	801f5bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f53c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f540:	9b00      	ldr	r3, [sp, #0]
 801f542:	2b00      	cmp	r3, #0
 801f544:	f340 8095 	ble.w	801f672 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f54e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f552:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f556:	eef0 6a62 	vmov.f32	s13, s5
 801f55a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f55e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f566:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f56a:	eef0 6a43 	vmov.f32	s13, s6
 801f56e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f572:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f57a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f57e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f582:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f58a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f58e:	ee12 2a90 	vmov	r2, s5
 801f592:	eef0 2a47 	vmov.f32	s5, s14
 801f596:	fb92 f3f3 	sdiv	r3, r2, r3
 801f59a:	ee13 2a10 	vmov	r2, s6
 801f59e:	9311      	str	r3, [sp, #68]	; 0x44
 801f5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5a2:	eeb0 3a67 	vmov.f32	s6, s15
 801f5a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5aa:	9312      	str	r3, [sp, #72]	; 0x48
 801f5ac:	9b00      	ldr	r3, [sp, #0]
 801f5ae:	9a03      	ldr	r2, [sp, #12]
 801f5b0:	3b01      	subs	r3, #1
 801f5b2:	9300      	str	r3, [sp, #0]
 801f5b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5b6:	bf08      	it	eq
 801f5b8:	4613      	moveq	r3, r2
 801f5ba:	e72f      	b.n	801f41c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f5bc:	140f      	asrs	r7, r1, #16
 801f5be:	d451      	bmi.n	801f664 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f5c0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f5c4:	42bd      	cmp	r5, r7
 801f5c6:	dd4d      	ble.n	801f664 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f5c8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f5cc:	d44a      	bmi.n	801f664 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f5ce:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f5d2:	4560      	cmp	r0, ip
 801f5d4:	dd46      	ble.n	801f664 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f5d6:	b22d      	sxth	r5, r5
 801f5d8:	9802      	ldr	r0, [sp, #8]
 801f5da:	fb0c 7505 	mla	r5, ip, r5, r7
 801f5de:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f5e2:	f06f 0501 	mvn.w	r5, #1
 801f5e6:	fb05 fb08 	mul.w	fp, r5, r8
 801f5ea:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f5ee:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f5f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f5f6:	122f      	asrs	r7, r5, #8
 801f5f8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f5fc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f600:	00ed      	lsls	r5, r5, #3
 801f602:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f606:	fb17 f706 	smulbb	r7, r7, r6
 801f60a:	b2ed      	uxtb	r5, r5
 801f60c:	fb19 f906 	smulbb	r9, r9, r6
 801f610:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f614:	10c7      	asrs	r7, r0, #3
 801f616:	fb15 f506 	smulbb	r5, r5, r6
 801f61a:	00c0      	lsls	r0, r0, #3
 801f61c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f620:	fa1f fc8c 	uxth.w	ip, ip
 801f624:	b2c0      	uxtb	r0, r0
 801f626:	fb07 970a 	mla	r7, r7, sl, r9
 801f62a:	fb00 500a 	mla	r0, r0, sl, r5
 801f62e:	f10c 0501 	add.w	r5, ip, #1
 801f632:	b2bf      	uxth	r7, r7
 801f634:	b280      	uxth	r0, r0
 801f636:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f63a:	f107 0901 	add.w	r9, r7, #1
 801f63e:	1c45      	adds	r5, r0, #1
 801f640:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f644:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f648:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f64c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f650:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f654:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f658:	ea45 0c0c 	orr.w	ip, r5, ip
 801f65c:	ea4c 0c09 	orr.w	ip, ip, r9
 801f660:	f824 c00b 	strh.w	ip, [r4, fp]
 801f664:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f666:	f108 38ff 	add.w	r8, r8, #4294967295
 801f66a:	4401      	add	r1, r0
 801f66c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f66e:	4402      	add	r2, r0
 801f670:	e75e      	b.n	801f530 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f672:	b005      	add	sp, #20
 801f674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f678 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f67c:	b085      	sub	sp, #20
 801f67e:	4693      	mov	fp, r2
 801f680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f684:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f686:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f688:	6870      	ldr	r0, [r6, #4]
 801f68a:	9101      	str	r1, [sp, #4]
 801f68c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f690:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f694:	fb00 2404 	mla	r4, r0, r4, r2
 801f698:	6832      	ldr	r2, [r6, #0]
 801f69a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f69e:	682a      	ldr	r2, [r5, #0]
 801f6a0:	9202      	str	r2, [sp, #8]
 801f6a2:	9a01      	ldr	r2, [sp, #4]
 801f6a4:	2a00      	cmp	r2, #0
 801f6a6:	dc03      	bgt.n	801f6b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f6a8:	f1bb 0f00 	cmp.w	fp, #0
 801f6ac:	f340 809a 	ble.w	801f7e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f6b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f6ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f6bc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f6c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	dd0c      	ble.n	801f6e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f6c8:	1406      	asrs	r6, r0, #16
 801f6ca:	d405      	bmi.n	801f6d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f6cc:	454e      	cmp	r6, r9
 801f6ce:	da03      	bge.n	801f6d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f6d0:	1416      	asrs	r6, r2, #16
 801f6d2:	d401      	bmi.n	801f6d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f6d4:	4546      	cmp	r6, r8
 801f6d6:	db05      	blt.n	801f6e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f6d8:	4470      	add	r0, lr
 801f6da:	4462      	add	r2, ip
 801f6dc:	3b01      	subs	r3, #1
 801f6de:	3402      	adds	r4, #2
 801f6e0:	e7f0      	b.n	801f6c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f6e2:	d00f      	beq.n	801f704 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f6e4:	1e5e      	subs	r6, r3, #1
 801f6e6:	fb0e 0706 	mla	r7, lr, r6, r0
 801f6ea:	143f      	asrs	r7, r7, #16
 801f6ec:	d541      	bpl.n	801f772 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f6ee:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f6f2:	4698      	mov	r8, r3
 801f6f4:	9603      	str	r6, [sp, #12]
 801f6f6:	f1b8 0f00 	cmp.w	r8, #0
 801f6fa:	dc56      	bgt.n	801f7aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f6fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f700:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f704:	9b01      	ldr	r3, [sp, #4]
 801f706:	2b00      	cmp	r3, #0
 801f708:	dd6c      	ble.n	801f7e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f70a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f70e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f710:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f714:	eeb0 6a62 	vmov.f32	s12, s5
 801f718:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f71c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f720:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f724:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f728:	eeb0 6a43 	vmov.f32	s12, s6
 801f72c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f730:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f734:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f738:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f73c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f740:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f744:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f748:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f74c:	ee12 2a90 	vmov	r2, s5
 801f750:	eef0 2a47 	vmov.f32	s5, s14
 801f754:	fb92 fef3 	sdiv	lr, r2, r3
 801f758:	ee13 2a10 	vmov	r2, s6
 801f75c:	eeb0 3a67 	vmov.f32	s6, s15
 801f760:	fb92 fcf3 	sdiv	ip, r2, r3
 801f764:	9b01      	ldr	r3, [sp, #4]
 801f766:	3b01      	subs	r3, #1
 801f768:	9301      	str	r3, [sp, #4]
 801f76a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f76c:	bf08      	it	eq
 801f76e:	465b      	moveq	r3, fp
 801f770:	e797      	b.n	801f6a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f772:	454f      	cmp	r7, r9
 801f774:	dabb      	bge.n	801f6ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f776:	fb0c 2606 	mla	r6, ip, r6, r2
 801f77a:	1436      	asrs	r6, r6, #16
 801f77c:	d4b7      	bmi.n	801f6ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f77e:	4546      	cmp	r6, r8
 801f780:	dab5      	bge.n	801f6ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f782:	461e      	mov	r6, r3
 801f784:	46a0      	mov	r8, r4
 801f786:	2e00      	cmp	r6, #0
 801f788:	ddb8      	ble.n	801f6fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f78a:	1417      	asrs	r7, r2, #16
 801f78c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f790:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f794:	9902      	ldr	r1, [sp, #8]
 801f796:	4470      	add	r0, lr
 801f798:	4462      	add	r2, ip
 801f79a:	fb0a 9707 	mla	r7, sl, r7, r9
 801f79e:	3e01      	subs	r6, #1
 801f7a0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f7a4:	f828 7b02 	strh.w	r7, [r8], #2
 801f7a8:	e7ed      	b.n	801f786 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f7aa:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f7ae:	d414      	bmi.n	801f7da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f7b0:	68ae      	ldr	r6, [r5, #8]
 801f7b2:	454e      	cmp	r6, r9
 801f7b4:	dd11      	ble.n	801f7da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f7b6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f7ba:	d40e      	bmi.n	801f7da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f7bc:	68ef      	ldr	r7, [r5, #12]
 801f7be:	4557      	cmp	r7, sl
 801f7c0:	dd0b      	ble.n	801f7da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f7c2:	b236      	sxth	r6, r6
 801f7c4:	f06f 0101 	mvn.w	r1, #1
 801f7c8:	9f02      	ldr	r7, [sp, #8]
 801f7ca:	fb0a 9606 	mla	r6, sl, r6, r9
 801f7ce:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f7d2:	fb01 f608 	mul.w	r6, r1, r8
 801f7d6:	9903      	ldr	r1, [sp, #12]
 801f7d8:	538f      	strh	r7, [r1, r6]
 801f7da:	4470      	add	r0, lr
 801f7dc:	4462      	add	r2, ip
 801f7de:	f108 38ff 	add.w	r8, r8, #4294967295
 801f7e2:	e788      	b.n	801f6f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f7e4:	b005      	add	sp, #20
 801f7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7ee:	b087      	sub	sp, #28
 801f7f0:	468b      	mov	fp, r1
 801f7f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f7f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f7f8:	9203      	str	r2, [sp, #12]
 801f7fa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f7fe:	6841      	ldr	r1, [r0, #4]
 801f800:	9204      	str	r2, [sp, #16]
 801f802:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801f806:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f80a:	fb01 2505 	mla	r5, r1, r5, r2
 801f80e:	6802      	ldr	r2, [r0, #0]
 801f810:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801f814:	f8d9 2000 	ldr.w	r2, [r9]
 801f818:	9201      	str	r2, [sp, #4]
 801f81a:	f1bb 0f00 	cmp.w	fp, #0
 801f81e:	dc03      	bgt.n	801f828 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f820:	9a03      	ldr	r2, [sp, #12]
 801f822:	2a00      	cmp	r2, #0
 801f824:	f340 8158 	ble.w	801fad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f828:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f82a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f82e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f832:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f834:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f838:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	dd0e      	ble.n	801f85e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f840:	1402      	asrs	r2, r0, #16
 801f842:	d405      	bmi.n	801f850 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f844:	42ba      	cmp	r2, r7
 801f846:	da03      	bge.n	801f850 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f848:	140a      	asrs	r2, r1, #16
 801f84a:	d401      	bmi.n	801f850 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f84c:	42b2      	cmp	r2, r6
 801f84e:	db07      	blt.n	801f860 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f852:	3b01      	subs	r3, #1
 801f854:	3502      	adds	r5, #2
 801f856:	4410      	add	r0, r2
 801f858:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f85a:	4411      	add	r1, r2
 801f85c:	e7ee      	b.n	801f83c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f85e:	d017      	beq.n	801f890 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f860:	1e5a      	subs	r2, r3, #1
 801f862:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f864:	fb04 0402 	mla	r4, r4, r2, r0
 801f868:	1424      	asrs	r4, r4, #16
 801f86a:	d409      	bmi.n	801f880 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f86c:	42bc      	cmp	r4, r7
 801f86e:	da07      	bge.n	801f880 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f870:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f872:	fb04 1202 	mla	r2, r4, r2, r1
 801f876:	1412      	asrs	r2, r2, #16
 801f878:	d402      	bmi.n	801f880 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f87a:	42b2      	cmp	r2, r6
 801f87c:	f2c0 80bf 	blt.w	801f9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f880:	2700      	movs	r7, #0
 801f882:	19da      	adds	r2, r3, r7
 801f884:	2a00      	cmp	r2, #0
 801f886:	dc3e      	bgt.n	801f906 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f888:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f88c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f890:	f1bb 0f00 	cmp.w	fp, #0
 801f894:	f340 8120 	ble.w	801fad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f898:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f89e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8a2:	f1bb 0b01 	subs.w	fp, fp, #1
 801f8a6:	eeb0 6a62 	vmov.f32	s12, s5
 801f8aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f8ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8b6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f8ba:	eeb0 6a43 	vmov.f32	s12, s6
 801f8be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8c2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f8c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f8ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f8de:	ee12 2a90 	vmov	r2, s5
 801f8e2:	eef0 2a47 	vmov.f32	s5, s14
 801f8e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8ea:	ee13 2a10 	vmov	r2, s6
 801f8ee:	9313      	str	r3, [sp, #76]	; 0x4c
 801f8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8f2:	eeb0 3a67 	vmov.f32	s6, s15
 801f8f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8fa:	9a03      	ldr	r2, [sp, #12]
 801f8fc:	9314      	str	r3, [sp, #80]	; 0x50
 801f8fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f900:	bf08      	it	eq
 801f902:	4613      	moveq	r3, r2
 801f904:	e789      	b.n	801f81a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f906:	1406      	asrs	r6, r0, #16
 801f908:	d42d      	bmi.n	801f966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f90a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801f90e:	42b4      	cmp	r4, r6
 801f910:	dd29      	ble.n	801f966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f912:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801f916:	d426      	bmi.n	801f966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f918:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f91c:	4562      	cmp	r2, ip
 801f91e:	dd22      	ble.n	801f966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f920:	b224      	sxth	r4, r4
 801f922:	9a01      	ldr	r2, [sp, #4]
 801f924:	fb0c 6404 	mla	r4, ip, r4, r6
 801f928:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801f92c:	0e22      	lsrs	r2, r4, #24
 801f92e:	d01a      	beq.n	801f966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f930:	9e04      	ldr	r6, [sp, #16]
 801f932:	4372      	muls	r2, r6
 801f934:	1c56      	adds	r6, r2, #1
 801f936:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f93a:	0a26      	lsrs	r6, r4, #8
 801f93c:	1212      	asrs	r2, r2, #8
 801f93e:	9605      	str	r6, [sp, #20]
 801f940:	2aff      	cmp	r2, #255	; 0xff
 801f942:	d116      	bne.n	801f972 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f944:	f06f 0201 	mvn.w	r2, #1
 801f948:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801f94c:	fb02 fc07 	mul.w	ip, r2, r7
 801f950:	0962      	lsrs	r2, r4, #5
 801f952:	f026 0607 	bic.w	r6, r6, #7
 801f956:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f95a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f95e:	4316      	orrs	r6, r2
 801f960:	4326      	orrs	r6, r4
 801f962:	f825 600c 	strh.w	r6, [r5, ip]
 801f966:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f968:	3f01      	subs	r7, #1
 801f96a:	4410      	add	r0, r2
 801f96c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f96e:	4411      	add	r1, r2
 801f970:	e787      	b.n	801f882 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f972:	f06f 0601 	mvn.w	r6, #1
 801f976:	fa1f fa82 	uxth.w	sl, r2
 801f97a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801f97e:	43d2      	mvns	r2, r2
 801f980:	437e      	muls	r6, r7
 801f982:	b2e4      	uxtb	r4, r4
 801f984:	fb1c fc0a 	smulbb	ip, ip, sl
 801f988:	b2d2      	uxtb	r2, r2
 801f98a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801f98e:	fb14 f40a 	smulbb	r4, r4, sl
 801f992:	9602      	str	r6, [sp, #8]
 801f994:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f998:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801f99c:	fb16 f60a 	smulbb	r6, r6, sl
 801f9a0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f9a4:	fb0e ce02 	mla	lr, lr, r2, ip
 801f9a8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801f9ac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f9b0:	fa1f fe8e 	uxth.w	lr, lr
 801f9b4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f9b8:	fa5f f888 	uxtb.w	r8, r8
 801f9bc:	fb0c 6c02 	mla	ip, ip, r2, r6
 801f9c0:	fb08 4402 	mla	r4, r8, r2, r4
 801f9c4:	f10e 0201 	add.w	r2, lr, #1
 801f9c8:	fa1f fc8c 	uxth.w	ip, ip
 801f9cc:	b2a4      	uxth	r4, r4
 801f9ce:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f9d2:	9a02      	ldr	r2, [sp, #8]
 801f9d4:	1c66      	adds	r6, r4, #1
 801f9d6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f9da:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f9de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f9e2:	ea46 0e0e 	orr.w	lr, r6, lr
 801f9e6:	f10c 0601 	add.w	r6, ip, #1
 801f9ea:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f9ee:	0976      	lsrs	r6, r6, #5
 801f9f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f9f4:	ea4e 0e06 	orr.w	lr, lr, r6
 801f9f8:	f825 e002 	strh.w	lr, [r5, r2]
 801f9fc:	e7b3      	b.n	801f966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f9fe:	f04f 0800 	mov.w	r8, #0
 801fa02:	eba3 0208 	sub.w	r2, r3, r8
 801fa06:	2a00      	cmp	r2, #0
 801fa08:	f77f af3e 	ble.w	801f888 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa0c:	1404      	asrs	r4, r0, #16
 801fa0e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fa12:	140a      	asrs	r2, r1, #16
 801fa14:	fb06 4202 	mla	r2, r6, r2, r4
 801fa18:	9c01      	ldr	r4, [sp, #4]
 801fa1a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fa1e:	0e22      	lsrs	r2, r4, #24
 801fa20:	d015      	beq.n	801fa4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fa22:	9e04      	ldr	r6, [sp, #16]
 801fa24:	4372      	muls	r2, r6
 801fa26:	1c56      	adds	r6, r2, #1
 801fa28:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fa2c:	0a26      	lsrs	r6, r4, #8
 801fa2e:	1212      	asrs	r2, r2, #8
 801fa30:	2aff      	cmp	r2, #255	; 0xff
 801fa32:	d113      	bne.n	801fa5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fa34:	0962      	lsrs	r2, r4, #5
 801fa36:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fa3a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fa3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fa42:	f026 0607 	bic.w	r6, r6, #7
 801fa46:	4316      	orrs	r6, r2
 801fa48:	4326      	orrs	r6, r4
 801fa4a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fa4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa50:	f108 0801 	add.w	r8, r8, #1
 801fa54:	4410      	add	r0, r2
 801fa56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa58:	4411      	add	r1, r2
 801fa5a:	e7d2      	b.n	801fa02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fa5c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fa60:	fa1f fa82 	uxth.w	sl, r2
 801fa64:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fa68:	43d2      	mvns	r2, r2
 801fa6a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fa6e:	fb17 f70a 	smulbb	r7, r7, sl
 801fa72:	b2d2      	uxtb	r2, r2
 801fa74:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fa78:	b2e4      	uxtb	r4, r4
 801fa7a:	b2f6      	uxtb	r6, r6
 801fa7c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fa80:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fa84:	fb14 f40a 	smulbb	r4, r4, sl
 801fa88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fa8c:	fa1f fc8c 	uxth.w	ip, ip
 801fa90:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa94:	fb16 f60a 	smulbb	r6, r6, sl
 801fa98:	fa5f fe8e 	uxtb.w	lr, lr
 801fa9c:	fb0e 4402 	mla	r4, lr, r2, r4
 801faa0:	fb07 6702 	mla	r7, r7, r2, r6
 801faa4:	f10c 0201 	add.w	r2, ip, #1
 801faa8:	b2a4      	uxth	r4, r4
 801faaa:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801faae:	1c66      	adds	r6, r4, #1
 801fab0:	b2bf      	uxth	r7, r7
 801fab2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fab6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801faba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fabe:	ea46 0c0c 	orr.w	ip, r6, ip
 801fac2:	1c7e      	adds	r6, r7, #1
 801fac4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fac8:	0976      	lsrs	r6, r6, #5
 801faca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801face:	ea4c 0c06 	orr.w	ip, ip, r6
 801fad2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fad6:	e7ba      	b.n	801fa4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fad8:	b007      	add	sp, #28
 801fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fae0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae4:	b085      	sub	sp, #20
 801fae6:	468b      	mov	fp, r1
 801fae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801faec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801faee:	9203      	str	r2, [sp, #12]
 801faf0:	6841      	ldr	r1, [r0, #4]
 801faf2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801faf6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fafa:	fb01 2404 	mla	r4, r1, r4, r2
 801fafe:	6802      	ldr	r2, [r0, #0]
 801fb00:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fb04:	f8d8 2000 	ldr.w	r2, [r8]
 801fb08:	9201      	str	r2, [sp, #4]
 801fb0a:	f1bb 0f00 	cmp.w	fp, #0
 801fb0e:	dc03      	bgt.n	801fb18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fb10:	9a03      	ldr	r2, [sp, #12]
 801fb12:	2a00      	cmp	r2, #0
 801fb14:	f340 814f 	ble.w	801fdb6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fb18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fb1a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fb1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fb22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb24:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fb28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	dd0e      	ble.n	801fb4e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb30:	1408      	asrs	r0, r1, #16
 801fb32:	d405      	bmi.n	801fb40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fb34:	42b8      	cmp	r0, r7
 801fb36:	da03      	bge.n	801fb40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fb38:	1410      	asrs	r0, r2, #16
 801fb3a:	d401      	bmi.n	801fb40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fb3c:	42b0      	cmp	r0, r6
 801fb3e:	db07      	blt.n	801fb50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fb40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fb42:	3b01      	subs	r3, #1
 801fb44:	3402      	adds	r4, #2
 801fb46:	4401      	add	r1, r0
 801fb48:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fb4a:	4402      	add	r2, r0
 801fb4c:	e7ee      	b.n	801fb2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fb4e:	d017      	beq.n	801fb80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fb50:	1e58      	subs	r0, r3, #1
 801fb52:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb54:	fb05 1500 	mla	r5, r5, r0, r1
 801fb58:	142d      	asrs	r5, r5, #16
 801fb5a:	d409      	bmi.n	801fb70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb5c:	42bd      	cmp	r5, r7
 801fb5e:	da07      	bge.n	801fb70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fb62:	fb05 2000 	mla	r0, r5, r0, r2
 801fb66:	1400      	asrs	r0, r0, #16
 801fb68:	d402      	bmi.n	801fb70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb6a:	42b0      	cmp	r0, r6
 801fb6c:	f2c0 80ba 	blt.w	801fce4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fb70:	2600      	movs	r6, #0
 801fb72:	1998      	adds	r0, r3, r6
 801fb74:	2800      	cmp	r0, #0
 801fb76:	dc3e      	bgt.n	801fbf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fb78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fb80:	f1bb 0f00 	cmp.w	fp, #0
 801fb84:	f340 8117 	ble.w	801fdb6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fb88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb92:	f1bb 0b01 	subs.w	fp, fp, #1
 801fb96:	eeb0 6a62 	vmov.f32	s12, s5
 801fb9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fb9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fba2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fba6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fbaa:	eeb0 6a43 	vmov.f32	s12, s6
 801fbae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbb2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fbb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fbce:	ee12 2a90 	vmov	r2, s5
 801fbd2:	eef0 2a47 	vmov.f32	s5, s14
 801fbd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbda:	ee13 2a10 	vmov	r2, s6
 801fbde:	9311      	str	r3, [sp, #68]	; 0x44
 801fbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbe2:	eeb0 3a67 	vmov.f32	s6, s15
 801fbe6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbea:	9a03      	ldr	r2, [sp, #12]
 801fbec:	9312      	str	r3, [sp, #72]	; 0x48
 801fbee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbf0:	bf08      	it	eq
 801fbf2:	4613      	moveq	r3, r2
 801fbf4:	e789      	b.n	801fb0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fbf6:	140f      	asrs	r7, r1, #16
 801fbf8:	d424      	bmi.n	801fc44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fbfa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fbfe:	42bd      	cmp	r5, r7
 801fc00:	dd20      	ble.n	801fc44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fc06:	d41d      	bmi.n	801fc44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc08:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fc0c:	4560      	cmp	r0, ip
 801fc0e:	dd19      	ble.n	801fc44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc10:	b22d      	sxth	r5, r5
 801fc12:	9801      	ldr	r0, [sp, #4]
 801fc14:	fb0c 7505 	mla	r5, ip, r5, r7
 801fc18:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fc1c:	0e07      	lsrs	r7, r0, #24
 801fc1e:	2fff      	cmp	r7, #255	; 0xff
 801fc20:	d116      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fc22:	f06f 0501 	mvn.w	r5, #1
 801fc26:	fb05 f706 	mul.w	r7, r5, r6
 801fc2a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fc2e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fc32:	0945      	lsrs	r5, r0, #5
 801fc34:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fc38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fc3c:	ea4c 0505 	orr.w	r5, ip, r5
 801fc40:	4305      	orrs	r5, r0
 801fc42:	53e5      	strh	r5, [r4, r7]
 801fc44:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fc46:	3e01      	subs	r6, #1
 801fc48:	4401      	add	r1, r0
 801fc4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fc4c:	4402      	add	r2, r0
 801fc4e:	e790      	b.n	801fb72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fc50:	b2fd      	uxtb	r5, r7
 801fc52:	2f00      	cmp	r7, #0
 801fc54:	d0f6      	beq.n	801fc44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc56:	f06f 0701 	mvn.w	r7, #1
 801fc5a:	fa1f f985 	uxth.w	r9, r5
 801fc5e:	43ed      	mvns	r5, r5
 801fc60:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fc64:	4377      	muls	r7, r6
 801fc66:	fb1a fa09 	smulbb	sl, sl, r9
 801fc6a:	b2ed      	uxtb	r5, r5
 801fc6c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fc70:	9702      	str	r7, [sp, #8]
 801fc72:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fc76:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fc7a:	fb17 f709 	smulbb	r7, r7, r9
 801fc7e:	b2c0      	uxtb	r0, r0
 801fc80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fc84:	fb10 f009 	smulbb	r0, r0, r9
 801fc88:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fc8c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fc90:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fc94:	fa1f fc8c 	uxth.w	ip, ip
 801fc98:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fc9c:	fa5f fe8e 	uxtb.w	lr, lr
 801fca0:	fb07 a705 	mla	r7, r7, r5, sl
 801fca4:	fb0e 0005 	mla	r0, lr, r5, r0
 801fca8:	f10c 0501 	add.w	r5, ip, #1
 801fcac:	b2bf      	uxth	r7, r7
 801fcae:	b280      	uxth	r0, r0
 801fcb0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fcb4:	f100 0a01 	add.w	sl, r0, #1
 801fcb8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fcbc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fcc0:	9802      	ldr	r0, [sp, #8]
 801fcc2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fcc6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fcca:	f107 0a01 	add.w	sl, r7, #1
 801fcce:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fcd2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fcd6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fcda:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fcde:	f824 c000 	strh.w	ip, [r4, r0]
 801fce2:	e7af      	b.n	801fc44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fce4:	f04f 0e00 	mov.w	lr, #0
 801fce8:	eba3 000e 	sub.w	r0, r3, lr
 801fcec:	2800      	cmp	r0, #0
 801fcee:	f77f af43 	ble.w	801fb78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fcf2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fcf6:	140d      	asrs	r5, r1, #16
 801fcf8:	1410      	asrs	r0, r2, #16
 801fcfa:	fb06 5000 	mla	r0, r6, r0, r5
 801fcfe:	9d01      	ldr	r5, [sp, #4]
 801fd00:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fd04:	0e2e      	lsrs	r6, r5, #24
 801fd06:	2eff      	cmp	r6, #255	; 0xff
 801fd08:	d112      	bne.n	801fd30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fd0a:	482c      	ldr	r0, [pc, #176]	; (801fdbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801fd0c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fd10:	0968      	lsrs	r0, r5, #5
 801fd12:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fd16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fd1a:	4330      	orrs	r0, r6
 801fd1c:	4328      	orrs	r0, r5
 801fd1e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801fd22:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd24:	f10e 0e01 	add.w	lr, lr, #1
 801fd28:	4401      	add	r1, r0
 801fd2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd2c:	4402      	add	r2, r0
 801fd2e:	e7db      	b.n	801fce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fd30:	b2f0      	uxtb	r0, r6
 801fd32:	2e00      	cmp	r6, #0
 801fd34:	d0f5      	beq.n	801fd22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fd36:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fd3a:	fa1f f980 	uxth.w	r9, r0
 801fd3e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fd42:	43c0      	mvns	r0, r0
 801fd44:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fd48:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fd4c:	fb16 f609 	smulbb	r6, r6, r9
 801fd50:	b2c0      	uxtb	r0, r0
 801fd52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd56:	b2ed      	uxtb	r5, r5
 801fd58:	fb1a fa09 	smulbb	sl, sl, r9
 801fd5c:	fb07 6700 	mla	r7, r7, r0, r6
 801fd60:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fd64:	fb15 f509 	smulbb	r5, r5, r9
 801fd68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fd6c:	b2bf      	uxth	r7, r7
 801fd6e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fd72:	fa5f fc8c 	uxtb.w	ip, ip
 801fd76:	fb06 a600 	mla	r6, r6, r0, sl
 801fd7a:	fb0c 5500 	mla	r5, ip, r0, r5
 801fd7e:	1c78      	adds	r0, r7, #1
 801fd80:	b2b6      	uxth	r6, r6
 801fd82:	b2ad      	uxth	r5, r5
 801fd84:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fd88:	f105 0a01 	add.w	sl, r5, #1
 801fd8c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fd90:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fd94:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd98:	ea4a 0707 	orr.w	r7, sl, r7
 801fd9c:	f106 0a01 	add.w	sl, r6, #1
 801fda0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fda4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fda8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdac:	ea47 070a 	orr.w	r7, r7, sl
 801fdb0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801fdb4:	e7b5      	b.n	801fd22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fdb6:	b005      	add	sp, #20
 801fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdbc:	fffff800 	.word	0xfffff800

0801fdc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc4:	b087      	sub	sp, #28
 801fdc6:	468b      	mov	fp, r1
 801fdc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fdcc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fdce:	9203      	str	r2, [sp, #12]
 801fdd0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fdd4:	6841      	ldr	r1, [r0, #4]
 801fdd6:	9204      	str	r2, [sp, #16]
 801fdd8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801fddc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fde0:	fb01 2404 	mla	r4, r1, r4, r2
 801fde4:	6802      	ldr	r2, [r0, #0]
 801fde6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fdea:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801fdee:	3201      	adds	r2, #1
 801fdf0:	f022 0201 	bic.w	r2, r2, #1
 801fdf4:	9200      	str	r2, [sp, #0]
 801fdf6:	f8d9 2000 	ldr.w	r2, [r9]
 801fdfa:	9201      	str	r2, [sp, #4]
 801fdfc:	f1bb 0f00 	cmp.w	fp, #0
 801fe00:	dc03      	bgt.n	801fe0a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fe02:	9a03      	ldr	r2, [sp, #12]
 801fe04:	2a00      	cmp	r2, #0
 801fe06:	f340 816a 	ble.w	80200de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fe0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fe0c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fe10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fe14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fe16:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fe1a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	dd0e      	ble.n	801fe40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fe22:	1402      	asrs	r2, r0, #16
 801fe24:	d405      	bmi.n	801fe32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe26:	42ba      	cmp	r2, r7
 801fe28:	da03      	bge.n	801fe32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe2a:	140a      	asrs	r2, r1, #16
 801fe2c:	d401      	bmi.n	801fe32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe2e:	42b2      	cmp	r2, r6
 801fe30:	db07      	blt.n	801fe42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fe32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe34:	3b01      	subs	r3, #1
 801fe36:	3402      	adds	r4, #2
 801fe38:	4410      	add	r0, r2
 801fe3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe3c:	4411      	add	r1, r2
 801fe3e:	e7ee      	b.n	801fe1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fe40:	d017      	beq.n	801fe72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fe42:	1e5a      	subs	r2, r3, #1
 801fe44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fe46:	fb05 0502 	mla	r5, r5, r2, r0
 801fe4a:	142d      	asrs	r5, r5, #16
 801fe4c:	d409      	bmi.n	801fe62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fe4e:	42bd      	cmp	r5, r7
 801fe50:	da07      	bge.n	801fe62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fe52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fe54:	fb05 1202 	mla	r2, r5, r2, r1
 801fe58:	1412      	asrs	r2, r2, #16
 801fe5a:	d402      	bmi.n	801fe62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fe5c:	42b2      	cmp	r2, r6
 801fe5e:	f2c0 80c8 	blt.w	801fff2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801fe62:	2700      	movs	r7, #0
 801fe64:	19da      	adds	r2, r3, r7
 801fe66:	2a00      	cmp	r2, #0
 801fe68:	dc3e      	bgt.n	801fee8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fe6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe6e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe72:	f1bb 0f00 	cmp.w	fp, #0
 801fe76:	f340 8132 	ble.w	80200de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fe7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe84:	f1bb 0b01 	subs.w	fp, fp, #1
 801fe88:	eeb0 6a62 	vmov.f32	s12, s5
 801fe8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe98:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fe9c:	eeb0 6a43 	vmov.f32	s12, s6
 801fea0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fea4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fea8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801feac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801feb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801feb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801feb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801febc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fec0:	ee12 2a90 	vmov	r2, s5
 801fec4:	eef0 2a47 	vmov.f32	s5, s14
 801fec8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fecc:	ee13 2a10 	vmov	r2, s6
 801fed0:	9313      	str	r3, [sp, #76]	; 0x4c
 801fed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fed4:	eeb0 3a67 	vmov.f32	s6, s15
 801fed8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fedc:	9a03      	ldr	r2, [sp, #12]
 801fede:	9314      	str	r3, [sp, #80]	; 0x50
 801fee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fee2:	bf08      	it	eq
 801fee4:	4613      	moveq	r3, r2
 801fee6:	e789      	b.n	801fdfc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fee8:	1405      	asrs	r5, r0, #16
 801feea:	d436      	bmi.n	801ff5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801feec:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801fef0:	42aa      	cmp	r2, r5
 801fef2:	dd32      	ble.n	801ff5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fef4:	140e      	asrs	r6, r1, #16
 801fef6:	d430      	bmi.n	801ff5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fef8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fefc:	42b2      	cmp	r2, r6
 801fefe:	dd2c      	ble.n	801ff5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff00:	9a00      	ldr	r2, [sp, #0]
 801ff02:	fb06 5502 	mla	r5, r6, r2, r5
 801ff06:	9e01      	ldr	r6, [sp, #4]
 801ff08:	086a      	lsrs	r2, r5, #1
 801ff0a:	5cb2      	ldrb	r2, [r6, r2]
 801ff0c:	07ee      	lsls	r6, r5, #31
 801ff0e:	bf54      	ite	pl
 801ff10:	f002 020f 	andpl.w	r2, r2, #15
 801ff14:	1112      	asrmi	r2, r2, #4
 801ff16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff1a:	b2d2      	uxtb	r2, r2
 801ff1c:	b1ea      	cbz	r2, 801ff5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff1e:	9d04      	ldr	r5, [sp, #16]
 801ff20:	436a      	muls	r2, r5
 801ff22:	1c55      	adds	r5, r2, #1
 801ff24:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ff28:	4d6e      	ldr	r5, [pc, #440]	; (80200e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ff2a:	1212      	asrs	r2, r2, #8
 801ff2c:	682d      	ldr	r5, [r5, #0]
 801ff2e:	2aff      	cmp	r2, #255	; 0xff
 801ff30:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ff34:	9605      	str	r6, [sp, #20]
 801ff36:	d116      	bne.n	801ff66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ff38:	f06f 0201 	mvn.w	r2, #1
 801ff3c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ff40:	fb02 fc07 	mul.w	ip, r2, r7
 801ff44:	096a      	lsrs	r2, r5, #5
 801ff46:	f026 0607 	bic.w	r6, r6, #7
 801ff4a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ff4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff52:	4316      	orrs	r6, r2
 801ff54:	432e      	orrs	r6, r5
 801ff56:	f824 600c 	strh.w	r6, [r4, ip]
 801ff5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff5c:	3f01      	subs	r7, #1
 801ff5e:	4410      	add	r0, r2
 801ff60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff62:	4411      	add	r1, r2
 801ff64:	e77e      	b.n	801fe64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ff66:	f06f 0601 	mvn.w	r6, #1
 801ff6a:	fa1f fa82 	uxth.w	sl, r2
 801ff6e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ff72:	43d2      	mvns	r2, r2
 801ff74:	437e      	muls	r6, r7
 801ff76:	b2ed      	uxtb	r5, r5
 801ff78:	fb1c fc0a 	smulbb	ip, ip, sl
 801ff7c:	b2d2      	uxtb	r2, r2
 801ff7e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ff82:	fb15 f50a 	smulbb	r5, r5, sl
 801ff86:	9602      	str	r6, [sp, #8]
 801ff88:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ff8c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ff90:	fb16 f60a 	smulbb	r6, r6, sl
 801ff94:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ff98:	fb0e ce02 	mla	lr, lr, r2, ip
 801ff9c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ffa0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ffa4:	fa1f fe8e 	uxth.w	lr, lr
 801ffa8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ffac:	fa5f f888 	uxtb.w	r8, r8
 801ffb0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ffb4:	fb08 5502 	mla	r5, r8, r2, r5
 801ffb8:	f10e 0201 	add.w	r2, lr, #1
 801ffbc:	fa1f fc8c 	uxth.w	ip, ip
 801ffc0:	b2ad      	uxth	r5, r5
 801ffc2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ffc6:	9a02      	ldr	r2, [sp, #8]
 801ffc8:	1c6e      	adds	r6, r5, #1
 801ffca:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ffce:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801ffd2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ffd6:	ea46 0e0e 	orr.w	lr, r6, lr
 801ffda:	f10c 0601 	add.w	r6, ip, #1
 801ffde:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ffe2:	0976      	lsrs	r6, r6, #5
 801ffe4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ffe8:	ea4e 0e06 	orr.w	lr, lr, r6
 801ffec:	f824 e002 	strh.w	lr, [r4, r2]
 801fff0:	e7b3      	b.n	801ff5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fff2:	f04f 0800 	mov.w	r8, #0
 801fff6:	eba3 0208 	sub.w	r2, r3, r8
 801fffa:	2a00      	cmp	r2, #0
 801fffc:	f77f af35 	ble.w	801fe6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020000:	1402      	asrs	r2, r0, #16
 8020002:	9e00      	ldr	r6, [sp, #0]
 8020004:	140d      	asrs	r5, r1, #16
 8020006:	fb06 2505 	mla	r5, r6, r5, r2
 802000a:	9e01      	ldr	r6, [sp, #4]
 802000c:	086a      	lsrs	r2, r5, #1
 802000e:	07ed      	lsls	r5, r5, #31
 8020010:	5cb2      	ldrb	r2, [r6, r2]
 8020012:	bf54      	ite	pl
 8020014:	f002 020f 	andpl.w	r2, r2, #15
 8020018:	1112      	asrmi	r2, r2, #4
 802001a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802001e:	b2d2      	uxtb	r2, r2
 8020020:	b1c2      	cbz	r2, 8020054 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020022:	9d04      	ldr	r5, [sp, #16]
 8020024:	436a      	muls	r2, r5
 8020026:	1c55      	adds	r5, r2, #1
 8020028:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802002c:	4d2d      	ldr	r5, [pc, #180]	; (80200e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802002e:	1212      	asrs	r2, r2, #8
 8020030:	682e      	ldr	r6, [r5, #0]
 8020032:	2aff      	cmp	r2, #255	; 0xff
 8020034:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020038:	d113      	bne.n	8020062 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802003a:	0972      	lsrs	r2, r6, #5
 802003c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8020040:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020044:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020048:	f025 0507 	bic.w	r5, r5, #7
 802004c:	4315      	orrs	r5, r2
 802004e:	4335      	orrs	r5, r6
 8020050:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020054:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020056:	f108 0801 	add.w	r8, r8, #1
 802005a:	4410      	add	r0, r2
 802005c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802005e:	4411      	add	r1, r2
 8020060:	e7c9      	b.n	801fff6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020062:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020066:	fa1f fa82 	uxth.w	sl, r2
 802006a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802006e:	43d2      	mvns	r2, r2
 8020070:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020074:	fb17 f70a 	smulbb	r7, r7, sl
 8020078:	b2d2      	uxtb	r2, r2
 802007a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802007e:	b2f6      	uxtb	r6, r6
 8020080:	b2ed      	uxtb	r5, r5
 8020082:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020086:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802008a:	fb16 f60a 	smulbb	r6, r6, sl
 802008e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020092:	fa1f fc8c 	uxth.w	ip, ip
 8020096:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802009a:	fb15 f50a 	smulbb	r5, r5, sl
 802009e:	fa5f fe8e 	uxtb.w	lr, lr
 80200a2:	fb0e 6602 	mla	r6, lr, r2, r6
 80200a6:	fb07 5702 	mla	r7, r7, r2, r5
 80200aa:	f10c 0201 	add.w	r2, ip, #1
 80200ae:	b2b6      	uxth	r6, r6
 80200b0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80200b4:	1c75      	adds	r5, r6, #1
 80200b6:	b2bf      	uxth	r7, r7
 80200b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80200bc:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80200c0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80200c4:	ea45 0c0c 	orr.w	ip, r5, ip
 80200c8:	1c7d      	adds	r5, r7, #1
 80200ca:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80200ce:	096d      	lsrs	r5, r5, #5
 80200d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80200d4:	ea4c 0c05 	orr.w	ip, ip, r5
 80200d8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80200dc:	e7ba      	b.n	8020054 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80200de:	b007      	add	sp, #28
 80200e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200e4:	20015218 	.word	0x20015218

080200e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200ec:	b087      	sub	sp, #28
 80200ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200f2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80203fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80200f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80200f8:	9101      	str	r1, [sp, #4]
 80200fa:	9205      	str	r2, [sp, #20]
 80200fc:	6841      	ldr	r1, [r0, #4]
 80200fe:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8020102:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020106:	fb01 2404 	mla	r4, r1, r4, r2
 802010a:	6802      	ldr	r2, [r0, #0]
 802010c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020110:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020114:	3201      	adds	r2, #1
 8020116:	f022 0201 	bic.w	r2, r2, #1
 802011a:	9202      	str	r2, [sp, #8]
 802011c:	f8db 2000 	ldr.w	r2, [fp]
 8020120:	9203      	str	r2, [sp, #12]
 8020122:	9a01      	ldr	r2, [sp, #4]
 8020124:	2a00      	cmp	r2, #0
 8020126:	dc03      	bgt.n	8020130 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020128:	9a05      	ldr	r2, [sp, #20]
 802012a:	2a00      	cmp	r2, #0
 802012c:	f340 8162 	ble.w	80203f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020130:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020132:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020136:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802013a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802013c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020140:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020144:	2b00      	cmp	r3, #0
 8020146:	dd0e      	ble.n	8020166 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020148:	1402      	asrs	r2, r0, #16
 802014a:	d405      	bmi.n	8020158 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802014c:	42ba      	cmp	r2, r7
 802014e:	da03      	bge.n	8020158 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020150:	140a      	asrs	r2, r1, #16
 8020152:	d401      	bmi.n	8020158 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020154:	42b2      	cmp	r2, r6
 8020156:	db07      	blt.n	8020168 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802015a:	3b01      	subs	r3, #1
 802015c:	3402      	adds	r4, #2
 802015e:	4410      	add	r0, r2
 8020160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020162:	4411      	add	r1, r2
 8020164:	e7ee      	b.n	8020144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020166:	d017      	beq.n	8020198 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020168:	1e5a      	subs	r2, r3, #1
 802016a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802016c:	fb05 0502 	mla	r5, r5, r2, r0
 8020170:	142d      	asrs	r5, r5, #16
 8020172:	d409      	bmi.n	8020188 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020174:	42bd      	cmp	r5, r7
 8020176:	da07      	bge.n	8020188 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020178:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802017a:	fb05 1202 	mla	r2, r5, r2, r1
 802017e:	1412      	asrs	r2, r2, #16
 8020180:	d402      	bmi.n	8020188 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020182:	42b2      	cmp	r2, r6
 8020184:	f2c0 80c3 	blt.w	802030e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020188:	2500      	movs	r5, #0
 802018a:	195a      	adds	r2, r3, r5
 802018c:	2a00      	cmp	r2, #0
 802018e:	dc3f      	bgt.n	8020210 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020194:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020198:	9b01      	ldr	r3, [sp, #4]
 802019a:	2b00      	cmp	r3, #0
 802019c:	f340 812a 	ble.w	80203f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80201a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201aa:	eeb0 6a62 	vmov.f32	s12, s5
 80201ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201ba:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80201be:	eeb0 6a43 	vmov.f32	s12, s6
 80201c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201c6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80201ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201e2:	ee12 2a90 	vmov	r2, s5
 80201e6:	eef0 2a47 	vmov.f32	s5, s14
 80201ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80201ee:	ee13 2a10 	vmov	r2, s6
 80201f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80201f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201f6:	eeb0 3a67 	vmov.f32	s6, s15
 80201fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80201fe:	9314      	str	r3, [sp, #80]	; 0x50
 8020200:	9b01      	ldr	r3, [sp, #4]
 8020202:	9a05      	ldr	r2, [sp, #20]
 8020204:	3b01      	subs	r3, #1
 8020206:	9301      	str	r3, [sp, #4]
 8020208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802020a:	bf08      	it	eq
 802020c:	4613      	moveq	r3, r2
 802020e:	e788      	b.n	8020122 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020210:	1406      	asrs	r6, r0, #16
 8020212:	d42c      	bmi.n	802026e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020214:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020218:	42b2      	cmp	r2, r6
 802021a:	dd28      	ble.n	802026e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802021c:	140f      	asrs	r7, r1, #16
 802021e:	d426      	bmi.n	802026e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020220:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020224:	42ba      	cmp	r2, r7
 8020226:	dd22      	ble.n	802026e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020228:	9a02      	ldr	r2, [sp, #8]
 802022a:	fb07 6602 	mla	r6, r7, r2, r6
 802022e:	9f03      	ldr	r7, [sp, #12]
 8020230:	0872      	lsrs	r2, r6, #1
 8020232:	07f6      	lsls	r6, r6, #31
 8020234:	5cba      	ldrb	r2, [r7, r2]
 8020236:	bf54      	ite	pl
 8020238:	f002 020f 	andpl.w	r2, r2, #15
 802023c:	1112      	asrmi	r2, r2, #4
 802023e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020242:	b2d2      	uxtb	r2, r2
 8020244:	2aff      	cmp	r2, #255	; 0xff
 8020246:	d118      	bne.n	802027a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020248:	f06f 0601 	mvn.w	r6, #1
 802024c:	f8d8 2000 	ldr.w	r2, [r8]
 8020250:	fb06 f705 	mul.w	r7, r6, r5
 8020254:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8020258:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 802025c:	0956      	lsrs	r6, r2, #5
 802025e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020262:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020266:	ea4c 0606 	orr.w	r6, ip, r6
 802026a:	4316      	orrs	r6, r2
 802026c:	53e6      	strh	r6, [r4, r7]
 802026e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020270:	3d01      	subs	r5, #1
 8020272:	4410      	add	r0, r2
 8020274:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020276:	4411      	add	r1, r2
 8020278:	e787      	b.n	802018a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802027a:	2a00      	cmp	r2, #0
 802027c:	d0f7      	beq.n	802026e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802027e:	f06f 0601 	mvn.w	r6, #1
 8020282:	f8d8 c000 	ldr.w	ip, [r8]
 8020286:	fa1f f982 	uxth.w	r9, r2
 802028a:	43d2      	mvns	r2, r2
 802028c:	436e      	muls	r6, r5
 802028e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020292:	b2d2      	uxtb	r2, r2
 8020294:	f834 e006 	ldrh.w	lr, [r4, r6]
 8020298:	fb1a fa09 	smulbb	sl, sl, r9
 802029c:	9604      	str	r6, [sp, #16]
 802029e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80202a2:	ea4f 272e 	mov.w	r7, lr, asr #8
 80202a6:	fb16 f609 	smulbb	r6, r6, r9
 80202aa:	fa5f fc8c 	uxtb.w	ip, ip
 80202ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202b2:	fb1c fc09 	smulbb	ip, ip, r9
 80202b6:	fb07 6702 	mla	r7, r7, r2, r6
 80202ba:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80202be:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80202c2:	b2bf      	uxth	r7, r7
 80202c4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202c8:	fa5f fe8e 	uxtb.w	lr, lr
 80202cc:	fb06 a602 	mla	r6, r6, r2, sl
 80202d0:	fb0e cc02 	mla	ip, lr, r2, ip
 80202d4:	1c7a      	adds	r2, r7, #1
 80202d6:	b2b6      	uxth	r6, r6
 80202d8:	fa1f fc8c 	uxth.w	ip, ip
 80202dc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80202e0:	9a04      	ldr	r2, [sp, #16]
 80202e2:	f10c 0a01 	add.w	sl, ip, #1
 80202e6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202ea:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80202ee:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80202f2:	ea4a 0707 	orr.w	r7, sl, r7
 80202f6:	f106 0a01 	add.w	sl, r6, #1
 80202fa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80202fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020302:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020306:	ea47 070a 	orr.w	r7, r7, sl
 802030a:	52a7      	strh	r7, [r4, r2]
 802030c:	e7af      	b.n	802026e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802030e:	f04f 0e00 	mov.w	lr, #0
 8020312:	eba3 020e 	sub.w	r2, r3, lr
 8020316:	2a00      	cmp	r2, #0
 8020318:	f77f af3a 	ble.w	8020190 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802031c:	1402      	asrs	r2, r0, #16
 802031e:	9e02      	ldr	r6, [sp, #8]
 8020320:	140d      	asrs	r5, r1, #16
 8020322:	fb06 2505 	mla	r5, r6, r5, r2
 8020326:	9e03      	ldr	r6, [sp, #12]
 8020328:	086a      	lsrs	r2, r5, #1
 802032a:	07ed      	lsls	r5, r5, #31
 802032c:	5cb2      	ldrb	r2, [r6, r2]
 802032e:	bf54      	ite	pl
 8020330:	f002 020f 	andpl.w	r2, r2, #15
 8020334:	1112      	asrmi	r2, r2, #4
 8020336:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802033a:	b2d2      	uxtb	r2, r2
 802033c:	2aff      	cmp	r2, #255	; 0xff
 802033e:	d115      	bne.n	802036c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020340:	f8d8 5000 	ldr.w	r5, [r8]
 8020344:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020348:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802034c:	096a      	lsrs	r2, r5, #5
 802034e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020352:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020356:	4332      	orrs	r2, r6
 8020358:	432a      	orrs	r2, r5
 802035a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802035e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020360:	f10e 0e01 	add.w	lr, lr, #1
 8020364:	4410      	add	r0, r2
 8020366:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020368:	4411      	add	r1, r2
 802036a:	e7d2      	b.n	8020312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802036c:	2a00      	cmp	r2, #0
 802036e:	d0f6      	beq.n	802035e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020370:	f8d8 7000 	ldr.w	r7, [r8]
 8020374:	fa1f f982 	uxth.w	r9, r2
 8020378:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802037c:	43d2      	mvns	r2, r2
 802037e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8020382:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020386:	ea4f 262c 	mov.w	r6, ip, asr #8
 802038a:	fb15 f509 	smulbb	r5, r5, r9
 802038e:	b2d2      	uxtb	r2, r2
 8020390:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020394:	b2ff      	uxtb	r7, r7
 8020396:	fb1a fa09 	smulbb	sl, sl, r9
 802039a:	fb06 5602 	mla	r6, r6, r2, r5
 802039e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80203a2:	fb17 f709 	smulbb	r7, r7, r9
 80203a6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80203aa:	b2b6      	uxth	r6, r6
 80203ac:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80203b0:	fa5f fc8c 	uxtb.w	ip, ip
 80203b4:	fb05 a502 	mla	r5, r5, r2, sl
 80203b8:	fb0c 7702 	mla	r7, ip, r2, r7
 80203bc:	1c72      	adds	r2, r6, #1
 80203be:	b2ad      	uxth	r5, r5
 80203c0:	b2bf      	uxth	r7, r7
 80203c2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80203c6:	f107 0a01 	add.w	sl, r7, #1
 80203ca:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80203ce:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80203d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80203d6:	ea4a 0606 	orr.w	r6, sl, r6
 80203da:	f105 0a01 	add.w	sl, r5, #1
 80203de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80203e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80203e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80203ea:	ea46 060a 	orr.w	r6, r6, sl
 80203ee:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80203f2:	e7b4      	b.n	802035e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80203f4:	b007      	add	sp, #28
 80203f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203fa:	bf00      	nop
 80203fc:	20015218 	.word	0x20015218

08020400 <_ZN8touchgfx8LCD16bppD1Ev>:
 8020400:	4770      	bx	lr

08020402 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020402:	4770      	bx	lr

08020404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020404:	4770      	bx	lr

08020406 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020406:	4770      	bx	lr

08020408 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020408:	4770      	bx	lr

0802040a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802040a:	4770      	bx	lr

0802040c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802040c:	4770      	bx	lr

0802040e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802040e:	4770      	bx	lr

08020410 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020410:	4770      	bx	lr

08020412 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020412:	4770      	bx	lr

08020414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020414:	4770      	bx	lr

08020416 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020416:	4770      	bx	lr

08020418 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020418:	4770      	bx	lr

0802041a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802041a:	4770      	bx	lr

0802041c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802041c:	4770      	bx	lr

0802041e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802041e:	4770      	bx	lr

08020420 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020420:	4770      	bx	lr

08020422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020422:	4770      	bx	lr

08020424 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020424:	4770      	bx	lr

08020426 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020426:	4770      	bx	lr

08020428 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020428:	4770      	bx	lr

0802042a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802042a:	4770      	bx	lr

0802042c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802042c:	4770      	bx	lr

0802042e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802042e:	4770      	bx	lr

08020430 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020430:	4770      	bx	lr

08020432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020432:	4770      	bx	lr

08020434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020434:	4770      	bx	lr

08020436 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020436:	4770      	bx	lr

08020438 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020438:	4770      	bx	lr

0802043a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802043a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802043e:	b088      	sub	sp, #32
 8020440:	4606      	mov	r6, r0
 8020442:	4688      	mov	r8, r1
 8020444:	4691      	mov	r9, r2
 8020446:	ac08      	add	r4, sp, #32
 8020448:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 802044c:	4620      	mov	r0, r4
 802044e:	f7fd fc65 	bl	801dd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020452:	6833      	ldr	r3, [r6, #0]
 8020454:	4605      	mov	r5, r0
 8020456:	4620      	mov	r0, r4
 8020458:	699f      	ldr	r7, [r3, #24]
 802045a:	f7fd fb73 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802045e:	4682      	mov	sl, r0
 8020460:	4620      	mov	r0, r4
 8020462:	f7fd fba3 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020466:	9500      	str	r5, [sp, #0]
 8020468:	464b      	mov	r3, r9
 802046a:	4642      	mov	r2, r8
 802046c:	4631      	mov	r1, r6
 802046e:	e9cd a001 	strd	sl, r0, [sp, #4]
 8020472:	a806      	add	r0, sp, #24
 8020474:	47b8      	blx	r7
 8020476:	4628      	mov	r0, r5
 8020478:	b008      	add	sp, #32
 802047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020480 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020484:	2300      	movs	r3, #0
 8020486:	9300      	str	r3, [sp, #0]
 8020488:	4b3d      	ldr	r3, [pc, #244]	; (8020580 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 802048a:	781b      	ldrb	r3, [r3, #0]
 802048c:	2b00      	cmp	r3, #0
 802048e:	d137      	bne.n	8020500 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8020490:	4a3c      	ldr	r2, [pc, #240]	; (8020584 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020492:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020496:	f8ad 2004 	strh.w	r2, [sp, #4]
 802049a:	2b00      	cmp	r3, #0
 802049c:	d132      	bne.n	8020504 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802049e:	4b3a      	ldr	r3, [pc, #232]	; (8020588 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80204a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80204a4:	ac02      	add	r4, sp, #8
 80204a6:	6808      	ldr	r0, [r1, #0]
 80204a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80204ac:	ab02      	add	r3, sp, #8
 80204ae:	6849      	ldr	r1, [r1, #4]
 80204b0:	4d36      	ldr	r5, [pc, #216]	; (802058c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80204b2:	c303      	stmia	r3!, {r0, r1}
 80204b4:	4669      	mov	r1, sp
 80204b6:	4620      	mov	r0, r4
 80204b8:	f7fa fd18 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204bc:	4668      	mov	r0, sp
 80204be:	f7fa fced 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80204c6:	f8bd 2000 	ldrh.w	r2, [sp]
 80204ca:	462f      	mov	r7, r5
 80204cc:	6828      	ldr	r0, [r5, #0]
 80204ce:	4413      	add	r3, r2
 80204d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80204d4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80204d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80204dc:	4413      	add	r3, r2
 80204de:	f8ad 300a 	strh.w	r3, [sp, #10]
 80204e2:	6803      	ldr	r3, [r0, #0]
 80204e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80204e6:	4798      	blx	r3
 80204e8:	f010 0f01 	tst.w	r0, #1
 80204ec:	d00c      	beq.n	8020508 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80204ee:	6828      	ldr	r0, [r5, #0]
 80204f0:	6803      	ldr	r3, [r0, #0]
 80204f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80204f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80204f8:	4798      	blx	r3
 80204fa:	b004      	add	sp, #16
 80204fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020500:	4a21      	ldr	r2, [pc, #132]	; (8020588 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020502:	e7c6      	b.n	8020492 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020504:	4b1f      	ldr	r3, [pc, #124]	; (8020584 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020506:	e7cb      	b.n	80204a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020508:	6838      	ldr	r0, [r7, #0]
 802050a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802050e:	6803      	ldr	r3, [r0, #0]
 8020510:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8020514:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802051a:	4798      	blx	r3
 802051c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020520:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020524:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020528:	fb16 3602 	smlabb	r6, r6, r2, r3
 802052c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020530:	6838      	ldr	r0, [r7, #0]
 8020532:	6803      	ldr	r3, [r0, #0]
 8020534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020536:	4798      	blx	r3
 8020538:	4a12      	ldr	r2, [pc, #72]	; (8020584 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802053a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 802053e:	8813      	ldrh	r3, [r2, #0]
 8020540:	4691      	mov	r9, r2
 8020542:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020546:	435d      	muls	r5, r3
 8020548:	fb03 1404 	mla	r4, r3, r4, r1
 802054c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020550:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020554:	6838      	ldr	r0, [r7, #0]
 8020556:	42ac      	cmp	r4, r5
 8020558:	6803      	ldr	r3, [r0, #0]
 802055a:	d20e      	bcs.n	802057a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 802055c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8020560:	4632      	mov	r2, r6
 8020562:	4643      	mov	r3, r8
 8020564:	4621      	mov	r1, r4
 8020566:	47d0      	blx	sl
 8020568:	f8b9 3000 	ldrh.w	r3, [r9]
 802056c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020570:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020574:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020578:	e7ec      	b.n	8020554 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 802057a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802057c:	4798      	blx	r3
 802057e:	e7bc      	b.n	80204fa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020580:	20015208 	.word	0x20015208
 8020584:	2001520a 	.word	0x2001520a
 8020588:	2001520c 	.word	0x2001520c
 802058c:	20015210 	.word	0x20015210

08020590 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020594:	b08b      	sub	sp, #44	; 0x2c
 8020596:	460f      	mov	r7, r1
 8020598:	4616      	mov	r6, r2
 802059a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802059e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80205a2:	f1bb 0f00 	cmp.w	fp, #0
 80205a6:	d049      	beq.n	802063c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80205a8:	6810      	ldr	r0, [r2, #0]
 80205aa:	ad06      	add	r5, sp, #24
 80205ac:	6851      	ldr	r1, [r2, #4]
 80205ae:	c503      	stmia	r5!, {r0, r1}
 80205b0:	6818      	ldr	r0, [r3, #0]
 80205b2:	ad08      	add	r5, sp, #32
 80205b4:	6859      	ldr	r1, [r3, #4]
 80205b6:	c503      	stmia	r5!, {r0, r1}
 80205b8:	a806      	add	r0, sp, #24
 80205ba:	f7fa fc6f 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205be:	4631      	mov	r1, r6
 80205c0:	a808      	add	r0, sp, #32
 80205c2:	f7fa fc93 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80205c6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80205ca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80205ce:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80205d2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80205d6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80205da:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80205de:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80205e2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80205e6:	4f5f      	ldr	r7, [pc, #380]	; (8020764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80205e8:	440a      	add	r2, r1
 80205ea:	6838      	ldr	r0, [r7, #0]
 80205ec:	46b9      	mov	r9, r7
 80205ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 80205f2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80205f6:	4413      	add	r3, r2
 80205f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80205fc:	6803      	ldr	r3, [r0, #0]
 80205fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020600:	4798      	blx	r3
 8020602:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020606:	d01c      	beq.n	8020642 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020608:	f010 0f04 	tst.w	r0, #4
 802060c:	d01d      	beq.n	802064a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802060e:	f8d9 0000 	ldr.w	r0, [r9]
 8020612:	2700      	movs	r7, #0
 8020614:	b2ad      	uxth	r5, r5
 8020616:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802061a:	6801      	ldr	r1, [r0, #0]
 802061c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020620:	f8cd b00c 	str.w	fp, [sp, #12]
 8020624:	9501      	str	r5, [sp, #4]
 8020626:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802062a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802062e:	9402      	str	r4, [sp, #8]
 8020630:	fa1f f488 	uxth.w	r4, r8
 8020634:	9400      	str	r4, [sp, #0]
 8020636:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8020638:	4631      	mov	r1, r6
 802063a:	47a0      	blx	r4
 802063c:	b00b      	add	sp, #44	; 0x2c
 802063e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020642:	b914      	cbnz	r4, 802064a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020644:	f010 0f01 	tst.w	r0, #1
 8020648:	e7e0      	b.n	802060c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802064a:	f8d9 0000 	ldr.w	r0, [r9]
 802064e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020652:	6803      	ldr	r3, [r0, #0]
 8020654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020656:	4798      	blx	r3
 8020658:	4b43      	ldr	r3, [pc, #268]	; (8020768 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802065a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802065e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020662:	881a      	ldrh	r2, [r3, #0]
 8020664:	469a      	mov	sl, r3
 8020666:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802066a:	fb05 f502 	mul.w	r5, r5, r2
 802066e:	fb02 1404 	mla	r4, r2, r4, r1
 8020672:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020676:	d059      	beq.n	802072c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8020678:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 802067c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020680:	fa1f f28b 	uxth.w	r2, fp
 8020684:	469e      	mov	lr, r3
 8020686:	fa1f f989 	uxth.w	r9, r9
 802068a:	42ac      	cmp	r4, r5
 802068c:	d264      	bcs.n	8020758 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802068e:	eb04 0a07 	add.w	sl, r4, r7
 8020692:	4554      	cmp	r4, sl
 8020694:	d23d      	bcs.n	8020712 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020696:	8821      	ldrh	r1, [r4, #0]
 8020698:	f836 3b02 	ldrh.w	r3, [r6], #2
 802069c:	1208      	asrs	r0, r1, #8
 802069e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80206a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80206a6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80206aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80206ae:	00c9      	lsls	r1, r1, #3
 80206b0:	fb10 f009 	smulbb	r0, r0, r9
 80206b4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80206b8:	b2c9      	uxtb	r1, r1
 80206ba:	fb0c 0c02 	mla	ip, ip, r2, r0
 80206be:	10d8      	asrs	r0, r3, #3
 80206c0:	fb1b fb09 	smulbb	fp, fp, r9
 80206c4:	00db      	lsls	r3, r3, #3
 80206c6:	fa1f fc8c 	uxth.w	ip, ip
 80206ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80206ce:	fb11 f109 	smulbb	r1, r1, r9
 80206d2:	b2db      	uxtb	r3, r3
 80206d4:	fb00 b002 	mla	r0, r0, r2, fp
 80206d8:	f10c 0b01 	add.w	fp, ip, #1
 80206dc:	fb03 1302 	mla	r3, r3, r2, r1
 80206e0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80206e4:	b29b      	uxth	r3, r3
 80206e6:	b280      	uxth	r0, r0
 80206e8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80206ec:	f103 0c01 	add.w	ip, r3, #1
 80206f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80206f4:	1c43      	adds	r3, r0, #1
 80206f6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80206fa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80206fe:	0940      	lsrs	r0, r0, #5
 8020700:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020704:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020708:	ea4c 0c00 	orr.w	ip, ip, r0
 802070c:	f824 cb02 	strh.w	ip, [r4], #2
 8020710:	e7bf      	b.n	8020692 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8020712:	f8be 3000 	ldrh.w	r3, [lr]
 8020716:	eba3 0308 	sub.w	r3, r3, r8
 802071a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802071e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020722:	eba3 0308 	sub.w	r3, r3, r8
 8020726:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802072a:	e7ae      	b.n	802068a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 802072c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020730:	f8d9 0000 	ldr.w	r0, [r9]
 8020734:	42ac      	cmp	r4, r5
 8020736:	6803      	ldr	r3, [r0, #0]
 8020738:	d20e      	bcs.n	8020758 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802073a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 802073e:	4632      	mov	r2, r6
 8020740:	463b      	mov	r3, r7
 8020742:	4621      	mov	r1, r4
 8020744:	47c0      	blx	r8
 8020746:	f8ba 3000 	ldrh.w	r3, [sl]
 802074a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802074e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020752:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020756:	e7eb      	b.n	8020730 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020758:	4b02      	ldr	r3, [pc, #8]	; (8020764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802075a:	6818      	ldr	r0, [r3, #0]
 802075c:	6803      	ldr	r3, [r0, #0]
 802075e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020760:	4798      	blx	r3
 8020762:	e76b      	b.n	802063c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020764:	20015210 	.word	0x20015210
 8020768:	2001520a 	.word	0x2001520a

0802076c <_ZN8touchgfx8LCD16bppD0Ev>:
 802076c:	b510      	push	{r4, lr}
 802076e:	4604      	mov	r4, r0
 8020770:	2178      	movs	r1, #120	; 0x78
 8020772:	f008 ffe9 	bl	8029748 <_ZdlPvj>
 8020776:	4620      	mov	r0, r4
 8020778:	bd10      	pop	{r4, pc}

0802077a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802077a:	b510      	push	{r4, lr}
 802077c:	4604      	mov	r4, r0
 802077e:	2104      	movs	r1, #4
 8020780:	f008 ffe2 	bl	8029748 <_ZdlPvj>
 8020784:	4620      	mov	r0, r4
 8020786:	bd10      	pop	{r4, pc}

08020788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020788:	b510      	push	{r4, lr}
 802078a:	4604      	mov	r4, r0
 802078c:	2104      	movs	r1, #4
 802078e:	f008 ffdb 	bl	8029748 <_ZdlPvj>
 8020792:	4620      	mov	r0, r4
 8020794:	bd10      	pop	{r4, pc}

08020796 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020796:	b510      	push	{r4, lr}
 8020798:	4604      	mov	r4, r0
 802079a:	2104      	movs	r1, #4
 802079c:	f008 ffd4 	bl	8029748 <_ZdlPvj>
 80207a0:	4620      	mov	r0, r4
 80207a2:	bd10      	pop	{r4, pc}

080207a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80207a4:	b510      	push	{r4, lr}
 80207a6:	4604      	mov	r4, r0
 80207a8:	2104      	movs	r1, #4
 80207aa:	f008 ffcd 	bl	8029748 <_ZdlPvj>
 80207ae:	4620      	mov	r0, r4
 80207b0:	bd10      	pop	{r4, pc}

080207b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80207b2:	b510      	push	{r4, lr}
 80207b4:	4604      	mov	r4, r0
 80207b6:	2104      	movs	r1, #4
 80207b8:	f008 ffc6 	bl	8029748 <_ZdlPvj>
 80207bc:	4620      	mov	r0, r4
 80207be:	bd10      	pop	{r4, pc}

080207c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80207c0:	b510      	push	{r4, lr}
 80207c2:	4604      	mov	r4, r0
 80207c4:	2104      	movs	r1, #4
 80207c6:	f008 ffbf 	bl	8029748 <_ZdlPvj>
 80207ca:	4620      	mov	r0, r4
 80207cc:	bd10      	pop	{r4, pc}

080207ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80207ce:	b510      	push	{r4, lr}
 80207d0:	4604      	mov	r4, r0
 80207d2:	2104      	movs	r1, #4
 80207d4:	f008 ffb8 	bl	8029748 <_ZdlPvj>
 80207d8:	4620      	mov	r0, r4
 80207da:	bd10      	pop	{r4, pc}

080207dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80207dc:	b510      	push	{r4, lr}
 80207de:	4604      	mov	r4, r0
 80207e0:	2104      	movs	r1, #4
 80207e2:	f008 ffb1 	bl	8029748 <_ZdlPvj>
 80207e6:	4620      	mov	r0, r4
 80207e8:	bd10      	pop	{r4, pc}

080207ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80207ea:	b510      	push	{r4, lr}
 80207ec:	4604      	mov	r4, r0
 80207ee:	2104      	movs	r1, #4
 80207f0:	f008 ffaa 	bl	8029748 <_ZdlPvj>
 80207f4:	4620      	mov	r0, r4
 80207f6:	bd10      	pop	{r4, pc}

080207f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80207f8:	b510      	push	{r4, lr}
 80207fa:	4604      	mov	r4, r0
 80207fc:	2104      	movs	r1, #4
 80207fe:	f008 ffa3 	bl	8029748 <_ZdlPvj>
 8020802:	4620      	mov	r0, r4
 8020804:	bd10      	pop	{r4, pc}

08020806 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020806:	b510      	push	{r4, lr}
 8020808:	4604      	mov	r4, r0
 802080a:	2104      	movs	r1, #4
 802080c:	f008 ff9c 	bl	8029748 <_ZdlPvj>
 8020810:	4620      	mov	r0, r4
 8020812:	bd10      	pop	{r4, pc}

08020814 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020814:	b510      	push	{r4, lr}
 8020816:	4604      	mov	r4, r0
 8020818:	2104      	movs	r1, #4
 802081a:	f008 ff95 	bl	8029748 <_ZdlPvj>
 802081e:	4620      	mov	r0, r4
 8020820:	bd10      	pop	{r4, pc}

08020822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020822:	b510      	push	{r4, lr}
 8020824:	4604      	mov	r4, r0
 8020826:	2104      	movs	r1, #4
 8020828:	f008 ff8e 	bl	8029748 <_ZdlPvj>
 802082c:	4620      	mov	r0, r4
 802082e:	bd10      	pop	{r4, pc}

08020830 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020830:	b510      	push	{r4, lr}
 8020832:	4604      	mov	r4, r0
 8020834:	2104      	movs	r1, #4
 8020836:	f008 ff87 	bl	8029748 <_ZdlPvj>
 802083a:	4620      	mov	r0, r4
 802083c:	bd10      	pop	{r4, pc}

0802083e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802083e:	b510      	push	{r4, lr}
 8020840:	4604      	mov	r4, r0
 8020842:	2104      	movs	r1, #4
 8020844:	f008 ff80 	bl	8029748 <_ZdlPvj>
 8020848:	4620      	mov	r0, r4
 802084a:	bd10      	pop	{r4, pc}

0802084c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802084c:	b510      	push	{r4, lr}
 802084e:	4604      	mov	r4, r0
 8020850:	2104      	movs	r1, #4
 8020852:	f008 ff79 	bl	8029748 <_ZdlPvj>
 8020856:	4620      	mov	r0, r4
 8020858:	bd10      	pop	{r4, pc}

0802085a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802085a:	b510      	push	{r4, lr}
 802085c:	4604      	mov	r4, r0
 802085e:	2104      	movs	r1, #4
 8020860:	f008 ff72 	bl	8029748 <_ZdlPvj>
 8020864:	4620      	mov	r0, r4
 8020866:	bd10      	pop	{r4, pc}

08020868 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020868:	b510      	push	{r4, lr}
 802086a:	4604      	mov	r4, r0
 802086c:	2104      	movs	r1, #4
 802086e:	f008 ff6b 	bl	8029748 <_ZdlPvj>
 8020872:	4620      	mov	r0, r4
 8020874:	bd10      	pop	{r4, pc}

08020876 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020876:	b510      	push	{r4, lr}
 8020878:	4604      	mov	r4, r0
 802087a:	2104      	movs	r1, #4
 802087c:	f008 ff64 	bl	8029748 <_ZdlPvj>
 8020880:	4620      	mov	r0, r4
 8020882:	bd10      	pop	{r4, pc}

08020884 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020884:	b510      	push	{r4, lr}
 8020886:	4604      	mov	r4, r0
 8020888:	2104      	movs	r1, #4
 802088a:	f008 ff5d 	bl	8029748 <_ZdlPvj>
 802088e:	4620      	mov	r0, r4
 8020890:	bd10      	pop	{r4, pc}

08020892 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020892:	b510      	push	{r4, lr}
 8020894:	4604      	mov	r4, r0
 8020896:	2104      	movs	r1, #4
 8020898:	f008 ff56 	bl	8029748 <_ZdlPvj>
 802089c:	4620      	mov	r0, r4
 802089e:	bd10      	pop	{r4, pc}

080208a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80208a0:	b510      	push	{r4, lr}
 80208a2:	4604      	mov	r4, r0
 80208a4:	2104      	movs	r1, #4
 80208a6:	f008 ff4f 	bl	8029748 <_ZdlPvj>
 80208aa:	4620      	mov	r0, r4
 80208ac:	bd10      	pop	{r4, pc}

080208ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80208ae:	b510      	push	{r4, lr}
 80208b0:	4604      	mov	r4, r0
 80208b2:	2104      	movs	r1, #4
 80208b4:	f008 ff48 	bl	8029748 <_ZdlPvj>
 80208b8:	4620      	mov	r0, r4
 80208ba:	bd10      	pop	{r4, pc}

080208bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80208bc:	b510      	push	{r4, lr}
 80208be:	4604      	mov	r4, r0
 80208c0:	2104      	movs	r1, #4
 80208c2:	f008 ff41 	bl	8029748 <_ZdlPvj>
 80208c6:	4620      	mov	r0, r4
 80208c8:	bd10      	pop	{r4, pc}

080208ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80208ca:	b510      	push	{r4, lr}
 80208cc:	4604      	mov	r4, r0
 80208ce:	2104      	movs	r1, #4
 80208d0:	f008 ff3a 	bl	8029748 <_ZdlPvj>
 80208d4:	4620      	mov	r0, r4
 80208d6:	bd10      	pop	{r4, pc}

080208d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80208d8:	b510      	push	{r4, lr}
 80208da:	4604      	mov	r4, r0
 80208dc:	2104      	movs	r1, #4
 80208de:	f008 ff33 	bl	8029748 <_ZdlPvj>
 80208e2:	4620      	mov	r0, r4
 80208e4:	bd10      	pop	{r4, pc}

080208e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80208e6:	b510      	push	{r4, lr}
 80208e8:	4604      	mov	r4, r0
 80208ea:	2104      	movs	r1, #4
 80208ec:	f008 ff2c 	bl	8029748 <_ZdlPvj>
 80208f0:	4620      	mov	r0, r4
 80208f2:	bd10      	pop	{r4, pc}

080208f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80208f4:	b510      	push	{r4, lr}
 80208f6:	4604      	mov	r4, r0
 80208f8:	2104      	movs	r1, #4
 80208fa:	f008 ff25 	bl	8029748 <_ZdlPvj>
 80208fe:	4620      	mov	r0, r4
 8020900:	bd10      	pop	{r4, pc}
	...

08020904 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020908:	b091      	sub	sp, #68	; 0x44
 802090a:	469b      	mov	fp, r3
 802090c:	4616      	mov	r6, r2
 802090e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020912:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8020916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802091a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 802091e:	4604      	mov	r4, r0
 8020920:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8020924:	4640      	mov	r0, r8
 8020926:	460d      	mov	r5, r1
 8020928:	4659      	mov	r1, fp
 802092a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802092e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020932:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8020936:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 802093a:	f7f6 fa99 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 802093e:	4631      	mov	r1, r6
 8020940:	4640      	mov	r0, r8
 8020942:	f7f6 fa95 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8020946:	4b74      	ldr	r3, [pc, #464]	; (8020b18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8020948:	8818      	ldrh	r0, [r3, #0]
 802094a:	4b74      	ldr	r3, [pc, #464]	; (8020b1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 802094c:	b202      	sxth	r2, r0
 802094e:	8819      	ldrh	r1, [r3, #0]
 8020950:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020954:	b20e      	sxth	r6, r1
 8020956:	2b00      	cmp	r3, #0
 8020958:	da07      	bge.n	802096a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 802095a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 802095e:	4463      	add	r3, ip
 8020960:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020964:	2300      	movs	r3, #0
 8020966:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 802096a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802096e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020972:	1ad2      	subs	r2, r2, r3
 8020974:	4594      	cmp	ip, r2
 8020976:	bfc4      	itt	gt
 8020978:	1ac2      	subgt	r2, r0, r3
 802097a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 802097e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020982:	2a00      	cmp	r2, #0
 8020984:	da07      	bge.n	8020996 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8020986:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 802098a:	4462      	add	r2, ip
 802098c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8020990:	2200      	movs	r2, #0
 8020992:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8020996:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 802099a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 802099e:	eba6 060a 	sub.w	r6, r6, sl
 80209a2:	42b2      	cmp	r2, r6
 80209a4:	bfc4      	itt	gt
 80209a6:	eba1 020a 	subgt.w	r2, r1, sl
 80209aa:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 80209ae:	4a5c      	ldr	r2, [pc, #368]	; (8020b20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80209b0:	7812      	ldrb	r2, [r2, #0]
 80209b2:	b9a2      	cbnz	r2, 80209de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80209b4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80209b8:	4286      	cmp	r6, r0
 80209ba:	4640      	mov	r0, r8
 80209bc:	9303      	str	r3, [sp, #12]
 80209be:	bf14      	ite	ne
 80209c0:	2600      	movne	r6, #0
 80209c2:	2601      	moveq	r6, #1
 80209c4:	f7f6 fa97 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80209c8:	9b03      	ldr	r3, [sp, #12]
 80209ca:	b160      	cbz	r0, 80209e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80209cc:	2300      	movs	r3, #0
 80209ce:	8023      	strh	r3, [r4, #0]
 80209d0:	8063      	strh	r3, [r4, #2]
 80209d2:	80a3      	strh	r3, [r4, #4]
 80209d4:	4620      	mov	r0, r4
 80209d6:	80e3      	strh	r3, [r4, #6]
 80209d8:	b011      	add	sp, #68	; 0x44
 80209da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209de:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80209e2:	428e      	cmp	r6, r1
 80209e4:	e7e9      	b.n	80209ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80209e6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80209ea:	a90e      	add	r1, sp, #56	; 0x38
 80209ec:	900e      	str	r0, [sp, #56]	; 0x38
 80209ee:	a80c      	add	r0, sp, #48	; 0x30
 80209f0:	9205      	str	r2, [sp, #20]
 80209f2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80209f6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 80209fa:	9206      	str	r2, [sp, #24]
 80209fc:	f8bb 2000 	ldrh.w	r2, [fp]
 8020a00:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8020a04:	1a9b      	subs	r3, r3, r2
 8020a06:	b21b      	sxth	r3, r3
 8020a08:	9303      	str	r3, [sp, #12]
 8020a0a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020a0e:	f8df b118 	ldr.w	fp, [pc, #280]	; 8020b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020a12:	ebaa 0a03 	sub.w	sl, sl, r3
 8020a16:	fa0f f38a 	sxth.w	r3, sl
 8020a1a:	9304      	str	r3, [sp, #16]
 8020a1c:	9b03      	ldr	r3, [sp, #12]
 8020a1e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8020a22:	9b04      	ldr	r3, [sp, #16]
 8020a24:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020a28:	9b05      	ldr	r3, [sp, #20]
 8020a2a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020a2e:	9b06      	ldr	r3, [sp, #24]
 8020a30:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020a34:	f7fa fa5a 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a38:	4640      	mov	r0, r8
 8020a3a:	f7fa fa2f 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a3e:	a80e      	add	r0, sp, #56	; 0x38
 8020a40:	f7fa fa2c 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a44:	4b37      	ldr	r3, [pc, #220]	; (8020b24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020a46:	4628      	mov	r0, r5
 8020a48:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020a4c:	881b      	ldrh	r3, [r3, #0]
 8020a4e:	9307      	str	r3, [sp, #28]
 8020a50:	682b      	ldr	r3, [r5, #0]
 8020a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a54:	4798      	blx	r3
 8020a56:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8020a5a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8020a5e:	4681      	mov	r9, r0
 8020a60:	f8db 0000 	ldr.w	r0, [fp]
 8020a64:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020a68:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020a6a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020a6e:	6803      	ldr	r3, [r0, #0]
 8020a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a72:	4798      	blx	r3
 8020a74:	4607      	mov	r7, r0
 8020a76:	f8db 0000 	ldr.w	r0, [fp]
 8020a7a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020a7e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020a82:	6803      	ldr	r3, [r0, #0]
 8020a84:	9109      	str	r1, [sp, #36]	; 0x24
 8020a86:	9208      	str	r2, [sp, #32]
 8020a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a8a:	4798      	blx	r3
 8020a8c:	f010 0f01 	tst.w	r0, #1
 8020a90:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020a94:	d012      	beq.n	8020abc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020a96:	f8db 0000 	ldr.w	r0, [fp]
 8020a9a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8020a9e:	6803      	ldr	r3, [r0, #0]
 8020aa0:	9200      	str	r2, [sp, #0]
 8020aa2:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8020aa4:	462b      	mov	r3, r5
 8020aa6:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020aaa:	47b0      	blx	r6
 8020aac:	9b03      	ldr	r3, [sp, #12]
 8020aae:	8023      	strh	r3, [r4, #0]
 8020ab0:	9b04      	ldr	r3, [sp, #16]
 8020ab2:	8063      	strh	r3, [r4, #2]
 8020ab4:	9b05      	ldr	r3, [sp, #20]
 8020ab6:	80a3      	strh	r3, [r4, #4]
 8020ab8:	9b06      	ldr	r3, [sp, #24]
 8020aba:	e78b      	b.n	80209d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020abc:	fb09 f202 	mul.w	r2, r9, r2
 8020ac0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020ac4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020ac8:	440f      	add	r7, r1
 8020aca:	b166      	cbz	r6, 8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020acc:	9a07      	ldr	r2, [sp, #28]
 8020ace:	4592      	cmp	sl, r2
 8020ad0:	d109      	bne.n	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020ad2:	f8db 0000 	ldr.w	r0, [fp]
 8020ad6:	fb09 f303 	mul.w	r3, r9, r3
 8020ada:	4629      	mov	r1, r5
 8020adc:	6802      	ldr	r2, [r0, #0]
 8020ade:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8020ae0:	463a      	mov	r2, r7
 8020ae2:	47b0      	blx	r6
 8020ae4:	e7e2      	b.n	8020aac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020ae6:	fb0a f303 	mul.w	r3, sl, r3
 8020aea:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8020aee:	f8df b038 	ldr.w	fp, [pc, #56]	; 8020b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020af2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8020af6:	4545      	cmp	r5, r8
 8020af8:	d2d8      	bcs.n	8020aac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020afa:	f8db 0000 	ldr.w	r0, [fp]
 8020afe:	4629      	mov	r1, r5
 8020b00:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020b04:	4435      	add	r5, r6
 8020b06:	6802      	ldr	r2, [r0, #0]
 8020b08:	005b      	lsls	r3, r3, #1
 8020b0a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020b0e:	463a      	mov	r2, r7
 8020b10:	47d0      	blx	sl
 8020b12:	444f      	add	r7, r9
 8020b14:	e7ef      	b.n	8020af6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8020b16:	bf00      	nop
 8020b18:	20015204 	.word	0x20015204
 8020b1c:	20015206 	.word	0x20015206
 8020b20:	20015208 	.word	0x20015208
 8020b24:	2001520a 	.word	0x2001520a
 8020b28:	20015210 	.word	0x20015210

08020b2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b2e:	4606      	mov	r6, r0
 8020b30:	b087      	sub	sp, #28
 8020b32:	460c      	mov	r4, r1
 8020b34:	4617      	mov	r7, r2
 8020b36:	461d      	mov	r5, r3
 8020b38:	b333      	cbz	r3, 8020b88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020b3a:	4608      	mov	r0, r1
 8020b3c:	f7f6 f9db 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020b40:	bb10      	cbnz	r0, 8020b88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020b42:	6820      	ldr	r0, [r4, #0]
 8020b44:	ab04      	add	r3, sp, #16
 8020b46:	6861      	ldr	r1, [r4, #4]
 8020b48:	4c1b      	ldr	r4, [pc, #108]	; (8020bb8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020b4a:	c303      	stmia	r3!, {r0, r1}
 8020b4c:	a804      	add	r0, sp, #16
 8020b4e:	f7fa f9a5 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b52:	6820      	ldr	r0, [r4, #0]
 8020b54:	6803      	ldr	r3, [r0, #0]
 8020b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b58:	4798      	blx	r3
 8020b5a:	2dff      	cmp	r5, #255	; 0xff
 8020b5c:	d016      	beq.n	8020b8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020b5e:	f010 0f08 	tst.w	r0, #8
 8020b62:	6820      	ldr	r0, [r4, #0]
 8020b64:	d015      	beq.n	8020b92 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020b66:	2400      	movs	r4, #0
 8020b68:	6801      	ldr	r1, [r0, #0]
 8020b6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020b6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020b72:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020b76:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020b7a:	9401      	str	r4, [sp, #4]
 8020b7c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020b80:	9400      	str	r4, [sp, #0]
 8020b82:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020b84:	4639      	mov	r1, r7
 8020b86:	47a0      	blx	r4
 8020b88:	b007      	add	sp, #28
 8020b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b8c:	f010 0f02 	tst.w	r0, #2
 8020b90:	e7e7      	b.n	8020b62 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020b92:	6803      	ldr	r3, [r0, #0]
 8020b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b96:	4798      	blx	r3
 8020b98:	4b08      	ldr	r3, [pc, #32]	; (8020bbc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020b9a:	4601      	mov	r1, r0
 8020b9c:	4630      	mov	r0, r6
 8020b9e:	881a      	ldrh	r2, [r3, #0]
 8020ba0:	6833      	ldr	r3, [r6, #0]
 8020ba2:	e9cd 7500 	strd	r7, r5, [sp]
 8020ba6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8020ba8:	ab04      	add	r3, sp, #16
 8020baa:	47a8      	blx	r5
 8020bac:	6820      	ldr	r0, [r4, #0]
 8020bae:	6803      	ldr	r3, [r0, #0]
 8020bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020bb2:	4798      	blx	r3
 8020bb4:	e7e8      	b.n	8020b88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020bb6:	bf00      	nop
 8020bb8:	20015210 	.word	0x20015210
 8020bbc:	2001520a 	.word	0x2001520a

08020bc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bc4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020bc8:	4688      	mov	r8, r1
 8020bca:	4614      	mov	r4, r2
 8020bcc:	461d      	mov	r5, r3
 8020bce:	9e08      	ldr	r6, [sp, #32]
 8020bd0:	2f00      	cmp	r7, #0
 8020bd2:	f000 80ab 	beq.w	8020d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	f7f6 f98d 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020bdc:	2800      	cmp	r0, #0
 8020bde:	f040 80a5 	bne.w	8020d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020be2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020be6:	2fff      	cmp	r7, #255	; 0xff
 8020be8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020bec:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020bf0:	fb04 1303 	mla	r3, r4, r3, r1
 8020bf4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020bf8:	eba4 0200 	sub.w	r2, r4, r0
 8020bfc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020c00:	fb04 f505 	mul.w	r5, r4, r5
 8020c04:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020c08:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020c0c:	d04a      	beq.n	8020ca4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8020c0e:	b2bc      	uxth	r4, r7
 8020c10:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020c14:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020c18:	fa5f f788 	uxtb.w	r7, r8
 8020c1c:	b2f3      	uxtb	r3, r6
 8020c1e:	0040      	lsls	r0, r0, #1
 8020c20:	fb0e fe04 	mul.w	lr, lr, r4
 8020c24:	4367      	muls	r7, r4
 8020c26:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020c2a:	4363      	muls	r3, r4
 8020c2c:	fa1f fc8c 	uxth.w	ip, ip
 8020c30:	42a9      	cmp	r1, r5
 8020c32:	d27b      	bcs.n	8020d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020c34:	eb01 0900 	add.w	r9, r1, r0
 8020c38:	4549      	cmp	r1, r9
 8020c3a:	d231      	bcs.n	8020ca0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8020c3c:	880a      	ldrh	r2, [r1, #0]
 8020c3e:	1214      	asrs	r4, r2, #8
 8020c40:	10d6      	asrs	r6, r2, #3
 8020c42:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020c46:	00d2      	lsls	r2, r2, #3
 8020c48:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020c4c:	b2d2      	uxtb	r2, r2
 8020c4e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020c52:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020c56:	fb14 f40c 	smulbb	r4, r4, ip
 8020c5a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020c5e:	fb12 f20c 	smulbb	r2, r2, ip
 8020c62:	fb16 f60c 	smulbb	r6, r6, ip
 8020c66:	4474      	add	r4, lr
 8020c68:	441a      	add	r2, r3
 8020c6a:	b2a4      	uxth	r4, r4
 8020c6c:	443e      	add	r6, r7
 8020c6e:	b292      	uxth	r2, r2
 8020c70:	f104 0a01 	add.w	sl, r4, #1
 8020c74:	b2b6      	uxth	r6, r6
 8020c76:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020c7a:	f102 0a01 	add.w	sl, r2, #1
 8020c7e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020c82:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020c86:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020c8a:	4322      	orrs	r2, r4
 8020c8c:	1c74      	adds	r4, r6, #1
 8020c8e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020c92:	0976      	lsrs	r6, r6, #5
 8020c94:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020c98:	4332      	orrs	r2, r6
 8020c9a:	f821 2b02 	strh.w	r2, [r1], #2
 8020c9e:	e7cb      	b.n	8020c38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8020ca0:	4441      	add	r1, r8
 8020ca2:	e7c5      	b.n	8020c30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020ca4:	0973      	lsrs	r3, r6, #5
 8020ca6:	4f22      	ldr	r7, [pc, #136]	; (8020d30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8020ca8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020cac:	ea08 0707 	and.w	r7, r8, r7
 8020cb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020cb4:	433b      	orrs	r3, r7
 8020cb6:	07e7      	lsls	r7, r4, #31
 8020cb8:	ea43 0306 	orr.w	r3, r3, r6
 8020cbc:	b29b      	uxth	r3, r3
 8020cbe:	d50b      	bpl.n	8020cd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020cc0:	0040      	lsls	r0, r0, #1
 8020cc2:	0052      	lsls	r2, r2, #1
 8020cc4:	42a9      	cmp	r1, r5
 8020cc6:	d231      	bcs.n	8020d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020cc8:	180c      	adds	r4, r1, r0
 8020cca:	42a1      	cmp	r1, r4
 8020ccc:	d202      	bcs.n	8020cd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020cce:	f821 3b02 	strh.w	r3, [r1], #2
 8020cd2:	e7fa      	b.n	8020cca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020cd4:	4411      	add	r1, r2
 8020cd6:	e7f5      	b.n	8020cc4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020cd8:	078e      	lsls	r6, r1, #30
 8020cda:	d008      	beq.n	8020cee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020cdc:	0066      	lsls	r6, r4, #1
 8020cde:	460a      	mov	r2, r1
 8020ce0:	42aa      	cmp	r2, r5
 8020ce2:	d202      	bcs.n	8020cea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020ce4:	8013      	strh	r3, [r2, #0]
 8020ce6:	4432      	add	r2, r6
 8020ce8:	e7fa      	b.n	8020ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020cea:	3102      	adds	r1, #2
 8020cec:	3801      	subs	r0, #1
 8020cee:	07c2      	lsls	r2, r0, #31
 8020cf0:	d50b      	bpl.n	8020d0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8020cf2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020cf6:	0066      	lsls	r6, r4, #1
 8020cf8:	3a01      	subs	r2, #1
 8020cfa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020cfe:	42aa      	cmp	r2, r5
 8020d00:	d202      	bcs.n	8020d08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8020d02:	8013      	strh	r3, [r2, #0]
 8020d04:	4432      	add	r2, r6
 8020d06:	e7fa      	b.n	8020cfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8020d08:	3801      	subs	r0, #1
 8020d0a:	b178      	cbz	r0, 8020d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020d0c:	1040      	asrs	r0, r0, #1
 8020d0e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020d12:	0080      	lsls	r0, r0, #2
 8020d14:	0064      	lsls	r4, r4, #1
 8020d16:	42a9      	cmp	r1, r5
 8020d18:	d208      	bcs.n	8020d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020d1a:	180e      	adds	r6, r1, r0
 8020d1c:	460a      	mov	r2, r1
 8020d1e:	42b2      	cmp	r2, r6
 8020d20:	d202      	bcs.n	8020d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020d22:	f842 3b04 	str.w	r3, [r2], #4
 8020d26:	e7fa      	b.n	8020d1e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8020d28:	4421      	add	r1, r4
 8020d2a:	e7f4      	b.n	8020d16 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8020d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d30:	00fff800 	.word	0x00fff800

08020d34 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020d34:	2200      	movs	r2, #0
 8020d36:	4910      	ldr	r1, [pc, #64]	; (8020d78 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8020d38:	6042      	str	r2, [r0, #4]
 8020d3a:	6001      	str	r1, [r0, #0]
 8020d3c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020d40:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020d44:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020d48:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020d4c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020d50:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020d54:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020d58:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020d5c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020d60:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020d64:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020d68:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020d6c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020d70:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020d74:	4770      	bx	lr
 8020d76:	bf00      	nop
 8020d78:	0802f708 	.word	0x0802f708

08020d7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d80:	b08d      	sub	sp, #52	; 0x34
 8020d82:	460d      	mov	r5, r1
 8020d84:	4604      	mov	r4, r0
 8020d86:	4699      	mov	r9, r3
 8020d88:	6808      	ldr	r0, [r1, #0]
 8020d8a:	ab08      	add	r3, sp, #32
 8020d8c:	6849      	ldr	r1, [r1, #4]
 8020d8e:	c303      	stmia	r3!, {r0, r1}
 8020d90:	6810      	ldr	r0, [r2, #0]
 8020d92:	ab0a      	add	r3, sp, #40	; 0x28
 8020d94:	6851      	ldr	r1, [r2, #4]
 8020d96:	c303      	stmia	r3!, {r0, r1}
 8020d98:	a808      	add	r0, sp, #32
 8020d9a:	f7fa f87f 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d9e:	4629      	mov	r1, r5
 8020da0:	a80a      	add	r0, sp, #40	; 0x28
 8020da2:	4d67      	ldr	r5, [pc, #412]	; (8020f40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020da4:	f7fa f8a2 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020da8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020dac:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020db0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020db4:	6828      	ldr	r0, [r5, #0]
 8020db6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020dba:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8020dbe:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020dc2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020dc6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020dca:	440a      	add	r2, r1
 8020dcc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020dd0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020dd4:	4413      	add	r3, r2
 8020dd6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020dda:	6803      	ldr	r3, [r0, #0]
 8020ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020dde:	4798      	blx	r3
 8020de0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020de4:	d119      	bne.n	8020e1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020de6:	f010 0f20 	tst.w	r0, #32
 8020dea:	6828      	ldr	r0, [r5, #0]
 8020dec:	d018      	beq.n	8020e20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020dee:	2500      	movs	r5, #0
 8020df0:	6801      	ldr	r1, [r0, #0]
 8020df2:	b2b6      	uxth	r6, r6
 8020df4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020df8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020dfc:	9601      	str	r6, [sp, #4]
 8020dfe:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020e02:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020e06:	9502      	str	r5, [sp, #8]
 8020e08:	fa1f f588 	uxth.w	r5, r8
 8020e0c:	9500      	str	r5, [sp, #0]
 8020e0e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020e10:	4621      	mov	r1, r4
 8020e12:	47a8      	blx	r5
 8020e14:	b00d      	add	sp, #52	; 0x34
 8020e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020e1e:	e7e4      	b.n	8020dea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020e20:	6803      	ldr	r3, [r0, #0]
 8020e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e24:	4798      	blx	r3
 8020e26:	4947      	ldr	r1, [pc, #284]	; (8020f44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020e28:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020e2c:	880b      	ldrh	r3, [r1, #0]
 8020e2e:	468a      	mov	sl, r1
 8020e30:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020e34:	fb03 5202 	mla	r2, r3, r2, r5
 8020e38:	4373      	muls	r3, r6
 8020e3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020e3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020e42:	9307      	str	r3, [sp, #28]
 8020e44:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020e48:	9306      	str	r3, [sp, #24]
 8020e4a:	9b07      	ldr	r3, [sp, #28]
 8020e4c:	4298      	cmp	r0, r3
 8020e4e:	d270      	bcs.n	8020f32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020e50:	9b06      	ldr	r3, [sp, #24]
 8020e52:	4621      	mov	r1, r4
 8020e54:	eb00 0b03 	add.w	fp, r0, r3
 8020e58:	4558      	cmp	r0, fp
 8020e5a:	d25d      	bcs.n	8020f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020e5c:	f851 4b04 	ldr.w	r4, [r1], #4
 8020e60:	0e23      	lsrs	r3, r4, #24
 8020e62:	d014      	beq.n	8020e8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020e64:	2bff      	cmp	r3, #255	; 0xff
 8020e66:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020e6a:	d112      	bne.n	8020e92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020e6c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020e70:	d10f      	bne.n	8020e92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020e72:	0963      	lsrs	r3, r4, #5
 8020e74:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020e78:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020e7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e80:	f02c 0c07 	bic.w	ip, ip, #7
 8020e84:	ea43 0c0c 	orr.w	ip, r3, ip
 8020e88:	ea4c 0404 	orr.w	r4, ip, r4
 8020e8c:	8004      	strh	r4, [r0, #0]
 8020e8e:	3002      	adds	r0, #2
 8020e90:	e7e2      	b.n	8020e58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8020e92:	fb09 f303 	mul.w	r3, r9, r3
 8020e96:	8807      	ldrh	r7, [r0, #0]
 8020e98:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020e9c:	fa5f fc8c 	uxtb.w	ip, ip
 8020ea0:	1c5a      	adds	r2, r3, #1
 8020ea2:	123e      	asrs	r6, r7, #8
 8020ea4:	10fd      	asrs	r5, r7, #3
 8020ea6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020eaa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020eae:	00ff      	lsls	r7, r7, #3
 8020eb0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020eb4:	1212      	asrs	r2, r2, #8
 8020eb6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020eba:	b293      	uxth	r3, r2
 8020ebc:	43d2      	mvns	r2, r2
 8020ebe:	b2ff      	uxtb	r7, r7
 8020ec0:	fb1e fe03 	smulbb	lr, lr, r3
 8020ec4:	b2d2      	uxtb	r2, r2
 8020ec6:	fb1c fc03 	smulbb	ip, ip, r3
 8020eca:	b2e4      	uxtb	r4, r4
 8020ecc:	fb06 e602 	mla	r6, r6, r2, lr
 8020ed0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020ed4:	fb14 f403 	smulbb	r4, r4, r3
 8020ed8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020edc:	b2b6      	uxth	r6, r6
 8020ede:	fb05 c502 	mla	r5, r5, r2, ip
 8020ee2:	fb07 4702 	mla	r7, r7, r2, r4
 8020ee6:	f106 0e01 	add.w	lr, r6, #1
 8020eea:	b2ad      	uxth	r5, r5
 8020eec:	b2bf      	uxth	r7, r7
 8020eee:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020ef2:	f105 0c01 	add.w	ip, r5, #1
 8020ef6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8020efa:	1c7e      	adds	r6, r7, #1
 8020efc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020f00:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020f04:	096d      	lsrs	r5, r5, #5
 8020f06:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020f0a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f0e:	ea46 060e 	orr.w	r6, r6, lr
 8020f12:	432e      	orrs	r6, r5
 8020f14:	8006      	strh	r6, [r0, #0]
 8020f16:	e7ba      	b.n	8020e8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020f18:	f8ba 3000 	ldrh.w	r3, [sl]
 8020f1c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8020f20:	eba3 0308 	sub.w	r3, r3, r8
 8020f24:	eba4 0408 	sub.w	r4, r4, r8
 8020f28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f2c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020f30:	e78b      	b.n	8020e4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020f32:	4b03      	ldr	r3, [pc, #12]	; (8020f40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020f34:	6818      	ldr	r0, [r3, #0]
 8020f36:	6803      	ldr	r3, [r0, #0]
 8020f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f3a:	4798      	blx	r3
 8020f3c:	e76a      	b.n	8020e14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8020f3e:	bf00      	nop
 8020f40:	20015210 	.word	0x20015210
 8020f44:	2001520a 	.word	0x2001520a

08020f48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8020f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020f4c:	b085      	sub	sp, #20
 8020f4e:	6810      	ldr	r0, [r2, #0]
 8020f50:	460c      	mov	r4, r1
 8020f52:	6851      	ldr	r1, [r2, #4]
 8020f54:	466d      	mov	r5, sp
 8020f56:	4616      	mov	r6, r2
 8020f58:	c503      	stmia	r5!, {r0, r1}
 8020f5a:	6818      	ldr	r0, [r3, #0]
 8020f5c:	6859      	ldr	r1, [r3, #4]
 8020f5e:	c503      	stmia	r5!, {r0, r1}
 8020f60:	4668      	mov	r0, sp
 8020f62:	4d2e      	ldr	r5, [pc, #184]	; (802101c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8020f64:	f7f9 ff9a 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f68:	4631      	mov	r1, r6
 8020f6a:	a802      	add	r0, sp, #8
 8020f6c:	4e2c      	ldr	r6, [pc, #176]	; (8021020 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8020f6e:	f7f9 ffbd 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f72:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8020f76:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8020f7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020f7e:	6828      	ldr	r0, [r5, #0]
 8020f80:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020f84:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8020f88:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8020f8c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020f90:	f8bd 1000 	ldrh.w	r1, [sp]
 8020f94:	440a      	add	r2, r1
 8020f96:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020f9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020f9e:	4413      	add	r3, r2
 8020fa0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020fa4:	6803      	ldr	r3, [r0, #0]
 8020fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fa8:	4798      	blx	r3
 8020faa:	8833      	ldrh	r3, [r6, #0]
 8020fac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020fb0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8020fb4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020fb8:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021024 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8020fbc:	fb03 1202 	mla	r2, r3, r2, r1
 8020fc0:	fb08 f303 	mul.w	r3, r8, r3
 8020fc4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020fc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020fcc:	4298      	cmp	r0, r3
 8020fce:	d21d      	bcs.n	802100c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8020fd0:	eb00 080c 	add.w	r8, r0, ip
 8020fd4:	4540      	cmp	r0, r8
 8020fd6:	d20f      	bcs.n	8020ff8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8020fd8:	f854 1b04 	ldr.w	r1, [r4], #4
 8020fdc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8020fe0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8020fe4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020fe8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020fec:	ea42 0209 	orr.w	r2, r2, r9
 8020ff0:	430a      	orrs	r2, r1
 8020ff2:	f820 2b02 	strh.w	r2, [r0], #2
 8020ff6:	e7ed      	b.n	8020fd4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8020ff8:	8832      	ldrh	r2, [r6, #0]
 8020ffa:	1bd2      	subs	r2, r2, r7
 8020ffc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021000:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021004:	1bd2      	subs	r2, r2, r7
 8021006:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802100a:	e7df      	b.n	8020fcc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 802100c:	6828      	ldr	r0, [r5, #0]
 802100e:	6803      	ldr	r3, [r0, #0]
 8021010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021012:	4798      	blx	r3
 8021014:	b005      	add	sp, #20
 8021016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802101a:	bf00      	nop
 802101c:	20015210 	.word	0x20015210
 8021020:	2001520a 	.word	0x2001520a
 8021024:	fffff800 	.word	0xfffff800

08021028 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802102c:	b08e      	sub	sp, #56	; 0x38
 802102e:	460e      	mov	r6, r1
 8021030:	4604      	mov	r4, r0
 8021032:	461d      	mov	r5, r3
 8021034:	6808      	ldr	r0, [r1, #0]
 8021036:	ab0a      	add	r3, sp, #40	; 0x28
 8021038:	6849      	ldr	r1, [r1, #4]
 802103a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8021210 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802103e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8021214 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021042:	c303      	stmia	r3!, {r0, r1}
 8021044:	6810      	ldr	r0, [r2, #0]
 8021046:	ab0c      	add	r3, sp, #48	; 0x30
 8021048:	6851      	ldr	r1, [r2, #4]
 802104a:	c303      	stmia	r3!, {r0, r1}
 802104c:	a80a      	add	r0, sp, #40	; 0x28
 802104e:	f7f9 ff25 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021052:	4631      	mov	r1, r6
 8021054:	a80c      	add	r0, sp, #48	; 0x30
 8021056:	f7f9 ff49 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802105a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802105e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021062:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021066:	f8d8 0000 	ldr.w	r0, [r8]
 802106a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802106e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021072:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8021076:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802107a:	440c      	add	r4, r1
 802107c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021080:	440a      	add	r2, r1
 8021082:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021086:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802108a:	4413      	add	r3, r2
 802108c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021090:	6803      	ldr	r3, [r0, #0]
 8021092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021094:	4798      	blx	r3
 8021096:	2dff      	cmp	r5, #255	; 0xff
 8021098:	d124      	bne.n	80210e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802109a:	f010 0f01 	tst.w	r0, #1
 802109e:	f8d8 0000 	ldr.w	r0, [r8]
 80210a2:	d022      	beq.n	80210ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80210a4:	2100      	movs	r1, #0
 80210a6:	f04f 0e01 	mov.w	lr, #1
 80210aa:	f8d0 c000 	ldr.w	ip, [r0]
 80210ae:	b2b6      	uxth	r6, r6
 80210b0:	f8cd e018 	str.w	lr, [sp, #24]
 80210b4:	b2bf      	uxth	r7, r7
 80210b6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80210ba:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80210be:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80210c2:	f8b9 e000 	ldrh.w	lr, [r9]
 80210c6:	9503      	str	r5, [sp, #12]
 80210c8:	9601      	str	r6, [sp, #4]
 80210ca:	9700      	str	r7, [sp, #0]
 80210cc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80210d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80210d4:	9102      	str	r1, [sp, #8]
 80210d6:	4621      	mov	r1, r4
 80210d8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80210dc:	47a8      	blx	r5
 80210de:	b00e      	add	sp, #56	; 0x38
 80210e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80210e4:	f010 0f04 	tst.w	r0, #4
 80210e8:	e7d9      	b.n	802109e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80210ea:	6803      	ldr	r3, [r0, #0]
 80210ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80210ee:	4798      	blx	r3
 80210f0:	f8b9 3000 	ldrh.w	r3, [r9]
 80210f4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80210f8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80210fc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021100:	435e      	muls	r6, r3
 8021102:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8021106:	2dff      	cmp	r5, #255	; 0xff
 8021108:	fb03 1202 	mla	r2, r3, r2, r1
 802110c:	ebac 0c07 	sub.w	ip, ip, r7
 8021110:	eba3 0707 	sub.w	r7, r3, r7
 8021114:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021118:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802111c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021120:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021124:	d049      	beq.n	80211ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8021126:	43eb      	mvns	r3, r5
 8021128:	fa1f f985 	uxth.w	r9, r5
 802112c:	b2db      	uxtb	r3, r3
 802112e:	42b0      	cmp	r0, r6
 8021130:	d266      	bcs.n	8021200 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021132:	eb00 0a0e 	add.w	sl, r0, lr
 8021136:	4550      	cmp	r0, sl
 8021138:	4621      	mov	r1, r4
 802113a:	f104 0403 	add.w	r4, r4, #3
 802113e:	d25b      	bcs.n	80211f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021140:	8802      	ldrh	r2, [r0, #0]
 8021142:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021146:	ea4f 2822 	mov.w	r8, r2, asr #8
 802114a:	fb11 f109 	smulbb	r1, r1, r9
 802114e:	10d5      	asrs	r5, r2, #3
 8021150:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021154:	00d2      	lsls	r2, r2, #3
 8021156:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802115a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802115e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021162:	fb08 1803 	mla	r8, r8, r3, r1
 8021166:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802116a:	b2d2      	uxtb	r2, r2
 802116c:	fb11 f109 	smulbb	r1, r1, r9
 8021170:	fa1f f888 	uxth.w	r8, r8
 8021174:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021178:	fb05 1503 	mla	r5, r5, r3, r1
 802117c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021180:	fb11 f109 	smulbb	r1, r1, r9
 8021184:	b2ad      	uxth	r5, r5
 8021186:	fb02 1203 	mla	r2, r2, r3, r1
 802118a:	f108 0101 	add.w	r1, r8, #1
 802118e:	b292      	uxth	r2, r2
 8021190:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021194:	1c51      	adds	r1, r2, #1
 8021196:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802119a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802119e:	1c69      	adds	r1, r5, #1
 80211a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80211a4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80211a8:	096d      	lsrs	r5, r5, #5
 80211aa:	ea42 0208 	orr.w	r2, r2, r8
 80211ae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80211b2:	432a      	orrs	r2, r5
 80211b4:	f820 2b02 	strh.w	r2, [r0], #2
 80211b8:	e7bd      	b.n	8021136 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80211ba:	4a14      	ldr	r2, [pc, #80]	; (802120c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80211bc:	42b0      	cmp	r0, r6
 80211be:	d21f      	bcs.n	8021200 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80211c0:	eb00 050e 	add.w	r5, r0, lr
 80211c4:	42a8      	cmp	r0, r5
 80211c6:	4621      	mov	r1, r4
 80211c8:	f104 0403 	add.w	r4, r4, #3
 80211cc:	d210      	bcs.n	80211f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80211ce:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80211d2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80211d6:	00db      	lsls	r3, r3, #3
 80211d8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80211dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80211e0:	430b      	orrs	r3, r1
 80211e2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80211e6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80211ea:	f820 3b02 	strh.w	r3, [r0], #2
 80211ee:	e7e9      	b.n	80211c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80211f0:	4438      	add	r0, r7
 80211f2:	eb01 040c 	add.w	r4, r1, ip
 80211f6:	e7e1      	b.n	80211bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80211f8:	4438      	add	r0, r7
 80211fa:	eb01 040c 	add.w	r4, r1, ip
 80211fe:	e796      	b.n	802112e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021200:	4b03      	ldr	r3, [pc, #12]	; (8021210 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8021202:	6818      	ldr	r0, [r3, #0]
 8021204:	6803      	ldr	r3, [r0, #0]
 8021206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021208:	4798      	blx	r3
 802120a:	e768      	b.n	80210de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 802120c:	fffff800 	.word	0xfffff800
 8021210:	20015210 	.word	0x20015210
 8021214:	2001520a 	.word	0x2001520a

08021218 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021218:	b4f0      	push	{r4, r5, r6, r7}
 802121a:	4616      	mov	r6, r2
 802121c:	461c      	mov	r4, r3
 802121e:	460d      	mov	r5, r1
 8021220:	9a04      	ldr	r2, [sp, #16]
 8021222:	2e01      	cmp	r6, #1
 8021224:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021228:	f89d 7018 	ldrb.w	r7, [sp, #24]
 802122c:	d012      	beq.n	8021254 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802122e:	d303      	bcc.n	8021238 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8021230:	2e02      	cmp	r6, #2
 8021232:	d00a      	beq.n	802124a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8021234:	bcf0      	pop	{r4, r5, r6, r7}
 8021236:	4770      	bx	lr
 8021238:	6805      	ldr	r5, [r0, #0]
 802123a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802123e:	68ed      	ldr	r5, [r5, #12]
 8021240:	4613      	mov	r3, r2
 8021242:	4622      	mov	r2, r4
 8021244:	46ac      	mov	ip, r5
 8021246:	bcf0      	pop	{r4, r5, r6, r7}
 8021248:	4760      	bx	ip
 802124a:	4621      	mov	r1, r4
 802124c:	4628      	mov	r0, r5
 802124e:	bcf0      	pop	{r4, r5, r6, r7}
 8021250:	f7ff bd94 	b.w	8020d7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021254:	4621      	mov	r1, r4
 8021256:	4628      	mov	r0, r5
 8021258:	bcf0      	pop	{r4, r5, r6, r7}
 802125a:	f7ff bee5 	b.w	8021028 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08021260 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021264:	b093      	sub	sp, #76	; 0x4c
 8021266:	4681      	mov	r9, r0
 8021268:	4688      	mov	r8, r1
 802126a:	6810      	ldr	r0, [r2, #0]
 802126c:	6851      	ldr	r1, [r2, #4]
 802126e:	ac0e      	add	r4, sp, #56	; 0x38
 8021270:	4616      	mov	r6, r2
 8021272:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8021276:	4f6b      	ldr	r7, [pc, #428]	; (8021424 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8021278:	c403      	stmia	r4!, {r0, r1}
 802127a:	6818      	ldr	r0, [r3, #0]
 802127c:	ac10      	add	r4, sp, #64	; 0x40
 802127e:	6859      	ldr	r1, [r3, #4]
 8021280:	c403      	stmia	r4!, {r0, r1}
 8021282:	a80e      	add	r0, sp, #56	; 0x38
 8021284:	f7f9 fe0a 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021288:	4631      	mov	r1, r6
 802128a:	a810      	add	r0, sp, #64	; 0x40
 802128c:	4e66      	ldr	r6, [pc, #408]	; (8021428 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802128e:	f7f9 fe2d 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021292:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021296:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802129a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802129e:	6830      	ldr	r0, [r6, #0]
 80212a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80212a4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80212a8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80212ac:	4489      	add	r9, r1
 80212ae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80212b2:	440a      	add	r2, r1
 80212b4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80212b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80212bc:	4413      	add	r3, r2
 80212be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80212c2:	6803      	ldr	r3, [r0, #0]
 80212c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80212c6:	4798      	blx	r3
 80212c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80212cc:	6830      	ldr	r0, [r6, #0]
 80212ce:	d01d      	beq.n	802130c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80212d0:	2200      	movs	r2, #0
 80212d2:	6801      	ldr	r1, [r0, #0]
 80212d4:	b2a4      	uxth	r4, r4
 80212d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80212da:	b2ad      	uxth	r5, r5
 80212dc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80212e0:	220b      	movs	r2, #11
 80212e2:	9207      	str	r2, [sp, #28]
 80212e4:	883a      	ldrh	r2, [r7, #0]
 80212e6:	9502      	str	r5, [sp, #8]
 80212e8:	9206      	str	r2, [sp, #24]
 80212ea:	2201      	movs	r2, #1
 80212ec:	9401      	str	r4, [sp, #4]
 80212ee:	e9cd a204 	strd	sl, r2, [sp, #16]
 80212f2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80212f6:	9203      	str	r2, [sp, #12]
 80212f8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80212fc:	9200      	str	r2, [sp, #0]
 80212fe:	4642      	mov	r2, r8
 8021300:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8021302:	4649      	mov	r1, r9
 8021304:	47a0      	blx	r4
 8021306:	b013      	add	sp, #76	; 0x4c
 8021308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802130c:	6803      	ldr	r3, [r0, #0]
 802130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021310:	4798      	blx	r3
 8021312:	883b      	ldrh	r3, [r7, #0]
 8021314:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021318:	f04f 0e04 	mov.w	lr, #4
 802131c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021320:	435d      	muls	r5, r3
 8021322:	fb03 1202 	mla	r2, r3, r2, r1
 8021326:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802132a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802132e:	920c      	str	r2, [sp, #48]	; 0x30
 8021330:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021334:	1b12      	subs	r2, r2, r4
 8021336:	920d      	str	r2, [sp, #52]	; 0x34
 8021338:	0062      	lsls	r2, r4, #1
 802133a:	1b1c      	subs	r4, r3, r4
 802133c:	920a      	str	r2, [sp, #40]	; 0x28
 802133e:	0063      	lsls	r3, r4, #1
 8021340:	930b      	str	r3, [sp, #44]	; 0x2c
 8021342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021344:	4298      	cmp	r0, r3
 8021346:	d266      	bcs.n	8021416 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8021348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802134a:	eb00 0b03 	add.w	fp, r0, r3
 802134e:	4558      	cmp	r0, fp
 8021350:	d25c      	bcs.n	802140c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8021352:	f819 3b01 	ldrb.w	r3, [r9], #1
 8021356:	fb1e e303 	smlabb	r3, lr, r3, lr
 802135a:	f858 2003 	ldr.w	r2, [r8, r3]
 802135e:	0e11      	lsrs	r1, r2, #24
 8021360:	d012      	beq.n	8021388 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021362:	29ff      	cmp	r1, #255	; 0xff
 8021364:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8021368:	d110      	bne.n	802138c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802136a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802136e:	d10d      	bne.n	802138c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021370:	0953      	lsrs	r3, r2, #5
 8021372:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8021376:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802137a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802137e:	f027 0707 	bic.w	r7, r7, #7
 8021382:	431f      	orrs	r7, r3
 8021384:	433a      	orrs	r2, r7
 8021386:	8002      	strh	r2, [r0, #0]
 8021388:	3002      	adds	r0, #2
 802138a:	e7e0      	b.n	802134e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 802138c:	fb0a f101 	mul.w	r1, sl, r1
 8021390:	8806      	ldrh	r6, [r0, #0]
 8021392:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021396:	b2d2      	uxtb	r2, r2
 8021398:	1c4b      	adds	r3, r1, #1
 802139a:	1235      	asrs	r5, r6, #8
 802139c:	10f4      	asrs	r4, r6, #3
 802139e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80213a2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80213a6:	00f6      	lsls	r6, r6, #3
 80213a8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80213ac:	121b      	asrs	r3, r3, #8
 80213ae:	b2f6      	uxtb	r6, r6
 80213b0:	b299      	uxth	r1, r3
 80213b2:	43db      	mvns	r3, r3
 80213b4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80213b8:	fb1c fc01 	smulbb	ip, ip, r1
 80213bc:	b2db      	uxtb	r3, r3
 80213be:	fb12 f201 	smulbb	r2, r2, r1
 80213c2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80213c6:	fb05 c503 	mla	r5, r5, r3, ip
 80213ca:	b2ff      	uxtb	r7, r7
 80213cc:	fb06 2203 	mla	r2, r6, r3, r2
 80213d0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80213d4:	fb17 f701 	smulbb	r7, r7, r1
 80213d8:	b2ad      	uxth	r5, r5
 80213da:	b292      	uxth	r2, r2
 80213dc:	fb04 7403 	mla	r4, r4, r3, r7
 80213e0:	f105 0c01 	add.w	ip, r5, #1
 80213e4:	1c57      	adds	r7, r2, #1
 80213e6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80213ea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80213ee:	b2a4      	uxth	r4, r4
 80213f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80213f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80213f8:	433d      	orrs	r5, r7
 80213fa:	1c67      	adds	r7, r4, #1
 80213fc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8021400:	0964      	lsrs	r4, r4, #5
 8021402:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021406:	4325      	orrs	r5, r4
 8021408:	8005      	strh	r5, [r0, #0]
 802140a:	e7bd      	b.n	8021388 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802140c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802140e:	4418      	add	r0, r3
 8021410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021412:	4499      	add	r9, r3
 8021414:	e795      	b.n	8021342 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8021416:	4b04      	ldr	r3, [pc, #16]	; (8021428 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8021418:	6818      	ldr	r0, [r3, #0]
 802141a:	6803      	ldr	r3, [r0, #0]
 802141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802141e:	4798      	blx	r3
 8021420:	e771      	b.n	8021306 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8021422:	bf00      	nop
 8021424:	2001520a 	.word	0x2001520a
 8021428:	20015210 	.word	0x20015210

0802142c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 802142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021430:	b087      	sub	sp, #28
 8021432:	4680      	mov	r8, r0
 8021434:	460d      	mov	r5, r1
 8021436:	4614      	mov	r4, r2
 8021438:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 802143c:	2e00      	cmp	r6, #0
 802143e:	f000 80b9 	beq.w	80215b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8021442:	6810      	ldr	r0, [r2, #0]
 8021444:	af02      	add	r7, sp, #8
 8021446:	6851      	ldr	r1, [r2, #4]
 8021448:	c703      	stmia	r7!, {r0, r1}
 802144a:	6818      	ldr	r0, [r3, #0]
 802144c:	af04      	add	r7, sp, #16
 802144e:	6859      	ldr	r1, [r3, #4]
 8021450:	c703      	stmia	r7!, {r0, r1}
 8021452:	a802      	add	r0, sp, #8
 8021454:	f7f9 fd22 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021458:	4621      	mov	r1, r4
 802145a:	a804      	add	r0, sp, #16
 802145c:	f7f9 fd46 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021460:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021464:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021468:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802146c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021470:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021474:	eb08 0401 	add.w	r4, r8, r1
 8021478:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802147c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021480:	440a      	add	r2, r1
 8021482:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021486:	f8ad 2010 	strh.w	r2, [sp, #16]
 802148a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802148e:	4413      	add	r3, r2
 8021490:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021494:	4b49      	ldr	r3, [pc, #292]	; (80215bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8021496:	6818      	ldr	r0, [r3, #0]
 8021498:	6803      	ldr	r3, [r0, #0]
 802149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802149c:	4798      	blx	r3
 802149e:	4b48      	ldr	r3, [pc, #288]	; (80215c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80214a0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80214a4:	2eff      	cmp	r6, #255	; 0xff
 80214a6:	881a      	ldrh	r2, [r3, #0]
 80214a8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80214ac:	fb02 c101 	mla	r1, r2, r1, ip
 80214b0:	fb02 f207 	mul.w	r2, r2, r7
 80214b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80214b8:	f105 0104 	add.w	r1, r5, #4
 80214bc:	461d      	mov	r5, r3
 80214be:	d05a      	beq.n	8021576 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80214c0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80214c4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80214c8:	b2b6      	uxth	r6, r6
 80214ca:	9301      	str	r3, [sp, #4]
 80214cc:	fa1f fe8e 	uxth.w	lr, lr
 80214d0:	4282      	cmp	r2, r0
 80214d2:	d96a      	bls.n	80215aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80214d4:	eb00 0b0a 	add.w	fp, r0, sl
 80214d8:	4583      	cmp	fp, r0
 80214da:	d940      	bls.n	802155e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80214dc:	8805      	ldrh	r5, [r0, #0]
 80214de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80214e2:	122f      	asrs	r7, r5, #8
 80214e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80214e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80214ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80214f0:	00ed      	lsls	r5, r5, #3
 80214f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80214f6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80214fa:	fb17 f70e 	smulbb	r7, r7, lr
 80214fe:	b2ed      	uxtb	r5, r5
 8021500:	fb19 f90e 	smulbb	r9, r9, lr
 8021504:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021508:	fb15 f50e 	smulbb	r5, r5, lr
 802150c:	fb0c 7c06 	mla	ip, ip, r6, r7
 8021510:	10df      	asrs	r7, r3, #3
 8021512:	00db      	lsls	r3, r3, #3
 8021514:	fa1f fc8c 	uxth.w	ip, ip
 8021518:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802151c:	b2db      	uxtb	r3, r3
 802151e:	fb07 9706 	mla	r7, r7, r6, r9
 8021522:	f10c 0901 	add.w	r9, ip, #1
 8021526:	fb03 5306 	mla	r3, r3, r6, r5
 802152a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802152e:	b29b      	uxth	r3, r3
 8021530:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8021534:	b2bf      	uxth	r7, r7
 8021536:	f103 0c01 	add.w	ip, r3, #1
 802153a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802153e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021542:	ea4c 0c09 	orr.w	ip, ip, r9
 8021546:	f107 0901 	add.w	r9, r7, #1
 802154a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802154e:	097f      	lsrs	r7, r7, #5
 8021550:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021554:	ea4c 0c07 	orr.w	ip, ip, r7
 8021558:	f820 cb02 	strh.w	ip, [r0], #2
 802155c:	e7bc      	b.n	80214d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 802155e:	9b01      	ldr	r3, [sp, #4]
 8021560:	881b      	ldrh	r3, [r3, #0]
 8021562:	eba3 0308 	sub.w	r3, r3, r8
 8021566:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802156a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802156e:	eba3 0308 	sub.w	r3, r3, r8
 8021572:	441c      	add	r4, r3
 8021574:	e7ac      	b.n	80214d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8021576:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802157a:	4282      	cmp	r2, r0
 802157c:	d915      	bls.n	80215aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802157e:	eb00 060a 	add.w	r6, r0, sl
 8021582:	4286      	cmp	r6, r0
 8021584:	d906      	bls.n	8021594 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8021586:	f814 3b01 	ldrb.w	r3, [r4], #1
 802158a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802158e:	f820 3b02 	strh.w	r3, [r0], #2
 8021592:	e7f6      	b.n	8021582 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8021594:	882b      	ldrh	r3, [r5, #0]
 8021596:	eba3 0308 	sub.w	r3, r3, r8
 802159a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802159e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80215a2:	eba3 0308 	sub.w	r3, r3, r8
 80215a6:	441c      	add	r4, r3
 80215a8:	e7e7      	b.n	802157a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80215aa:	4b04      	ldr	r3, [pc, #16]	; (80215bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80215ac:	6818      	ldr	r0, [r3, #0]
 80215ae:	6803      	ldr	r3, [r0, #0]
 80215b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215b2:	4798      	blx	r3
 80215b4:	b007      	add	sp, #28
 80215b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215ba:	bf00      	nop
 80215bc:	20015210 	.word	0x20015210
 80215c0:	2001520a 	.word	0x2001520a

080215c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80215c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c8:	b091      	sub	sp, #68	; 0x44
 80215ca:	4680      	mov	r8, r0
 80215cc:	460f      	mov	r7, r1
 80215ce:	4614      	mov	r4, r2
 80215d0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 80215d4:	2d00      	cmp	r5, #0
 80215d6:	d051      	beq.n	802167c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80215d8:	6810      	ldr	r0, [r2, #0]
 80215da:	ae0c      	add	r6, sp, #48	; 0x30
 80215dc:	6851      	ldr	r1, [r2, #4]
 80215de:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80217e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80215e2:	c603      	stmia	r6!, {r0, r1}
 80215e4:	6818      	ldr	r0, [r3, #0]
 80215e6:	ae0e      	add	r6, sp, #56	; 0x38
 80215e8:	6859      	ldr	r1, [r3, #4]
 80215ea:	c603      	stmia	r6!, {r0, r1}
 80215ec:	a80c      	add	r0, sp, #48	; 0x30
 80215ee:	f7f9 fc55 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215f2:	4621      	mov	r1, r4
 80215f4:	a80e      	add	r0, sp, #56	; 0x38
 80215f6:	f7f9 fc79 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80215fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021602:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021606:	f8d9 0000 	ldr.w	r0, [r9]
 802160a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802160e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8021612:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8021616:	eb08 0401 	add.w	r4, r8, r1
 802161a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802161e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80217e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8021622:	440a      	add	r2, r1
 8021624:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021628:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802162c:	4413      	add	r3, r2
 802162e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021632:	6803      	ldr	r3, [r0, #0]
 8021634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021636:	4798      	blx	r3
 8021638:	f010 0f80 	tst.w	r0, #128	; 0x80
 802163c:	f8d9 0000 	ldr.w	r0, [r9]
 8021640:	d01f      	beq.n	8021682 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8021642:	2200      	movs	r2, #0
 8021644:	6801      	ldr	r1, [r0, #0]
 8021646:	b2b6      	uxth	r6, r6
 8021648:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802164c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021650:	220b      	movs	r2, #11
 8021652:	9207      	str	r2, [sp, #28]
 8021654:	f8b8 2000 	ldrh.w	r2, [r8]
 8021658:	9601      	str	r6, [sp, #4]
 802165a:	9206      	str	r2, [sp, #24]
 802165c:	2201      	movs	r2, #1
 802165e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8021662:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021666:	9203      	str	r2, [sp, #12]
 8021668:	fa1f f28a 	uxth.w	r2, sl
 802166c:	9202      	str	r2, [sp, #8]
 802166e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021672:	9200      	str	r2, [sp, #0]
 8021674:	463a      	mov	r2, r7
 8021676:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021678:	4621      	mov	r1, r4
 802167a:	47a8      	blx	r5
 802167c:	b011      	add	sp, #68	; 0x44
 802167e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021682:	6803      	ldr	r3, [r0, #0]
 8021684:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802168a:	4798      	blx	r3
 802168c:	f8b8 2000 	ldrh.w	r2, [r8]
 8021690:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021694:	2dff      	cmp	r5, #255	; 0xff
 8021696:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802169a:	fb0a fa02 	mul.w	sl, sl, r2
 802169e:	fb02 1303 	mla	r3, r2, r3, r1
 80216a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80216a6:	d062      	beq.n	802176e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80216a8:	ea6f 0c05 	mvn.w	ip, r5
 80216ac:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80216b0:	b2ad      	uxth	r5, r5
 80216b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80216b6:	fa5f fc8c 	uxtb.w	ip, ip
 80216ba:	930a      	str	r3, [sp, #40]	; 0x28
 80216bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216be:	4298      	cmp	r0, r3
 80216c0:	f080 8085 	bcs.w	80217ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80216c4:	eb00 0b09 	add.w	fp, r0, r9
 80216c8:	4558      	cmp	r0, fp
 80216ca:	d246      	bcs.n	802175a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80216cc:	f814 eb01 	ldrb.w	lr, [r4], #1
 80216d0:	2303      	movs	r3, #3
 80216d2:	2204      	movs	r2, #4
 80216d4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80216d8:	8803      	ldrh	r3, [r0, #0]
 80216da:	eb07 0a0e 	add.w	sl, r7, lr
 80216de:	1219      	asrs	r1, r3, #8
 80216e0:	10da      	asrs	r2, r3, #3
 80216e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80216e6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80216ea:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80216ee:	00db      	lsls	r3, r3, #3
 80216f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80216f4:	fb18 f805 	smulbb	r8, r8, r5
 80216f8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80216fc:	fb1e fe05 	smulbb	lr, lr, r5
 8021700:	b2db      	uxtb	r3, r3
 8021702:	fb01 810c 	mla	r1, r1, ip, r8
 8021706:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802170a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802170e:	fb18 f805 	smulbb	r8, r8, r5
 8021712:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021716:	b289      	uxth	r1, r1
 8021718:	fb02 820c 	mla	r2, r2, ip, r8
 802171c:	fb03 e30c 	mla	r3, r3, ip, lr
 8021720:	f101 0801 	add.w	r8, r1, #1
 8021724:	b292      	uxth	r2, r2
 8021726:	b29b      	uxth	r3, r3
 8021728:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802172c:	f102 0801 	add.w	r8, r2, #1
 8021730:	f103 0e01 	add.w	lr, r3, #1
 8021734:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021738:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802173c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021740:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021744:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021748:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802174c:	ea4e 0101 	orr.w	r1, lr, r1
 8021750:	ea41 0108 	orr.w	r1, r1, r8
 8021754:	f820 1b02 	strh.w	r1, [r0], #2
 8021758:	e7b6      	b.n	80216c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 802175a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802175c:	881b      	ldrh	r3, [r3, #0]
 802175e:	1b9b      	subs	r3, r3, r6
 8021760:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021764:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021768:	1b9b      	subs	r3, r3, r6
 802176a:	441c      	add	r4, r3
 802176c:	e7a6      	b.n	80216bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 802176e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021772:	2203      	movs	r2, #3
 8021774:	2504      	movs	r5, #4
 8021776:	4919      	ldr	r1, [pc, #100]	; (80217dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8021778:	4550      	cmp	r0, sl
 802177a:	d228      	bcs.n	80217ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802177c:	eb00 0c09 	add.w	ip, r0, r9
 8021780:	4560      	cmp	r0, ip
 8021782:	4623      	mov	r3, r4
 8021784:	d219      	bcs.n	80217ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8021786:	f893 e000 	ldrb.w	lr, [r3]
 802178a:	3401      	adds	r4, #1
 802178c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021790:	eb07 0b0e 	add.w	fp, r7, lr
 8021794:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021798:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802179c:	f89b b001 	ldrb.w	fp, [fp, #1]
 80217a0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80217a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80217a8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80217ac:	ea43 030b 	orr.w	r3, r3, fp
 80217b0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80217b4:	f820 3b02 	strh.w	r3, [r0], #2
 80217b8:	e7e2      	b.n	8021780 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80217ba:	f8b8 3000 	ldrh.w	r3, [r8]
 80217be:	1b9b      	subs	r3, r3, r6
 80217c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80217c4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80217c8:	1b9b      	subs	r3, r3, r6
 80217ca:	441c      	add	r4, r3
 80217cc:	e7d4      	b.n	8021778 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80217ce:	4b04      	ldr	r3, [pc, #16]	; (80217e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80217d0:	6818      	ldr	r0, [r3, #0]
 80217d2:	6803      	ldr	r3, [r0, #0]
 80217d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217d6:	4798      	blx	r3
 80217d8:	e750      	b.n	802167c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80217da:	bf00      	nop
 80217dc:	fffff800 	.word	0xfffff800
 80217e0:	20015210 	.word	0x20015210
 80217e4:	2001520a 	.word	0x2001520a

080217e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80217e8:	b430      	push	{r4, r5}
 80217ea:	780d      	ldrb	r5, [r1, #0]
 80217ec:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80217f0:	2d01      	cmp	r5, #1
 80217f2:	d00a      	beq.n	802180a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80217f4:	d305      	bcc.n	8021802 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80217f6:	2d02      	cmp	r5, #2
 80217f8:	d10b      	bne.n	8021812 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80217fa:	9402      	str	r4, [sp, #8]
 80217fc:	bc30      	pop	{r4, r5}
 80217fe:	f7ff be15 	b.w	802142c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021802:	9402      	str	r4, [sp, #8]
 8021804:	bc30      	pop	{r4, r5}
 8021806:	f7ff bd2b 	b.w	8021260 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802180a:	9402      	str	r4, [sp, #8]
 802180c:	bc30      	pop	{r4, r5}
 802180e:	f7ff bed9 	b.w	80215c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021812:	bc30      	pop	{r4, r5}
 8021814:	4770      	bx	lr
	...

08021818 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802181c:	b087      	sub	sp, #28
 802181e:	4604      	mov	r4, r0
 8021820:	460e      	mov	r6, r1
 8021822:	6810      	ldr	r0, [r2, #0]
 8021824:	6851      	ldr	r1, [r2, #4]
 8021826:	ad02      	add	r5, sp, #8
 8021828:	4617      	mov	r7, r2
 802182a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802182e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021a60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8021832:	c503      	stmia	r5!, {r0, r1}
 8021834:	6818      	ldr	r0, [r3, #0]
 8021836:	ad04      	add	r5, sp, #16
 8021838:	6859      	ldr	r1, [r3, #4]
 802183a:	c503      	stmia	r5!, {r0, r1}
 802183c:	a802      	add	r0, sp, #8
 802183e:	f7f9 fb2d 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021842:	4639      	mov	r1, r7
 8021844:	a804      	add	r0, sp, #16
 8021846:	f7f9 fb51 	bl	801aeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802184a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802184e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021852:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021856:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802185a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802185e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021862:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021866:	440e      	add	r6, r1
 8021868:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802186c:	440a      	add	r2, r1
 802186e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021872:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021876:	4413      	add	r3, r2
 8021878:	f8ad 3012 	strh.w	r3, [sp, #18]
 802187c:	4b77      	ldr	r3, [pc, #476]	; (8021a5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802187e:	6818      	ldr	r0, [r3, #0]
 8021880:	6803      	ldr	r3, [r0, #0]
 8021882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021884:	4798      	blx	r3
 8021886:	f8b9 b000 	ldrh.w	fp, [r9]
 802188a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802188e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021892:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021896:	fb05 f50b 	mul.w	r5, r5, fp
 802189a:	fb0b 2303 	mla	r3, fp, r3, r2
 802189e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80218a2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80218a6:	9300      	str	r3, [sp, #0]
 80218a8:	d069      	beq.n	802197e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80218aa:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80218ae:	4558      	cmp	r0, fp
 80218b0:	f080 80cc 	bcs.w	8021a4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80218b4:	9b00      	ldr	r3, [sp, #0]
 80218b6:	4631      	mov	r1, r6
 80218b8:	18c3      	adds	r3, r0, r3
 80218ba:	9301      	str	r3, [sp, #4]
 80218bc:	9b01      	ldr	r3, [sp, #4]
 80218be:	4298      	cmp	r0, r3
 80218c0:	d24f      	bcs.n	8021962 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80218c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80218c6:	2a00      	cmp	r2, #0
 80218c8:	d048      	beq.n	802195c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80218ca:	fb0a f202 	mul.w	r2, sl, r2
 80218ce:	1c53      	adds	r3, r2, #1
 80218d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80218d4:	121b      	asrs	r3, r3, #8
 80218d6:	d041      	beq.n	802195c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80218d8:	8802      	ldrh	r2, [r0, #0]
 80218da:	b29e      	uxth	r6, r3
 80218dc:	f8b4 c000 	ldrh.w	ip, [r4]
 80218e0:	43db      	mvns	r3, r3
 80218e2:	1215      	asrs	r5, r2, #8
 80218e4:	b2db      	uxtb	r3, r3
 80218e6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80218ea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80218ee:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80218f2:	fb15 f503 	smulbb	r5, r5, r3
 80218f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80218fa:	00d2      	lsls	r2, r2, #3
 80218fc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021900:	fb07 5706 	mla	r7, r7, r6, r5
 8021904:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021908:	b2d2      	uxtb	r2, r2
 802190a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802190e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021912:	fb1e fe03 	smulbb	lr, lr, r3
 8021916:	b2bf      	uxth	r7, r7
 8021918:	fb12 f203 	smulbb	r2, r2, r3
 802191c:	fa5f fc8c 	uxtb.w	ip, ip
 8021920:	fb05 e506 	mla	r5, r5, r6, lr
 8021924:	f107 0e01 	add.w	lr, r7, #1
 8021928:	fb0c 2c06 	mla	ip, ip, r6, r2
 802192c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021930:	fa1f fc8c 	uxth.w	ip, ip
 8021934:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021938:	b2ad      	uxth	r5, r5
 802193a:	f10c 0701 	add.w	r7, ip, #1
 802193e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021942:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021946:	ea47 070e 	orr.w	r7, r7, lr
 802194a:	f105 0e01 	add.w	lr, r5, #1
 802194e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021952:	096d      	lsrs	r5, r5, #5
 8021954:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021958:	432f      	orrs	r7, r5
 802195a:	8007      	strh	r7, [r0, #0]
 802195c:	3002      	adds	r0, #2
 802195e:	3402      	adds	r4, #2
 8021960:	e7ac      	b.n	80218bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021962:	f8b9 3000 	ldrh.w	r3, [r9]
 8021966:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802196a:	eba3 0308 	sub.w	r3, r3, r8
 802196e:	eba6 0608 	sub.w	r6, r6, r8
 8021972:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021976:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802197a:	440e      	add	r6, r1
 802197c:	e797      	b.n	80218ae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802197e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021982:	42a8      	cmp	r0, r5
 8021984:	d262      	bcs.n	8021a4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021986:	9b00      	ldr	r3, [sp, #0]
 8021988:	4631      	mov	r1, r6
 802198a:	eb00 0b03 	add.w	fp, r0, r3
 802198e:	4558      	cmp	r0, fp
 8021990:	d24e      	bcs.n	8021a30 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021996:	b12b      	cbz	r3, 80219a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021998:	2bff      	cmp	r3, #255	; 0xff
 802199a:	f8b4 e000 	ldrh.w	lr, [r4]
 802199e:	d104      	bne.n	80219aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80219a0:	f8a0 e000 	strh.w	lr, [r0]
 80219a4:	3002      	adds	r0, #2
 80219a6:	3402      	adds	r4, #2
 80219a8:	e7f1      	b.n	802198e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80219aa:	8802      	ldrh	r2, [r0, #0]
 80219ac:	b29f      	uxth	r7, r3
 80219ae:	43db      	mvns	r3, r3
 80219b0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80219b4:	1216      	asrs	r6, r2, #8
 80219b6:	b2db      	uxtb	r3, r3
 80219b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80219bc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80219c0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80219c4:	00d2      	lsls	r2, r2, #3
 80219c6:	fb16 f603 	smulbb	r6, r6, r3
 80219ca:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80219ce:	b2d2      	uxtb	r2, r2
 80219d0:	fb0c 6c07 	mla	ip, ip, r7, r6
 80219d4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80219d8:	fb1a fa03 	smulbb	sl, sl, r3
 80219dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80219e0:	fa1f fc8c 	uxth.w	ip, ip
 80219e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80219e8:	fb12 f303 	smulbb	r3, r2, r3
 80219ec:	fa5f fe8e 	uxtb.w	lr, lr
 80219f0:	fb06 a607 	mla	r6, r6, r7, sl
 80219f4:	f10c 0201 	add.w	r2, ip, #1
 80219f8:	fb0e 3307 	mla	r3, lr, r7, r3
 80219fc:	b2b6      	uxth	r6, r6
 80219fe:	b29b      	uxth	r3, r3
 8021a00:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021a04:	f106 0a01 	add.w	sl, r6, #1
 8021a08:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021a0c:	f103 0c01 	add.w	ip, r3, #1
 8021a10:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021a14:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021a18:	0976      	lsrs	r6, r6, #5
 8021a1a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021a1e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021a22:	ea4c 0c02 	orr.w	ip, ip, r2
 8021a26:	ea4c 0c06 	orr.w	ip, ip, r6
 8021a2a:	f8a0 c000 	strh.w	ip, [r0]
 8021a2e:	e7b9      	b.n	80219a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021a30:	f8b9 3000 	ldrh.w	r3, [r9]
 8021a34:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021a38:	eba3 0308 	sub.w	r3, r3, r8
 8021a3c:	eba6 0608 	sub.w	r6, r6, r8
 8021a40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a44:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021a48:	440e      	add	r6, r1
 8021a4a:	e79a      	b.n	8021982 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021a4c:	4b03      	ldr	r3, [pc, #12]	; (8021a5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021a4e:	6818      	ldr	r0, [r3, #0]
 8021a50:	6803      	ldr	r3, [r0, #0]
 8021a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a54:	4798      	blx	r3
 8021a56:	b007      	add	sp, #28
 8021a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a5c:	20015210 	.word	0x20015210
 8021a60:	2001520a 	.word	0x2001520a

08021a64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a68:	b089      	sub	sp, #36	; 0x24
 8021a6a:	4682      	mov	sl, r0
 8021a6c:	460f      	mov	r7, r1
 8021a6e:	4691      	mov	r9, r2
 8021a70:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021a74:	4698      	mov	r8, r3
 8021a76:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021a78:	2e00      	cmp	r6, #0
 8021a7a:	d036      	beq.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021a7c:	4608      	mov	r0, r1
 8021a7e:	f7fc f861 	bl	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021a82:	4605      	mov	r5, r0
 8021a84:	4638      	mov	r0, r7
 8021a86:	f7fc f891 	bl	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021a8a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021a8e:	4638      	mov	r0, r7
 8021a90:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021a94:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021a98:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021a9c:	f7fc f93e 	bl	801dd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 8021aa0:	4605      	mov	r5, r0
 8021aa2:	4638      	mov	r0, r7
 8021aa4:	f7fc f96a 	bl	801dd7c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021aa8:	4681      	mov	r9, r0
 8021aaa:	4638      	mov	r0, r7
 8021aac:	f7fc f9ba 	bl	801de24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021ab0:	280b      	cmp	r0, #11
 8021ab2:	d81a      	bhi.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021ab4:	e8df f000 	tbb	[pc, r0]
 8021ab8:	1906aebd 	.word	0x1906aebd
 8021abc:	19191919 	.word	0x19191919
 8021ac0:	b5191919 	.word	0xb5191919
 8021ac4:	4bb0      	ldr	r3, [pc, #704]	; (8021d88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8021ac6:	6818      	ldr	r0, [r3, #0]
 8021ac8:	6803      	ldr	r3, [r0, #0]
 8021aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021acc:	4798      	blx	r3
 8021ace:	2eff      	cmp	r6, #255	; 0xff
 8021ad0:	d121      	bne.n	8021b16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021ad2:	0683      	lsls	r3, r0, #26
 8021ad4:	d41f      	bmi.n	8021b16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021ad6:	4638      	mov	r0, r7
 8021ad8:	f7fc f8e8 	bl	801dcac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021adc:	b940      	cbnz	r0, 8021af0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8021ade:	4623      	mov	r3, r4
 8021ae0:	aa02      	add	r2, sp, #8
 8021ae2:	4629      	mov	r1, r5
 8021ae4:	4650      	mov	r0, sl
 8021ae6:	f7ff fa2f 	bl	8020f48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021aea:	b009      	add	sp, #36	; 0x24
 8021aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021af0:	f10d 0818 	add.w	r8, sp, #24
 8021af4:	4639      	mov	r1, r7
 8021af6:	af04      	add	r7, sp, #16
 8021af8:	4640      	mov	r0, r8
 8021afa:	f7fc f88b 	bl	801dc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021afe:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021b02:	e887 0003 	stmia.w	r7, {r0, r1}
 8021b06:	4638      	mov	r0, r7
 8021b08:	4621      	mov	r1, r4
 8021b0a:	f7f5 f9b1 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8021b0e:	4638      	mov	r0, r7
 8021b10:	f7f5 f9f1 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021b14:	b130      	cbz	r0, 8021b24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021b16:	4633      	mov	r3, r6
 8021b18:	4622      	mov	r2, r4
 8021b1a:	a902      	add	r1, sp, #8
 8021b1c:	4628      	mov	r0, r5
 8021b1e:	f7ff f92d 	bl	8020d7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021b22:	e7e2      	b.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021b24:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021b28:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021b2c:	4293      	cmp	r3, r2
 8021b2e:	dd12      	ble.n	8021b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8021b30:	1a9b      	subs	r3, r3, r2
 8021b32:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021b36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021b3a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021b3e:	4628      	mov	r0, r5
 8021b40:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021b44:	4642      	mov	r2, r8
 8021b46:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021b4a:	a902      	add	r1, sp, #8
 8021b4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021b50:	4633      	mov	r3, r6
 8021b52:	f7ff f913 	bl	8020d7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021b56:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021b5a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021b5e:	4293      	cmp	r3, r2
 8021b60:	dd12      	ble.n	8021b88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8021b62:	1a9b      	subs	r3, r3, r2
 8021b64:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021b68:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021b6c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021b70:	4642      	mov	r2, r8
 8021b72:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021b76:	4628      	mov	r0, r5
 8021b78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021b7c:	23ff      	movs	r3, #255	; 0xff
 8021b7e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021b82:	a902      	add	r1, sp, #8
 8021b84:	f7ff f8fa 	bl	8020d7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021b88:	463b      	mov	r3, r7
 8021b8a:	aa02      	add	r2, sp, #8
 8021b8c:	4629      	mov	r1, r5
 8021b8e:	4650      	mov	r0, sl
 8021b90:	f7ff f9da 	bl	8020f48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021b94:	88a2      	ldrh	r2, [r4, #4]
 8021b96:	8823      	ldrh	r3, [r4, #0]
 8021b98:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021b9c:	4413      	add	r3, r2
 8021b9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021ba2:	440a      	add	r2, r1
 8021ba4:	b29b      	uxth	r3, r3
 8021ba6:	b292      	uxth	r2, r2
 8021ba8:	b218      	sxth	r0, r3
 8021baa:	b211      	sxth	r1, r2
 8021bac:	4288      	cmp	r0, r1
 8021bae:	dd12      	ble.n	8021bd6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8021bb0:	1a9b      	subs	r3, r3, r2
 8021bb2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021bb6:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021bba:	4642      	mov	r2, r8
 8021bbc:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021bc0:	a902      	add	r1, sp, #8
 8021bc2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021bc6:	23ff      	movs	r3, #255	; 0xff
 8021bc8:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021bcc:	4628      	mov	r0, r5
 8021bce:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021bd2:	f7ff f8d3 	bl	8020d7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021bd6:	88e2      	ldrh	r2, [r4, #6]
 8021bd8:	8863      	ldrh	r3, [r4, #2]
 8021bda:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021bde:	4413      	add	r3, r2
 8021be0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021be4:	440a      	add	r2, r1
 8021be6:	b29b      	uxth	r3, r3
 8021be8:	b292      	uxth	r2, r2
 8021bea:	b218      	sxth	r0, r3
 8021bec:	b211      	sxth	r1, r2
 8021bee:	4288      	cmp	r0, r1
 8021bf0:	f77f af7b 	ble.w	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021bf4:	1a9b      	subs	r3, r3, r2
 8021bf6:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021bfa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021bfe:	4642      	mov	r2, r8
 8021c00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021c04:	23ff      	movs	r3, #255	; 0xff
 8021c06:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021c0a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021c0e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021c12:	e782      	b.n	8021b1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8021c14:	4633      	mov	r3, r6
 8021c16:	4622      	mov	r2, r4
 8021c18:	a902      	add	r1, sp, #8
 8021c1a:	4628      	mov	r0, r5
 8021c1c:	f7ff fa04 	bl	8021028 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021c20:	e763      	b.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021c22:	9600      	str	r6, [sp, #0]
 8021c24:	4623      	mov	r3, r4
 8021c26:	aa02      	add	r2, sp, #8
 8021c28:	4649      	mov	r1, r9
 8021c2a:	4628      	mov	r0, r5
 8021c2c:	f7ff fddc 	bl	80217e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021c30:	e75b      	b.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021c32:	4638      	mov	r0, r7
 8021c34:	f7fc f83a 	bl	801dcac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021c38:	b950      	cbnz	r0, 8021c50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8021c3a:	f8da 3000 	ldr.w	r3, [sl]
 8021c3e:	aa02      	add	r2, sp, #8
 8021c40:	4629      	mov	r1, r5
 8021c42:	e9cd 6000 	strd	r6, r0, [sp]
 8021c46:	4650      	mov	r0, sl
 8021c48:	68de      	ldr	r6, [r3, #12]
 8021c4a:	4623      	mov	r3, r4
 8021c4c:	47b0      	blx	r6
 8021c4e:	e74c      	b.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021c50:	f10d 0818 	add.w	r8, sp, #24
 8021c54:	4639      	mov	r1, r7
 8021c56:	af04      	add	r7, sp, #16
 8021c58:	4640      	mov	r0, r8
 8021c5a:	f7fb ffdb 	bl	801dc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021c5e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021c62:	e887 0003 	stmia.w	r7, {r0, r1}
 8021c66:	4638      	mov	r0, r7
 8021c68:	4621      	mov	r1, r4
 8021c6a:	f7f5 f901 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8021c6e:	4638      	mov	r0, r7
 8021c70:	f7f5 f941 	bl	8016ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021c74:	b138      	cbz	r0, 8021c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8021c76:	4623      	mov	r3, r4
 8021c78:	9600      	str	r6, [sp, #0]
 8021c7a:	aa02      	add	r2, sp, #8
 8021c7c:	4649      	mov	r1, r9
 8021c7e:	4628      	mov	r0, r5
 8021c80:	f7ff fdca 	bl	8021818 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021c84:	e731      	b.n	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021c86:	f8da 3000 	ldr.w	r3, [sl]
 8021c8a:	aa02      	add	r2, sp, #8
 8021c8c:	4629      	mov	r1, r5
 8021c8e:	e9cd 6000 	strd	r6, r0, [sp]
 8021c92:	4650      	mov	r0, sl
 8021c94:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021c98:	463b      	mov	r3, r7
 8021c9a:	47d8      	blx	fp
 8021c9c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ca0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021ca4:	4293      	cmp	r3, r2
 8021ca6:	dd13      	ble.n	8021cd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8021ca8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021cac:	1a9b      	subs	r3, r3, r2
 8021cae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021cb2:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021cb6:	4628      	mov	r0, r5
 8021cb8:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021cbc:	aa02      	add	r2, sp, #8
 8021cbe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021cc2:	4649      	mov	r1, r9
 8021cc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021cc8:	4643      	mov	r3, r8
 8021cca:	9600      	str	r6, [sp, #0]
 8021ccc:	f7ff fda4 	bl	8021818 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021cd0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021cd4:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021cd8:	4293      	cmp	r3, r2
 8021cda:	dd13      	ble.n	8021d04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8021cdc:	1a9b      	subs	r3, r3, r2
 8021cde:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021ce2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021ce6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021cea:	aa02      	add	r2, sp, #8
 8021cec:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021cf0:	4628      	mov	r0, r5
 8021cf2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021cf6:	4643      	mov	r3, r8
 8021cf8:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021cfc:	4649      	mov	r1, r9
 8021cfe:	9600      	str	r6, [sp, #0]
 8021d00:	f7ff fd8a 	bl	8021818 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d04:	88a2      	ldrh	r2, [r4, #4]
 8021d06:	8823      	ldrh	r3, [r4, #0]
 8021d08:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021d0c:	4413      	add	r3, r2
 8021d0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021d12:	440a      	add	r2, r1
 8021d14:	b29b      	uxth	r3, r3
 8021d16:	b292      	uxth	r2, r2
 8021d18:	b218      	sxth	r0, r3
 8021d1a:	b211      	sxth	r1, r2
 8021d1c:	4288      	cmp	r0, r1
 8021d1e:	dd13      	ble.n	8021d48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8021d20:	1a9b      	subs	r3, r3, r2
 8021d22:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021d26:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021d2a:	aa02      	add	r2, sp, #8
 8021d2c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021d30:	4649      	mov	r1, r9
 8021d32:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d36:	4643      	mov	r3, r8
 8021d38:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021d3c:	4628      	mov	r0, r5
 8021d3e:	9600      	str	r6, [sp, #0]
 8021d40:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021d44:	f7ff fd68 	bl	8021818 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d48:	88e2      	ldrh	r2, [r4, #6]
 8021d4a:	8863      	ldrh	r3, [r4, #2]
 8021d4c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021d50:	4413      	add	r3, r2
 8021d52:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021d56:	440a      	add	r2, r1
 8021d58:	b29b      	uxth	r3, r3
 8021d5a:	b292      	uxth	r2, r2
 8021d5c:	b218      	sxth	r0, r3
 8021d5e:	b211      	sxth	r1, r2
 8021d60:	4288      	cmp	r0, r1
 8021d62:	f77f aec2 	ble.w	8021aea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021d66:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021d6a:	1a9b      	subs	r3, r3, r2
 8021d6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021d70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d74:	4643      	mov	r3, r8
 8021d76:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021d7a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021d7e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021d82:	9600      	str	r6, [sp, #0]
 8021d84:	e779      	b.n	8021c7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8021d86:	bf00      	nop
 8021d88:	20015210 	.word	0x20015210

08021d8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021d8c:	b180      	cbz	r0, 8021db0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021d8e:	2903      	cmp	r1, #3
 8021d90:	d81c      	bhi.n	8021dcc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021d92:	e8df f001 	tbb	[pc, r1]
 8021d96:	1d02      	.short	0x1d02
 8021d98:	1f08      	.short	0x1f08
 8021d9a:	4b10      	ldr	r3, [pc, #64]	; (8021ddc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021d9c:	8818      	ldrh	r0, [r3, #0]
 8021d9e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021da2:	4240      	negs	r0, r0
 8021da4:	4770      	bx	lr
 8021da6:	4b0d      	ldr	r3, [pc, #52]	; (8021ddc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021da8:	8818      	ldrh	r0, [r3, #0]
 8021daa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021dae:	4770      	bx	lr
 8021db0:	2903      	cmp	r1, #3
 8021db2:	d80b      	bhi.n	8021dcc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021db4:	a301      	add	r3, pc, #4	; (adr r3, 8021dbc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8021db6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021dba:	bf00      	nop
 8021dbc:	08021dd1 	.word	0x08021dd1
 8021dc0:	08021da7 	.word	0x08021da7
 8021dc4:	08021dd5 	.word	0x08021dd5
 8021dc8:	08021d9b 	.word	0x08021d9b
 8021dcc:	2000      	movs	r0, #0
 8021dce:	4770      	bx	lr
 8021dd0:	2001      	movs	r0, #1
 8021dd2:	4770      	bx	lr
 8021dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8021dd8:	4770      	bx	lr
 8021dda:	bf00      	nop
 8021ddc:	2001520a 	.word	0x2001520a

08021de0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021de0:	b180      	cbz	r0, 8021e04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021de2:	2903      	cmp	r1, #3
 8021de4:	d81c      	bhi.n	8021e20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021de6:	e8df f001 	tbb	[pc, r1]
 8021dea:	021d      	.short	0x021d
 8021dec:	071f      	.short	0x071f
 8021dee:	4b10      	ldr	r3, [pc, #64]	; (8021e30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021df0:	8818      	ldrh	r0, [r3, #0]
 8021df2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021df6:	4770      	bx	lr
 8021df8:	4b0d      	ldr	r3, [pc, #52]	; (8021e30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021dfa:	8818      	ldrh	r0, [r3, #0]
 8021dfc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021e00:	4240      	negs	r0, r0
 8021e02:	4770      	bx	lr
 8021e04:	2903      	cmp	r1, #3
 8021e06:	d80b      	bhi.n	8021e20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021e08:	a301      	add	r3, pc, #4	; (adr r3, 8021e10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8021e0a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021e0e:	bf00      	nop
 8021e10:	08021def 	.word	0x08021def
 8021e14:	08021e29 	.word	0x08021e29
 8021e18:	08021df9 	.word	0x08021df9
 8021e1c:	08021e25 	.word	0x08021e25
 8021e20:	2000      	movs	r0, #0
 8021e22:	4770      	bx	lr
 8021e24:	2001      	movs	r0, #1
 8021e26:	4770      	bx	lr
 8021e28:	f04f 30ff 	mov.w	r0, #4294967295
 8021e2c:	4770      	bx	lr
 8021e2e:	bf00      	nop
 8021e30:	2001520a 	.word	0x2001520a

08021e34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e38:	b099      	sub	sp, #100	; 0x64
 8021e3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8021e3c:	a914      	add	r1, sp, #80	; 0x50
 8021e3e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8021e42:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8021e46:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8021e4a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021e4e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021e52:	e881 000c 	stmia.w	r1, {r2, r3}
 8021e56:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021e5a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8021e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8021e60:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021e64:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021e68:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8021e6c:	9310      	str	r3, [sp, #64]	; 0x40
 8021e6e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8021e72:	930c      	str	r3, [sp, #48]	; 0x30
 8021e74:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8021e78:	798f      	ldrb	r7, [r1, #6]
 8021e7a:	431f      	orrs	r7, r3
 8021e7c:	f000 8195 	beq.w	80221aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021e80:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021e84:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8021e88:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021e8c:	ea59 0903 	orrs.w	r9, r9, r3
 8021e90:	f000 818b 	beq.w	80221aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021e94:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021e98:	b29b      	uxth	r3, r3
 8021e9a:	2d00      	cmp	r5, #0
 8021e9c:	f000 812e 	beq.w	80220fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8021ea0:	1aed      	subs	r5, r5, r3
 8021ea2:	b2ad      	uxth	r5, r5
 8021ea4:	042b      	lsls	r3, r5, #16
 8021ea6:	d502      	bpl.n	8021eae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021ea8:	1b64      	subs	r4, r4, r5
 8021eaa:	2500      	movs	r5, #0
 8021eac:	b224      	sxth	r4, r4
 8021eae:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021eb2:	a814      	add	r0, sp, #80	; 0x50
 8021eb4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8021eb8:	428c      	cmp	r4, r1
 8021eba:	b28b      	uxth	r3, r1
 8021ebc:	bfbf      	itttt	lt
 8021ebe:	18ed      	addlt	r5, r5, r3
 8021ec0:	1b2c      	sublt	r4, r5, r4
 8021ec2:	b2a5      	uxthlt	r5, r4
 8021ec4:	460c      	movlt	r4, r1
 8021ec6:	8891      	ldrh	r1, [r2, #4]
 8021ec8:	440b      	add	r3, r1
 8021eca:	4621      	mov	r1, r4
 8021ecc:	b21b      	sxth	r3, r3
 8021ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ed0:	88d3      	ldrh	r3, [r2, #6]
 8021ed2:	8852      	ldrh	r2, [r2, #2]
 8021ed4:	4413      	add	r3, r2
 8021ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ed8:	b21b      	sxth	r3, r3
 8021eda:	930d      	str	r3, [sp, #52]	; 0x34
 8021edc:	4bbd      	ldr	r3, [pc, #756]	; (80221d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8021ede:	f893 b000 	ldrb.w	fp, [r3]
 8021ee2:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021ee6:	f1dc 0300 	rsbs	r3, ip, #0
 8021eea:	eb43 030c 	adc.w	r3, r3, ip
 8021eee:	930e      	str	r3, [sp, #56]	; 0x38
 8021ef0:	4653      	mov	r3, sl
 8021ef2:	f7f8 fe4d 	bl	801ab90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021ef6:	4621      	mov	r1, r4
 8021ef8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021efc:	4653      	mov	r3, sl
 8021efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f00:	a814      	add	r0, sp, #80	; 0x50
 8021f02:	f7f8 fe62 	bl	801abca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021f06:	a918      	add	r1, sp, #96	; 0x60
 8021f08:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021f0c:	a817      	add	r0, sp, #92	; 0x5c
 8021f0e:	f7f8 ff83 	bl	801ae18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021f12:	f1ba 0f00 	cmp.w	sl, #0
 8021f16:	f040 80f4 	bne.w	8022102 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8021f1a:	f1bb 0f01 	cmp.w	fp, #1
 8021f1e:	f040 80f8 	bne.w	8022112 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8021f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	f040 8145 	bne.w	80221b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8021f2a:	b2ba      	uxth	r2, r7
 8021f2c:	b905      	cbnz	r5, 8021f30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8021f2e:	b16e      	cbz	r6, 8021f4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8021f30:	fb06 5302 	mla	r3, r6, r2, r5
 8021f34:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021f36:	4631      	mov	r1, r6
 8021f38:	fb08 f303 	mul.w	r3, r8, r3
 8021f3c:	f003 0607 	and.w	r6, r3, #7
 8021f40:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8021f44:	9328      	str	r3, [sp, #160]	; 0xa0
 8021f46:	eba9 0301 	sub.w	r3, r9, r1
 8021f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8021f4c:	4651      	mov	r1, sl
 8021f4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021f50:	f7ff ff1c 	bl	8021d8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8021f54:	4681      	mov	r9, r0
 8021f56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021f58:	f7ff ff42 	bl	8021de0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8021f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021f60:	4683      	mov	fp, r0
 8021f62:	eba3 0a01 	sub.w	sl, r3, r1
 8021f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f68:	459a      	cmp	sl, r3
 8021f6a:	bfa8      	it	ge
 8021f6c:	469a      	movge	sl, r3
 8021f6e:	f1ba 0f00 	cmp.w	sl, #0
 8021f72:	f340 811a 	ble.w	80221aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021f76:	1b64      	subs	r4, r4, r5
 8021f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021f7a:	1b1c      	subs	r4, r3, r4
 8021f7c:	42bc      	cmp	r4, r7
 8021f7e:	bfd4      	ite	le
 8021f80:	ebc5 0504 	rsble	r5, r5, r4
 8021f84:	ebc5 0507 	rsbgt	r5, r5, r7
 8021f88:	2d00      	cmp	r5, #0
 8021f8a:	f340 810e 	ble.w	80221aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021f8e:	1b52      	subs	r2, r2, r5
 8021f90:	fb08 f302 	mul.w	r3, r8, r2
 8021f94:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	f040 8116 	bne.w	80221ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8021f9e:	4b8e      	ldr	r3, [pc, #568]	; (80221d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8021fa0:	6818      	ldr	r0, [r3, #0]
 8021fa2:	6803      	ldr	r3, [r0, #0]
 8021fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021fa6:	4798      	blx	r3
 8021fa8:	2301      	movs	r3, #1
 8021faa:	4a8c      	ldr	r2, [pc, #560]	; (80221dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8021fac:	fa03 f308 	lsl.w	r3, r3, r8
 8021fb0:	8811      	ldrh	r1, [r2, #0]
 8021fb2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8021fb6:	3b01      	subs	r3, #1
 8021fb8:	b2db      	uxtb	r3, r3
 8021fba:	930e      	str	r3, [sp, #56]	; 0x38
 8021fbc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8021fc0:	fb01 2303 	mla	r3, r1, r3, r2
 8021fc4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8021fca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021fcc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021fd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021fd4:	0a19      	lsrs	r1, r3, #8
 8021fd6:	b2cb      	uxtb	r3, r1
 8021fd8:	9312      	str	r3, [sp, #72]	; 0x48
 8021fda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021fdc:	b2db      	uxtb	r3, r3
 8021fde:	9311      	str	r3, [sp, #68]	; 0x44
 8021fe0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021fe2:	095a      	lsrs	r2, r3, #5
 8021fe4:	4b7e      	ldr	r3, [pc, #504]	; (80221e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8021fe6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021fea:	400b      	ands	r3, r1
 8021fec:	4313      	orrs	r3, r2
 8021fee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021ff0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021ff4:	4313      	orrs	r3, r2
 8021ff6:	b29b      	uxth	r3, r3
 8021ff8:	9310      	str	r3, [sp, #64]	; 0x40
 8021ffa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ffc:	781a      	ldrb	r2, [r3, #0]
 8021ffe:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022002:	fb05 b919 	mls	r9, r5, r9, fp
 8022006:	4132      	asrs	r2, r6
 8022008:	fb03 fb05 	mul.w	fp, r3, r5
 802200c:	930d      	str	r3, [sp, #52]	; 0x34
 802200e:	b2d2      	uxtb	r2, r2
 8022010:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022014:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022018:	f0c0 80f5 	bcc.w	8022206 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 802201c:	46ae      	mov	lr, r5
 802201e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022022:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022026:	f0c0 80dd 	bcc.w	80221e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 802202a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802202c:	4013      	ands	r3, r2
 802202e:	d055      	beq.n	80220dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8022030:	20ff      	movs	r0, #255	; 0xff
 8022032:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022034:	fb90 f1f1 	sdiv	r1, r0, r1
 8022038:	434b      	muls	r3, r1
 802203a:	2bfe      	cmp	r3, #254	; 0xfe
 802203c:	dd03      	ble.n	8022046 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 802203e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022040:	4281      	cmp	r1, r0
 8022042:	f000 80c4 	beq.w	80221ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8022046:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022048:	f8bc 4000 	ldrh.w	r4, [ip]
 802204c:	fb11 f303 	smulbb	r3, r1, r3
 8022050:	1220      	asrs	r0, r4, #8
 8022052:	b29b      	uxth	r3, r3
 8022054:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022058:	1c59      	adds	r1, r3, #1
 802205a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802205e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022062:	10e1      	asrs	r1, r4, #3
 8022064:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022068:	00e4      	lsls	r4, r4, #3
 802206a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802206e:	b29f      	uxth	r7, r3
 8022070:	43db      	mvns	r3, r3
 8022072:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022076:	b2db      	uxtb	r3, r3
 8022078:	b2e4      	uxtb	r4, r4
 802207a:	9309      	str	r3, [sp, #36]	; 0x24
 802207c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802207e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022082:	fb13 f907 	smulbb	r9, r3, r7
 8022086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022088:	fb00 9003 	mla	r0, r0, r3, r9
 802208c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802208e:	fb13 f907 	smulbb	r9, r3, r7
 8022092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022094:	b280      	uxth	r0, r0
 8022096:	fb01 9103 	mla	r1, r1, r3, r9
 802209a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802209c:	fb13 f707 	smulbb	r7, r3, r7
 80220a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220a2:	b289      	uxth	r1, r1
 80220a4:	fb04 7403 	mla	r4, r4, r3, r7
 80220a8:	1c43      	adds	r3, r0, #1
 80220aa:	b2a4      	uxth	r4, r4
 80220ac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80220b0:	f104 0901 	add.w	r9, r4, #1
 80220b4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80220b8:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80220bc:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80220c0:	ea49 0000 	orr.w	r0, r9, r0
 80220c4:	f101 0901 	add.w	r9, r1, #1
 80220c8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80220cc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80220d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80220d4:	ea40 0009 	orr.w	r0, r0, r9
 80220d8:	f8ac 0000 	strh.w	r0, [ip]
 80220dc:	4446      	add	r6, r8
 80220de:	b2b6      	uxth	r6, r6
 80220e0:	2e07      	cmp	r6, #7
 80220e2:	bf89      	itett	hi
 80220e4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80220e6:	fa42 f208 	asrls.w	r2, r2, r8
 80220ea:	2600      	movhi	r6, #0
 80220ec:	785a      	ldrbhi	r2, [r3, #1]
 80220ee:	bf8a      	itet	hi
 80220f0:	3301      	addhi	r3, #1
 80220f2:	b2d2      	uxtbls	r2, r2
 80220f4:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80220f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220f8:	449c      	add	ip, r3
 80220fa:	e792      	b.n	8022022 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80220fc:	441c      	add	r4, r3
 80220fe:	b224      	sxth	r4, r4
 8022100:	e6d5      	b.n	8021eae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8022102:	f1ba 0f01 	cmp.w	sl, #1
 8022106:	f47f af0c 	bne.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802210a:	f1bb 0f01 	cmp.w	fp, #1
 802210e:	f47f af08 	bne.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022112:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80221d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8022116:	f8db 0000 	ldr.w	r0, [fp]
 802211a:	6803      	ldr	r3, [r0, #0]
 802211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802211e:	4798      	blx	r3
 8022120:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022124:	465a      	mov	r2, fp
 8022126:	d006      	beq.n	8022136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8022128:	f1b8 0f04 	cmp.w	r8, #4
 802212c:	d140      	bne.n	80221b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 802212e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022130:	3300      	adds	r3, #0
 8022132:	bf18      	it	ne
 8022134:	2301      	movne	r3, #1
 8022136:	0580      	lsls	r0, r0, #22
 8022138:	d56e      	bpl.n	8022218 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 802213a:	f1b8 0f08 	cmp.w	r8, #8
 802213e:	d16b      	bne.n	8022218 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8022140:	2b00      	cmp	r3, #0
 8022142:	bf0c      	ite	eq
 8022144:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8022148:	f44f 7180 	movne.w	r1, #256	; 0x100
 802214c:	2d00      	cmp	r5, #0
 802214e:	f47f aee8 	bne.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022152:	2e00      	cmp	r6, #0
 8022154:	f47f aee5 	bne.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022158:	19e3      	adds	r3, r4, r7
 802215a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802215c:	4283      	cmp	r3, r0
 802215e:	f73f aee0 	bgt.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022164:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022166:	444b      	add	r3, r9
 8022168:	4283      	cmp	r3, r0
 802216a:	f73f aeda 	bgt.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802216e:	b2bf      	uxth	r7, r7
 8022170:	f1b8 0f08 	cmp.w	r8, #8
 8022174:	6810      	ldr	r0, [r2, #0]
 8022176:	f04f 0500 	mov.w	r5, #0
 802217a:	bf18      	it	ne
 802217c:	3701      	addne	r7, #1
 802217e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8022182:	6804      	ldr	r4, [r0, #0]
 8022184:	bf18      	it	ne
 8022186:	f027 0701 	bicne.w	r7, r7, #1
 802218a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802218e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022194:	bf18      	it	ne
 8022196:	b2bf      	uxthne	r7, r7
 8022198:	9104      	str	r1, [sp, #16]
 802219a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802219c:	e9cd 7900 	strd	r7, r9, [sp]
 80221a0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80221a4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80221a6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80221a8:	47a0      	blx	r4
 80221aa:	b019      	add	sp, #100	; 0x64
 80221ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221b0:	2300      	movs	r3, #0
 80221b2:	e7c0      	b.n	8022136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80221b4:	2208      	movs	r2, #8
 80221b6:	fb92 f3f8 	sdiv	r3, r2, r8
 80221ba:	1e5a      	subs	r2, r3, #1
 80221bc:	443a      	add	r2, r7
 80221be:	fb92 f2f3 	sdiv	r2, r2, r3
 80221c2:	fb12 f203 	smulbb	r2, r2, r3
 80221c6:	b292      	uxth	r2, r2
 80221c8:	e6b0      	b.n	8021f2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 80221ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80221cc:	e6ec      	b.n	8021fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 80221ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80221d0:	e782      	b.n	80220d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 80221d2:	bf00      	nop
 80221d4:	20015208 	.word	0x20015208
 80221d8:	20015210 	.word	0x20015210
 80221dc:	2001520a 	.word	0x2001520a
 80221e0:	00fff800 	.word	0x00fff800
 80221e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80221e6:	b153      	cbz	r3, 80221fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80221e8:	441e      	add	r6, r3
 80221ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221ec:	b2b6      	uxth	r6, r6
 80221ee:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80221f2:	f006 0607 	and.w	r6, r6, #7
 80221f6:	781a      	ldrb	r2, [r3, #0]
 80221f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80221fa:	4132      	asrs	r2, r6
 80221fc:	b2d2      	uxtb	r2, r2
 80221fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022200:	445b      	add	r3, fp
 8022202:	930a      	str	r3, [sp, #40]	; 0x28
 8022204:	e706      	b.n	8022014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8022206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022208:	2b00      	cmp	r3, #0
 802220a:	d1ce      	bne.n	80221aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802220c:	4b05      	ldr	r3, [pc, #20]	; (8022224 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 802220e:	6818      	ldr	r0, [r3, #0]
 8022210:	6803      	ldr	r3, [r0, #0]
 8022212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022214:	4798      	blx	r3
 8022216:	e7c8      	b.n	80221aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022218:	2b00      	cmp	r3, #0
 802221a:	f43f ae82 	beq.w	8021f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022222:	e793      	b.n	802214c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8022224:	20015210 	.word	0x20015210

08022228 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022228:	b538      	push	{r3, r4, r5, lr}
 802222a:	4c15      	ldr	r4, [pc, #84]	; (8022280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802222c:	4605      	mov	r5, r0
 802222e:	7823      	ldrb	r3, [r4, #0]
 8022230:	f3bf 8f5b 	dmb	ish
 8022234:	07da      	lsls	r2, r3, #31
 8022236:	d40b      	bmi.n	8022250 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022238:	4620      	mov	r0, r4
 802223a:	f007 fa87 	bl	802974c <__cxa_guard_acquire>
 802223e:	b138      	cbz	r0, 8022250 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022240:	4620      	mov	r0, r4
 8022242:	f007 fa8f 	bl	8029764 <__cxa_guard_release>
 8022246:	4a0f      	ldr	r2, [pc, #60]	; (8022284 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022248:	490f      	ldr	r1, [pc, #60]	; (8022288 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802224a:	4810      	ldr	r0, [pc, #64]	; (802228c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802224c:	f007 fa77 	bl	802973e <__aeabi_atexit>
 8022250:	4c0f      	ldr	r4, [pc, #60]	; (8022290 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8022252:	7823      	ldrb	r3, [r4, #0]
 8022254:	f3bf 8f5b 	dmb	ish
 8022258:	07db      	lsls	r3, r3, #31
 802225a:	d40b      	bmi.n	8022274 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802225c:	4620      	mov	r0, r4
 802225e:	f007 fa75 	bl	802974c <__cxa_guard_acquire>
 8022262:	b138      	cbz	r0, 8022274 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022264:	4620      	mov	r0, r4
 8022266:	f007 fa7d 	bl	8029764 <__cxa_guard_release>
 802226a:	4a06      	ldr	r2, [pc, #24]	; (8022284 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802226c:	4909      	ldr	r1, [pc, #36]	; (8022294 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802226e:	480a      	ldr	r0, [pc, #40]	; (8022298 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022270:	f007 fa65 	bl	802973e <__aeabi_atexit>
 8022274:	4b05      	ldr	r3, [pc, #20]	; (802228c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022276:	612b      	str	r3, [r5, #16]
 8022278:	4b07      	ldr	r3, [pc, #28]	; (8022298 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802227a:	616b      	str	r3, [r5, #20]
 802227c:	bd38      	pop	{r3, r4, r5, pc}
 802227e:	bf00      	nop
 8022280:	200152dc 	.word	0x200152dc
 8022284:	20000000 	.word	0x20000000
 8022288:	08020435 	.word	0x08020435
 802228c:	20000088 	.word	0x20000088
 8022290:	200152e0 	.word	0x200152e0
 8022294:	08020433 	.word	0x08020433
 8022298:	2000008c 	.word	0x2000008c

0802229c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 802229c:	b538      	push	{r3, r4, r5, lr}
 802229e:	4c15      	ldr	r4, [pc, #84]	; (80222f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80222a0:	4605      	mov	r5, r0
 80222a2:	7823      	ldrb	r3, [r4, #0]
 80222a4:	f3bf 8f5b 	dmb	ish
 80222a8:	07da      	lsls	r2, r3, #31
 80222aa:	d40b      	bmi.n	80222c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80222ac:	4620      	mov	r0, r4
 80222ae:	f007 fa4d 	bl	802974c <__cxa_guard_acquire>
 80222b2:	b138      	cbz	r0, 80222c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80222b4:	4620      	mov	r0, r4
 80222b6:	f007 fa55 	bl	8029764 <__cxa_guard_release>
 80222ba:	4a0f      	ldr	r2, [pc, #60]	; (80222f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80222bc:	490f      	ldr	r1, [pc, #60]	; (80222fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80222be:	4810      	ldr	r0, [pc, #64]	; (8022300 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80222c0:	f007 fa3d 	bl	802973e <__aeabi_atexit>
 80222c4:	4c0f      	ldr	r4, [pc, #60]	; (8022304 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80222c6:	7823      	ldrb	r3, [r4, #0]
 80222c8:	f3bf 8f5b 	dmb	ish
 80222cc:	07db      	lsls	r3, r3, #31
 80222ce:	d40b      	bmi.n	80222e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80222d0:	4620      	mov	r0, r4
 80222d2:	f007 fa3b 	bl	802974c <__cxa_guard_acquire>
 80222d6:	b138      	cbz	r0, 80222e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80222d8:	4620      	mov	r0, r4
 80222da:	f007 fa43 	bl	8029764 <__cxa_guard_release>
 80222de:	4a06      	ldr	r2, [pc, #24]	; (80222f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80222e0:	4909      	ldr	r1, [pc, #36]	; (8022308 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80222e2:	480a      	ldr	r0, [pc, #40]	; (802230c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80222e4:	f007 fa2b 	bl	802973e <__aeabi_atexit>
 80222e8:	4b05      	ldr	r3, [pc, #20]	; (8022300 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80222ea:	60ab      	str	r3, [r5, #8]
 80222ec:	4b07      	ldr	r3, [pc, #28]	; (802230c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80222ee:	60eb      	str	r3, [r5, #12]
 80222f0:	bd38      	pop	{r3, r4, r5, pc}
 80222f2:	bf00      	nop
 80222f4:	200152b4 	.word	0x200152b4
 80222f8:	20000000 	.word	0x20000000
 80222fc:	08020439 	.word	0x08020439
 8022300:	20000060 	.word	0x20000060
 8022304:	200152b8 	.word	0x200152b8
 8022308:	08020437 	.word	0x08020437
 802230c:	20000064 	.word	0x20000064

08022310 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8022310:	b510      	push	{r4, lr}
 8022312:	4604      	mov	r4, r0
 8022314:	f7ff ff88 	bl	8022228 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022318:	4620      	mov	r0, r4
 802231a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802231e:	f7ff bfbd 	b.w	802229c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08022324 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022324:	b538      	push	{r3, r4, r5, lr}
 8022326:	4c15      	ldr	r4, [pc, #84]	; (802237c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022328:	4605      	mov	r5, r0
 802232a:	7823      	ldrb	r3, [r4, #0]
 802232c:	f3bf 8f5b 	dmb	ish
 8022330:	07da      	lsls	r2, r3, #31
 8022332:	d40b      	bmi.n	802234c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022334:	4620      	mov	r0, r4
 8022336:	f007 fa09 	bl	802974c <__cxa_guard_acquire>
 802233a:	b138      	cbz	r0, 802234c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802233c:	4620      	mov	r0, r4
 802233e:	f007 fa11 	bl	8029764 <__cxa_guard_release>
 8022342:	4a0f      	ldr	r2, [pc, #60]	; (8022380 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022344:	490f      	ldr	r1, [pc, #60]	; (8022384 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022346:	4810      	ldr	r0, [pc, #64]	; (8022388 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022348:	f007 f9f9 	bl	802973e <__aeabi_atexit>
 802234c:	4c0f      	ldr	r4, [pc, #60]	; (802238c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802234e:	7823      	ldrb	r3, [r4, #0]
 8022350:	f3bf 8f5b 	dmb	ish
 8022354:	07db      	lsls	r3, r3, #31
 8022356:	d40b      	bmi.n	8022370 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022358:	4620      	mov	r0, r4
 802235a:	f007 f9f7 	bl	802974c <__cxa_guard_acquire>
 802235e:	b138      	cbz	r0, 8022370 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022360:	4620      	mov	r0, r4
 8022362:	f007 f9ff 	bl	8029764 <__cxa_guard_release>
 8022366:	4a06      	ldr	r2, [pc, #24]	; (8022380 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022368:	4909      	ldr	r1, [pc, #36]	; (8022390 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802236a:	480a      	ldr	r0, [pc, #40]	; (8022394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802236c:	f007 f9e7 	bl	802973e <__aeabi_atexit>
 8022370:	4b05      	ldr	r3, [pc, #20]	; (8022388 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022372:	622b      	str	r3, [r5, #32]
 8022374:	4b07      	ldr	r3, [pc, #28]	; (8022394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022376:	626b      	str	r3, [r5, #36]	; 0x24
 8022378:	bd38      	pop	{r3, r4, r5, pc}
 802237a:	bf00      	nop
 802237c:	200152e4 	.word	0x200152e4
 8022380:	20000000 	.word	0x20000000
 8022384:	0802042d 	.word	0x0802042d
 8022388:	20000090 	.word	0x20000090
 802238c:	200152e8 	.word	0x200152e8
 8022390:	0802042b 	.word	0x0802042b
 8022394:	20000094 	.word	0x20000094

08022398 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022398:	b538      	push	{r3, r4, r5, lr}
 802239a:	4c15      	ldr	r4, [pc, #84]	; (80223f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802239c:	4605      	mov	r5, r0
 802239e:	7823      	ldrb	r3, [r4, #0]
 80223a0:	f3bf 8f5b 	dmb	ish
 80223a4:	07da      	lsls	r2, r3, #31
 80223a6:	d40b      	bmi.n	80223c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80223a8:	4620      	mov	r0, r4
 80223aa:	f007 f9cf 	bl	802974c <__cxa_guard_acquire>
 80223ae:	b138      	cbz	r0, 80223c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80223b0:	4620      	mov	r0, r4
 80223b2:	f007 f9d7 	bl	8029764 <__cxa_guard_release>
 80223b6:	4a0f      	ldr	r2, [pc, #60]	; (80223f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80223b8:	490f      	ldr	r1, [pc, #60]	; (80223f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80223ba:	4810      	ldr	r0, [pc, #64]	; (80223fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80223bc:	f007 f9bf 	bl	802973e <__aeabi_atexit>
 80223c0:	4c0f      	ldr	r4, [pc, #60]	; (8022400 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80223c2:	7823      	ldrb	r3, [r4, #0]
 80223c4:	f3bf 8f5b 	dmb	ish
 80223c8:	07db      	lsls	r3, r3, #31
 80223ca:	d40b      	bmi.n	80223e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80223cc:	4620      	mov	r0, r4
 80223ce:	f007 f9bd 	bl	802974c <__cxa_guard_acquire>
 80223d2:	b138      	cbz	r0, 80223e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80223d4:	4620      	mov	r0, r4
 80223d6:	f007 f9c5 	bl	8029764 <__cxa_guard_release>
 80223da:	4a06      	ldr	r2, [pc, #24]	; (80223f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80223dc:	4909      	ldr	r1, [pc, #36]	; (8022404 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80223de:	480a      	ldr	r0, [pc, #40]	; (8022408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80223e0:	f007 f9ad 	bl	802973e <__aeabi_atexit>
 80223e4:	4b05      	ldr	r3, [pc, #20]	; (80223fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80223e6:	61ab      	str	r3, [r5, #24]
 80223e8:	4b07      	ldr	r3, [pc, #28]	; (8022408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80223ea:	61eb      	str	r3, [r5, #28]
 80223ec:	bd38      	pop	{r3, r4, r5, pc}
 80223ee:	bf00      	nop
 80223f0:	200152bc 	.word	0x200152bc
 80223f4:	20000000 	.word	0x20000000
 80223f8:	08020431 	.word	0x08020431
 80223fc:	20000068 	.word	0x20000068
 8022400:	200152c0 	.word	0x200152c0
 8022404:	0802042f 	.word	0x0802042f
 8022408:	2000006c 	.word	0x2000006c

0802240c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 802240c:	b510      	push	{r4, lr}
 802240e:	4604      	mov	r4, r0
 8022410:	f7ff ff88 	bl	8022324 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022414:	4620      	mov	r0, r4
 8022416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802241a:	f7ff bfbd 	b.w	8022398 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022420 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022420:	b538      	push	{r3, r4, r5, lr}
 8022422:	4c15      	ldr	r4, [pc, #84]	; (8022478 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022424:	4605      	mov	r5, r0
 8022426:	7823      	ldrb	r3, [r4, #0]
 8022428:	f3bf 8f5b 	dmb	ish
 802242c:	07da      	lsls	r2, r3, #31
 802242e:	d40b      	bmi.n	8022448 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022430:	4620      	mov	r0, r4
 8022432:	f007 f98b 	bl	802974c <__cxa_guard_acquire>
 8022436:	b138      	cbz	r0, 8022448 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022438:	4620      	mov	r0, r4
 802243a:	f007 f993 	bl	8029764 <__cxa_guard_release>
 802243e:	4a0f      	ldr	r2, [pc, #60]	; (802247c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022440:	490f      	ldr	r1, [pc, #60]	; (8022480 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022442:	4810      	ldr	r0, [pc, #64]	; (8022484 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022444:	f007 f97b 	bl	802973e <__aeabi_atexit>
 8022448:	4c0f      	ldr	r4, [pc, #60]	; (8022488 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802244a:	7823      	ldrb	r3, [r4, #0]
 802244c:	f3bf 8f5b 	dmb	ish
 8022450:	07db      	lsls	r3, r3, #31
 8022452:	d40b      	bmi.n	802246c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022454:	4620      	mov	r0, r4
 8022456:	f007 f979 	bl	802974c <__cxa_guard_acquire>
 802245a:	b138      	cbz	r0, 802246c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802245c:	4620      	mov	r0, r4
 802245e:	f007 f981 	bl	8029764 <__cxa_guard_release>
 8022462:	4a06      	ldr	r2, [pc, #24]	; (802247c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022464:	4909      	ldr	r1, [pc, #36]	; (802248c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022466:	480a      	ldr	r0, [pc, #40]	; (8022490 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022468:	f007 f969 	bl	802973e <__aeabi_atexit>
 802246c:	4b05      	ldr	r3, [pc, #20]	; (8022484 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802246e:	632b      	str	r3, [r5, #48]	; 0x30
 8022470:	4b07      	ldr	r3, [pc, #28]	; (8022490 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022472:	636b      	str	r3, [r5, #52]	; 0x34
 8022474:	bd38      	pop	{r3, r4, r5, pc}
 8022476:	bf00      	nop
 8022478:	200152f4 	.word	0x200152f4
 802247c:	20000000 	.word	0x20000000
 8022480:	08020425 	.word	0x08020425
 8022484:	200000a0 	.word	0x200000a0
 8022488:	200152f8 	.word	0x200152f8
 802248c:	08020423 	.word	0x08020423
 8022490:	200000a4 	.word	0x200000a4

08022494 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022494:	b538      	push	{r3, r4, r5, lr}
 8022496:	4c15      	ldr	r4, [pc, #84]	; (80224ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022498:	4605      	mov	r5, r0
 802249a:	7823      	ldrb	r3, [r4, #0]
 802249c:	f3bf 8f5b 	dmb	ish
 80224a0:	07da      	lsls	r2, r3, #31
 80224a2:	d40b      	bmi.n	80224bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80224a4:	4620      	mov	r0, r4
 80224a6:	f007 f951 	bl	802974c <__cxa_guard_acquire>
 80224aa:	b138      	cbz	r0, 80224bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80224ac:	4620      	mov	r0, r4
 80224ae:	f007 f959 	bl	8029764 <__cxa_guard_release>
 80224b2:	4a0f      	ldr	r2, [pc, #60]	; (80224f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80224b4:	490f      	ldr	r1, [pc, #60]	; (80224f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80224b6:	4810      	ldr	r0, [pc, #64]	; (80224f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80224b8:	f007 f941 	bl	802973e <__aeabi_atexit>
 80224bc:	4c0f      	ldr	r4, [pc, #60]	; (80224fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80224be:	7823      	ldrb	r3, [r4, #0]
 80224c0:	f3bf 8f5b 	dmb	ish
 80224c4:	07db      	lsls	r3, r3, #31
 80224c6:	d40b      	bmi.n	80224e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80224c8:	4620      	mov	r0, r4
 80224ca:	f007 f93f 	bl	802974c <__cxa_guard_acquire>
 80224ce:	b138      	cbz	r0, 80224e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80224d0:	4620      	mov	r0, r4
 80224d2:	f007 f947 	bl	8029764 <__cxa_guard_release>
 80224d6:	4a06      	ldr	r2, [pc, #24]	; (80224f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80224d8:	4909      	ldr	r1, [pc, #36]	; (8022500 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80224da:	480a      	ldr	r0, [pc, #40]	; (8022504 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80224dc:	f007 f92f 	bl	802973e <__aeabi_atexit>
 80224e0:	4b05      	ldr	r3, [pc, #20]	; (80224f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80224e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80224e4:	4b07      	ldr	r3, [pc, #28]	; (8022504 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80224e6:	62eb      	str	r3, [r5, #44]	; 0x2c
 80224e8:	bd38      	pop	{r3, r4, r5, pc}
 80224ea:	bf00      	nop
 80224ec:	200152c4 	.word	0x200152c4
 80224f0:	20000000 	.word	0x20000000
 80224f4:	08020429 	.word	0x08020429
 80224f8:	20000070 	.word	0x20000070
 80224fc:	200152c8 	.word	0x200152c8
 8022500:	08020427 	.word	0x08020427
 8022504:	20000074 	.word	0x20000074

08022508 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022508:	b510      	push	{r4, lr}
 802250a:	4604      	mov	r4, r0
 802250c:	f7ff ff88 	bl	8022420 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022510:	4620      	mov	r0, r4
 8022512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022516:	f7ff bfbd 	b.w	8022494 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802251c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802251c:	b538      	push	{r3, r4, r5, lr}
 802251e:	4c15      	ldr	r4, [pc, #84]	; (8022574 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022520:	4605      	mov	r5, r0
 8022522:	7823      	ldrb	r3, [r4, #0]
 8022524:	f3bf 8f5b 	dmb	ish
 8022528:	07da      	lsls	r2, r3, #31
 802252a:	d40b      	bmi.n	8022544 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802252c:	4620      	mov	r0, r4
 802252e:	f007 f90d 	bl	802974c <__cxa_guard_acquire>
 8022532:	b138      	cbz	r0, 8022544 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022534:	4620      	mov	r0, r4
 8022536:	f007 f915 	bl	8029764 <__cxa_guard_release>
 802253a:	4a0f      	ldr	r2, [pc, #60]	; (8022578 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802253c:	490f      	ldr	r1, [pc, #60]	; (802257c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802253e:	4810      	ldr	r0, [pc, #64]	; (8022580 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022540:	f007 f8fd 	bl	802973e <__aeabi_atexit>
 8022544:	4c0f      	ldr	r4, [pc, #60]	; (8022584 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022546:	7823      	ldrb	r3, [r4, #0]
 8022548:	f3bf 8f5b 	dmb	ish
 802254c:	07db      	lsls	r3, r3, #31
 802254e:	d40b      	bmi.n	8022568 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022550:	4620      	mov	r0, r4
 8022552:	f007 f8fb 	bl	802974c <__cxa_guard_acquire>
 8022556:	b138      	cbz	r0, 8022568 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022558:	4620      	mov	r0, r4
 802255a:	f007 f903 	bl	8029764 <__cxa_guard_release>
 802255e:	4a06      	ldr	r2, [pc, #24]	; (8022578 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022560:	4909      	ldr	r1, [pc, #36]	; (8022588 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022562:	480a      	ldr	r0, [pc, #40]	; (802258c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022564:	f007 f8eb 	bl	802973e <__aeabi_atexit>
 8022568:	4b05      	ldr	r3, [pc, #20]	; (8022580 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802256a:	652b      	str	r3, [r5, #80]	; 0x50
 802256c:	4b07      	ldr	r3, [pc, #28]	; (802258c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802256e:	656b      	str	r3, [r5, #84]	; 0x54
 8022570:	bd38      	pop	{r3, r4, r5, pc}
 8022572:	bf00      	nop
 8022574:	200152fc 	.word	0x200152fc
 8022578:	20000000 	.word	0x20000000
 802257c:	08020415 	.word	0x08020415
 8022580:	200000a8 	.word	0x200000a8
 8022584:	20015300 	.word	0x20015300
 8022588:	08020413 	.word	0x08020413
 802258c:	200000ac 	.word	0x200000ac

08022590 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022590:	b538      	push	{r3, r4, r5, lr}
 8022592:	4c15      	ldr	r4, [pc, #84]	; (80225e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022594:	4605      	mov	r5, r0
 8022596:	7823      	ldrb	r3, [r4, #0]
 8022598:	f3bf 8f5b 	dmb	ish
 802259c:	07da      	lsls	r2, r3, #31
 802259e:	d40b      	bmi.n	80225b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80225a0:	4620      	mov	r0, r4
 80225a2:	f007 f8d3 	bl	802974c <__cxa_guard_acquire>
 80225a6:	b138      	cbz	r0, 80225b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80225a8:	4620      	mov	r0, r4
 80225aa:	f007 f8db 	bl	8029764 <__cxa_guard_release>
 80225ae:	4a0f      	ldr	r2, [pc, #60]	; (80225ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80225b0:	490f      	ldr	r1, [pc, #60]	; (80225f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80225b2:	4810      	ldr	r0, [pc, #64]	; (80225f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80225b4:	f007 f8c3 	bl	802973e <__aeabi_atexit>
 80225b8:	4c0f      	ldr	r4, [pc, #60]	; (80225f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80225ba:	7823      	ldrb	r3, [r4, #0]
 80225bc:	f3bf 8f5b 	dmb	ish
 80225c0:	07db      	lsls	r3, r3, #31
 80225c2:	d40b      	bmi.n	80225dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80225c4:	4620      	mov	r0, r4
 80225c6:	f007 f8c1 	bl	802974c <__cxa_guard_acquire>
 80225ca:	b138      	cbz	r0, 80225dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80225cc:	4620      	mov	r0, r4
 80225ce:	f007 f8c9 	bl	8029764 <__cxa_guard_release>
 80225d2:	4a06      	ldr	r2, [pc, #24]	; (80225ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80225d4:	4909      	ldr	r1, [pc, #36]	; (80225fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80225d6:	480a      	ldr	r0, [pc, #40]	; (8022600 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80225d8:	f007 f8b1 	bl	802973e <__aeabi_atexit>
 80225dc:	4b05      	ldr	r3, [pc, #20]	; (80225f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80225de:	64ab      	str	r3, [r5, #72]	; 0x48
 80225e0:	4b07      	ldr	r3, [pc, #28]	; (8022600 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80225e2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80225e4:	bd38      	pop	{r3, r4, r5, pc}
 80225e6:	bf00      	nop
 80225e8:	20015304 	.word	0x20015304
 80225ec:	20000000 	.word	0x20000000
 80225f0:	08020419 	.word	0x08020419
 80225f4:	200000b0 	.word	0x200000b0
 80225f8:	20015308 	.word	0x20015308
 80225fc:	08020417 	.word	0x08020417
 8022600:	200000b4 	.word	0x200000b4

08022604 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022604:	b538      	push	{r3, r4, r5, lr}
 8022606:	4c15      	ldr	r4, [pc, #84]	; (802265c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022608:	4605      	mov	r5, r0
 802260a:	7823      	ldrb	r3, [r4, #0]
 802260c:	f3bf 8f5b 	dmb	ish
 8022610:	07da      	lsls	r2, r3, #31
 8022612:	d40b      	bmi.n	802262c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022614:	4620      	mov	r0, r4
 8022616:	f007 f899 	bl	802974c <__cxa_guard_acquire>
 802261a:	b138      	cbz	r0, 802262c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802261c:	4620      	mov	r0, r4
 802261e:	f007 f8a1 	bl	8029764 <__cxa_guard_release>
 8022622:	4a0f      	ldr	r2, [pc, #60]	; (8022660 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022624:	490f      	ldr	r1, [pc, #60]	; (8022664 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022626:	4810      	ldr	r0, [pc, #64]	; (8022668 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022628:	f007 f889 	bl	802973e <__aeabi_atexit>
 802262c:	4c0f      	ldr	r4, [pc, #60]	; (802266c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802262e:	7823      	ldrb	r3, [r4, #0]
 8022630:	f3bf 8f5b 	dmb	ish
 8022634:	07db      	lsls	r3, r3, #31
 8022636:	d40b      	bmi.n	8022650 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022638:	4620      	mov	r0, r4
 802263a:	f007 f887 	bl	802974c <__cxa_guard_acquire>
 802263e:	b138      	cbz	r0, 8022650 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022640:	4620      	mov	r0, r4
 8022642:	f007 f88f 	bl	8029764 <__cxa_guard_release>
 8022646:	4a06      	ldr	r2, [pc, #24]	; (8022660 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022648:	4909      	ldr	r1, [pc, #36]	; (8022670 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802264a:	480a      	ldr	r0, [pc, #40]	; (8022674 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802264c:	f007 f877 	bl	802973e <__aeabi_atexit>
 8022650:	4b05      	ldr	r3, [pc, #20]	; (8022668 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022652:	642b      	str	r3, [r5, #64]	; 0x40
 8022654:	4b07      	ldr	r3, [pc, #28]	; (8022674 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022656:	646b      	str	r3, [r5, #68]	; 0x44
 8022658:	bd38      	pop	{r3, r4, r5, pc}
 802265a:	bf00      	nop
 802265c:	200152cc 	.word	0x200152cc
 8022660:	20000000 	.word	0x20000000
 8022664:	0802041d 	.word	0x0802041d
 8022668:	20000078 	.word	0x20000078
 802266c:	200152d0 	.word	0x200152d0
 8022670:	0802041b 	.word	0x0802041b
 8022674:	2000007c 	.word	0x2000007c

08022678 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022678:	b538      	push	{r3, r4, r5, lr}
 802267a:	4c15      	ldr	r4, [pc, #84]	; (80226d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802267c:	4605      	mov	r5, r0
 802267e:	7823      	ldrb	r3, [r4, #0]
 8022680:	f3bf 8f5b 	dmb	ish
 8022684:	07da      	lsls	r2, r3, #31
 8022686:	d40b      	bmi.n	80226a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022688:	4620      	mov	r0, r4
 802268a:	f007 f85f 	bl	802974c <__cxa_guard_acquire>
 802268e:	b138      	cbz	r0, 80226a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022690:	4620      	mov	r0, r4
 8022692:	f007 f867 	bl	8029764 <__cxa_guard_release>
 8022696:	4a0f      	ldr	r2, [pc, #60]	; (80226d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022698:	490f      	ldr	r1, [pc, #60]	; (80226d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802269a:	4810      	ldr	r0, [pc, #64]	; (80226dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802269c:	f007 f84f 	bl	802973e <__aeabi_atexit>
 80226a0:	4c0f      	ldr	r4, [pc, #60]	; (80226e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80226a2:	7823      	ldrb	r3, [r4, #0]
 80226a4:	f3bf 8f5b 	dmb	ish
 80226a8:	07db      	lsls	r3, r3, #31
 80226aa:	d40b      	bmi.n	80226c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80226ac:	4620      	mov	r0, r4
 80226ae:	f007 f84d 	bl	802974c <__cxa_guard_acquire>
 80226b2:	b138      	cbz	r0, 80226c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80226b4:	4620      	mov	r0, r4
 80226b6:	f007 f855 	bl	8029764 <__cxa_guard_release>
 80226ba:	4a06      	ldr	r2, [pc, #24]	; (80226d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80226bc:	4909      	ldr	r1, [pc, #36]	; (80226e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80226be:	480a      	ldr	r0, [pc, #40]	; (80226e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80226c0:	f007 f83d 	bl	802973e <__aeabi_atexit>
 80226c4:	4b05      	ldr	r3, [pc, #20]	; (80226dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80226c6:	63ab      	str	r3, [r5, #56]	; 0x38
 80226c8:	4b07      	ldr	r3, [pc, #28]	; (80226e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80226ca:	63eb      	str	r3, [r5, #60]	; 0x3c
 80226cc:	bd38      	pop	{r3, r4, r5, pc}
 80226ce:	bf00      	nop
 80226d0:	200152ec 	.word	0x200152ec
 80226d4:	20000000 	.word	0x20000000
 80226d8:	08020421 	.word	0x08020421
 80226dc:	20000098 	.word	0x20000098
 80226e0:	200152f0 	.word	0x200152f0
 80226e4:	0802041f 	.word	0x0802041f
 80226e8:	2000009c 	.word	0x2000009c

080226ec <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80226ec:	b510      	push	{r4, lr}
 80226ee:	4604      	mov	r4, r0
 80226f0:	f7ff ff14 	bl	802251c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80226f4:	4620      	mov	r0, r4
 80226f6:	f7ff ff85 	bl	8022604 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80226fa:	4620      	mov	r0, r4
 80226fc:	f7ff ff48 	bl	8022590 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022700:	4620      	mov	r0, r4
 8022702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022706:	f7ff bfb7 	b.w	8022678 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0802270c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 802270c:	b538      	push	{r3, r4, r5, lr}
 802270e:	4c15      	ldr	r4, [pc, #84]	; (8022764 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022710:	4605      	mov	r5, r0
 8022712:	7823      	ldrb	r3, [r4, #0]
 8022714:	f3bf 8f5b 	dmb	ish
 8022718:	07da      	lsls	r2, r3, #31
 802271a:	d40b      	bmi.n	8022734 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802271c:	4620      	mov	r0, r4
 802271e:	f007 f815 	bl	802974c <__cxa_guard_acquire>
 8022722:	b138      	cbz	r0, 8022734 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022724:	4620      	mov	r0, r4
 8022726:	f007 f81d 	bl	8029764 <__cxa_guard_release>
 802272a:	4a0f      	ldr	r2, [pc, #60]	; (8022768 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802272c:	490f      	ldr	r1, [pc, #60]	; (802276c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802272e:	4810      	ldr	r0, [pc, #64]	; (8022770 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022730:	f007 f805 	bl	802973e <__aeabi_atexit>
 8022734:	4c0f      	ldr	r4, [pc, #60]	; (8022774 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022736:	7823      	ldrb	r3, [r4, #0]
 8022738:	f3bf 8f5b 	dmb	ish
 802273c:	07db      	lsls	r3, r3, #31
 802273e:	d40b      	bmi.n	8022758 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022740:	4620      	mov	r0, r4
 8022742:	f007 f803 	bl	802974c <__cxa_guard_acquire>
 8022746:	b138      	cbz	r0, 8022758 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022748:	4620      	mov	r0, r4
 802274a:	f007 f80b 	bl	8029764 <__cxa_guard_release>
 802274e:	4a06      	ldr	r2, [pc, #24]	; (8022768 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022750:	4909      	ldr	r1, [pc, #36]	; (8022778 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022752:	480a      	ldr	r0, [pc, #40]	; (802277c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022754:	f006 fff3 	bl	802973e <__aeabi_atexit>
 8022758:	4b05      	ldr	r3, [pc, #20]	; (8022770 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802275a:	662b      	str	r3, [r5, #96]	; 0x60
 802275c:	4b07      	ldr	r3, [pc, #28]	; (802277c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802275e:	666b      	str	r3, [r5, #100]	; 0x64
 8022760:	bd38      	pop	{r3, r4, r5, pc}
 8022762:	bf00      	nop
 8022764:	200152d4 	.word	0x200152d4
 8022768:	20000000 	.word	0x20000000
 802276c:	0802040d 	.word	0x0802040d
 8022770:	20000080 	.word	0x20000080
 8022774:	200152d8 	.word	0x200152d8
 8022778:	0802040b 	.word	0x0802040b
 802277c:	20000084 	.word	0x20000084

08022780 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022780:	b538      	push	{r3, r4, r5, lr}
 8022782:	4c15      	ldr	r4, [pc, #84]	; (80227d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022784:	4605      	mov	r5, r0
 8022786:	7823      	ldrb	r3, [r4, #0]
 8022788:	f3bf 8f5b 	dmb	ish
 802278c:	07da      	lsls	r2, r3, #31
 802278e:	d40b      	bmi.n	80227a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022790:	4620      	mov	r0, r4
 8022792:	f006 ffdb 	bl	802974c <__cxa_guard_acquire>
 8022796:	b138      	cbz	r0, 80227a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022798:	4620      	mov	r0, r4
 802279a:	f006 ffe3 	bl	8029764 <__cxa_guard_release>
 802279e:	4a0f      	ldr	r2, [pc, #60]	; (80227dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80227a0:	490f      	ldr	r1, [pc, #60]	; (80227e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80227a2:	4810      	ldr	r0, [pc, #64]	; (80227e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80227a4:	f006 ffcb 	bl	802973e <__aeabi_atexit>
 80227a8:	4c0f      	ldr	r4, [pc, #60]	; (80227e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80227aa:	7823      	ldrb	r3, [r4, #0]
 80227ac:	f3bf 8f5b 	dmb	ish
 80227b0:	07db      	lsls	r3, r3, #31
 80227b2:	d40b      	bmi.n	80227cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80227b4:	4620      	mov	r0, r4
 80227b6:	f006 ffc9 	bl	802974c <__cxa_guard_acquire>
 80227ba:	b138      	cbz	r0, 80227cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80227bc:	4620      	mov	r0, r4
 80227be:	f006 ffd1 	bl	8029764 <__cxa_guard_release>
 80227c2:	4a06      	ldr	r2, [pc, #24]	; (80227dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80227c4:	4909      	ldr	r1, [pc, #36]	; (80227ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80227c6:	480a      	ldr	r0, [pc, #40]	; (80227f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80227c8:	f006 ffb9 	bl	802973e <__aeabi_atexit>
 80227cc:	4b05      	ldr	r3, [pc, #20]	; (80227e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80227ce:	65ab      	str	r3, [r5, #88]	; 0x58
 80227d0:	4b07      	ldr	r3, [pc, #28]	; (80227f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80227d2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80227d4:	bd38      	pop	{r3, r4, r5, pc}
 80227d6:	bf00      	nop
 80227d8:	200152ac 	.word	0x200152ac
 80227dc:	20000000 	.word	0x20000000
 80227e0:	08020411 	.word	0x08020411
 80227e4:	20000058 	.word	0x20000058
 80227e8:	200152b0 	.word	0x200152b0
 80227ec:	0802040f 	.word	0x0802040f
 80227f0:	2000005c 	.word	0x2000005c

080227f4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80227f4:	b510      	push	{r4, lr}
 80227f6:	4604      	mov	r4, r0
 80227f8:	f7ff ff88 	bl	802270c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80227fc:	4620      	mov	r0, r4
 80227fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022802:	f7ff bfbd 	b.w	8022780 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022808 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022808:	b538      	push	{r3, r4, r5, lr}
 802280a:	4c15      	ldr	r4, [pc, #84]	; (8022860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 802280c:	4605      	mov	r5, r0
 802280e:	7823      	ldrb	r3, [r4, #0]
 8022810:	f3bf 8f5b 	dmb	ish
 8022814:	07da      	lsls	r2, r3, #31
 8022816:	d40b      	bmi.n	8022830 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022818:	4620      	mov	r0, r4
 802281a:	f006 ff97 	bl	802974c <__cxa_guard_acquire>
 802281e:	b138      	cbz	r0, 8022830 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022820:	4620      	mov	r0, r4
 8022822:	f006 ff9f 	bl	8029764 <__cxa_guard_release>
 8022826:	4a0f      	ldr	r2, [pc, #60]	; (8022864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022828:	490f      	ldr	r1, [pc, #60]	; (8022868 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802282a:	4810      	ldr	r0, [pc, #64]	; (802286c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802282c:	f006 ff87 	bl	802973e <__aeabi_atexit>
 8022830:	4c0f      	ldr	r4, [pc, #60]	; (8022870 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022832:	7823      	ldrb	r3, [r4, #0]
 8022834:	f3bf 8f5b 	dmb	ish
 8022838:	07db      	lsls	r3, r3, #31
 802283a:	d40b      	bmi.n	8022854 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802283c:	4620      	mov	r0, r4
 802283e:	f006 ff85 	bl	802974c <__cxa_guard_acquire>
 8022842:	b138      	cbz	r0, 8022854 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022844:	4620      	mov	r0, r4
 8022846:	f006 ff8d 	bl	8029764 <__cxa_guard_release>
 802284a:	4a06      	ldr	r2, [pc, #24]	; (8022864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802284c:	4909      	ldr	r1, [pc, #36]	; (8022874 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802284e:	480a      	ldr	r0, [pc, #40]	; (8022878 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022850:	f006 ff75 	bl	802973e <__aeabi_atexit>
 8022854:	4b05      	ldr	r3, [pc, #20]	; (802286c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022856:	672b      	str	r3, [r5, #112]	; 0x70
 8022858:	4b07      	ldr	r3, [pc, #28]	; (8022878 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802285a:	676b      	str	r3, [r5, #116]	; 0x74
 802285c:	bd38      	pop	{r3, r4, r5, pc}
 802285e:	bf00      	nop
 8022860:	200152a4 	.word	0x200152a4
 8022864:	20000000 	.word	0x20000000
 8022868:	08020405 	.word	0x08020405
 802286c:	20000050 	.word	0x20000050
 8022870:	200152a8 	.word	0x200152a8
 8022874:	08020403 	.word	0x08020403
 8022878:	20000054 	.word	0x20000054

0802287c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 802287c:	b538      	push	{r3, r4, r5, lr}
 802287e:	4c15      	ldr	r4, [pc, #84]	; (80228d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022880:	4605      	mov	r5, r0
 8022882:	7823      	ldrb	r3, [r4, #0]
 8022884:	f3bf 8f5b 	dmb	ish
 8022888:	07da      	lsls	r2, r3, #31
 802288a:	d40b      	bmi.n	80228a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802288c:	4620      	mov	r0, r4
 802288e:	f006 ff5d 	bl	802974c <__cxa_guard_acquire>
 8022892:	b138      	cbz	r0, 80228a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022894:	4620      	mov	r0, r4
 8022896:	f006 ff65 	bl	8029764 <__cxa_guard_release>
 802289a:	4a0f      	ldr	r2, [pc, #60]	; (80228d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802289c:	490f      	ldr	r1, [pc, #60]	; (80228dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802289e:	4810      	ldr	r0, [pc, #64]	; (80228e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80228a0:	f006 ff4d 	bl	802973e <__aeabi_atexit>
 80228a4:	4c0f      	ldr	r4, [pc, #60]	; (80228e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80228a6:	7823      	ldrb	r3, [r4, #0]
 80228a8:	f3bf 8f5b 	dmb	ish
 80228ac:	07db      	lsls	r3, r3, #31
 80228ae:	d40b      	bmi.n	80228c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80228b0:	4620      	mov	r0, r4
 80228b2:	f006 ff4b 	bl	802974c <__cxa_guard_acquire>
 80228b6:	b138      	cbz	r0, 80228c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80228b8:	4620      	mov	r0, r4
 80228ba:	f006 ff53 	bl	8029764 <__cxa_guard_release>
 80228be:	4a06      	ldr	r2, [pc, #24]	; (80228d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80228c0:	4909      	ldr	r1, [pc, #36]	; (80228e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80228c2:	480a      	ldr	r0, [pc, #40]	; (80228ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80228c4:	f006 ff3b 	bl	802973e <__aeabi_atexit>
 80228c8:	4b05      	ldr	r3, [pc, #20]	; (80228e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80228ca:	66ab      	str	r3, [r5, #104]	; 0x68
 80228cc:	4b07      	ldr	r3, [pc, #28]	; (80228ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80228ce:	66eb      	str	r3, [r5, #108]	; 0x6c
 80228d0:	bd38      	pop	{r3, r4, r5, pc}
 80228d2:	bf00      	nop
 80228d4:	2001529c 	.word	0x2001529c
 80228d8:	20000000 	.word	0x20000000
 80228dc:	08020409 	.word	0x08020409
 80228e0:	20000048 	.word	0x20000048
 80228e4:	200152a0 	.word	0x200152a0
 80228e8:	08020407 	.word	0x08020407
 80228ec:	2000004c 	.word	0x2000004c

080228f0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80228f0:	b510      	push	{r4, lr}
 80228f2:	4604      	mov	r4, r0
 80228f4:	f7ff ff88 	bl	8022808 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80228f8:	4620      	mov	r0, r4
 80228fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228fe:	f7ff bfbd 	b.w	802287c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022902 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022902:	b510      	push	{r4, lr}
 8022904:	4604      	mov	r4, r0
 8022906:	f7ff fff3 	bl	80228f0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802290a:	4620      	mov	r0, r4
 802290c:	f7ff ff72 	bl	80227f4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022910:	4620      	mov	r0, r4
 8022912:	f7ff fdf9 	bl	8022508 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022916:	4620      	mov	r0, r4
 8022918:	f7ff fcfa 	bl	8022310 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 802291c:	4620      	mov	r0, r4
 802291e:	f7ff fd75 	bl	802240c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022922:	4620      	mov	r0, r4
 8022924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022928:	f7ff bee0 	b.w	80226ec <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0802292c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 802292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022930:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8022934:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8022938:	2d00      	cmp	r5, #0
 802293a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 802293e:	fb05 4c0e 	mla	ip, r5, lr, r4
 8022942:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8022946:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802294a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 802294e:	eb02 0a0c 	add.w	sl, r2, ip
 8022952:	8808      	ldrh	r0, [r1, #0]
 8022954:	f2c0 80b0 	blt.w	8022ab8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022958:	45ab      	cmp	fp, r5
 802295a:	f340 80ad 	ble.w	8022ab8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 802295e:	2c00      	cmp	r4, #0
 8022960:	f2c0 80a8 	blt.w	8022ab4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022964:	45a6      	cmp	lr, r4
 8022966:	f340 80a5 	ble.w	8022ab4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 802296a:	f812 200c 	ldrb.w	r2, [r2, ip]
 802296e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8022972:	1c62      	adds	r2, r4, #1
 8022974:	f100 80a3 	bmi.w	8022abe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022978:	4596      	cmp	lr, r2
 802297a:	f340 80a0 	ble.w	8022abe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 802297e:	f1b9 0f00 	cmp.w	r9, #0
 8022982:	f000 809c 	beq.w	8022abe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022986:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802298a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802298e:	3501      	adds	r5, #1
 8022990:	f100 8099 	bmi.w	8022ac6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022994:	45ab      	cmp	fp, r5
 8022996:	f340 8096 	ble.w	8022ac6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 802299a:	2f00      	cmp	r7, #0
 802299c:	f000 8093 	beq.w	8022ac6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80229a0:	2c00      	cmp	r4, #0
 80229a2:	f2c0 808e 	blt.w	8022ac2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80229a6:	45a6      	cmp	lr, r4
 80229a8:	f340 808b 	ble.w	8022ac2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80229ac:	f81a 200e 	ldrb.w	r2, [sl, lr]
 80229b0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80229b4:	3401      	adds	r4, #1
 80229b6:	f100 8089 	bmi.w	8022acc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80229ba:	45a6      	cmp	lr, r4
 80229bc:	f340 8086 	ble.w	8022acc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80229c0:	f1b9 0f00 	cmp.w	r9, #0
 80229c4:	f000 8082 	beq.w	8022acc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80229c8:	44d6      	add	lr, sl
 80229ca:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80229ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80229d2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80229d6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80229da:	fb19 fe07 	smulbb	lr, r9, r7
 80229de:	f1c7 0210 	rsb	r2, r7, #16
 80229e2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80229e6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80229ea:	eba2 0209 	sub.w	r2, r2, r9
 80229ee:	ea44 0808 	orr.w	r8, r4, r8
 80229f2:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80229f6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80229fa:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80229fe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022a02:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022a06:	ea44 0c0c 	orr.w	ip, r4, ip
 8022a0a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022a0e:	fb04 f40c 	mul.w	r4, r4, ip
 8022a12:	fb02 4808 	mla	r8, r2, r8, r4
 8022a16:	041a      	lsls	r2, r3, #16
 8022a18:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022a1c:	b2b4      	uxth	r4, r6
 8022a1e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022a22:	43f6      	mvns	r6, r6
 8022a24:	4313      	orrs	r3, r2
 8022a26:	042a      	lsls	r2, r5, #16
 8022a28:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022a2c:	b2f6      	uxtb	r6, r6
 8022a2e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022a32:	fb0e 8303 	mla	r3, lr, r3, r8
 8022a36:	432a      	orrs	r2, r5
 8022a38:	fb07 3202 	mla	r2, r7, r2, r3
 8022a3c:	10c7      	asrs	r7, r0, #3
 8022a3e:	0d53      	lsrs	r3, r2, #21
 8022a40:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022a44:	0952      	lsrs	r2, r2, #5
 8022a46:	fb17 f706 	smulbb	r7, r7, r6
 8022a4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022a4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022a52:	431a      	orrs	r2, r3
 8022a54:	b293      	uxth	r3, r2
 8022a56:	1202      	asrs	r2, r0, #8
 8022a58:	121d      	asrs	r5, r3, #8
 8022a5a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022a5e:	00c0      	lsls	r0, r0, #3
 8022a60:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022a64:	fb12 f206 	smulbb	r2, r2, r6
 8022a68:	b2c0      	uxtb	r0, r0
 8022a6a:	fb05 2504 	mla	r5, r5, r4, r2
 8022a6e:	10da      	asrs	r2, r3, #3
 8022a70:	fb10 f006 	smulbb	r0, r0, r6
 8022a74:	00db      	lsls	r3, r3, #3
 8022a76:	b2ad      	uxth	r5, r5
 8022a78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022a7c:	b2db      	uxtb	r3, r3
 8022a7e:	fb02 7204 	mla	r2, r2, r4, r7
 8022a82:	fb03 0004 	mla	r0, r3, r4, r0
 8022a86:	1c6b      	adds	r3, r5, #1
 8022a88:	b292      	uxth	r2, r2
 8022a8a:	b280      	uxth	r0, r0
 8022a8c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022a90:	1c43      	adds	r3, r0, #1
 8022a92:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022a96:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022a9a:	1c50      	adds	r0, r2, #1
 8022a9c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022aa0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022aa4:	0952      	lsrs	r2, r2, #5
 8022aa6:	432b      	orrs	r3, r5
 8022aa8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022aac:	4313      	orrs	r3, r2
 8022aae:	800b      	strh	r3, [r1, #0]
 8022ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ab4:	4680      	mov	r8, r0
 8022ab6:	e75c      	b.n	8022972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022ab8:	4684      	mov	ip, r0
 8022aba:	4680      	mov	r8, r0
 8022abc:	e767      	b.n	802298e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022abe:	4684      	mov	ip, r0
 8022ac0:	e765      	b.n	802298e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022ac2:	4605      	mov	r5, r0
 8022ac4:	e776      	b.n	80229b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8022ac6:	4603      	mov	r3, r0
 8022ac8:	4605      	mov	r5, r0
 8022aca:	e782      	b.n	80229d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022acc:	4603      	mov	r3, r0
 8022ace:	e780      	b.n	80229d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ad4:	b099      	sub	sp, #100	; 0x64
 8022ad6:	9215      	str	r2, [sp, #84]	; 0x54
 8022ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8022ada:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022adc:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8022ae0:	9016      	str	r0, [sp, #88]	; 0x58
 8022ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8022ae4:	6850      	ldr	r0, [r2, #4]
 8022ae6:	910c      	str	r1, [sp, #48]	; 0x30
 8022ae8:	6812      	ldr	r2, [r2, #0]
 8022aea:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022aee:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8022af2:	fb00 1303 	mla	r3, r0, r3, r1
 8022af6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022afa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022b02:	685e      	ldr	r6, [r3, #4]
 8022b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b06:	3604      	adds	r6, #4
 8022b08:	43db      	mvns	r3, r3
 8022b0a:	b2db      	uxtb	r3, r3
 8022b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8022b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b10:	2b00      	cmp	r3, #0
 8022b12:	dc03      	bgt.n	8022b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	f340 8225 	ble.w	8022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022b1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022b1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b26:	1e48      	subs	r0, r1, #1
 8022b28:	1e57      	subs	r7, r2, #1
 8022b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	f340 80e3 	ble.w	8022cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022b32:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022b36:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022b3a:	d406      	bmi.n	8022b4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022b3c:	4584      	cmp	ip, r0
 8022b3e:	da04      	bge.n	8022b4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	db02      	blt.n	8022b4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022b44:	42bb      	cmp	r3, r7
 8022b46:	f2c0 80d8 	blt.w	8022cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022b4a:	f11c 0c01 	adds.w	ip, ip, #1
 8022b4e:	f100 80c9 	bmi.w	8022ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022b52:	4561      	cmp	r1, ip
 8022b54:	f2c0 80c6 	blt.w	8022ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022b58:	3301      	adds	r3, #1
 8022b5a:	f100 80c3 	bmi.w	8022ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022b5e:	429a      	cmp	r2, r3
 8022b60:	f2c0 80c0 	blt.w	8022ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022b64:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022b68:	4647      	mov	r7, r8
 8022b6a:	f1bb 0f00 	cmp.w	fp, #0
 8022b6e:	f340 80e3 	ble.w	8022d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022b72:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022b74:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022b78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022b7a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022b7e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022b82:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022b86:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022b8a:	689b      	ldr	r3, [r3, #8]
 8022b8c:	f100 8121 	bmi.w	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022b90:	f103 39ff 	add.w	r9, r3, #4294967295
 8022b94:	454a      	cmp	r2, r9
 8022b96:	f280 811c 	bge.w	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022b9a:	f1bc 0f00 	cmp.w	ip, #0
 8022b9e:	f2c0 8118 	blt.w	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022ba2:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022ba6:	45cc      	cmp	ip, r9
 8022ba8:	f280 8113 	bge.w	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022bac:	b21b      	sxth	r3, r3
 8022bae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022bb0:	fb0c 2203 	mla	r2, ip, r3, r2
 8022bb4:	eb04 0902 	add.w	r9, r4, r2
 8022bb8:	5ca2      	ldrb	r2, [r4, r2]
 8022bba:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022bbe:	2800      	cmp	r0, #0
 8022bc0:	f000 80fe 	beq.w	8022dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022bc4:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022bc8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022bcc:	9211      	str	r2, [sp, #68]	; 0x44
 8022bce:	b151      	cbz	r1, 8022be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022bd0:	eb09 0203 	add.w	r2, r9, r3
 8022bd4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022bd8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022bdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bde:	7853      	ldrb	r3, [r2, #1]
 8022be0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022be4:	9312      	str	r3, [sp, #72]	; 0x48
 8022be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022be8:	fb10 f201 	smulbb	r2, r0, r1
 8022bec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022bee:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022bf2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022bf6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022bfa:	10d2      	asrs	r2, r2, #3
 8022bfc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022c00:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022c04:	ea4c 0c03 	orr.w	ip, ip, r3
 8022c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c0a:	041b      	lsls	r3, r3, #16
 8022c0c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022c10:	4323      	orrs	r3, r4
 8022c12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022c14:	4353      	muls	r3, r2
 8022c16:	fb09 330c 	mla	r3, r9, ip, r3
 8022c1a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022c1e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022c22:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022c26:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022c2a:	f1c1 0c10 	rsb	ip, r1, #16
 8022c2e:	ebac 0c00 	sub.w	ip, ip, r0
 8022c32:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022c36:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022c3a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c40:	0418      	lsls	r0, r3, #16
 8022c42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022c46:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022c4a:	4318      	orrs	r0, r3
 8022c4c:	fb02 c200 	mla	r2, r2, r0, ip
 8022c50:	8838      	ldrh	r0, [r7, #0]
 8022c52:	0d53      	lsrs	r3, r2, #21
 8022c54:	0952      	lsrs	r2, r2, #5
 8022c56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c5a:	1201      	asrs	r1, r0, #8
 8022c5c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c60:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022c64:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022c68:	00c0      	lsls	r0, r0, #3
 8022c6a:	431a      	orrs	r2, r3
 8022c6c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022c70:	fb11 f104 	smulbb	r1, r1, r4
 8022c74:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022c78:	b292      	uxth	r2, r2
 8022c7a:	fb1e fe04 	smulbb	lr, lr, r4
 8022c7e:	b2c0      	uxtb	r0, r0
 8022c80:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022c84:	fb10 f004 	smulbb	r0, r0, r4
 8022c88:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022c8c:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022c90:	10d1      	asrs	r1, r2, #3
 8022c92:	00d2      	lsls	r2, r2, #3
 8022c94:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022c98:	fa1f fc8c 	uxth.w	ip, ip
 8022c9c:	b2d2      	uxtb	r2, r2
 8022c9e:	fb01 e103 	mla	r1, r1, r3, lr
 8022ca2:	fb02 0303 	mla	r3, r2, r3, r0
 8022ca6:	b289      	uxth	r1, r1
 8022ca8:	b29a      	uxth	r2, r3
 8022caa:	f10c 0301 	add.w	r3, ip, #1
 8022cae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022cb2:	1c53      	adds	r3, r2, #1
 8022cb4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022cb8:	1c4a      	adds	r2, r1, #1
 8022cba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022cbe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022cc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022cc6:	0949      	lsrs	r1, r1, #5
 8022cc8:	ea43 030c 	orr.w	r3, r3, ip
 8022ccc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022cd0:	430b      	orrs	r3, r1
 8022cd2:	803b      	strh	r3, [r7, #0]
 8022cd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022cd6:	3702      	adds	r7, #2
 8022cd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022cdc:	449a      	add	sl, r3
 8022cde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ce0:	441d      	add	r5, r3
 8022ce2:	e742      	b.n	8022b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022ce4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022ce6:	f108 0802 	add.w	r8, r8, #2
 8022cea:	449a      	add	sl, r3
 8022cec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022cee:	441d      	add	r5, r3
 8022cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cf2:	3b01      	subs	r3, #1
 8022cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8022cf6:	e718      	b.n	8022b2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022cf8:	d023      	beq.n	8022d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cfc:	9825      	ldr	r0, [sp, #148]	; 0x94
 8022cfe:	3b01      	subs	r3, #1
 8022d00:	fb00 a003 	mla	r0, r0, r3, sl
 8022d04:	1400      	asrs	r0, r0, #16
 8022d06:	f53f af2d 	bmi.w	8022b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022d0a:	3901      	subs	r1, #1
 8022d0c:	4288      	cmp	r0, r1
 8022d0e:	f6bf af29 	bge.w	8022b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022d12:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022d14:	fb01 5303 	mla	r3, r1, r3, r5
 8022d18:	141b      	asrs	r3, r3, #16
 8022d1a:	f53f af23 	bmi.w	8022b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022d1e:	3a01      	subs	r2, #1
 8022d20:	4293      	cmp	r3, r2
 8022d22:	f6bf af1f 	bge.w	8022b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022d26:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022d2a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022d2e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022d32:	f1be 0f00 	cmp.w	lr, #0
 8022d36:	dc6c      	bgt.n	8022e12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d3a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022d3e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	f340 810e 	ble.w	8022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022d50:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d58:	eef0 6a62 	vmov.f32	s13, s5
 8022d5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d60:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d68:	ee16 aa90 	vmov	sl, s13
 8022d6c:	eef0 6a43 	vmov.f32	s13, s6
 8022d70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d74:	ee16 5a90 	vmov	r5, s13
 8022d78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d80:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d90:	ee12 2a90 	vmov	r2, s5
 8022d94:	eef0 2a47 	vmov.f32	s5, s14
 8022d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d9c:	ee13 2a10 	vmov	r2, s6
 8022da0:	9325      	str	r3, [sp, #148]	; 0x94
 8022da2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022da4:	eeb0 3a67 	vmov.f32	s6, s15
 8022da8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dac:	9326      	str	r3, [sp, #152]	; 0x98
 8022dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022db0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022db2:	3b01      	subs	r3, #1
 8022db4:	930c      	str	r3, [sp, #48]	; 0x30
 8022db6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022db8:	bf08      	it	eq
 8022dba:	4613      	moveq	r3, r2
 8022dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8022dbe:	e6a6      	b.n	8022b0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022dc0:	2900      	cmp	r1, #0
 8022dc2:	f43f af10 	beq.w	8022be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022dc6:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022dca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8022dd0:	e709      	b.n	8022be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022dd2:	f112 0901 	adds.w	r9, r2, #1
 8022dd6:	f53f af7d 	bmi.w	8022cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022dda:	454b      	cmp	r3, r9
 8022ddc:	f6ff af7a 	blt.w	8022cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022de0:	f11c 0901 	adds.w	r9, ip, #1
 8022de4:	f53f af76 	bmi.w	8022cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022de8:	45ce      	cmp	lr, r9
 8022dea:	f6ff af73 	blt.w	8022cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022dee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022df0:	b21b      	sxth	r3, r3
 8022df2:	9202      	str	r2, [sp, #8]
 8022df4:	fa0f f28e 	sxth.w	r2, lr
 8022df8:	9300      	str	r3, [sp, #0]
 8022dfa:	4633      	mov	r3, r6
 8022dfc:	9201      	str	r2, [sp, #4]
 8022dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e00:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022e04:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022e08:	4639      	mov	r1, r7
 8022e0a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022e0c:	f7ff fd8e 	bl	802292c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022e10:	e760      	b.n	8022cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022e12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e14:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022e18:	1429      	asrs	r1, r5, #16
 8022e1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022e20:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8022e24:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022e28:	fb03 2101 	mla	r1, r3, r1, r2
 8022e2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e2e:	440a      	add	r2, r1
 8022e30:	5c61      	ldrb	r1, [r4, r1]
 8022e32:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8022e36:	f1bc 0f00 	cmp.w	ip, #0
 8022e3a:	f000 808c 	beq.w	8022f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022e3e:	7857      	ldrb	r7, [r2, #1]
 8022e40:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8022e44:	9413      	str	r4, [sp, #76]	; 0x4c
 8022e46:	b140      	cbz	r0, 8022e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022e48:	18d7      	adds	r7, r2, r3
 8022e4a:	5cd3      	ldrb	r3, [r2, r3]
 8022e4c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e50:	9310      	str	r3, [sp, #64]	; 0x40
 8022e52:	787b      	ldrb	r3, [r7, #1]
 8022e54:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e58:	9314      	str	r3, [sp, #80]	; 0x50
 8022e5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022e5c:	fb1c f200 	smulbb	r2, ip, r0
 8022e60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022e62:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022e66:	041f      	lsls	r7, r3, #16
 8022e68:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e6c:	10d2      	asrs	r2, r2, #3
 8022e6e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8022e72:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8022e76:	431f      	orrs	r7, r3
 8022e78:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022e7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8022e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022e80:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022e82:	041b      	lsls	r3, r3, #16
 8022e84:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022e88:	ea43 030b 	orr.w	r3, r3, fp
 8022e8c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022e90:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022e94:	4353      	muls	r3, r2
 8022e96:	fb04 3707 	mla	r7, r4, r7, r3
 8022e9a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022ea0:	ea43 0b01 	orr.w	fp, r3, r1
 8022ea4:	f1c0 0110 	rsb	r1, r0, #16
 8022ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022eaa:	eba1 0c0c 	sub.w	ip, r1, ip
 8022eae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022eb2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022eb6:	fb0c 770b 	mla	r7, ip, fp, r7
 8022eba:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022ebe:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8022ec2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022ec6:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022eca:	fb02 770c 	mla	r7, r2, ip, r7
 8022ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ed0:	0d79      	lsrs	r1, r7, #21
 8022ed2:	8812      	ldrh	r2, [r2, #0]
 8022ed4:	097f      	lsrs	r7, r7, #5
 8022ed6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022eda:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022ede:	430f      	orrs	r7, r1
 8022ee0:	1211      	asrs	r1, r2, #8
 8022ee2:	b2bb      	uxth	r3, r7
 8022ee4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022ee8:	10d7      	asrs	r7, r2, #3
 8022eea:	fb11 f104 	smulbb	r1, r1, r4
 8022eee:	1218      	asrs	r0, r3, #8
 8022ef0:	00d2      	lsls	r2, r2, #3
 8022ef2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022ef6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022efa:	fb17 f704 	smulbb	r7, r7, r4
 8022efe:	b2d2      	uxtb	r2, r2
 8022f00:	fb00 1009 	mla	r0, r0, r9, r1
 8022f04:	10d9      	asrs	r1, r3, #3
 8022f06:	fb12 f204 	smulbb	r2, r2, r4
 8022f0a:	00db      	lsls	r3, r3, #3
 8022f0c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022f10:	b280      	uxth	r0, r0
 8022f12:	b2db      	uxtb	r3, r3
 8022f14:	fb01 7109 	mla	r1, r1, r9, r7
 8022f18:	fb03 2309 	mla	r3, r3, r9, r2
 8022f1c:	1c42      	adds	r2, r0, #1
 8022f1e:	b289      	uxth	r1, r1
 8022f20:	b29b      	uxth	r3, r3
 8022f22:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022f26:	1c4f      	adds	r7, r1, #1
 8022f28:	1c5a      	adds	r2, r3, #1
 8022f2a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022f2e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022f32:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022f38:	0949      	lsrs	r1, r1, #5
 8022f3a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022f3e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022f42:	4310      	orrs	r0, r2
 8022f44:	4308      	orrs	r0, r1
 8022f46:	f823 0b02 	strh.w	r0, [r3], #2
 8022f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8022f4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022f4e:	449a      	add	sl, r3
 8022f50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022f52:	441d      	add	r5, r3
 8022f54:	e6ed      	b.n	8022d32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8022f56:	2800      	cmp	r0, #0
 8022f58:	f43f af7f 	beq.w	8022e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022f5c:	5cd3      	ldrb	r3, [r2, r3]
 8022f5e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f62:	9310      	str	r3, [sp, #64]	; 0x40
 8022f64:	e779      	b.n	8022e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022f66:	b019      	add	sp, #100	; 0x64
 8022f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f70:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8022f74:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8022f78:	f1b8 0f00 	cmp.w	r8, #0
 8022f7c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8022f80:	fb08 470e 	mla	r7, r8, lr, r4
 8022f84:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022f88:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022f8c:	eb02 0907 	add.w	r9, r2, r7
 8022f90:	8808      	ldrh	r0, [r1, #0]
 8022f92:	db67      	blt.n	8023064 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022f94:	45c2      	cmp	sl, r8
 8022f96:	dd65      	ble.n	8023064 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022f98:	2c00      	cmp	r4, #0
 8022f9a:	db61      	blt.n	8023060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022f9c:	45a6      	cmp	lr, r4
 8022f9e:	dd5f      	ble.n	8023060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022fa0:	5dd2      	ldrb	r2, [r2, r7]
 8022fa2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022fa6:	1c62      	adds	r2, r4, #1
 8022fa8:	d45f      	bmi.n	802306a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022faa:	4596      	cmp	lr, r2
 8022fac:	dd5d      	ble.n	802306a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022fae:	2d00      	cmp	r5, #0
 8022fb0:	d05b      	beq.n	802306a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022fb2:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022fb6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022fba:	f118 0801 	adds.w	r8, r8, #1
 8022fbe:	d458      	bmi.n	8023072 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022fc0:	45c2      	cmp	sl, r8
 8022fc2:	dd56      	ble.n	8023072 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022fc4:	2e00      	cmp	r6, #0
 8022fc6:	d054      	beq.n	8023072 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022fc8:	2c00      	cmp	r4, #0
 8022fca:	db50      	blt.n	802306e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022fcc:	45a6      	cmp	lr, r4
 8022fce:	dd4e      	ble.n	802306e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022fd0:	f819 200e 	ldrb.w	r2, [r9, lr]
 8022fd4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8022fd8:	3401      	adds	r4, #1
 8022fda:	d407      	bmi.n	8022fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022fdc:	45a6      	cmp	lr, r4
 8022fde:	dd05      	ble.n	8022fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022fe0:	b125      	cbz	r5, 8022fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022fe2:	44ce      	add	lr, r9
 8022fe4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022fe8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022fec:	fb15 f406 	smulbb	r4, r5, r6
 8022ff0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022ff4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022ff8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ffc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023000:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023004:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023008:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802300c:	ea43 0c0c 	orr.w	ip, r3, ip
 8023010:	f1c6 0310 	rsb	r3, r6, #16
 8023014:	ea4e 0707 	orr.w	r7, lr, r7
 8023018:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802301c:	1b5b      	subs	r3, r3, r5
 802301e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8023022:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023026:	437d      	muls	r5, r7
 8023028:	fb03 5c0c 	mla	ip, r3, ip, r5
 802302c:	0403      	lsls	r3, r0, #16
 802302e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023032:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023036:	4318      	orrs	r0, r3
 8023038:	0413      	lsls	r3, r2, #16
 802303a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802303e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023042:	fb04 c000 	mla	r0, r4, r0, ip
 8023046:	4313      	orrs	r3, r2
 8023048:	fb06 0003 	mla	r0, r6, r3, r0
 802304c:	0d43      	lsrs	r3, r0, #21
 802304e:	0940      	lsrs	r0, r0, #5
 8023050:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023054:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023058:	4318      	orrs	r0, r3
 802305a:	8008      	strh	r0, [r1, #0]
 802305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023060:	4684      	mov	ip, r0
 8023062:	e7a0      	b.n	8022fa6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8023064:	4607      	mov	r7, r0
 8023066:	4684      	mov	ip, r0
 8023068:	e7a7      	b.n	8022fba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802306a:	4607      	mov	r7, r0
 802306c:	e7a5      	b.n	8022fba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802306e:	4602      	mov	r2, r0
 8023070:	e7b2      	b.n	8022fd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8023072:	4602      	mov	r2, r0
 8023074:	e7ba      	b.n	8022fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08023076 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802307a:	b093      	sub	sp, #76	; 0x4c
 802307c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023080:	920f      	str	r2, [sp, #60]	; 0x3c
 8023082:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023084:	9010      	str	r0, [sp, #64]	; 0x40
 8023086:	9108      	str	r1, [sp, #32]
 8023088:	6850      	ldr	r0, [r2, #4]
 802308a:	9306      	str	r3, [sp, #24]
 802308c:	6812      	ldr	r2, [r2, #0]
 802308e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023092:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8023096:	fb00 1303 	mla	r3, r0, r3, r1
 802309a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802309e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230a0:	681b      	ldr	r3, [r3, #0]
 80230a2:	9307      	str	r3, [sp, #28]
 80230a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230a6:	685f      	ldr	r7, [r3, #4]
 80230a8:	3704      	adds	r7, #4
 80230aa:	9b08      	ldr	r3, [sp, #32]
 80230ac:	2b00      	cmp	r3, #0
 80230ae:	dc03      	bgt.n	80230b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80230b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80230b2:	2b00      	cmp	r3, #0
 80230b4:	f340 81b2 	ble.w	802341c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80230b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80230be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80230c2:	1e48      	subs	r0, r1, #1
 80230c4:	f102 3cff 	add.w	ip, r2, #4294967295
 80230c8:	9b06      	ldr	r3, [sp, #24]
 80230ca:	2b00      	cmp	r3, #0
 80230cc:	f340 80a9 	ble.w	8023222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80230d0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80230d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80230d8:	d406      	bmi.n	80230e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80230da:	4586      	cmp	lr, r0
 80230dc:	da04      	bge.n	80230e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80230de:	2b00      	cmp	r3, #0
 80230e0:	db02      	blt.n	80230e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80230e2:	4563      	cmp	r3, ip
 80230e4:	f2c0 809e 	blt.w	8023224 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80230e8:	f11e 0e01 	adds.w	lr, lr, #1
 80230ec:	f100 808f 	bmi.w	802320e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80230f0:	4571      	cmp	r1, lr
 80230f2:	f2c0 808c 	blt.w	802320e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80230f6:	3301      	adds	r3, #1
 80230f8:	f100 8089 	bmi.w	802320e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80230fc:	429a      	cmp	r2, r3
 80230fe:	f2c0 8086 	blt.w	802320e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023102:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023106:	46c8      	mov	r8, r9
 8023108:	f1bb 0f00 	cmp.w	fp, #0
 802310c:	f340 80a6 	ble.w	802325c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023110:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023112:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023116:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023118:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802311c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023120:	1422      	asrs	r2, r4, #16
 8023122:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023126:	689b      	ldr	r3, [r3, #8]
 8023128:	f100 80e3 	bmi.w	80232f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802312c:	f103 3aff 	add.w	sl, r3, #4294967295
 8023130:	4552      	cmp	r2, sl
 8023132:	f280 80de 	bge.w	80232f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023136:	f1bc 0f00 	cmp.w	ip, #0
 802313a:	f2c0 80da 	blt.w	80232f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802313e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023142:	45d4      	cmp	ip, sl
 8023144:	f280 80d5 	bge.w	80232f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023148:	b21b      	sxth	r3, r3
 802314a:	9d07      	ldr	r5, [sp, #28]
 802314c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023150:	eb05 0a02 	add.w	sl, r5, r2
 8023154:	5caa      	ldrb	r2, [r5, r2]
 8023156:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802315a:	2800      	cmp	r0, #0
 802315c:	f000 80c0 	beq.w	80232e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023160:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023164:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023168:	920b      	str	r2, [sp, #44]	; 0x2c
 802316a:	b151      	cbz	r1, 8023182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802316c:	eb0a 0203 	add.w	r2, sl, r3
 8023170:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023174:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023178:	9309      	str	r3, [sp, #36]	; 0x24
 802317a:	7853      	ldrb	r3, [r2, #1]
 802317c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023180:	930c      	str	r3, [sp, #48]	; 0x30
 8023182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023184:	fb10 f201 	smulbb	r2, r0, r1
 8023188:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802318a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802318e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023192:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023196:	10d2      	asrs	r2, r2, #3
 8023198:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802319c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80231a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80231a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231a6:	041b      	lsls	r3, r3, #16
 80231a8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80231ac:	432b      	orrs	r3, r5
 80231ae:	4353      	muls	r3, r2
 80231b0:	fb0a 330c 	mla	r3, sl, ip, r3
 80231b4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80231b8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80231bc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80231c0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80231c4:	f1c1 0c10 	rsb	ip, r1, #16
 80231c8:	ebac 0c00 	sub.w	ip, ip, r0
 80231cc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80231d0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80231d4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80231d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231da:	0418      	lsls	r0, r3, #16
 80231dc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80231e0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80231e4:	4318      	orrs	r0, r3
 80231e6:	fb02 c200 	mla	r2, r2, r0, ip
 80231ea:	0d53      	lsrs	r3, r2, #21
 80231ec:	0952      	lsrs	r2, r2, #5
 80231ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80231f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80231f6:	431a      	orrs	r2, r3
 80231f8:	f8a8 2000 	strh.w	r2, [r8]
 80231fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80231fe:	f108 0802 	add.w	r8, r8, #2
 8023202:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023206:	441c      	add	r4, r3
 8023208:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802320a:	441e      	add	r6, r3
 802320c:	e77c      	b.n	8023108 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802320e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023210:	f109 0902 	add.w	r9, r9, #2
 8023214:	441c      	add	r4, r3
 8023216:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023218:	441e      	add	r6, r3
 802321a:	9b06      	ldr	r3, [sp, #24]
 802321c:	3b01      	subs	r3, #1
 802321e:	9306      	str	r3, [sp, #24]
 8023220:	e752      	b.n	80230c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023222:	d020      	beq.n	8023266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8023224:	9b06      	ldr	r3, [sp, #24]
 8023226:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023228:	3b01      	subs	r3, #1
 802322a:	fb00 4003 	mla	r0, r0, r3, r4
 802322e:	1400      	asrs	r0, r0, #16
 8023230:	f53f af67 	bmi.w	8023102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023234:	3901      	subs	r1, #1
 8023236:	4288      	cmp	r0, r1
 8023238:	f6bf af63 	bge.w	8023102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802323c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802323e:	fb01 6303 	mla	r3, r1, r3, r6
 8023242:	141b      	asrs	r3, r3, #16
 8023244:	f53f af5d 	bmi.w	8023102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023248:	3a01      	subs	r2, #1
 802324a:	4293      	cmp	r3, r2
 802324c:	f6bf af59 	bge.w	8023102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023250:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023254:	46ca      	mov	sl, r9
 8023256:	f1b8 0f00 	cmp.w	r8, #0
 802325a:	dc67      	bgt.n	802332c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802325c:	9b06      	ldr	r3, [sp, #24]
 802325e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023262:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023266:	9b08      	ldr	r3, [sp, #32]
 8023268:	2b00      	cmp	r3, #0
 802326a:	f340 80d7 	ble.w	802341c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802326e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023272:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023274:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023278:	eeb0 6a62 	vmov.f32	s12, s5
 802327c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023280:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023284:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023288:	ee16 4a10 	vmov	r4, s12
 802328c:	eeb0 6a43 	vmov.f32	s12, s6
 8023290:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023294:	ee16 6a10 	vmov	r6, s12
 8023298:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802329c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80232a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80232a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80232a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80232ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80232b0:	ee12 2a90 	vmov	r2, s5
 80232b4:	eef0 2a47 	vmov.f32	s5, s14
 80232b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80232bc:	ee13 2a10 	vmov	r2, s6
 80232c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80232c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232c4:	eeb0 3a67 	vmov.f32	s6, s15
 80232c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80232cc:	9320      	str	r3, [sp, #128]	; 0x80
 80232ce:	9b08      	ldr	r3, [sp, #32]
 80232d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80232d2:	3b01      	subs	r3, #1
 80232d4:	9308      	str	r3, [sp, #32]
 80232d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232d8:	bf08      	it	eq
 80232da:	4613      	moveq	r3, r2
 80232dc:	9306      	str	r3, [sp, #24]
 80232de:	e6e4      	b.n	80230aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80232e0:	2900      	cmp	r1, #0
 80232e2:	f43f af4e 	beq.w	8023182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80232e6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80232ea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80232ee:	9309      	str	r3, [sp, #36]	; 0x24
 80232f0:	e747      	b.n	8023182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80232f2:	f112 0a01 	adds.w	sl, r2, #1
 80232f6:	d481      	bmi.n	80231fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80232f8:	4553      	cmp	r3, sl
 80232fa:	f6ff af7f 	blt.w	80231fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80232fe:	f11c 0a01 	adds.w	sl, ip, #1
 8023302:	f53f af7b 	bmi.w	80231fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023306:	45d6      	cmp	lr, sl
 8023308:	f6ff af78 	blt.w	80231fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802330c:	b21b      	sxth	r3, r3
 802330e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8023312:	fa0f f28e 	sxth.w	r2, lr
 8023316:	9300      	str	r3, [sp, #0]
 8023318:	463b      	mov	r3, r7
 802331a:	9201      	str	r2, [sp, #4]
 802331c:	9a07      	ldr	r2, [sp, #28]
 802331e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023322:	4641      	mov	r1, r8
 8023324:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023326:	f7ff fe21 	bl	8022f6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802332a:	e767      	b.n	80231fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802332c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802332e:	1422      	asrs	r2, r4, #16
 8023330:	1431      	asrs	r1, r6, #16
 8023332:	9d07      	ldr	r5, [sp, #28]
 8023334:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023338:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802333c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023340:	fb03 2101 	mla	r1, r3, r1, r2
 8023344:	9a07      	ldr	r2, [sp, #28]
 8023346:	440a      	add	r2, r1
 8023348:	5c69      	ldrb	r1, [r5, r1]
 802334a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802334e:	f1be 0f00 	cmp.w	lr, #0
 8023352:	d05c      	beq.n	802340e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8023354:	f892 c001 	ldrb.w	ip, [r2, #1]
 8023358:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802335c:	950d      	str	r5, [sp, #52]	; 0x34
 802335e:	b150      	cbz	r0, 8023376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023360:	eb02 0c03 	add.w	ip, r2, r3
 8023364:	5cd3      	ldrb	r3, [r2, r3]
 8023366:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802336a:	930a      	str	r3, [sp, #40]	; 0x28
 802336c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023370:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023374:	930e      	str	r3, [sp, #56]	; 0x38
 8023376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023378:	fb1e f200 	smulbb	r2, lr, r0
 802337c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802337e:	f108 38ff 	add.w	r8, r8, #4294967295
 8023382:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023386:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802338a:	10d2      	asrs	r2, r2, #3
 802338c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023390:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023394:	ea4c 0c03 	orr.w	ip, ip, r3
 8023398:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802339c:	9311      	str	r3, [sp, #68]	; 0x44
 802339e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80233a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80233a2:	041b      	lsls	r3, r3, #16
 80233a4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80233a8:	ea43 030b 	orr.w	r3, r3, fp
 80233ac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80233b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80233b4:	4353      	muls	r3, r2
 80233b6:	fb05 3c0c 	mla	ip, r5, ip, r3
 80233ba:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80233be:	ea43 0b01 	orr.w	fp, r3, r1
 80233c2:	f1c0 0110 	rsb	r1, r0, #16
 80233c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233c8:	eba1 0e0e 	sub.w	lr, r1, lr
 80233cc:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80233d0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80233d4:	fb0e cc0b 	mla	ip, lr, fp, ip
 80233d8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80233dc:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80233e0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80233e4:	ea4b 0e0e 	orr.w	lr, fp, lr
 80233e8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80233ec:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80233f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80233f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80233f8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80233fc:	ea43 0c0c 	orr.w	ip, r3, ip
 8023400:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023402:	441c      	add	r4, r3
 8023404:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023406:	f82a cb02 	strh.w	ip, [sl], #2
 802340a:	441e      	add	r6, r3
 802340c:	e723      	b.n	8023256 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802340e:	2800      	cmp	r0, #0
 8023410:	d0b1      	beq.n	8023376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023412:	5cd3      	ldrb	r3, [r2, r3]
 8023414:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023418:	930a      	str	r3, [sp, #40]	; 0x28
 802341a:	e7ac      	b.n	8023376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802341c:	b013      	add	sp, #76	; 0x4c
 802341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023422 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8023422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023426:	880d      	ldrh	r5, [r1, #0]
 8023428:	b087      	sub	sp, #28
 802342a:	10ef      	asrs	r7, r5, #3
 802342c:	9103      	str	r1, [sp, #12]
 802342e:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8023432:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8023436:	00ed      	lsls	r5, r5, #3
 8023438:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802343c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8023440:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023444:	b2ed      	uxtb	r5, r5
 8023446:	9701      	str	r7, [sp, #4]
 8023448:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 802344c:	9502      	str	r5, [sp, #8]
 802344e:	9d01      	ldr	r5, [sp, #4]
 8023450:	9902      	ldr	r1, [sp, #8]
 8023452:	022d      	lsls	r5, r5, #8
 8023454:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8023458:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 802345c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8023460:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8023464:	430d      	orrs	r5, r1
 8023466:	fb06 0709 	mla	r7, r6, r9, r0
 802346a:	2e00      	cmp	r6, #0
 802346c:	9505      	str	r5, [sp, #20]
 802346e:	eb02 0c07 	add.w	ip, r2, r7
 8023472:	f2c0 80b6 	blt.w	80235e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8023476:	45b3      	cmp	fp, r6
 8023478:	f340 80b3 	ble.w	80235e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802347c:	2800      	cmp	r0, #0
 802347e:	f2c0 80ae 	blt.w	80235de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8023482:	4581      	cmp	r9, r0
 8023484:	f340 80ab 	ble.w	80235de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8023488:	5dd7      	ldrb	r7, [r2, r7]
 802348a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802348e:	441f      	add	r7, r3
 8023490:	1c42      	adds	r2, r0, #1
 8023492:	f100 80a9 	bmi.w	80235e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8023496:	4591      	cmp	r9, r2
 8023498:	f340 80a6 	ble.w	80235e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802349c:	2c00      	cmp	r4, #0
 802349e:	f000 80a3 	beq.w	80235e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80234a2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80234a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80234aa:	441d      	add	r5, r3
 80234ac:	3601      	adds	r6, #1
 80234ae:	f100 809f 	bmi.w	80235f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80234b2:	45b3      	cmp	fp, r6
 80234b4:	f340 809c 	ble.w	80235f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80234b8:	f1be 0f00 	cmp.w	lr, #0
 80234bc:	f000 8098 	beq.w	80235f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80234c0:	2800      	cmp	r0, #0
 80234c2:	f2c0 8093 	blt.w	80235ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80234c6:	4581      	cmp	r9, r0
 80234c8:	f340 8090 	ble.w	80235ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80234cc:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80234d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80234d4:	441e      	add	r6, r3
 80234d6:	3001      	adds	r0, #1
 80234d8:	f100 808d 	bmi.w	80235f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80234dc:	4581      	cmp	r9, r0
 80234de:	f340 808a 	ble.w	80235f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80234e2:	2c00      	cmp	r4, #0
 80234e4:	f000 8087 	beq.w	80235f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80234e8:	44e1      	add	r9, ip
 80234ea:	f899 2001 	ldrb.w	r2, [r9, #1]
 80234ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80234f2:	4413      	add	r3, r2
 80234f4:	b2a4      	uxth	r4, r4
 80234f6:	f897 c002 	ldrb.w	ip, [r7, #2]
 80234fa:	fa1f fe8e 	uxth.w	lr, lr
 80234fe:	9901      	ldr	r1, [sp, #4]
 8023500:	fb04 fb0e 	mul.w	fp, r4, lr
 8023504:	0124      	lsls	r4, r4, #4
 8023506:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 802350a:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802350e:	eba4 040b 	sub.w	r4, r4, fp
 8023512:	fa1f f08e 	uxth.w	r0, lr
 8023516:	b2a2      	uxth	r2, r4
 8023518:	78ac      	ldrb	r4, [r5, #2]
 802351a:	eba9 0900 	sub.w	r9, r9, r0
 802351e:	fa1f fe88 	uxth.w	lr, r8
 8023522:	4354      	muls	r4, r2
 8023524:	ea6f 0808 	mvn.w	r8, r8
 8023528:	fa1f f989 	uxth.w	r9, r9
 802352c:	fa5f f888 	uxtb.w	r8, r8
 8023530:	fb09 440c 	mla	r4, r9, ip, r4
 8023534:	f896 c002 	ldrb.w	ip, [r6, #2]
 8023538:	fb1a fa08 	smulbb	sl, sl, r8
 802353c:	fb00 440c 	mla	r4, r0, ip, r4
 8023540:	f893 c002 	ldrb.w	ip, [r3, #2]
 8023544:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8023548:	787c      	ldrb	r4, [r7, #1]
 802354a:	783f      	ldrb	r7, [r7, #0]
 802354c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023550:	fb0c ac0e 	mla	ip, ip, lr, sl
 8023554:	f895 a001 	ldrb.w	sl, [r5, #1]
 8023558:	782d      	ldrb	r5, [r5, #0]
 802355a:	fb02 fa0a 	mul.w	sl, r2, sl
 802355e:	fa1f fc8c 	uxth.w	ip, ip
 8023562:	436a      	muls	r2, r5
 8023564:	7835      	ldrb	r5, [r6, #0]
 8023566:	fb09 aa04 	mla	sl, r9, r4, sl
 802356a:	7874      	ldrb	r4, [r6, #1]
 802356c:	fb09 2207 	mla	r2, r9, r7, r2
 8023570:	fb00 aa04 	mla	sl, r0, r4, sl
 8023574:	785c      	ldrb	r4, [r3, #1]
 8023576:	fb00 2005 	mla	r0, r0, r5, r2
 802357a:	781b      	ldrb	r3, [r3, #0]
 802357c:	fb0b a404 	mla	r4, fp, r4, sl
 8023580:	fb11 fa08 	smulbb	sl, r1, r8
 8023584:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023588:	9b02      	ldr	r3, [sp, #8]
 802358a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802358e:	fb13 f808 	smulbb	r8, r3, r8
 8023592:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8023596:	fb04 a40e 	mla	r4, r4, lr, sl
 802359a:	f10c 0301 	add.w	r3, ip, #1
 802359e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80235a2:	b2a4      	uxth	r4, r4
 80235a4:	fa1f fe8e 	uxth.w	lr, lr
 80235a8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80235ac:	f104 0a01 	add.w	sl, r4, #1
 80235b0:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 80235b4:	f10e 0c01 	add.w	ip, lr, #1
 80235b8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80235bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80235c0:	0964      	lsrs	r4, r4, #5
 80235c2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80235c6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80235ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80235ce:	9b03      	ldr	r3, [sp, #12]
 80235d0:	ea4c 0c04 	orr.w	ip, ip, r4
 80235d4:	f8a3 c000 	strh.w	ip, [r3]
 80235d8:	b007      	add	sp, #28
 80235da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235de:	af05      	add	r7, sp, #20
 80235e0:	e756      	b.n	8023490 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80235e2:	ad05      	add	r5, sp, #20
 80235e4:	462f      	mov	r7, r5
 80235e6:	e761      	b.n	80234ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80235e8:	ad05      	add	r5, sp, #20
 80235ea:	e75f      	b.n	80234ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80235ec:	ae05      	add	r6, sp, #20
 80235ee:	e772      	b.n	80234d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80235f0:	ab05      	add	r3, sp, #20
 80235f2:	461e      	mov	r6, r3
 80235f4:	e77e      	b.n	80234f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80235f6:	ab05      	add	r3, sp, #20
 80235f8:	e77c      	b.n	80234f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080235fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80235fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235fe:	b095      	sub	sp, #84	; 0x54
 8023600:	9212      	str	r2, [sp, #72]	; 0x48
 8023602:	9309      	str	r3, [sp, #36]	; 0x24
 8023604:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8023606:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802360a:	9013      	str	r0, [sp, #76]	; 0x4c
 802360c:	930f      	str	r3, [sp, #60]	; 0x3c
 802360e:	6850      	ldr	r0, [r2, #4]
 8023610:	910e      	str	r1, [sp, #56]	; 0x38
 8023612:	6812      	ldr	r2, [r2, #0]
 8023614:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8023618:	fb00 1303 	mla	r3, r0, r3, r1
 802361c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023620:	930a      	str	r3, [sp, #40]	; 0x28
 8023622:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	930d      	str	r3, [sp, #52]	; 0x34
 8023628:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802362a:	685c      	ldr	r4, [r3, #4]
 802362c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802362e:	3404      	adds	r4, #4
 8023630:	43db      	mvns	r3, r3
 8023632:	b2db      	uxtb	r3, r3
 8023634:	930b      	str	r3, [sp, #44]	; 0x2c
 8023636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023638:	2b00      	cmp	r3, #0
 802363a:	dc03      	bgt.n	8023644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802363c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802363e:	2b00      	cmp	r3, #0
 8023640:	f340 8255 	ble.w	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023646:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802364a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802364e:	1e48      	subs	r0, r1, #1
 8023650:	1e55      	subs	r5, r2, #1
 8023652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023654:	2b00      	cmp	r3, #0
 8023656:	f340 80f9 	ble.w	802384c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802365a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802365c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802365e:	1436      	asrs	r6, r6, #16
 8023660:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023664:	d406      	bmi.n	8023674 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023666:	4286      	cmp	r6, r0
 8023668:	da04      	bge.n	8023674 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802366a:	2b00      	cmp	r3, #0
 802366c:	db02      	blt.n	8023674 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802366e:	42ab      	cmp	r3, r5
 8023670:	f2c0 80ed 	blt.w	802384e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8023674:	3601      	adds	r6, #1
 8023676:	f100 80da 	bmi.w	802382e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802367a:	42b1      	cmp	r1, r6
 802367c:	f2c0 80d7 	blt.w	802382e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023680:	3301      	adds	r3, #1
 8023682:	f100 80d4 	bmi.w	802382e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023686:	429a      	cmp	r2, r3
 8023688:	f2c0 80d1 	blt.w	802382e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802368c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802368e:	9311      	str	r3, [sp, #68]	; 0x44
 8023690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023692:	930c      	str	r3, [sp, #48]	; 0x30
 8023694:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023696:	2b00      	cmp	r3, #0
 8023698:	f340 80fa 	ble.w	8023890 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802369c:	9826      	ldr	r0, [sp, #152]	; 0x98
 802369e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80236a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80236a2:	68c6      	ldr	r6, [r0, #12]
 80236a4:	141d      	asrs	r5, r3, #16
 80236a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80236a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80236ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80236ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80236b0:	1400      	asrs	r0, r0, #16
 80236b2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80236b6:	6892      	ldr	r2, [r2, #8]
 80236b8:	f100 813e 	bmi.w	8023938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80236bc:	1e57      	subs	r7, r2, #1
 80236be:	42b8      	cmp	r0, r7
 80236c0:	f280 813a 	bge.w	8023938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80236c4:	2d00      	cmp	r5, #0
 80236c6:	f2c0 8137 	blt.w	8023938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80236ca:	1e77      	subs	r7, r6, #1
 80236cc:	42bd      	cmp	r5, r7
 80236ce:	f280 8133 	bge.w	8023938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80236d2:	b212      	sxth	r2, r2
 80236d4:	fb05 0002 	mla	r0, r5, r2, r0
 80236d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80236da:	f815 a000 	ldrb.w	sl, [r5, r0]
 80236de:	182e      	adds	r6, r5, r0
 80236e0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80236e4:	eb04 050a 	add.w	r5, r4, sl
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	f000 8117 	beq.w	802391c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80236ee:	f896 c001 	ldrb.w	ip, [r6, #1]
 80236f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80236f6:	44a4      	add	ip, r4
 80236f8:	2900      	cmp	r1, #0
 80236fa:	f000 8117 	beq.w	802392c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80236fe:	18b0      	adds	r0, r6, r2
 8023700:	5cb2      	ldrb	r2, [r6, r2]
 8023702:	7840      	ldrb	r0, [r0, #1]
 8023704:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023708:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802370c:	4422      	add	r2, r4
 802370e:	4420      	add	r0, r4
 8023710:	b29b      	uxth	r3, r3
 8023712:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8023716:	b289      	uxth	r1, r1
 8023718:	f895 b002 	ldrb.w	fp, [r5, #2]
 802371c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802371e:	fb03 f901 	mul.w	r9, r3, r1
 8023722:	011b      	lsls	r3, r3, #4
 8023724:	f8b6 e000 	ldrh.w	lr, [r6]
 8023728:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802372c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023730:	eba3 0309 	sub.w	r3, r3, r9
 8023734:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8023738:	b289      	uxth	r1, r1
 802373a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 802373e:	b29b      	uxth	r3, r3
 8023740:	eba8 0801 	sub.w	r8, r8, r1
 8023744:	435f      	muls	r7, r3
 8023746:	fa1f f888 	uxth.w	r8, r8
 802374a:	9310      	str	r3, [sp, #64]	; 0x40
 802374c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802374e:	fb08 770b 	mla	r7, r8, fp, r7
 8023752:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023756:	fb01 770b 	mla	r7, r1, fp, r7
 802375a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802375e:	fb09 770b 	mla	r7, r9, fp, r7
 8023762:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8023766:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802376a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802376e:	fb1b fb03 	smulbb	fp, fp, r3
 8023772:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023774:	fb07 b706 	mla	r7, r7, r6, fp
 8023778:	f895 b001 	ldrb.w	fp, [r5, #1]
 802377c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023780:	f89c c000 	ldrb.w	ip, [ip]
 8023784:	b2bf      	uxth	r7, r7
 8023786:	435d      	muls	r5, r3
 8023788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802378a:	fb08 550b 	mla	r5, r8, fp, r5
 802378e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023792:	fb01 550b 	mla	r5, r1, fp, r5
 8023796:	f890 b001 	ldrb.w	fp, [r0, #1]
 802379a:	fb09 550b 	mla	r5, r9, fp, r5
 802379e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80237a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80237a6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80237aa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80237ae:	fa5f fe8e 	uxtb.w	lr, lr
 80237b2:	fb1b fb03 	smulbb	fp, fp, r3
 80237b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80237b8:	fb03 f30c 	mul.w	r3, r3, ip
 80237bc:	f892 c000 	ldrb.w	ip, [r2]
 80237c0:	fb05 b506 	mla	r5, r5, r6, fp
 80237c4:	fb08 330a 	mla	r3, r8, sl, r3
 80237c8:	b2ad      	uxth	r5, r5
 80237ca:	fb01 330c 	mla	r3, r1, ip, r3
 80237ce:	f890 c000 	ldrb.w	ip, [r0]
 80237d2:	f105 0b01 	add.w	fp, r5, #1
 80237d6:	fb09 3c0c 	mla	ip, r9, ip, r3
 80237da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237dc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80237e0:	fb1e fe03 	smulbb	lr, lr, r3
 80237e4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80237e8:	1c7b      	adds	r3, r7, #1
 80237ea:	096d      	lsrs	r5, r5, #5
 80237ec:	fb0c e606 	mla	r6, ip, r6, lr
 80237f0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80237f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80237f8:	b2b6      	uxth	r6, r6
 80237fa:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80237fe:	1c77      	adds	r7, r6, #1
 8023800:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023804:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023808:	431f      	orrs	r7, r3
 802380a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802380c:	433d      	orrs	r5, r7
 802380e:	801d      	strh	r5, [r3, #0]
 8023810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023812:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023814:	3302      	adds	r3, #2
 8023816:	930c      	str	r3, [sp, #48]	; 0x30
 8023818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802381a:	4413      	add	r3, r2
 802381c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802381e:	931f      	str	r3, [sp, #124]	; 0x7c
 8023820:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023822:	4413      	add	r3, r2
 8023824:	9320      	str	r3, [sp, #128]	; 0x80
 8023826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023828:	3b01      	subs	r3, #1
 802382a:	9311      	str	r3, [sp, #68]	; 0x44
 802382c:	e732      	b.n	8023694 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802382e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023830:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8023832:	4433      	add	r3, r6
 8023834:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8023836:	931f      	str	r3, [sp, #124]	; 0x7c
 8023838:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802383a:	4433      	add	r3, r6
 802383c:	9320      	str	r3, [sp, #128]	; 0x80
 802383e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023840:	3b01      	subs	r3, #1
 8023842:	9309      	str	r3, [sp, #36]	; 0x24
 8023844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023846:	3302      	adds	r3, #2
 8023848:	930a      	str	r3, [sp, #40]	; 0x28
 802384a:	e702      	b.n	8023652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802384c:	d027      	beq.n	802389e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802384e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023850:	9821      	ldr	r0, [sp, #132]	; 0x84
 8023852:	3b01      	subs	r3, #1
 8023854:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023856:	fb00 5003 	mla	r0, r0, r3, r5
 802385a:	1400      	asrs	r0, r0, #16
 802385c:	f53f af16 	bmi.w	802368c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023860:	3901      	subs	r1, #1
 8023862:	4288      	cmp	r0, r1
 8023864:	f6bf af12 	bge.w	802368c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023868:	9922      	ldr	r1, [sp, #136]	; 0x88
 802386a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802386c:	fb01 0303 	mla	r3, r1, r3, r0
 8023870:	141b      	asrs	r3, r3, #16
 8023872:	f53f af0b 	bmi.w	802368c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023876:	3a01      	subs	r2, #1
 8023878:	4293      	cmp	r3, r2
 802387a:	f6bf af07 	bge.w	802368c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802387e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023880:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023884:	9311      	str	r3, [sp, #68]	; 0x44
 8023886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023888:	930c      	str	r3, [sp, #48]	; 0x30
 802388a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802388c:	2b00      	cmp	r3, #0
 802388e:	dc70      	bgt.n	8023972 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023898:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802389c:	930a      	str	r3, [sp, #40]	; 0x28
 802389e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	f340 8124 	ble.w	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80238a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80238aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80238ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80238b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80238b4:	eef0 6a62 	vmov.f32	s13, s5
 80238b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80238bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80238c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238c4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80238c8:	eef0 6a43 	vmov.f32	s13, s6
 80238cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238d0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80238d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80238d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80238dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80238e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80238e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80238e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80238ec:	ee12 2a90 	vmov	r2, s5
 80238f0:	eef0 2a47 	vmov.f32	s5, s14
 80238f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80238f8:	ee13 2a10 	vmov	r2, s6
 80238fc:	9321      	str	r3, [sp, #132]	; 0x84
 80238fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023900:	eeb0 3a67 	vmov.f32	s6, s15
 8023904:	fb92 f3f3 	sdiv	r3, r2, r3
 8023908:	9322      	str	r3, [sp, #136]	; 0x88
 802390a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802390c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802390e:	3b01      	subs	r3, #1
 8023910:	930e      	str	r3, [sp, #56]	; 0x38
 8023912:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023914:	bf08      	it	eq
 8023916:	4613      	moveq	r3, r2
 8023918:	9309      	str	r3, [sp, #36]	; 0x24
 802391a:	e68c      	b.n	8023636 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802391c:	b149      	cbz	r1, 8023932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802391e:	5cb2      	ldrb	r2, [r6, r2]
 8023920:	4628      	mov	r0, r5
 8023922:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023926:	4422      	add	r2, r4
 8023928:	46ac      	mov	ip, r5
 802392a:	e6f1      	b.n	8023710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802392c:	4628      	mov	r0, r5
 802392e:	462a      	mov	r2, r5
 8023930:	e6ee      	b.n	8023710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023932:	4628      	mov	r0, r5
 8023934:	462a      	mov	r2, r5
 8023936:	e7f7      	b.n	8023928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8023938:	1c47      	adds	r7, r0, #1
 802393a:	f53f af69 	bmi.w	8023810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802393e:	42ba      	cmp	r2, r7
 8023940:	f6ff af66 	blt.w	8023810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023944:	1c6f      	adds	r7, r5, #1
 8023946:	f53f af63 	bmi.w	8023810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802394a:	42be      	cmp	r6, r7
 802394c:	f6ff af60 	blt.w	8023810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023950:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023952:	b236      	sxth	r6, r6
 8023954:	b212      	sxth	r2, r2
 8023956:	9002      	str	r0, [sp, #8]
 8023958:	9601      	str	r6, [sp, #4]
 802395a:	9200      	str	r2, [sp, #0]
 802395c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802395e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023962:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023966:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802396a:	4623      	mov	r3, r4
 802396c:	f7ff fd59 	bl	8023422 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023970:	e74e      	b.n	8023810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023972:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023974:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023976:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802397a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802397c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802397e:	1400      	asrs	r0, r0, #16
 8023980:	142d      	asrs	r5, r5, #16
 8023982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023984:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023988:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802398c:	fb02 5000 	mla	r0, r2, r0, r5
 8023990:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023992:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023996:	182e      	adds	r6, r5, r0
 8023998:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802399c:	eb04 0509 	add.w	r5, r4, r9
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	f000 8096 	beq.w	8023ad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80239a6:	7877      	ldrb	r7, [r6, #1]
 80239a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80239ac:	4427      	add	r7, r4
 80239ae:	2900      	cmp	r1, #0
 80239b0:	f000 8097 	beq.w	8023ae2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80239b4:	18b0      	adds	r0, r6, r2
 80239b6:	5cb2      	ldrb	r2, [r6, r2]
 80239b8:	7840      	ldrb	r0, [r0, #1]
 80239ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80239c2:	4422      	add	r2, r4
 80239c4:	4420      	add	r0, r4
 80239c6:	b29b      	uxth	r3, r3
 80239c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80239ca:	b289      	uxth	r1, r1
 80239cc:	f895 b002 	ldrb.w	fp, [r5, #2]
 80239d0:	f8b6 c000 	ldrh.w	ip, [r6]
 80239d4:	fb03 f801 	mul.w	r8, r3, r1
 80239d8:	011b      	lsls	r3, r3, #4
 80239da:	78be      	ldrb	r6, [r7, #2]
 80239dc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80239e0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80239e4:	eba3 0308 	sub.w	r3, r3, r8
 80239e8:	f814 9009 	ldrb.w	r9, [r4, r9]
 80239ec:	b289      	uxth	r1, r1
 80239ee:	b29b      	uxth	r3, r3
 80239f0:	ebae 0e01 	sub.w	lr, lr, r1
 80239f4:	435e      	muls	r6, r3
 80239f6:	fa1f fe8e 	uxth.w	lr, lr
 80239fa:	9310      	str	r3, [sp, #64]	; 0x40
 80239fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239fe:	fb0e 660b 	mla	r6, lr, fp, r6
 8023a02:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023a06:	fb01 660b 	mla	r6, r1, fp, r6
 8023a0a:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023a0e:	fb08 660b 	mla	r6, r8, fp, r6
 8023a12:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023a16:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023a1a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023a1e:	fb1b fb03 	smulbb	fp, fp, r3
 8023a22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a24:	fb06 b60a 	mla	r6, r6, sl, fp
 8023a28:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023a2c:	787d      	ldrb	r5, [r7, #1]
 8023a2e:	783f      	ldrb	r7, [r7, #0]
 8023a30:	b2b6      	uxth	r6, r6
 8023a32:	435d      	muls	r5, r3
 8023a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a36:	fb0e 550b 	mla	r5, lr, fp, r5
 8023a3a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023a3e:	fb01 550b 	mla	r5, r1, fp, r5
 8023a42:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023a46:	fb08 550b 	mla	r5, r8, fp, r5
 8023a4a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023a4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023a52:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023a56:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023a5a:	fa5f fc8c 	uxtb.w	ip, ip
 8023a5e:	fb1b fb03 	smulbb	fp, fp, r3
 8023a62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a64:	437b      	muls	r3, r7
 8023a66:	7817      	ldrb	r7, [r2, #0]
 8023a68:	fb05 b50a 	mla	r5, r5, sl, fp
 8023a6c:	fb0e 3309 	mla	r3, lr, r9, r3
 8023a70:	b2ad      	uxth	r5, r5
 8023a72:	fb01 3307 	mla	r3, r1, r7, r3
 8023a76:	7807      	ldrb	r7, [r0, #0]
 8023a78:	f105 0b01 	add.w	fp, r5, #1
 8023a7c:	fb08 3707 	mla	r7, r8, r7, r3
 8023a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a82:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023a86:	fb1c fc03 	smulbb	ip, ip, r3
 8023a8a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023a8e:	1c73      	adds	r3, r6, #1
 8023a90:	096d      	lsrs	r5, r5, #5
 8023a92:	fb07 c70a 	mla	r7, r7, sl, ip
 8023a96:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023a9a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023a9e:	b2bf      	uxth	r7, r7
 8023aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023aa2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023aa6:	1c7a      	adds	r2, r7, #1
 8023aa8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023aac:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023ab0:	4316      	orrs	r6, r2
 8023ab2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023ab4:	432e      	orrs	r6, r5
 8023ab6:	f823 6b02 	strh.w	r6, [r3], #2
 8023aba:	930c      	str	r3, [sp, #48]	; 0x30
 8023abc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023abe:	4413      	add	r3, r2
 8023ac0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023ac2:	931f      	str	r3, [sp, #124]	; 0x7c
 8023ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ac6:	4413      	add	r3, r2
 8023ac8:	9320      	str	r3, [sp, #128]	; 0x80
 8023aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023acc:	3b01      	subs	r3, #1
 8023ace:	9311      	str	r3, [sp, #68]	; 0x44
 8023ad0:	e6db      	b.n	802388a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8023ad2:	b149      	cbz	r1, 8023ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8023ad4:	5cb2      	ldrb	r2, [r6, r2]
 8023ad6:	4628      	mov	r0, r5
 8023ad8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023adc:	4422      	add	r2, r4
 8023ade:	462f      	mov	r7, r5
 8023ae0:	e771      	b.n	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023ae2:	4628      	mov	r0, r5
 8023ae4:	462a      	mov	r2, r5
 8023ae6:	e76e      	b.n	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023ae8:	4628      	mov	r0, r5
 8023aea:	462a      	mov	r2, r5
 8023aec:	e7f7      	b.n	8023ade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023aee:	b015      	add	sp, #84	; 0x54
 8023af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023af8:	880f      	ldrh	r7, [r1, #0]
 8023afa:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023afe:	023c      	lsls	r4, r7, #8
 8023b00:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023b04:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8023b08:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8023b0c:	017c      	lsls	r4, r7, #5
 8023b0e:	00ff      	lsls	r7, r7, #3
 8023b10:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023b14:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8023b18:	b2ff      	uxtb	r7, r7
 8023b1a:	ea4b 0404 	orr.w	r4, fp, r4
 8023b1e:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8023b22:	4327      	orrs	r7, r4
 8023b24:	fb05 ca0e 	mla	sl, r5, lr, ip
 8023b28:	2d00      	cmp	r5, #0
 8023b2a:	9701      	str	r7, [sp, #4]
 8023b2c:	eb02 080a 	add.w	r8, r2, sl
 8023b30:	db7e      	blt.n	8023c30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023b32:	45a9      	cmp	r9, r5
 8023b34:	dd7c      	ble.n	8023c30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023b36:	f1bc 0f00 	cmp.w	ip, #0
 8023b3a:	db77      	blt.n	8023c2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023b3c:	45e6      	cmp	lr, ip
 8023b3e:	dd75      	ble.n	8023c2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023b40:	f812 700a 	ldrb.w	r7, [r2, sl]
 8023b44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023b48:	441f      	add	r7, r3
 8023b4a:	f11c 0201 	adds.w	r2, ip, #1
 8023b4e:	d472      	bmi.n	8023c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023b50:	4596      	cmp	lr, r2
 8023b52:	dd70      	ble.n	8023c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023b54:	2800      	cmp	r0, #0
 8023b56:	d06e      	beq.n	8023c36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023b58:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023b5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023b60:	441c      	add	r4, r3
 8023b62:	3501      	adds	r5, #1
 8023b64:	d46b      	bmi.n	8023c3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023b66:	45a9      	cmp	r9, r5
 8023b68:	dd69      	ble.n	8023c3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023b6a:	2e00      	cmp	r6, #0
 8023b6c:	d067      	beq.n	8023c3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023b6e:	f1bc 0f00 	cmp.w	ip, #0
 8023b72:	db62      	blt.n	8023c3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023b74:	45e6      	cmp	lr, ip
 8023b76:	dd60      	ble.n	8023c3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023b78:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023b80:	441d      	add	r5, r3
 8023b82:	f11c 0201 	adds.w	r2, ip, #1
 8023b86:	d45d      	bmi.n	8023c44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023b88:	4596      	cmp	lr, r2
 8023b8a:	dd5b      	ble.n	8023c44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023b8c:	2800      	cmp	r0, #0
 8023b8e:	d059      	beq.n	8023c44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023b90:	44c6      	add	lr, r8
 8023b92:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023b96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b9a:	4413      	add	r3, r2
 8023b9c:	b280      	uxth	r0, r0
 8023b9e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023ba2:	b2b2      	uxth	r2, r6
 8023ba4:	f897 9000 	ldrb.w	r9, [r7]
 8023ba8:	787f      	ldrb	r7, [r7, #1]
 8023baa:	fb00 f602 	mul.w	r6, r0, r2
 8023bae:	0100      	lsls	r0, r0, #4
 8023bb0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023bb4:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8023bb8:	1b80      	subs	r0, r0, r6
 8023bba:	fa1f fc82 	uxth.w	ip, r2
 8023bbe:	b282      	uxth	r2, r0
 8023bc0:	78a0      	ldrb	r0, [r4, #2]
 8023bc2:	eba8 080c 	sub.w	r8, r8, ip
 8023bc6:	4350      	muls	r0, r2
 8023bc8:	fa1f f888 	uxth.w	r8, r8
 8023bcc:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023bd0:	78a8      	ldrb	r0, [r5, #2]
 8023bd2:	fb0c e000 	mla	r0, ip, r0, lr
 8023bd6:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023bda:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023bde:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8023be2:	f894 e000 	ldrb.w	lr, [r4]
 8023be6:	fb02 fe0e 	mul.w	lr, r2, lr
 8023bea:	fb08 e909 	mla	r9, r8, r9, lr
 8023bee:	f895 e000 	ldrb.w	lr, [r5]
 8023bf2:	fb0c 990e 	mla	r9, ip, lr, r9
 8023bf6:	f893 e000 	ldrb.w	lr, [r3]
 8023bfa:	785b      	ldrb	r3, [r3, #1]
 8023bfc:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023c00:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023c04:	ea4e 0e00 	orr.w	lr, lr, r0
 8023c08:	7860      	ldrb	r0, [r4, #1]
 8023c0a:	4350      	muls	r0, r2
 8023c0c:	786a      	ldrb	r2, [r5, #1]
 8023c0e:	fb08 0007 	mla	r0, r8, r7, r0
 8023c12:	fb0c 0202 	mla	r2, ip, r2, r0
 8023c16:	fb06 2303 	mla	r3, r6, r3, r2
 8023c1a:	095b      	lsrs	r3, r3, #5
 8023c1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023c20:	ea4e 0303 	orr.w	r3, lr, r3
 8023c24:	800b      	strh	r3, [r1, #0]
 8023c26:	b003      	add	sp, #12
 8023c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c2c:	af01      	add	r7, sp, #4
 8023c2e:	e78c      	b.n	8023b4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023c30:	ac01      	add	r4, sp, #4
 8023c32:	4627      	mov	r7, r4
 8023c34:	e795      	b.n	8023b62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023c36:	ac01      	add	r4, sp, #4
 8023c38:	e793      	b.n	8023b62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023c3a:	ad01      	add	r5, sp, #4
 8023c3c:	e7a1      	b.n	8023b82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8023c3e:	ab01      	add	r3, sp, #4
 8023c40:	461d      	mov	r5, r3
 8023c42:	e7ab      	b.n	8023b9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8023c44:	ab01      	add	r3, sp, #4
 8023c46:	e7a9      	b.n	8023b9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023c48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c4c:	b08f      	sub	sp, #60	; 0x3c
 8023c4e:	920c      	str	r2, [sp, #48]	; 0x30
 8023c50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023c52:	900d      	str	r0, [sp, #52]	; 0x34
 8023c54:	910a      	str	r1, [sp, #40]	; 0x28
 8023c56:	6850      	ldr	r0, [r2, #4]
 8023c58:	9306      	str	r3, [sp, #24]
 8023c5a:	6812      	ldr	r2, [r2, #0]
 8023c5c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8023c60:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8023c64:	fb00 1303 	mla	r3, r0, r3, r1
 8023c68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023c6c:	9307      	str	r3, [sp, #28]
 8023c6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	9308      	str	r3, [sp, #32]
 8023c74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023c76:	685c      	ldr	r4, [r3, #4]
 8023c78:	3404      	adds	r4, #4
 8023c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	dc03      	bgt.n	8023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c82:	2b00      	cmp	r3, #0
 8023c84:	f340 81d5 	ble.w	8024032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023c88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023c8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c92:	1e48      	subs	r0, r1, #1
 8023c94:	1e56      	subs	r6, r2, #1
 8023c96:	9b06      	ldr	r3, [sp, #24]
 8023c98:	2b00      	cmp	r3, #0
 8023c9a:	f340 80b6 	ble.w	8023e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023c9e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023ca2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023ca6:	d406      	bmi.n	8023cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023ca8:	4287      	cmp	r7, r0
 8023caa:	da04      	bge.n	8023cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	db02      	blt.n	8023cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023cb0:	42b3      	cmp	r3, r6
 8023cb2:	f2c0 80ab 	blt.w	8023e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023cb6:	3701      	adds	r7, #1
 8023cb8:	f100 809c 	bmi.w	8023df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023cbc:	42b9      	cmp	r1, r7
 8023cbe:	f2c0 8099 	blt.w	8023df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023cc2:	3301      	adds	r3, #1
 8023cc4:	f100 8096 	bmi.w	8023df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023cc8:	429a      	cmp	r2, r3
 8023cca:	f2c0 8093 	blt.w	8023df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023cce:	9b06      	ldr	r3, [sp, #24]
 8023cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023cd2:	9b07      	ldr	r3, [sp, #28]
 8023cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8023cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	f340 80b4 	ble.w	8023e46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023cde:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023ce0:	142e      	asrs	r6, r5, #16
 8023ce2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023ce4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023ce8:	68c7      	ldr	r7, [r0, #12]
 8023cea:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023cee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023cf2:	6892      	ldr	r2, [r2, #8]
 8023cf4:	f100 80fb 	bmi.w	8023eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023cf8:	f102 3cff 	add.w	ip, r2, #4294967295
 8023cfc:	4560      	cmp	r0, ip
 8023cfe:	f280 80f6 	bge.w	8023eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023d02:	2e00      	cmp	r6, #0
 8023d04:	f2c0 80f3 	blt.w	8023eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023d08:	f107 3cff 	add.w	ip, r7, #4294967295
 8023d0c:	4566      	cmp	r6, ip
 8023d0e:	f280 80ee 	bge.w	8023eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023d12:	b212      	sxth	r2, r2
 8023d14:	fb06 0002 	mla	r0, r6, r2, r0
 8023d18:	9e08      	ldr	r6, [sp, #32]
 8023d1a:	1837      	adds	r7, r6, r0
 8023d1c:	5c30      	ldrb	r0, [r6, r0]
 8023d1e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023d22:	eb04 0c08 	add.w	ip, r4, r8
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	f000 80d3 	beq.w	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023d2c:	787e      	ldrb	r6, [r7, #1]
 8023d2e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023d32:	4426      	add	r6, r4
 8023d34:	2900      	cmp	r1, #0
 8023d36:	f000 80d4 	beq.w	8023ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023d3a:	18b8      	adds	r0, r7, r2
 8023d3c:	5cba      	ldrb	r2, [r7, r2]
 8023d3e:	7840      	ldrb	r0, [r0, #1]
 8023d40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d48:	4422      	add	r2, r4
 8023d4a:	4420      	add	r0, r4
 8023d4c:	b29b      	uxth	r3, r3
 8023d4e:	78b7      	ldrb	r7, [r6, #2]
 8023d50:	b289      	uxth	r1, r1
 8023d52:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023d56:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023d5a:	fb03 f901 	mul.w	r9, r3, r1
 8023d5e:	011b      	lsls	r3, r3, #4
 8023d60:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023d64:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023d68:	eba3 0309 	sub.w	r3, r3, r9
 8023d6c:	b289      	uxth	r1, r1
 8023d6e:	b29b      	uxth	r3, r3
 8023d70:	ebae 0e01 	sub.w	lr, lr, r1
 8023d74:	435f      	muls	r7, r3
 8023d76:	fa1f fe8e 	uxth.w	lr, lr
 8023d7a:	fb0e 770a 	mla	r7, lr, sl, r7
 8023d7e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023d82:	fb01 770a 	mla	r7, r1, sl, r7
 8023d86:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023d8a:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023d8e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023d92:	f896 8000 	ldrb.w	r8, [r6]
 8023d96:	7876      	ldrb	r6, [r6, #1]
 8023d98:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023d9c:	fb03 f808 	mul.w	r8, r3, r8
 8023da0:	4373      	muls	r3, r6
 8023da2:	fb0e 8807 	mla	r8, lr, r7, r8
 8023da6:	7817      	ldrb	r7, [r2, #0]
 8023da8:	fb0e 330c 	mla	r3, lr, ip, r3
 8023dac:	fb01 8807 	mla	r8, r1, r7, r8
 8023db0:	7807      	ldrb	r7, [r0, #0]
 8023db2:	fb09 8707 	mla	r7, r9, r7, r8
 8023db6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023dba:	ea47 070a 	orr.w	r7, r7, sl
 8023dbe:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023dc2:	fb01 310a 	mla	r1, r1, sl, r3
 8023dc6:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dcc:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023dd0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023dd4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023dd8:	ea47 070a 	orr.w	r7, r7, sl
 8023ddc:	801f      	strh	r7, [r3, #0]
 8023dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023de0:	3302      	adds	r3, #2
 8023de2:	9309      	str	r3, [sp, #36]	; 0x24
 8023de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023de6:	449b      	add	fp, r3
 8023de8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023dea:	441d      	add	r5, r3
 8023dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023dee:	3b01      	subs	r3, #1
 8023df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023df2:	e770      	b.n	8023cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023df6:	449b      	add	fp, r3
 8023df8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023dfa:	441d      	add	r5, r3
 8023dfc:	9b06      	ldr	r3, [sp, #24]
 8023dfe:	3b01      	subs	r3, #1
 8023e00:	9306      	str	r3, [sp, #24]
 8023e02:	9b07      	ldr	r3, [sp, #28]
 8023e04:	3302      	adds	r3, #2
 8023e06:	9307      	str	r3, [sp, #28]
 8023e08:	e745      	b.n	8023c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8023e0a:	d023      	beq.n	8023e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023e0c:	9b06      	ldr	r3, [sp, #24]
 8023e0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023e10:	3b01      	subs	r3, #1
 8023e12:	fb00 b003 	mla	r0, r0, r3, fp
 8023e16:	1400      	asrs	r0, r0, #16
 8023e18:	f53f af59 	bmi.w	8023cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023e1c:	3901      	subs	r1, #1
 8023e1e:	4288      	cmp	r0, r1
 8023e20:	f6bf af55 	bge.w	8023cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023e24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023e26:	fb01 5303 	mla	r3, r1, r3, r5
 8023e2a:	141b      	asrs	r3, r3, #16
 8023e2c:	f53f af4f 	bmi.w	8023cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023e30:	3a01      	subs	r2, #1
 8023e32:	4293      	cmp	r3, r2
 8023e34:	f6bf af4b 	bge.w	8023cce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023e38:	9b06      	ldr	r3, [sp, #24]
 8023e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8023e3c:	9b07      	ldr	r3, [sp, #28]
 8023e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	dc70      	bgt.n	8023f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023e46:	9b06      	ldr	r3, [sp, #24]
 8023e48:	9a07      	ldr	r2, [sp, #28]
 8023e4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023e4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023e52:	9307      	str	r3, [sp, #28]
 8023e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e56:	2b00      	cmp	r3, #0
 8023e58:	f340 80eb 	ble.w	8024032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023e62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e6a:	eef0 6a62 	vmov.f32	s13, s5
 8023e6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e7a:	ee16 ba90 	vmov	fp, s13
 8023e7e:	eef0 6a43 	vmov.f32	s13, s6
 8023e82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e86:	ee16 5a90 	vmov	r5, s13
 8023e8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023ea2:	ee12 2a90 	vmov	r2, s5
 8023ea6:	eef0 2a47 	vmov.f32	s5, s14
 8023eaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8023eae:	ee13 2a10 	vmov	r2, s6
 8023eb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8023eb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023eb6:	eeb0 3a67 	vmov.f32	s6, s15
 8023eba:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ebe:	931c      	str	r3, [sp, #112]	; 0x70
 8023ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023ec4:	3b01      	subs	r3, #1
 8023ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8023ec8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023eca:	bf08      	it	eq
 8023ecc:	4613      	moveq	r3, r2
 8023ece:	9306      	str	r3, [sp, #24]
 8023ed0:	e6d3      	b.n	8023c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8023ed2:	b149      	cbz	r1, 8023ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023ed4:	5cba      	ldrb	r2, [r7, r2]
 8023ed6:	4660      	mov	r0, ip
 8023ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023edc:	4422      	add	r2, r4
 8023ede:	4666      	mov	r6, ip
 8023ee0:	e734      	b.n	8023d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8023ee2:	4660      	mov	r0, ip
 8023ee4:	4662      	mov	r2, ip
 8023ee6:	e731      	b.n	8023d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8023ee8:	4660      	mov	r0, ip
 8023eea:	4662      	mov	r2, ip
 8023eec:	e7f7      	b.n	8023ede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023eee:	f110 0c01 	adds.w	ip, r0, #1
 8023ef2:	f53f af74 	bmi.w	8023dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023ef6:	4562      	cmp	r2, ip
 8023ef8:	f6ff af71 	blt.w	8023dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023efc:	f116 0c01 	adds.w	ip, r6, #1
 8023f00:	f53f af6d 	bmi.w	8023dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023f04:	4567      	cmp	r7, ip
 8023f06:	f6ff af6a 	blt.w	8023dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023f0a:	b23f      	sxth	r7, r7
 8023f0c:	b212      	sxth	r2, r2
 8023f0e:	9701      	str	r7, [sp, #4]
 8023f10:	9200      	str	r2, [sp, #0]
 8023f12:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023f16:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023f1a:	4623      	mov	r3, r4
 8023f1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023f1e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8023f22:	f7ff fde7 	bl	8023af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023f26:	e75a      	b.n	8023dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023f28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023f2a:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023f2e:	1428      	asrs	r0, r5, #16
 8023f30:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023f34:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023f38:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023f3c:	fb02 6000 	mla	r0, r2, r0, r6
 8023f40:	9e08      	ldr	r6, [sp, #32]
 8023f42:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023f46:	1837      	adds	r7, r6, r0
 8023f48:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023f4c:	eb04 0c08 	add.w	ip, r4, r8
 8023f50:	2b00      	cmp	r3, #0
 8023f52:	d060      	beq.n	8024016 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8023f54:	787e      	ldrb	r6, [r7, #1]
 8023f56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023f5a:	4426      	add	r6, r4
 8023f5c:	2900      	cmp	r1, #0
 8023f5e:	d062      	beq.n	8024026 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8023f60:	18b8      	adds	r0, r7, r2
 8023f62:	5cba      	ldrb	r2, [r7, r2]
 8023f64:	7840      	ldrb	r0, [r0, #1]
 8023f66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f6e:	4422      	add	r2, r4
 8023f70:	4420      	add	r0, r4
 8023f72:	b29b      	uxth	r3, r3
 8023f74:	78b7      	ldrb	r7, [r6, #2]
 8023f76:	b289      	uxth	r1, r1
 8023f78:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023f7c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023f80:	fb03 f901 	mul.w	r9, r3, r1
 8023f84:	011b      	lsls	r3, r3, #4
 8023f86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f8a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023f8e:	eba3 0309 	sub.w	r3, r3, r9
 8023f92:	b289      	uxth	r1, r1
 8023f94:	b29b      	uxth	r3, r3
 8023f96:	ebae 0e01 	sub.w	lr, lr, r1
 8023f9a:	435f      	muls	r7, r3
 8023f9c:	fa1f fe8e 	uxth.w	lr, lr
 8023fa0:	fb0e 770a 	mla	r7, lr, sl, r7
 8023fa4:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023fa8:	fb01 770a 	mla	r7, r1, sl, r7
 8023fac:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023fb0:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023fb4:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023fb8:	f896 8000 	ldrb.w	r8, [r6]
 8023fbc:	7876      	ldrb	r6, [r6, #1]
 8023fbe:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023fc2:	fb03 f808 	mul.w	r8, r3, r8
 8023fc6:	4373      	muls	r3, r6
 8023fc8:	7856      	ldrb	r6, [r2, #1]
 8023fca:	fb0e 8807 	mla	r8, lr, r7, r8
 8023fce:	7817      	ldrb	r7, [r2, #0]
 8023fd0:	fb0e 330c 	mla	r3, lr, ip, r3
 8023fd4:	fb01 8807 	mla	r8, r1, r7, r8
 8023fd8:	7807      	ldrb	r7, [r0, #0]
 8023fda:	fb01 3306 	mla	r3, r1, r6, r3
 8023fde:	fb09 8707 	mla	r7, r9, r7, r8
 8023fe2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023fe6:	ea47 070a 	orr.w	r7, r7, sl
 8023fea:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023fee:	fb09 3a0a 	mla	sl, r9, sl, r3
 8023ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ff4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023ff8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023ffc:	ea47 070a 	orr.w	r7, r7, sl
 8024000:	f823 7b02 	strh.w	r7, [r3], #2
 8024004:	930b      	str	r3, [sp, #44]	; 0x2c
 8024006:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024008:	449b      	add	fp, r3
 802400a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802400c:	441d      	add	r5, r3
 802400e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024010:	3b01      	subs	r3, #1
 8024012:	9309      	str	r3, [sp, #36]	; 0x24
 8024014:	e714      	b.n	8023e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8024016:	b149      	cbz	r1, 802402c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024018:	5cba      	ldrb	r2, [r7, r2]
 802401a:	4660      	mov	r0, ip
 802401c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024020:	4422      	add	r2, r4
 8024022:	4666      	mov	r6, ip
 8024024:	e7a5      	b.n	8023f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024026:	4660      	mov	r0, ip
 8024028:	4662      	mov	r2, ip
 802402a:	e7a2      	b.n	8023f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802402c:	4660      	mov	r0, ip
 802402e:	4662      	mov	r2, ip
 8024030:	e7f7      	b.n	8024022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 8024032:	b00f      	add	sp, #60	; 0x3c
 8024034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024038 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802403c:	b085      	sub	sp, #20
 802403e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8024042:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024046:	9102      	str	r1, [sp, #8]
 8024048:	2c00      	cmp	r4, #0
 802404a:	fb04 710c 	mla	r1, r4, ip, r7
 802404e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024052:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024056:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802405a:	eb02 0e01 	add.w	lr, r2, r1
 802405e:	f2c0 8122 	blt.w	80242a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8024062:	45a0      	cmp	r8, r4
 8024064:	f340 811f 	ble.w	80242a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8024068:	2f00      	cmp	r7, #0
 802406a:	f2c0 811a 	blt.w	80242a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802406e:	45bc      	cmp	ip, r7
 8024070:	f340 8117 	ble.w	80242a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8024074:	5c52      	ldrb	r2, [r2, r1]
 8024076:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802407a:	1c7a      	adds	r2, r7, #1
 802407c:	f100 8116 	bmi.w	80242ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8024080:	4594      	cmp	ip, r2
 8024082:	f340 8113 	ble.w	80242ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8024086:	2e00      	cmp	r6, #0
 8024088:	f000 8112 	beq.w	80242b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 802408c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024094:	3401      	adds	r4, #1
 8024096:	f100 810f 	bmi.w	80242b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802409a:	45a0      	cmp	r8, r4
 802409c:	f340 810c 	ble.w	80242b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80240a0:	2800      	cmp	r0, #0
 80240a2:	f000 810c 	beq.w	80242be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80240a6:	2f00      	cmp	r7, #0
 80240a8:	f2c0 8104 	blt.w	80242b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80240ac:	45bc      	cmp	ip, r7
 80240ae:	f340 8101 	ble.w	80242b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80240b2:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80240b6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80240ba:	3701      	adds	r7, #1
 80240bc:	f100 8102 	bmi.w	80242c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80240c0:	45bc      	cmp	ip, r7
 80240c2:	f340 80ff 	ble.w	80242c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80240c6:	2e00      	cmp	r6, #0
 80240c8:	f000 80fe 	beq.w	80242c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80240cc:	44f4      	add	ip, lr
 80240ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80240d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80240d6:	b2b6      	uxth	r6, r6
 80240d8:	b280      	uxth	r0, r0
 80240da:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80240de:	fb00 fe06 	mul.w	lr, r0, r6
 80240e2:	0136      	lsls	r6, r6, #4
 80240e4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80240e8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80240ec:	eba6 070e 	sub.w	r7, r6, lr
 80240f0:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80240f4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80240f8:	b280      	uxth	r0, r0
 80240fa:	b2bf      	uxth	r7, r7
 80240fc:	1a1b      	subs	r3, r3, r0
 80240fe:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024102:	fb0a f607 	mul.w	r6, sl, r7
 8024106:	b29b      	uxth	r3, r3
 8024108:	fb0b 6603 	mla	r6, fp, r3, r6
 802410c:	fb00 6609 	mla	r6, r0, r9, r6
 8024110:	fb0e 6608 	mla	r6, lr, r8, r6
 8024114:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024118:	9600      	str	r6, [sp, #0]
 802411a:	2e00      	cmp	r6, #0
 802411c:	f000 80be 	beq.w	802429c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8024120:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024124:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024128:	9e02      	ldr	r6, [sp, #8]
 802412a:	fb0b fc0c 	mul.w	ip, fp, ip
 802412e:	fb0b f505 	mul.w	r5, fp, r5
 8024132:	8836      	ldrh	r6, [r6, #0]
 8024134:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024138:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802413c:	9501      	str	r5, [sp, #4]
 802413e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024142:	44dc      	add	ip, fp
 8024144:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024148:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802414c:	9503      	str	r5, [sp, #12]
 802414e:	9d01      	ldr	r5, [sp, #4]
 8024150:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024154:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024158:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802415c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024160:	fb0a fc0c 	mul.w	ip, sl, ip
 8024164:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024168:	fb0a fa01 	mul.w	sl, sl, r1
 802416c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024170:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024174:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8024178:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802417c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024180:	4465      	add	r5, ip
 8024182:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024186:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802418a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802418e:	fb09 fc0c 	mul.w	ip, r9, ip
 8024192:	0a2d      	lsrs	r5, r5, #8
 8024194:	fb09 f904 	mul.w	r9, r9, r4
 8024198:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802419c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80241a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80241a4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80241a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80241ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80241b0:	437d      	muls	r5, r7
 80241b2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80241b6:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80241ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80241be:	4461      	add	r1, ip
 80241c0:	fb08 f404 	mul.w	r4, r8, r4
 80241c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80241c8:	fb08 f802 	mul.w	r8, r8, r2
 80241cc:	0a09      	lsrs	r1, r1, #8
 80241ce:	0a22      	lsrs	r2, r4, #8
 80241d0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80241d4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80241d8:	fb07 f70a 	mul.w	r7, r7, sl
 80241dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80241e0:	4414      	add	r4, r2
 80241e2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80241e6:	0a24      	lsrs	r4, r4, #8
 80241e8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80241ec:	9a03      	ldr	r2, [sp, #12]
 80241ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80241f2:	fb02 5503 	mla	r5, r2, r3, r5
 80241f6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80241fa:	9a00      	ldr	r2, [sp, #0]
 80241fc:	fb04 540e 	mla	r4, r4, lr, r5
 8024200:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024204:	1235      	asrs	r5, r6, #8
 8024206:	fb01 4100 	mla	r1, r1, r0, r4
 802420a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802420e:	0a09      	lsrs	r1, r1, #8
 8024210:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024214:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024218:	fb03 7101 	mla	r1, r3, r1, r7
 802421c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024220:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024224:	fb00 e101 	mla	r1, r0, r1, lr
 8024228:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802422c:	b287      	uxth	r7, r0
 802422e:	0a09      	lsrs	r1, r1, #8
 8024230:	437a      	muls	r2, r7
 8024232:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024236:	1c53      	adds	r3, r2, #1
 8024238:	4321      	orrs	r1, r4
 802423a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802423e:	0c0a      	lsrs	r2, r1, #16
 8024240:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8024244:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024248:	b2c8      	uxtb	r0, r1
 802424a:	fb12 f207 	smulbb	r2, r2, r7
 802424e:	fb14 f407 	smulbb	r4, r4, r7
 8024252:	b2db      	uxtb	r3, r3
 8024254:	fb10 f007 	smulbb	r0, r0, r7
 8024258:	fb05 2503 	mla	r5, r5, r3, r2
 802425c:	10f2      	asrs	r2, r6, #3
 802425e:	00f6      	lsls	r6, r6, #3
 8024260:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024264:	b2ad      	uxth	r5, r5
 8024266:	b2f6      	uxtb	r6, r6
 8024268:	fb02 4203 	mla	r2, r2, r3, r4
 802426c:	fb06 0303 	mla	r3, r6, r3, r0
 8024270:	b294      	uxth	r4, r2
 8024272:	b299      	uxth	r1, r3
 8024274:	1c6b      	adds	r3, r5, #1
 8024276:	1c62      	adds	r2, r4, #1
 8024278:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802427c:	1c4b      	adds	r3, r1, #1
 802427e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024282:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024286:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802428a:	0952      	lsrs	r2, r2, #5
 802428c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024290:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024294:	432b      	orrs	r3, r5
 8024296:	4313      	orrs	r3, r2
 8024298:	9a02      	ldr	r2, [sp, #8]
 802429a:	8013      	strh	r3, [r2, #0]
 802429c:	b005      	add	sp, #20
 802429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242a2:	2500      	movs	r5, #0
 80242a4:	e6e9      	b.n	802407a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80242a6:	2100      	movs	r1, #0
 80242a8:	460d      	mov	r5, r1
 80242aa:	e6f3      	b.n	8024094 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80242ac:	2100      	movs	r1, #0
 80242ae:	e6f1      	b.n	8024094 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80242b0:	4631      	mov	r1, r6
 80242b2:	e6ef      	b.n	8024094 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80242b4:	2400      	movs	r4, #0
 80242b6:	e700      	b.n	80240ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80242b8:	2200      	movs	r2, #0
 80242ba:	4614      	mov	r4, r2
 80242bc:	e70b      	b.n	80240d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80242be:	4602      	mov	r2, r0
 80242c0:	4604      	mov	r4, r0
 80242c2:	e708      	b.n	80240d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80242c4:	2200      	movs	r2, #0
 80242c6:	e706      	b.n	80240d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80242c8:	4632      	mov	r2, r6
 80242ca:	e704      	b.n	80240d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080242cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80242cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242d0:	b09f      	sub	sp, #124	; 0x7c
 80242d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80242d4:	9309      	str	r3, [sp, #36]	; 0x24
 80242d6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80242d8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80242dc:	901d      	str	r0, [sp, #116]	; 0x74
 80242de:	931c      	str	r3, [sp, #112]	; 0x70
 80242e0:	6850      	ldr	r0, [r2, #4]
 80242e2:	9119      	str	r1, [sp, #100]	; 0x64
 80242e4:	6812      	ldr	r2, [r2, #0]
 80242e6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80242e8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80242ec:	fb00 1303 	mla	r3, r0, r3, r1
 80242f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80242f4:	930c      	str	r3, [sp, #48]	; 0x30
 80242f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	9312      	str	r3, [sp, #72]	; 0x48
 80242fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80242fe:	685e      	ldr	r6, [r3, #4]
 8024300:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024304:	3604      	adds	r6, #4
 8024306:	930d      	str	r3, [sp, #52]	; 0x34
 8024308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802430a:	2b00      	cmp	r3, #0
 802430c:	dc03      	bgt.n	8024316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802430e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024310:	2b00      	cmp	r3, #0
 8024312:	f340 8387 	ble.w	8024a24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8024316:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024318:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802431c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024320:	1e48      	subs	r0, r1, #1
 8024322:	1e57      	subs	r7, r2, #1
 8024324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024326:	2b00      	cmp	r3, #0
 8024328:	f340 8194 	ble.w	8024654 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802432c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802432e:	142b      	asrs	r3, r5, #16
 8024330:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024334:	d406      	bmi.n	8024344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024336:	4584      	cmp	ip, r0
 8024338:	da04      	bge.n	8024344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802433a:	2b00      	cmp	r3, #0
 802433c:	db02      	blt.n	8024344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802433e:	42bb      	cmp	r3, r7
 8024340:	f2c0 8189 	blt.w	8024656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024344:	f11c 0c01 	adds.w	ip, ip, #1
 8024348:	f100 8177 	bmi.w	802463a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802434c:	4561      	cmp	r1, ip
 802434e:	f2c0 8174 	blt.w	802463a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024352:	3301      	adds	r3, #1
 8024354:	f100 8171 	bmi.w	802463a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024358:	429a      	cmp	r2, r3
 802435a:	f2c0 816e 	blt.w	802463a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024360:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024362:	931a      	str	r3, [sp, #104]	; 0x68
 8024364:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024366:	2b00      	cmp	r3, #0
 8024368:	f340 8193 	ble.w	8024692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802436c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802436e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024372:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024376:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802437a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802437c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024380:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024382:	141b      	asrs	r3, r3, #16
 8024384:	f100 81d6 	bmi.w	8024734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024388:	f100 38ff 	add.w	r8, r0, #4294967295
 802438c:	4543      	cmp	r3, r8
 802438e:	f280 81d1 	bge.w	8024734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024392:	f1bc 0f00 	cmp.w	ip, #0
 8024396:	f2c0 81cd 	blt.w	8024734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802439a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802439e:	45c4      	cmp	ip, r8
 80243a0:	f280 81c8 	bge.w	8024734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80243a4:	b200      	sxth	r0, r0
 80243a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80243a8:	fb0c 3300 	mla	r3, ip, r0, r3
 80243ac:	eb04 0803 	add.w	r8, r4, r3
 80243b0:	5ce3      	ldrb	r3, [r4, r3]
 80243b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80243b6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80243ba:	2a00      	cmp	r2, #0
 80243bc:	f000 81af 	beq.w	802471e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80243c0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80243c4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80243c8:	940e      	str	r4, [sp, #56]	; 0x38
 80243ca:	0e24      	lsrs	r4, r4, #24
 80243cc:	9415      	str	r4, [sp, #84]	; 0x54
 80243ce:	b179      	cbz	r1, 80243f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80243d0:	eb08 0c00 	add.w	ip, r8, r0
 80243d4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80243d8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80243dc:	900a      	str	r0, [sp, #40]	; 0x28
 80243de:	0e00      	lsrs	r0, r0, #24
 80243e0:	9013      	str	r0, [sp, #76]	; 0x4c
 80243e2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80243e6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80243ea:	900f      	str	r0, [sp, #60]	; 0x3c
 80243ec:	0e00      	lsrs	r0, r0, #24
 80243ee:	9016      	str	r0, [sp, #88]	; 0x58
 80243f0:	b292      	uxth	r2, r2
 80243f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80243f4:	b289      	uxth	r1, r1
 80243f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80243f8:	fb02 f901 	mul.w	r9, r2, r1
 80243fc:	0112      	lsls	r2, r2, #4
 80243fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024402:	eba2 0809 	sub.w	r8, r2, r9
 8024406:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802440a:	b289      	uxth	r1, r1
 802440c:	fa1f f888 	uxth.w	r8, r8
 8024410:	1a52      	subs	r2, r2, r1
 8024412:	fb08 f000 	mul.w	r0, r8, r0
 8024416:	b292      	uxth	r2, r2
 8024418:	fb02 000e 	mla	r0, r2, lr, r0
 802441c:	fb01 0004 	mla	r0, r1, r4, r0
 8024420:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024422:	fb09 0004 	mla	r0, r9, r4, r0
 8024426:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802442a:	2800      	cmp	r0, #0
 802442c:	f000 80fa 	beq.w	8024624 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024430:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024434:	d01b      	beq.n	802446e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024436:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802443a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802443e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024442:	fb0e fe03 	mul.w	lr, lr, r3
 8024446:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802444a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802444e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024452:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024456:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802445a:	4453      	add	r3, sl
 802445c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024460:	0a1b      	lsrs	r3, r3, #8
 8024462:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024466:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802446a:	ea43 030c 	orr.w	r3, r3, ip
 802446e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024470:	2cff      	cmp	r4, #255	; 0xff
 8024472:	d021      	beq.n	80244b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8024474:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024476:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802447a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802447c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024480:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024482:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024486:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024488:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802448c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024490:	fb04 fa0a 	mul.w	sl, r4, sl
 8024494:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024498:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802449c:	44de      	add	lr, fp
 802449e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80244a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80244a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80244aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80244b2:	ea4e 040a 	orr.w	r4, lr, sl
 80244b6:	940e      	str	r4, [sp, #56]	; 0x38
 80244b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244ba:	2cff      	cmp	r4, #255	; 0xff
 80244bc:	d021      	beq.n	8024502 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80244be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80244c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80244c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80244ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80244cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80244d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80244d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80244da:	fb04 fa0a 	mul.w	sl, r4, sl
 80244de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80244e6:	44de      	add	lr, fp
 80244e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80244ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80244f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80244f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80244fc:	ea4e 040a 	orr.w	r4, lr, sl
 8024500:	940a      	str	r4, [sp, #40]	; 0x28
 8024502:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024504:	2cff      	cmp	r4, #255	; 0xff
 8024506:	d021      	beq.n	802454c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8024508:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802450a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802450e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024510:	fb04 fb0b 	mul.w	fp, r4, fp
 8024514:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024516:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802451a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802451c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024520:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024524:	fb04 fa0a 	mul.w	sl, r4, sl
 8024528:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802452c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024530:	44de      	add	lr, fp
 8024532:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024536:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802453a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802453e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024542:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024546:	ea4e 040a 	orr.w	r4, lr, sl
 802454a:	940f      	str	r4, [sp, #60]	; 0x3c
 802454c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802454e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024556:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802455a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802455c:	fb08 fc0c 	mul.w	ip, r8, ip
 8024560:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024564:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024568:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802456a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802456e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024572:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024574:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024578:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802457c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802457e:	fb08 f80e 	mul.w	r8, r8, lr
 8024582:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024586:	fb02 8303 	mla	r3, r2, r3, r8
 802458a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802458c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024590:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024596:	fb01 330a 	mla	r3, r1, sl, r3
 802459a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802459e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80245a0:	fb09 3901 	mla	r9, r9, r1, r3
 80245a4:	883b      	ldrh	r3, [r7, #0]
 80245a6:	4342      	muls	r2, r0
 80245a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80245ac:	1c50      	adds	r0, r2, #1
 80245ae:	1219      	asrs	r1, r3, #8
 80245b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80245b4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80245b8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80245bc:	ea4c 0c09 	orr.w	ip, ip, r9
 80245c0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80245c4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80245c8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80245cc:	b2c0      	uxtb	r0, r0
 80245ce:	fb12 f204 	smulbb	r2, r2, r4
 80245d2:	fa5f fc8c 	uxtb.w	ip, ip
 80245d6:	fb1e fe04 	smulbb	lr, lr, r4
 80245da:	fb01 2100 	mla	r1, r1, r0, r2
 80245de:	10da      	asrs	r2, r3, #3
 80245e0:	fb1c fc04 	smulbb	ip, ip, r4
 80245e4:	00db      	lsls	r3, r3, #3
 80245e6:	b289      	uxth	r1, r1
 80245e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80245ec:	b2db      	uxtb	r3, r3
 80245ee:	fb02 e200 	mla	r2, r2, r0, lr
 80245f2:	fb03 c300 	mla	r3, r3, r0, ip
 80245f6:	b292      	uxth	r2, r2
 80245f8:	fa1f fc83 	uxth.w	ip, r3
 80245fc:	1c4b      	adds	r3, r1, #1
 80245fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024602:	f10c 0301 	add.w	r3, ip, #1
 8024606:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802460a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802460e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024612:	430b      	orrs	r3, r1
 8024614:	1c51      	adds	r1, r2, #1
 8024616:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802461a:	0952      	lsrs	r2, r2, #5
 802461c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024620:	4313      	orrs	r3, r2
 8024622:	803b      	strh	r3, [r7, #0]
 8024624:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024626:	3702      	adds	r7, #2
 8024628:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802462a:	441a      	add	r2, r3
 802462c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802462e:	441d      	add	r5, r3
 8024630:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024632:	9229      	str	r2, [sp, #164]	; 0xa4
 8024634:	3b01      	subs	r3, #1
 8024636:	931a      	str	r3, [sp, #104]	; 0x68
 8024638:	e694      	b.n	8024364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802463a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802463c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802463e:	441c      	add	r4, r3
 8024640:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024642:	441d      	add	r5, r3
 8024644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024646:	9429      	str	r4, [sp, #164]	; 0xa4
 8024648:	3b01      	subs	r3, #1
 802464a:	9309      	str	r3, [sp, #36]	; 0x24
 802464c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802464e:	3302      	adds	r3, #2
 8024650:	930c      	str	r3, [sp, #48]	; 0x30
 8024652:	e667      	b.n	8024324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024654:	d024      	beq.n	80246a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8024656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024658:	982b      	ldr	r0, [sp, #172]	; 0xac
 802465a:	3b01      	subs	r3, #1
 802465c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802465e:	fb00 4003 	mla	r0, r0, r3, r4
 8024662:	1400      	asrs	r0, r0, #16
 8024664:	f53f ae7b 	bmi.w	802435e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024668:	3901      	subs	r1, #1
 802466a:	4288      	cmp	r0, r1
 802466c:	f6bf ae77 	bge.w	802435e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024670:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024672:	fb01 5303 	mla	r3, r1, r3, r5
 8024676:	141b      	asrs	r3, r3, #16
 8024678:	f53f ae71 	bmi.w	802435e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802467c:	3a01      	subs	r2, #1
 802467e:	4293      	cmp	r3, r2
 8024680:	f6bf ae6d 	bge.w	802435e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024684:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024688:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802468c:	f1bb 0f00 	cmp.w	fp, #0
 8024690:	dc70      	bgt.n	8024774 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024694:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802469a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802469e:	930c      	str	r3, [sp, #48]	; 0x30
 80246a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	f340 81be 	ble.w	8024a24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80246a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80246ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80246b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80246b6:	eef0 6a62 	vmov.f32	s13, s5
 80246ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80246be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80246c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246c6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80246ca:	eef0 6a43 	vmov.f32	s13, s6
 80246ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246d2:	ee16 5a90 	vmov	r5, s13
 80246d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80246da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80246de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80246e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80246e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80246ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80246ee:	ee12 2a90 	vmov	r2, s5
 80246f2:	eef0 2a47 	vmov.f32	s5, s14
 80246f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80246fa:	ee13 2a10 	vmov	r2, s6
 80246fe:	932b      	str	r3, [sp, #172]	; 0xac
 8024700:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024702:	eeb0 3a67 	vmov.f32	s6, s15
 8024706:	fb92 f3f3 	sdiv	r3, r2, r3
 802470a:	932c      	str	r3, [sp, #176]	; 0xb0
 802470c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802470e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024710:	3b01      	subs	r3, #1
 8024712:	9319      	str	r3, [sp, #100]	; 0x64
 8024714:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024716:	bf08      	it	eq
 8024718:	4613      	moveq	r3, r2
 802471a:	9309      	str	r3, [sp, #36]	; 0x24
 802471c:	e5f4      	b.n	8024308 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802471e:	2900      	cmp	r1, #0
 8024720:	f43f ae66 	beq.w	80243f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024724:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024728:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802472c:	900a      	str	r0, [sp, #40]	; 0x28
 802472e:	0e00      	lsrs	r0, r0, #24
 8024730:	9013      	str	r0, [sp, #76]	; 0x4c
 8024732:	e65d      	b.n	80243f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024734:	f113 0801 	adds.w	r8, r3, #1
 8024738:	f53f af74 	bmi.w	8024624 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802473c:	4540      	cmp	r0, r8
 802473e:	f6ff af71 	blt.w	8024624 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024742:	f11c 0801 	adds.w	r8, ip, #1
 8024746:	f53f af6d 	bmi.w	8024624 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802474a:	45c6      	cmp	lr, r8
 802474c:	f6ff af6a 	blt.w	8024624 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024750:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024752:	b200      	sxth	r0, r0
 8024754:	9302      	str	r3, [sp, #8]
 8024756:	fa0f f38e 	sxth.w	r3, lr
 802475a:	9000      	str	r0, [sp, #0]
 802475c:	9301      	str	r3, [sp, #4]
 802475e:	4633      	mov	r3, r6
 8024760:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024762:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024766:	e9cd c203 	strd	ip, r2, [sp, #12]
 802476a:	4639      	mov	r1, r7
 802476c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802476e:	f7ff fc63 	bl	8024038 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024772:	e757      	b.n	8024624 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024774:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024776:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802477a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802477c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024780:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024782:	1427      	asrs	r7, r4, #16
 8024784:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024786:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802478a:	142b      	asrs	r3, r5, #16
 802478c:	fb01 7303 	mla	r3, r1, r3, r7
 8024790:	18e7      	adds	r7, r4, r3
 8024792:	5ce3      	ldrb	r3, [r4, r3]
 8024794:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024798:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802479c:	2a00      	cmp	r2, #0
 802479e:	f000 8137 	beq.w	8024a10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80247a2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80247a6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80247aa:	9410      	str	r4, [sp, #64]	; 0x40
 80247ac:	0e24      	lsrs	r4, r4, #24
 80247ae:	9417      	str	r4, [sp, #92]	; 0x5c
 80247b0:	b170      	cbz	r0, 80247d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80247b2:	eb07 0e01 	add.w	lr, r7, r1
 80247b6:	5c79      	ldrb	r1, [r7, r1]
 80247b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80247bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80247be:	0e09      	lsrs	r1, r1, #24
 80247c0:	9114      	str	r1, [sp, #80]	; 0x50
 80247c2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80247c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80247ca:	9111      	str	r1, [sp, #68]	; 0x44
 80247cc:	0e09      	lsrs	r1, r1, #24
 80247ce:	9118      	str	r1, [sp, #96]	; 0x60
 80247d0:	b292      	uxth	r2, r2
 80247d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80247d4:	b280      	uxth	r0, r0
 80247d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80247d8:	fb02 f800 	mul.w	r8, r2, r0
 80247dc:	0112      	lsls	r2, r2, #4
 80247de:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80247e2:	eba2 0e08 	sub.w	lr, r2, r8
 80247e6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80247ea:	b280      	uxth	r0, r0
 80247ec:	fa1f fe8e 	uxth.w	lr, lr
 80247f0:	1a12      	subs	r2, r2, r0
 80247f2:	fb0e f101 	mul.w	r1, lr, r1
 80247f6:	b292      	uxth	r2, r2
 80247f8:	fb02 110c 	mla	r1, r2, ip, r1
 80247fc:	fb00 1104 	mla	r1, r0, r4, r1
 8024800:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024802:	fb08 1104 	mla	r1, r8, r4, r1
 8024806:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802480a:	2900      	cmp	r1, #0
 802480c:	f000 80f5 	beq.w	80249fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024810:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024814:	d019      	beq.n	802484a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024816:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802481a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802481e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024822:	fb0c fc03 	mul.w	ip, ip, r3
 8024826:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802482a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802482e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024832:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024836:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802483a:	4453      	add	r3, sl
 802483c:	0a3f      	lsrs	r7, r7, #8
 802483e:	0a1b      	lsrs	r3, r3, #8
 8024840:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024844:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024848:	433b      	orrs	r3, r7
 802484a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802484c:	2cff      	cmp	r4, #255	; 0xff
 802484e:	d020      	beq.n	8024892 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024850:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024852:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024856:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024858:	4367      	muls	r7, r4
 802485a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802485c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024860:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024864:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024866:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802486a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802486e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024872:	44bc      	add	ip, r7
 8024874:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024878:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802487c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024880:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024884:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024888:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802488c:	ea4c 040a 	orr.w	r4, ip, sl
 8024890:	9410      	str	r4, [sp, #64]	; 0x40
 8024892:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024894:	2cff      	cmp	r4, #255	; 0xff
 8024896:	d020      	beq.n	80248da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024898:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802489a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802489e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248a0:	4367      	muls	r7, r4
 80248a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80248a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80248a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80248ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80248b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80248ba:	44bc      	add	ip, r7
 80248bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80248c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80248c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248d4:	ea4c 040a 	orr.w	r4, ip, sl
 80248d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80248da:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80248dc:	2cff      	cmp	r4, #255	; 0xff
 80248de:	d020      	beq.n	8024922 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80248e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80248e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80248e6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80248e8:	4367      	muls	r7, r4
 80248ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80248ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80248f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80248f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80248f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80248fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8024902:	44bc      	add	ip, r7
 8024904:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024908:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802490c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024910:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024914:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024918:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802491c:	ea4c 040a 	orr.w	r4, ip, sl
 8024920:	9411      	str	r4, [sp, #68]	; 0x44
 8024922:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024924:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024928:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802492c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024930:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024932:	fb0e f707 	mul.w	r7, lr, r7
 8024936:	fb02 770c 	mla	r7, r2, ip, r7
 802493a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802493e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024940:	fb00 770c 	mla	r7, r0, ip, r7
 8024944:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024948:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802494a:	fb08 770c 	mla	r7, r8, ip, r7
 802494e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024952:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024954:	fb0e fe0c 	mul.w	lr, lr, ip
 8024958:	0a3f      	lsrs	r7, r7, #8
 802495a:	fb02 e303 	mla	r3, r2, r3, lr
 802495e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024960:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024964:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024968:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802496a:	fb00 330a 	mla	r3, r0, sl, r3
 802496e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024972:	f8b9 0000 	ldrh.w	r0, [r9]
 8024976:	fb08 3c0c 	mla	ip, r8, ip, r3
 802497a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802497c:	1202      	asrs	r2, r0, #8
 802497e:	434b      	muls	r3, r1
 8024980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024984:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024988:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802498c:	1c59      	adds	r1, r3, #1
 802498e:	ea47 070c 	orr.w	r7, r7, ip
 8024992:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024996:	0c3b      	lsrs	r3, r7, #16
 8024998:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802499c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80249a0:	b2ff      	uxtb	r7, r7
 80249a2:	fb13 f304 	smulbb	r3, r3, r4
 80249a6:	b2c9      	uxtb	r1, r1
 80249a8:	fb1c fc04 	smulbb	ip, ip, r4
 80249ac:	fb02 3201 	mla	r2, r2, r1, r3
 80249b0:	10c3      	asrs	r3, r0, #3
 80249b2:	fb17 f704 	smulbb	r7, r7, r4
 80249b6:	00c0      	lsls	r0, r0, #3
 80249b8:	b292      	uxth	r2, r2
 80249ba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80249be:	b2c0      	uxtb	r0, r0
 80249c0:	fb03 c301 	mla	r3, r3, r1, ip
 80249c4:	f102 0c01 	add.w	ip, r2, #1
 80249c8:	fb00 7001 	mla	r0, r0, r1, r7
 80249cc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80249d0:	b280      	uxth	r0, r0
 80249d2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80249d6:	b29b      	uxth	r3, r3
 80249d8:	1c42      	adds	r2, r0, #1
 80249da:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80249de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80249e2:	ea42 020c 	orr.w	r2, r2, ip
 80249e6:	f103 0c01 	add.w	ip, r3, #1
 80249ea:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80249ee:	095b      	lsrs	r3, r3, #5
 80249f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80249f4:	431a      	orrs	r2, r3
 80249f6:	f8a9 2000 	strh.w	r2, [r9]
 80249fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80249fc:	f109 0902 	add.w	r9, r9, #2
 8024a00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024a02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a06:	441a      	add	r2, r3
 8024a08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a0a:	9229      	str	r2, [sp, #164]	; 0xa4
 8024a0c:	441d      	add	r5, r3
 8024a0e:	e63d      	b.n	802468c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024a10:	2800      	cmp	r0, #0
 8024a12:	f43f aedd 	beq.w	80247d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024a16:	5c79      	ldrb	r1, [r7, r1]
 8024a18:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024a1e:	0e09      	lsrs	r1, r1, #24
 8024a20:	9114      	str	r1, [sp, #80]	; 0x50
 8024a22:	e6d5      	b.n	80247d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024a24:	b01f      	add	sp, #124	; 0x7c
 8024a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a2a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a2e:	b089      	sub	sp, #36	; 0x24
 8024a30:	9101      	str	r1, [sp, #4]
 8024a32:	9801      	ldr	r0, [sp, #4]
 8024a34:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8024a38:	8800      	ldrh	r0, [r0, #0]
 8024a3a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8024a3e:	1206      	asrs	r6, r0, #8
 8024a40:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8024a44:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024a48:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024a4c:	9602      	str	r6, [sp, #8]
 8024a4e:	10c6      	asrs	r6, r0, #3
 8024a50:	00c0      	lsls	r0, r0, #3
 8024a52:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024a56:	b2c0      	uxtb	r0, r0
 8024a58:	9603      	str	r6, [sp, #12]
 8024a5a:	9004      	str	r0, [sp, #16]
 8024a5c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8024a60:	fb07 100c 	mla	r0, r7, ip, r1
 8024a64:	2f00      	cmp	r7, #0
 8024a66:	eb02 0e00 	add.w	lr, r2, r0
 8024a6a:	f2c0 810a 	blt.w	8024c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024a6e:	45b8      	cmp	r8, r7
 8024a70:	f340 8107 	ble.w	8024c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024a74:	2900      	cmp	r1, #0
 8024a76:	f2c0 8102 	blt.w	8024c7e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024a7a:	458c      	cmp	ip, r1
 8024a7c:	f340 80ff 	ble.w	8024c7e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024a80:	5c12      	ldrb	r2, [r2, r0]
 8024a82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024a86:	1c4a      	adds	r2, r1, #1
 8024a88:	f100 80fe 	bmi.w	8024c88 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024a8c:	4594      	cmp	ip, r2
 8024a8e:	f340 80fb 	ble.w	8024c88 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024a92:	2d00      	cmp	r5, #0
 8024a94:	f000 80fa 	beq.w	8024c8c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024a98:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024a9c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024aa0:	3701      	adds	r7, #1
 8024aa2:	f100 80f7 	bmi.w	8024c94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024aa6:	45b8      	cmp	r8, r7
 8024aa8:	f340 80f4 	ble.w	8024c94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024aac:	2c00      	cmp	r4, #0
 8024aae:	f000 80f4 	beq.w	8024c9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024ab2:	2900      	cmp	r1, #0
 8024ab4:	eb0e 020c 	add.w	r2, lr, ip
 8024ab8:	f2c0 80ea 	blt.w	8024c90 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024abc:	458c      	cmp	ip, r1
 8024abe:	f340 80e7 	ble.w	8024c90 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024ac2:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024ac6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024aca:	3101      	adds	r1, #1
 8024acc:	f100 80e8 	bmi.w	8024ca0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024ad0:	458c      	cmp	ip, r1
 8024ad2:	f340 80e5 	ble.w	8024ca0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024ad6:	2d00      	cmp	r5, #0
 8024ad8:	f000 80e4 	beq.w	8024ca4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024adc:	7852      	ldrb	r2, [r2, #1]
 8024ade:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024ae2:	0e0b      	lsrs	r3, r1, #24
 8024ae4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024ae8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024aec:	9300      	str	r3, [sp, #0]
 8024aee:	b2a4      	uxth	r4, r4
 8024af0:	b2ab      	uxth	r3, r5
 8024af2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024af6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024afa:	fb03 f904 	mul.w	r9, r3, r4
 8024afe:	011b      	lsls	r3, r3, #4
 8024b00:	fb0a f505 	mul.w	r5, sl, r5
 8024b04:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8024b08:	eba3 0e09 	sub.w	lr, r3, r9
 8024b0c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8024b10:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8024b14:	0a28      	lsrs	r0, r5, #8
 8024b16:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024b1a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024b1e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b22:	fb0a f303 	mul.w	r3, sl, r3
 8024b26:	fb08 f707 	mul.w	r7, r8, r7
 8024b2a:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8024b2e:	4405      	add	r5, r0
 8024b30:	fb08 fc0c 	mul.w	ip, r8, ip
 8024b34:	b2a4      	uxth	r4, r4
 8024b36:	0a2d      	lsrs	r5, r5, #8
 8024b38:	fa1f fe8e 	uxth.w	lr, lr
 8024b3c:	1b12      	subs	r2, r2, r4
 8024b3e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8024b42:	b292      	uxth	r2, r2
 8024b44:	9005      	str	r0, [sp, #20]
 8024b46:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8024b4a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024b4e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8024b52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024b56:	0a1b      	lsrs	r3, r3, #8
 8024b58:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b5c:	9306      	str	r3, [sp, #24]
 8024b5e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024b62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b66:	4460      	add	r0, ip
 8024b68:	fb0b f303 	mul.w	r3, fp, r3
 8024b6c:	fb0b f606 	mul.w	r6, fp, r6
 8024b70:	0a00      	lsrs	r0, r0, #8
 8024b72:	0a1d      	lsrs	r5, r3, #8
 8024b74:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024b78:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b7c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024b80:	441d      	add	r5, r3
 8024b82:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024b86:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024b8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8024b8e:	0a2d      	lsrs	r5, r5, #8
 8024b90:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024b94:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8024b98:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024b9c:	0a36      	lsrs	r6, r6, #8
 8024b9e:	0a1b      	lsrs	r3, r3, #8
 8024ba0:	fb05 f50e 	mul.w	r5, r5, lr
 8024ba4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024ba8:	9307      	str	r3, [sp, #28]
 8024baa:	0e0b      	lsrs	r3, r1, #24
 8024bac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024bb0:	fb0e f606 	mul.w	r6, lr, r6
 8024bb4:	435f      	muls	r7, r3
 8024bb6:	4359      	muls	r1, r3
 8024bb8:	9b05      	ldr	r3, [sp, #20]
 8024bba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024bbe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024bc2:	fb03 5502 	mla	r5, r3, r2, r5
 8024bc6:	9b06      	ldr	r3, [sp, #24]
 8024bc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024bcc:	fb0e fe0b 	mul.w	lr, lr, fp
 8024bd0:	44bc      	add	ip, r7
 8024bd2:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8024bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bda:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024bde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024be2:	0a09      	lsrs	r1, r1, #8
 8024be4:	fb0c 5509 	mla	r5, ip, r9, r5
 8024be8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024bec:	fb00 5504 	mla	r5, r0, r4, r5
 8024bf0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024bf4:	9b07      	ldr	r3, [sp, #28]
 8024bf6:	fb02 6000 	mla	r0, r2, r0, r6
 8024bfa:	0a2d      	lsrs	r5, r5, #8
 8024bfc:	fb02 e20a 	mla	r2, r2, sl, lr
 8024c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c04:	fb09 0001 	mla	r0, r9, r1, r0
 8024c08:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024c0c:	fb04 0003 	mla	r0, r4, r3, r0
 8024c10:	9b00      	ldr	r3, [sp, #0]
 8024c12:	fb04 2408 	mla	r4, r4, r8, r2
 8024c16:	9a04      	ldr	r2, [sp, #16]
 8024c18:	0a00      	lsrs	r0, r0, #8
 8024c1a:	fb09 4903 	mla	r9, r9, r3, r4
 8024c1e:	9b02      	ldr	r3, [sp, #8]
 8024c20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024c24:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024c28:	4305      	orrs	r5, r0
 8024c2a:	fa5f f989 	uxtb.w	r9, r9
 8024c2e:	fb03 f109 	mul.w	r1, r3, r9
 8024c32:	9b03      	ldr	r3, [sp, #12]
 8024c34:	fb03 f309 	mul.w	r3, r3, r9
 8024c38:	fb02 f909 	mul.w	r9, r2, r9
 8024c3c:	1c4a      	adds	r2, r1, #1
 8024c3e:	1c58      	adds	r0, r3, #1
 8024c40:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024c44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024c48:	0c2a      	lsrs	r2, r5, #16
 8024c4a:	0a2b      	lsrs	r3, r5, #8
 8024c4c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024c50:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024c54:	0212      	lsls	r2, r2, #8
 8024c56:	00db      	lsls	r3, r3, #3
 8024c58:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024c5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c60:	4313      	orrs	r3, r2
 8024c62:	f109 0201 	add.w	r2, r9, #1
 8024c66:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024c6a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024c6e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8024c72:	431d      	orrs	r5, r3
 8024c74:	9b01      	ldr	r3, [sp, #4]
 8024c76:	801d      	strh	r5, [r3, #0]
 8024c78:	b009      	add	sp, #36	; 0x24
 8024c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c7e:	2000      	movs	r0, #0
 8024c80:	e701      	b.n	8024a86 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8024c82:	2600      	movs	r6, #0
 8024c84:	4630      	mov	r0, r6
 8024c86:	e70b      	b.n	8024aa0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024c88:	2600      	movs	r6, #0
 8024c8a:	e709      	b.n	8024aa0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024c8c:	462e      	mov	r6, r5
 8024c8e:	e707      	b.n	8024aa0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024c90:	2700      	movs	r7, #0
 8024c92:	e71a      	b.n	8024aca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024c94:	2100      	movs	r1, #0
 8024c96:	460f      	mov	r7, r1
 8024c98:	e723      	b.n	8024ae2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024c9a:	4621      	mov	r1, r4
 8024c9c:	4627      	mov	r7, r4
 8024c9e:	e720      	b.n	8024ae2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ca0:	2100      	movs	r1, #0
 8024ca2:	e71e      	b.n	8024ae2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ca4:	4629      	mov	r1, r5
 8024ca6:	e71c      	b.n	8024ae2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024ca8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cac:	b09b      	sub	sp, #108	; 0x6c
 8024cae:	9218      	str	r2, [sp, #96]	; 0x60
 8024cb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024cb2:	9019      	str	r0, [sp, #100]	; 0x64
 8024cb4:	9116      	str	r1, [sp, #88]	; 0x58
 8024cb6:	6850      	ldr	r0, [r2, #4]
 8024cb8:	9307      	str	r3, [sp, #28]
 8024cba:	6812      	ldr	r2, [r2, #0]
 8024cbc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8024cbe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024cc2:	fb00 1303 	mla	r3, r0, r3, r1
 8024cc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024cca:	930a      	str	r3, [sp, #40]	; 0x28
 8024ccc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024cce:	681b      	ldr	r3, [r3, #0]
 8024cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8024cd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024cd4:	685e      	ldr	r6, [r3, #4]
 8024cd6:	3604      	adds	r6, #4
 8024cd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024cda:	2b00      	cmp	r3, #0
 8024cdc:	dc03      	bgt.n	8024ce6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024cde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	f340 8373 	ble.w	80253cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024ce6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ce8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cf0:	1e48      	subs	r0, r1, #1
 8024cf2:	1e57      	subs	r7, r2, #1
 8024cf4:	9b07      	ldr	r3, [sp, #28]
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	f340 818f 	ble.w	802501a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024cfc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024cfe:	142b      	asrs	r3, r5, #16
 8024d00:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024d04:	d406      	bmi.n	8024d14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024d06:	4584      	cmp	ip, r0
 8024d08:	da04      	bge.n	8024d14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024d0a:	2b00      	cmp	r3, #0
 8024d0c:	db02      	blt.n	8024d14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024d0e:	42bb      	cmp	r3, r7
 8024d10:	f2c0 8184 	blt.w	802501c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8024d14:	f11c 0c01 	adds.w	ip, ip, #1
 8024d18:	f100 8172 	bmi.w	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024d1c:	4561      	cmp	r1, ip
 8024d1e:	f2c0 816f 	blt.w	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024d22:	3301      	adds	r3, #1
 8024d24:	f100 816c 	bmi.w	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024d28:	429a      	cmp	r2, r3
 8024d2a:	f2c0 8169 	blt.w	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024d2e:	9b07      	ldr	r3, [sp, #28]
 8024d30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024d32:	9317      	str	r3, [sp, #92]	; 0x5c
 8024d34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024d36:	2b00      	cmp	r3, #0
 8024d38:	f340 818e 	ble.w	8025058 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024d3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024d3e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024d42:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024d46:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024d4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024d4c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024d50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024d52:	141b      	asrs	r3, r3, #16
 8024d54:	f100 81d1 	bmi.w	80250fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024d58:	f101 38ff 	add.w	r8, r1, #4294967295
 8024d5c:	4543      	cmp	r3, r8
 8024d5e:	f280 81cc 	bge.w	80250fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024d62:	f1bc 0f00 	cmp.w	ip, #0
 8024d66:	f2c0 81c8 	blt.w	80250fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024d6a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024d6e:	45c4      	cmp	ip, r8
 8024d70:	f280 81c3 	bge.w	80250fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024d74:	b209      	sxth	r1, r1
 8024d76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024d78:	fb0c 3301 	mla	r3, ip, r1, r3
 8024d7c:	eb04 0803 	add.w	r8, r4, r3
 8024d80:	5ce3      	ldrb	r3, [r4, r3]
 8024d82:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024d86:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024d8a:	2a00      	cmp	r2, #0
 8024d8c:	f000 81aa 	beq.w	80250e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8024d90:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024d94:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024d98:	940b      	str	r4, [sp, #44]	; 0x2c
 8024d9a:	0e24      	lsrs	r4, r4, #24
 8024d9c:	9412      	str	r4, [sp, #72]	; 0x48
 8024d9e:	b178      	cbz	r0, 8024dc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024da0:	eb08 0c01 	add.w	ip, r8, r1
 8024da4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024da8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024dac:	9108      	str	r1, [sp, #32]
 8024dae:	0e09      	lsrs	r1, r1, #24
 8024db0:	9110      	str	r1, [sp, #64]	; 0x40
 8024db2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024db6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024dba:	910c      	str	r1, [sp, #48]	; 0x30
 8024dbc:	0e09      	lsrs	r1, r1, #24
 8024dbe:	9113      	str	r1, [sp, #76]	; 0x4c
 8024dc0:	b292      	uxth	r2, r2
 8024dc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024dc4:	b280      	uxth	r0, r0
 8024dc6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024dc8:	fb02 f900 	mul.w	r9, r2, r0
 8024dcc:	0112      	lsls	r2, r2, #4
 8024dce:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024dd2:	eba2 0809 	sub.w	r8, r2, r9
 8024dd6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024dda:	b280      	uxth	r0, r0
 8024ddc:	fa1f f888 	uxth.w	r8, r8
 8024de0:	1a12      	subs	r2, r2, r0
 8024de2:	fb08 f101 	mul.w	r1, r8, r1
 8024de6:	b292      	uxth	r2, r2
 8024de8:	fb02 110e 	mla	r1, r2, lr, r1
 8024dec:	fb00 1104 	mla	r1, r0, r4, r1
 8024df0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024df2:	fb09 1104 	mla	r1, r9, r4, r1
 8024df6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024dfa:	2900      	cmp	r1, #0
 8024dfc:	f000 80f5 	beq.w	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024e00:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024e04:	d01b      	beq.n	8024e3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024e06:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024e0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e0e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024e12:	fb0e fe03 	mul.w	lr, lr, r3
 8024e16:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024e1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024e1e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024e22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e26:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024e2a:	4453      	add	r3, sl
 8024e2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e30:	0a1b      	lsrs	r3, r3, #8
 8024e32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024e36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e3a:	ea43 030c 	orr.w	r3, r3, ip
 8024e3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e40:	2cff      	cmp	r4, #255	; 0xff
 8024e42:	d021      	beq.n	8024e88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8024e44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e46:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024e4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e4c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024e56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024e60:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024e6c:	44de      	add	lr, fp
 8024e6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e82:	ea4e 040a 	orr.w	r4, lr, sl
 8024e86:	940b      	str	r4, [sp, #44]	; 0x2c
 8024e88:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024e8a:	2cff      	cmp	r4, #255	; 0xff
 8024e8c:	d021      	beq.n	8024ed2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024e8e:	9c08      	ldr	r4, [sp, #32]
 8024e90:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024e94:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024e96:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e9a:	9c08      	ldr	r4, [sp, #32]
 8024e9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ea0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024ea2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ea6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024eaa:	fb04 fa0a 	mul.w	sl, r4, sl
 8024eae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024eb2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024eb6:	44de      	add	lr, fp
 8024eb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024ebc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ec0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ec4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ec8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ecc:	ea4e 040a 	orr.w	r4, lr, sl
 8024ed0:	9408      	str	r4, [sp, #32]
 8024ed2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024ed4:	2cff      	cmp	r4, #255	; 0xff
 8024ed6:	d021      	beq.n	8024f1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024ed8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024eda:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024ede:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024ee0:	fb04 fb0b 	mul.w	fp, r4, fp
 8024ee4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024ee6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024eea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024eec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ef0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024ef4:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ef8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024efc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024f00:	44de      	add	lr, fp
 8024f02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024f06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f16:	ea4e 040a 	orr.w	r4, lr, sl
 8024f1a:	940c      	str	r4, [sp, #48]	; 0x30
 8024f1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f1e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024f22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f26:	43c9      	mvns	r1, r1
 8024f28:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024f2c:	9c08      	ldr	r4, [sp, #32]
 8024f2e:	fb08 fc0c 	mul.w	ip, r8, ip
 8024f32:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024f36:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024f3c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024f40:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f46:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024f4a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024f4e:	fb08 f80e 	mul.w	r8, r8, lr
 8024f52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f56:	fa5f fe81 	uxtb.w	lr, r1
 8024f5a:	fb02 8303 	mla	r3, r2, r3, r8
 8024f5e:	9a08      	ldr	r2, [sp, #32]
 8024f60:	f8b7 8000 	ldrh.w	r8, [r7]
 8024f64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f68:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8024f72:	fb00 330a 	mla	r3, r0, sl, r3
 8024f76:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8024f7a:	ea4f 2228 	mov.w	r2, r8, asr #8
 8024f7e:	fb09 3900 	mla	r9, r9, r0, r3
 8024f82:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8024f86:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024f8a:	b2c9      	uxtb	r1, r1
 8024f8c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f90:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024f94:	fb02 f20e 	mul.w	r2, r2, lr
 8024f98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024f9c:	fb00 f00e 	mul.w	r0, r0, lr
 8024fa0:	1c53      	adds	r3, r2, #1
 8024fa2:	fb01 f10e 	mul.w	r1, r1, lr
 8024fa6:	ea4c 0c09 	orr.w	ip, ip, r9
 8024faa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024fae:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8024fb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fb6:	4a60      	ldr	r2, [pc, #384]	; (8025138 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8024fb8:	b2db      	uxtb	r3, r3
 8024fba:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8024fbe:	1c43      	adds	r3, r0, #1
 8024fc0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024fc4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024fc8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024fcc:	00db      	lsls	r3, r3, #3
 8024fce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024fd2:	4313      	orrs	r3, r2
 8024fd4:	1c4a      	adds	r2, r1, #1
 8024fd6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024fda:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024fde:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024fe2:	ea4c 0c03 	orr.w	ip, ip, r3
 8024fe6:	f8a7 c000 	strh.w	ip, [r7]
 8024fea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024fec:	3702      	adds	r7, #2
 8024fee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024ff0:	441a      	add	r2, r3
 8024ff2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ff4:	441d      	add	r5, r3
 8024ff6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024ff8:	9225      	str	r2, [sp, #148]	; 0x94
 8024ffa:	3b01      	subs	r3, #1
 8024ffc:	9317      	str	r3, [sp, #92]	; 0x5c
 8024ffe:	e699      	b.n	8024d34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025000:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025002:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025004:	441c      	add	r4, r3
 8025006:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025008:	441d      	add	r5, r3
 802500a:	9b07      	ldr	r3, [sp, #28]
 802500c:	9425      	str	r4, [sp, #148]	; 0x94
 802500e:	3b01      	subs	r3, #1
 8025010:	9307      	str	r3, [sp, #28]
 8025012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025014:	3302      	adds	r3, #2
 8025016:	930a      	str	r3, [sp, #40]	; 0x28
 8025018:	e66c      	b.n	8024cf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802501a:	d024      	beq.n	8025066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802501c:	9b07      	ldr	r3, [sp, #28]
 802501e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025020:	3b01      	subs	r3, #1
 8025022:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025024:	fb00 4003 	mla	r0, r0, r3, r4
 8025028:	1400      	asrs	r0, r0, #16
 802502a:	f53f ae80 	bmi.w	8024d2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802502e:	3901      	subs	r1, #1
 8025030:	4288      	cmp	r0, r1
 8025032:	f6bf ae7c 	bge.w	8024d2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025036:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025038:	fb01 5303 	mla	r3, r1, r3, r5
 802503c:	141b      	asrs	r3, r3, #16
 802503e:	f53f ae76 	bmi.w	8024d2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025042:	3a01      	subs	r2, #1
 8025044:	4293      	cmp	r3, r2
 8025046:	f6bf ae72 	bge.w	8024d2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802504a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802504e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025052:	f1bb 0f00 	cmp.w	fp, #0
 8025056:	dc71      	bgt.n	802513c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025058:	9b07      	ldr	r3, [sp, #28]
 802505a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025060:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025064:	930a      	str	r3, [sp, #40]	; 0x28
 8025066:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025068:	2b00      	cmp	r3, #0
 802506a:	f340 81af 	ble.w	80253cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802506e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025072:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025074:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025078:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802507c:	eef0 6a62 	vmov.f32	s13, s5
 8025080:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025084:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025088:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802508c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8025090:	eef0 6a43 	vmov.f32	s13, s6
 8025094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025098:	ee16 5a90 	vmov	r5, s13
 802509c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80250a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80250a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80250a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80250ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80250b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80250b4:	ee12 2a90 	vmov	r2, s5
 80250b8:	eef0 2a47 	vmov.f32	s5, s14
 80250bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80250c0:	ee13 2a10 	vmov	r2, s6
 80250c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80250c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80250c8:	eeb0 3a67 	vmov.f32	s6, s15
 80250cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80250d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80250d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80250d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80250d6:	3b01      	subs	r3, #1
 80250d8:	9316      	str	r3, [sp, #88]	; 0x58
 80250da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80250dc:	bf08      	it	eq
 80250de:	4613      	moveq	r3, r2
 80250e0:	9307      	str	r3, [sp, #28]
 80250e2:	e5f9      	b.n	8024cd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80250e4:	2800      	cmp	r0, #0
 80250e6:	f43f ae6b 	beq.w	8024dc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80250ea:	f818 1001 	ldrb.w	r1, [r8, r1]
 80250ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80250f2:	9108      	str	r1, [sp, #32]
 80250f4:	0e09      	lsrs	r1, r1, #24
 80250f6:	9110      	str	r1, [sp, #64]	; 0x40
 80250f8:	e662      	b.n	8024dc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80250fa:	f113 0801 	adds.w	r8, r3, #1
 80250fe:	f53f af74 	bmi.w	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025102:	4541      	cmp	r1, r8
 8025104:	f6ff af71 	blt.w	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025108:	f11c 0801 	adds.w	r8, ip, #1
 802510c:	f53f af6d 	bmi.w	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025110:	45c6      	cmp	lr, r8
 8025112:	f6ff af6a 	blt.w	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025116:	b209      	sxth	r1, r1
 8025118:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802511c:	fa0f f38e 	sxth.w	r3, lr
 8025120:	9100      	str	r1, [sp, #0]
 8025122:	4639      	mov	r1, r7
 8025124:	9301      	str	r3, [sp, #4]
 8025126:	4633      	mov	r3, r6
 8025128:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802512c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802512e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025130:	f7ff fc7b 	bl	8024a2a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025134:	e759      	b.n	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025136:	bf00      	nop
 8025138:	fffff800 	.word	0xfffff800
 802513c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802513e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025142:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025144:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025148:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802514a:	1427      	asrs	r7, r4, #16
 802514c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802514e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025152:	142b      	asrs	r3, r5, #16
 8025154:	fb01 7303 	mla	r3, r1, r3, r7
 8025158:	18e7      	adds	r7, r4, r3
 802515a:	5ce3      	ldrb	r3, [r4, r3]
 802515c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025160:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025164:	2a00      	cmp	r2, #0
 8025166:	f000 8127 	beq.w	80253b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802516a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802516e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025172:	940d      	str	r4, [sp, #52]	; 0x34
 8025174:	0e24      	lsrs	r4, r4, #24
 8025176:	9414      	str	r4, [sp, #80]	; 0x50
 8025178:	b170      	cbz	r0, 8025198 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802517a:	eb07 0e01 	add.w	lr, r7, r1
 802517e:	5c79      	ldrb	r1, [r7, r1]
 8025180:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025184:	9109      	str	r1, [sp, #36]	; 0x24
 8025186:	0e09      	lsrs	r1, r1, #24
 8025188:	9111      	str	r1, [sp, #68]	; 0x44
 802518a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802518e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025192:	910e      	str	r1, [sp, #56]	; 0x38
 8025194:	0e09      	lsrs	r1, r1, #24
 8025196:	9115      	str	r1, [sp, #84]	; 0x54
 8025198:	b292      	uxth	r2, r2
 802519a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802519c:	b280      	uxth	r0, r0
 802519e:	fb02 f800 	mul.w	r8, r2, r0
 80251a2:	0112      	lsls	r2, r2, #4
 80251a4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80251a8:	eba2 0e08 	sub.w	lr, r2, r8
 80251ac:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80251b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80251b2:	b280      	uxth	r0, r0
 80251b4:	fa1f fe8e 	uxth.w	lr, lr
 80251b8:	1a09      	subs	r1, r1, r0
 80251ba:	fb0e f202 	mul.w	r2, lr, r2
 80251be:	b289      	uxth	r1, r1
 80251c0:	fb01 220c 	mla	r2, r1, ip, r2
 80251c4:	fb00 2204 	mla	r2, r0, r4, r2
 80251c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80251ca:	fb08 2204 	mla	r2, r8, r4, r2
 80251ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80251d2:	2a00      	cmp	r2, #0
 80251d4:	f000 80e5 	beq.w	80253a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80251d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80251dc:	d019      	beq.n	8025212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80251de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80251e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80251e6:	fb0c fa0a 	mul.w	sl, ip, sl
 80251ea:	fb0c fc03 	mul.w	ip, ip, r3
 80251ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80251f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80251f6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80251fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80251fe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025202:	4453      	add	r3, sl
 8025204:	0a3f      	lsrs	r7, r7, #8
 8025206:	0a1b      	lsrs	r3, r3, #8
 8025208:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802520c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025210:	433b      	orrs	r3, r7
 8025212:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025214:	2cff      	cmp	r4, #255	; 0xff
 8025216:	d020      	beq.n	802525a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8025218:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802521a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802521e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025220:	4367      	muls	r7, r4
 8025222:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025224:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025228:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802522c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802522e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025232:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025236:	fb04 fa0a 	mul.w	sl, r4, sl
 802523a:	44bc      	add	ip, r7
 802523c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025240:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025244:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802524c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025250:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025254:	ea4c 040a 	orr.w	r4, ip, sl
 8025258:	940d      	str	r4, [sp, #52]	; 0x34
 802525a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802525c:	2cff      	cmp	r4, #255	; 0xff
 802525e:	d020      	beq.n	80252a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8025260:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025262:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025266:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025268:	4367      	muls	r7, r4
 802526a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802526c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025270:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025274:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025276:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802527a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802527e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025282:	44bc      	add	ip, r7
 8025284:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802528c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025290:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025294:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025298:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802529c:	ea4c 040a 	orr.w	r4, ip, sl
 80252a0:	9409      	str	r4, [sp, #36]	; 0x24
 80252a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80252a4:	2cff      	cmp	r4, #255	; 0xff
 80252a6:	d020      	beq.n	80252ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80252a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80252aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80252ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80252b0:	4367      	muls	r7, r4
 80252b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80252b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80252b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80252bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80252be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80252c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80252ca:	44bc      	add	ip, r7
 80252cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80252d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80252d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252e4:	ea4c 040a 	orr.w	r4, ip, sl
 80252e8:	940e      	str	r4, [sp, #56]	; 0x38
 80252ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80252ec:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80252f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80252f4:	43d2      	mvns	r2, r2
 80252f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80252fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80252fc:	b2d2      	uxtb	r2, r2
 80252fe:	fb0e f707 	mul.w	r7, lr, r7
 8025302:	fb01 770c 	mla	r7, r1, ip, r7
 8025306:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802530a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802530c:	fb00 770c 	mla	r7, r0, ip, r7
 8025310:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025314:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025316:	fb08 770c 	mla	r7, r8, ip, r7
 802531a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802531e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025322:	0a3f      	lsrs	r7, r7, #8
 8025324:	fb01 e303 	mla	r3, r1, r3, lr
 8025328:	9909      	ldr	r1, [sp, #36]	; 0x24
 802532a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802532e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025332:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025334:	fb00 330a 	mla	r3, r0, sl, r3
 8025338:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802533c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025340:	f8b9 3000 	ldrh.w	r3, [r9]
 8025344:	1218      	asrs	r0, r3, #8
 8025346:	10d9      	asrs	r1, r3, #3
 8025348:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802534c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025350:	00db      	lsls	r3, r3, #3
 8025352:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025356:	4350      	muls	r0, r2
 8025358:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802535c:	b2db      	uxtb	r3, r3
 802535e:	4351      	muls	r1, r2
 8025360:	ea47 070c 	orr.w	r7, r7, ip
 8025364:	4353      	muls	r3, r2
 8025366:	1c42      	adds	r2, r0, #1
 8025368:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802536c:	0c3a      	lsrs	r2, r7, #16
 802536e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025372:	4a18      	ldr	r2, [pc, #96]	; (80253d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8025374:	b2c0      	uxtb	r0, r0
 8025376:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802537a:	1c4a      	adds	r2, r1, #1
 802537c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025380:	0a3a      	lsrs	r2, r7, #8
 8025382:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025386:	00c9      	lsls	r1, r1, #3
 8025388:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802538c:	4301      	orrs	r1, r0
 802538e:	1c58      	adds	r0, r3, #1
 8025390:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025394:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025398:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802539c:	4308      	orrs	r0, r1
 802539e:	f8a9 0000 	strh.w	r0, [r9]
 80253a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80253a4:	f109 0902 	add.w	r9, r9, #2
 80253a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80253aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80253ae:	441a      	add	r2, r3
 80253b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253b2:	9225      	str	r2, [sp, #148]	; 0x94
 80253b4:	441d      	add	r5, r3
 80253b6:	e64c      	b.n	8025052 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80253b8:	2800      	cmp	r0, #0
 80253ba:	f43f aeed 	beq.w	8025198 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80253be:	5c79      	ldrb	r1, [r7, r1]
 80253c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253c4:	9109      	str	r1, [sp, #36]	; 0x24
 80253c6:	0e09      	lsrs	r1, r1, #24
 80253c8:	9111      	str	r1, [sp, #68]	; 0x44
 80253ca:	e6e5      	b.n	8025198 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80253cc:	b01b      	add	sp, #108	; 0x6c
 80253ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253d2:	bf00      	nop
 80253d4:	fffff800 	.word	0xfffff800

080253d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80253d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253dc:	b085      	sub	sp, #20
 80253de:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80253e2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80253e6:	2800      	cmp	r0, #0
 80253e8:	9103      	str	r1, [sp, #12]
 80253ea:	fb00 7406 	mla	r4, r0, r6, r7
 80253ee:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80253f2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80253f6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80253fa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80253fe:	eb03 0904 	add.w	r9, r3, r4
 8025402:	9501      	str	r5, [sp, #4]
 8025404:	f2c0 8150 	blt.w	80256a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8025408:	4583      	cmp	fp, r0
 802540a:	f340 814d 	ble.w	80256a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802540e:	2f00      	cmp	r7, #0
 8025410:	f2c0 8146 	blt.w	80256a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8025414:	42be      	cmp	r6, r7
 8025416:	f340 8143 	ble.w	80256a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802541a:	f813 c004 	ldrb.w	ip, [r3, r4]
 802541e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8025422:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025426:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802542a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802542e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025432:	4355      	muls	r5, r2
 8025434:	fb0c f203 	mul.w	r2, ip, r3
 8025438:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802543c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8025440:	441d      	add	r5, r3
 8025442:	f102 0320 	add.w	r3, r2, #32
 8025446:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802544a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802544e:	0a1b      	lsrs	r3, r3, #8
 8025450:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025454:	431c      	orrs	r4, r3
 8025456:	1c7b      	adds	r3, r7, #1
 8025458:	f100 812b 	bmi.w	80256b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802545c:	429e      	cmp	r6, r3
 802545e:	f340 8128 	ble.w	80256b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8025462:	2900      	cmp	r1, #0
 8025464:	f000 8128 	beq.w	80256b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8025468:	9a01      	ldr	r2, [sp, #4]
 802546a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802546e:	8855      	ldrh	r5, [r2, #2]
 8025470:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025474:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8025478:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802547c:	fb08 f802 	mul.w	r8, r8, r2
 8025480:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025484:	435d      	muls	r5, r3
 8025486:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802548a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802548e:	44d0      	add	r8, sl
 8025490:	f105 0a20 	add.w	sl, r5, #32
 8025494:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025498:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802549c:	0a2d      	lsrs	r5, r5, #8
 802549e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80254a2:	432a      	orrs	r2, r5
 80254a4:	3001      	adds	r0, #1
 80254a6:	f100 810d 	bmi.w	80256c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80254aa:	4583      	cmp	fp, r0
 80254ac:	f340 810a 	ble.w	80256c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80254b0:	f1be 0f00 	cmp.w	lr, #0
 80254b4:	f000 810b 	beq.w	80256ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80254b8:	2f00      	cmp	r7, #0
 80254ba:	f2c0 8100 	blt.w	80256be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80254be:	42be      	cmp	r6, r7
 80254c0:	f340 80fd 	ble.w	80256be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80254c4:	9801      	ldr	r0, [sp, #4]
 80254c6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80254ca:	f819 5006 	ldrb.w	r5, [r9, r6]
 80254ce:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80254d2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80254d6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80254da:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80254de:	fb0a fa00 	mul.w	sl, sl, r0
 80254e2:	fb05 f808 	mul.w	r8, r5, r8
 80254e6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80254ea:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80254ee:	4482      	add	sl, r0
 80254f0:	f108 0020 	add.w	r0, r8, #32
 80254f4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80254f8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80254fc:	0a00      	lsrs	r0, r0, #8
 80254fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025502:	ea4b 0b00 	orr.w	fp, fp, r0
 8025506:	3701      	adds	r7, #1
 8025508:	f100 80e6 	bmi.w	80256d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802550c:	42be      	cmp	r6, r7
 802550e:	f340 80e3 	ble.w	80256d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8025512:	2900      	cmp	r1, #0
 8025514:	f000 80e3 	beq.w	80256de <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8025518:	3601      	adds	r6, #1
 802551a:	9801      	ldr	r0, [sp, #4]
 802551c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025520:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025524:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025528:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802552c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025530:	fb09 f906 	mul.w	r9, r9, r6
 8025534:	fb07 f800 	mul.w	r8, r7, r0
 8025538:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802553c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8025540:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8025544:	44d1      	add	r9, sl
 8025546:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802554a:	f108 0020 	add.w	r0, r8, #32
 802554e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025552:	0a00      	lsrs	r0, r0, #8
 8025554:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025558:	4330      	orrs	r0, r6
 802555a:	b28e      	uxth	r6, r1
 802555c:	fa1f f98e 	uxth.w	r9, lr
 8025560:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025564:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8025568:	fb06 f809 	mul.w	r8, r6, r9
 802556c:	0136      	lsls	r6, r6, #4
 802556e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025572:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025576:	9601      	str	r6, [sp, #4]
 8025578:	ea4a 0404 	orr.w	r4, sl, r4
 802557c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025580:	fa1f f689 	uxth.w	r6, r9
 8025584:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025588:	fb11 f90e 	smulbb	r9, r1, lr
 802558c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025590:	9602      	str	r6, [sp, #8]
 8025592:	4626      	mov	r6, r4
 8025594:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8025598:	f1ce 0410 	rsb	r4, lr, #16
 802559c:	ea4a 0202 	orr.w	r2, sl, r2
 80255a0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80255a4:	1a64      	subs	r4, r4, r1
 80255a6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80255aa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80255ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80255b2:	434a      	muls	r2, r1
 80255b4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80255b8:	ea4a 0000 	orr.w	r0, sl, r0
 80255bc:	9903      	ldr	r1, [sp, #12]
 80255be:	fb04 2406 	mla	r4, r4, r6, r2
 80255c2:	9e02      	ldr	r6, [sp, #8]
 80255c4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80255c8:	fb09 4200 	mla	r2, r9, r0, r4
 80255cc:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80255d0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80255d4:	8808      	ldrh	r0, [r1, #0]
 80255d6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80255da:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80255de:	ea44 0b0b 	orr.w	fp, r4, fp
 80255e2:	9c01      	ldr	r4, [sp, #4]
 80255e4:	b289      	uxth	r1, r1
 80255e6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80255ea:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80255ee:	1ba4      	subs	r4, r4, r6
 80255f0:	9e01      	ldr	r6, [sp, #4]
 80255f2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80255f6:	eba6 0608 	sub.w	r6, r6, r8
 80255fa:	b2a4      	uxth	r4, r4
 80255fc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025600:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025604:	b2b6      	uxth	r6, r6
 8025606:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802560a:	4373      	muls	r3, r6
 802560c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025610:	fb0c 3304 	mla	r3, ip, r4, r3
 8025614:	9c02      	ldr	r4, [sp, #8]
 8025616:	fa1f f28e 	uxth.w	r2, lr
 802561a:	fb04 3505 	mla	r5, r4, r5, r3
 802561e:	10d4      	asrs	r4, r2, #3
 8025620:	fb08 5707 	mla	r7, r8, r7, r5
 8025624:	1215      	asrs	r5, r2, #8
 8025626:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802562a:	00d2      	lsls	r2, r2, #3
 802562c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025630:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025634:	b2d2      	uxtb	r2, r2
 8025636:	434f      	muls	r7, r1
 8025638:	1c7b      	adds	r3, r7, #1
 802563a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802563e:	1203      	asrs	r3, r0, #8
 8025640:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025644:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025648:	b2ff      	uxtb	r7, r7
 802564a:	fb13 f307 	smulbb	r3, r3, r7
 802564e:	fb05 3501 	mla	r5, r5, r1, r3
 8025652:	10c3      	asrs	r3, r0, #3
 8025654:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025658:	b2ad      	uxth	r5, r5
 802565a:	fb13 f307 	smulbb	r3, r3, r7
 802565e:	fb04 3401 	mla	r4, r4, r1, r3
 8025662:	00c3      	lsls	r3, r0, #3
 8025664:	b2db      	uxtb	r3, r3
 8025666:	b2a4      	uxth	r4, r4
 8025668:	fb13 f307 	smulbb	r3, r3, r7
 802566c:	fb02 3101 	mla	r1, r2, r1, r3
 8025670:	1c6b      	adds	r3, r5, #1
 8025672:	1c62      	adds	r2, r4, #1
 8025674:	b289      	uxth	r1, r1
 8025676:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802567a:	1c4b      	adds	r3, r1, #1
 802567c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025680:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025684:	9a03      	ldr	r2, [sp, #12]
 8025686:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802568a:	0964      	lsrs	r4, r4, #5
 802568c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025690:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025694:	432b      	orrs	r3, r5
 8025696:	4323      	orrs	r3, r4
 8025698:	8013      	strh	r3, [r2, #0]
 802569a:	b005      	add	sp, #20
 802569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256a0:	f04f 0c00 	mov.w	ip, #0
 80256a4:	4664      	mov	r4, ip
 80256a6:	e6d6      	b.n	8025456 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80256a8:	2300      	movs	r3, #0
 80256aa:	469c      	mov	ip, r3
 80256ac:	461a      	mov	r2, r3
 80256ae:	461c      	mov	r4, r3
 80256b0:	e6f8      	b.n	80254a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80256b2:	2300      	movs	r3, #0
 80256b4:	461a      	mov	r2, r3
 80256b6:	e6f5      	b.n	80254a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80256b8:	460b      	mov	r3, r1
 80256ba:	460a      	mov	r2, r1
 80256bc:	e6f2      	b.n	80254a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80256be:	2500      	movs	r5, #0
 80256c0:	46ab      	mov	fp, r5
 80256c2:	e720      	b.n	8025506 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80256c4:	2700      	movs	r7, #0
 80256c6:	463d      	mov	r5, r7
 80256c8:	4638      	mov	r0, r7
 80256ca:	46bb      	mov	fp, r7
 80256cc:	e745      	b.n	802555a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80256ce:	4677      	mov	r7, lr
 80256d0:	4675      	mov	r5, lr
 80256d2:	4670      	mov	r0, lr
 80256d4:	46f3      	mov	fp, lr
 80256d6:	e740      	b.n	802555a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80256d8:	2700      	movs	r7, #0
 80256da:	4638      	mov	r0, r7
 80256dc:	e73d      	b.n	802555a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80256de:	460f      	mov	r7, r1
 80256e0:	4608      	mov	r0, r1
 80256e2:	e73a      	b.n	802555a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080256e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80256e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256e8:	b097      	sub	sp, #92	; 0x5c
 80256ea:	9214      	str	r2, [sp, #80]	; 0x50
 80256ec:	9308      	str	r3, [sp, #32]
 80256ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80256f0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80256f4:	9015      	str	r0, [sp, #84]	; 0x54
 80256f6:	9312      	str	r3, [sp, #72]	; 0x48
 80256f8:	6850      	ldr	r0, [r2, #4]
 80256fa:	9111      	str	r1, [sp, #68]	; 0x44
 80256fc:	6812      	ldr	r2, [r2, #0]
 80256fe:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025702:	fb00 1303 	mla	r3, r0, r3, r1
 8025706:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802570a:	9309      	str	r3, [sp, #36]	; 0x24
 802570c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802570e:	681b      	ldr	r3, [r3, #0]
 8025710:	930b      	str	r3, [sp, #44]	; 0x2c
 8025712:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025714:	685b      	ldr	r3, [r3, #4]
 8025716:	930c      	str	r3, [sp, #48]	; 0x30
 8025718:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802571c:	930a      	str	r3, [sp, #40]	; 0x28
 802571e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025720:	2b00      	cmp	r3, #0
 8025722:	dc03      	bgt.n	802572c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025724:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025726:	2b00      	cmp	r3, #0
 8025728:	f340 83cd 	ble.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 802572c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802572e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025732:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025736:	1e48      	subs	r0, r1, #1
 8025738:	1e55      	subs	r5, r2, #1
 802573a:	9b08      	ldr	r3, [sp, #32]
 802573c:	2b00      	cmp	r3, #0
 802573e:	f340 81a5 	ble.w	8025a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8025742:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8025744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025746:	1436      	asrs	r6, r6, #16
 8025748:	ea4f 4323 	mov.w	r3, r3, asr #16
 802574c:	d406      	bmi.n	802575c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802574e:	4286      	cmp	r6, r0
 8025750:	da04      	bge.n	802575c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025752:	2b00      	cmp	r3, #0
 8025754:	db02      	blt.n	802575c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025756:	42ab      	cmp	r3, r5
 8025758:	f2c0 8199 	blt.w	8025a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802575c:	3601      	adds	r6, #1
 802575e:	f100 8186 	bmi.w	8025a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025762:	42b1      	cmp	r1, r6
 8025764:	f2c0 8183 	blt.w	8025a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025768:	3301      	adds	r3, #1
 802576a:	f100 8180 	bmi.w	8025a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802576e:	429a      	cmp	r2, r3
 8025770:	f2c0 817d 	blt.w	8025a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025774:	9b08      	ldr	r3, [sp, #32]
 8025776:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802577a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802577c:	9313      	str	r3, [sp, #76]	; 0x4c
 802577e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025780:	2b00      	cmp	r3, #0
 8025782:	f340 81a6 	ble.w	8025ad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025786:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025788:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802578a:	1418      	asrs	r0, r3, #16
 802578c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802578e:	142d      	asrs	r5, r5, #16
 8025790:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025796:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802579a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802579c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80257a0:	f100 81fa 	bmi.w	8025b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80257a4:	f102 3eff 	add.w	lr, r2, #4294967295
 80257a8:	4575      	cmp	r5, lr
 80257aa:	f280 81f5 	bge.w	8025b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80257ae:	2800      	cmp	r0, #0
 80257b0:	f2c0 81f2 	blt.w	8025b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80257b4:	f103 3eff 	add.w	lr, r3, #4294967295
 80257b8:	4570      	cmp	r0, lr
 80257ba:	f280 81ed 	bge.w	8025b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80257be:	b212      	sxth	r2, r2
 80257c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80257c2:	fa1f fe81 	uxth.w	lr, r1
 80257c6:	fb00 5002 	mla	r0, r0, r2, r5
 80257ca:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80257ce:	eb03 0a00 	add.w	sl, r3, r0
 80257d2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80257d6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80257da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80257de:	b29b      	uxth	r3, r3
 80257e0:	f1bc 0f00 	cmp.w	ip, #0
 80257e4:	f000 81bb 	beq.w	8025b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80257e8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80257ec:	eb0a 0b02 	add.w	fp, sl, r2
 80257f0:	fa1f fa8c 	uxth.w	sl, ip
 80257f4:	940d      	str	r4, [sp, #52]	; 0x34
 80257f6:	fb0a fe0e 	mul.w	lr, sl, lr
 80257fa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80257fe:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025802:	eba5 050e 	sub.w	r5, r5, lr
 8025806:	940e      	str	r4, [sp, #56]	; 0x38
 8025808:	fa1f fa8a 	uxth.w	sl, sl
 802580c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802580e:	b2ad      	uxth	r5, r5
 8025810:	eba3 030a 	sub.w	r3, r3, sl
 8025814:	fb08 f505 	mul.w	r5, r8, r5
 8025818:	b29b      	uxth	r3, r3
 802581a:	fb09 5303 	mla	r3, r9, r3, r5
 802581e:	fb0a 3304 	mla	r3, sl, r4, r3
 8025822:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025824:	fb0e 3304 	mla	r3, lr, r4, r3
 8025828:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802582c:	2b00      	cmp	r3, #0
 802582e:	f000 8111 	beq.w	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025832:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025834:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025838:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802583c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025840:	f000 8192 	beq.w	8025b68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8025844:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025848:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802584c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025850:	fb0a fe0e 	mul.w	lr, sl, lr
 8025854:	fb09 f000 	mul.w	r0, r9, r0
 8025858:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802585c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025860:	f100 0b20 	add.w	fp, r0, #32
 8025864:	44ce      	add	lr, r9
 8025866:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802586a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802586e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025872:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025876:	ea4e 0909 	orr.w	r9, lr, r9
 802587a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802587e:	8868      	ldrh	r0, [r5, #2]
 8025880:	d019      	beq.n	80258b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025882:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025886:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802588a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802588e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025892:	fb08 f800 	mul.w	r8, r8, r0
 8025896:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802589a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802589e:	f108 0b20 	add.w	fp, r8, #32
 80258a2:	4486      	add	lr, r0
 80258a4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80258a8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80258ac:	0a00      	lsrs	r0, r0, #8
 80258ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80258b2:	ea4e 0000 	orr.w	r0, lr, r0
 80258b6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80258ba:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80258be:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80258c2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80258c6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80258ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80258ce:	ea4e 0909 	orr.w	r9, lr, r9
 80258d2:	ea4a 0000 	orr.w	r0, sl, r0
 80258d6:	f1bc 0f00 	cmp.w	ip, #0
 80258da:	f000 8147 	beq.w	8025b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80258de:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80258e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258e4:	3a01      	subs	r2, #1
 80258e6:	2cff      	cmp	r4, #255	; 0xff
 80258e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80258ec:	f102 0202 	add.w	r2, r2, #2
 80258f0:	eb05 0e02 	add.w	lr, r5, r2
 80258f4:	5aaa      	ldrh	r2, [r5, r2]
 80258f6:	d018      	beq.n	802592a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80258f8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80258fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025900:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025904:	fb04 fa02 	mul.w	sl, r4, r2
 8025908:	fb08 f805 	mul.w	r8, r8, r5
 802590c:	f10a 0520 	add.w	r5, sl, #32
 8025910:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025914:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025918:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802591c:	4442      	add	r2, r8
 802591e:	0a2d      	lsrs	r5, r5, #8
 8025920:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025924:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025928:	432a      	orrs	r2, r5
 802592a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802592c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025930:	2cff      	cmp	r4, #255	; 0xff
 8025932:	d01a      	beq.n	802596a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8025934:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025938:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802593c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025940:	fb04 fa05 	mul.w	sl, r4, r5
 8025944:	fb08 f80e 	mul.w	r8, r8, lr
 8025948:	f10a 0e20 	add.w	lr, sl, #32
 802594c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025950:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025954:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025958:	4445      	add	r5, r8
 802595a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802595e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025962:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025966:	ea45 050e 	orr.w	r5, r5, lr
 802596a:	fb1c fe01 	smulbb	lr, ip, r1
 802596e:	f1cc 0810 	rsb	r8, ip, #16
 8025972:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025976:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802597a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802597e:	eba8 0801 	sub.w	r8, r8, r1
 8025982:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025986:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802598a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802598e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025992:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025996:	ea4a 0202 	orr.w	r2, sl, r2
 802599a:	4341      	muls	r1, r0
 802599c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80259a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80259a4:	fb09 1108 	mla	r1, r9, r8, r1
 80259a8:	ea4b 0505 	orr.w	r5, fp, r5
 80259ac:	fb0c 1102 	mla	r1, ip, r2, r1
 80259b0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80259b4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80259b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80259bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80259c0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80259c4:	ea42 0e0e 	orr.w	lr, r2, lr
 80259c8:	fa1f f28e 	uxth.w	r2, lr
 80259cc:	2bff      	cmp	r3, #255	; 0xff
 80259ce:	d103      	bne.n	80259d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80259d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80259d2:	29ff      	cmp	r1, #255	; 0xff
 80259d4:	f000 80de 	beq.w	8025b94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80259d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80259da:	1215      	asrs	r5, r2, #8
 80259dc:	8838      	ldrh	r0, [r7, #0]
 80259de:	434b      	muls	r3, r1
 80259e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80259e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80259e6:	f103 0c01 	add.w	ip, r3, #1
 80259ea:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80259ee:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80259f2:	fa5f fc83 	uxtb.w	ip, r3
 80259f6:	1203      	asrs	r3, r0, #8
 80259f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80259fc:	fb13 f30c 	smulbb	r3, r3, ip
 8025a00:	fb05 3501 	mla	r5, r5, r1, r3
 8025a04:	10c3      	asrs	r3, r0, #3
 8025a06:	10d1      	asrs	r1, r2, #3
 8025a08:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025a0c:	00d2      	lsls	r2, r2, #3
 8025a0e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025a12:	b2ad      	uxth	r5, r5
 8025a14:	fb13 f30c 	smulbb	r3, r3, ip
 8025a18:	b2d2      	uxtb	r2, r2
 8025a1a:	fb01 3104 	mla	r1, r1, r4, r3
 8025a1e:	00c3      	lsls	r3, r0, #3
 8025a20:	b2db      	uxtb	r3, r3
 8025a22:	b289      	uxth	r1, r1
 8025a24:	fb13 f30c 	smulbb	r3, r3, ip
 8025a28:	fb02 3304 	mla	r3, r2, r4, r3
 8025a2c:	b29a      	uxth	r2, r3
 8025a2e:	1c6b      	adds	r3, r5, #1
 8025a30:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025a34:	1c53      	adds	r3, r2, #1
 8025a36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025a3a:	1c4a      	adds	r2, r1, #1
 8025a3c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025a40:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025a44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025a48:	0949      	lsrs	r1, r1, #5
 8025a4a:	432b      	orrs	r3, r5
 8025a4c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025a50:	430b      	orrs	r3, r1
 8025a52:	803b      	strh	r3, [r7, #0]
 8025a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025a56:	3702      	adds	r7, #2
 8025a58:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025a5a:	4413      	add	r3, r2
 8025a5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025a5e:	9321      	str	r3, [sp, #132]	; 0x84
 8025a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a62:	441a      	add	r2, r3
 8025a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025a66:	3b01      	subs	r3, #1
 8025a68:	9222      	str	r2, [sp, #136]	; 0x88
 8025a6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8025a6c:	e687      	b.n	802577e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025a70:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8025a72:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8025a74:	4433      	add	r3, r6
 8025a76:	9321      	str	r3, [sp, #132]	; 0x84
 8025a78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a7a:	441c      	add	r4, r3
 8025a7c:	9b08      	ldr	r3, [sp, #32]
 8025a7e:	3b01      	subs	r3, #1
 8025a80:	9422      	str	r4, [sp, #136]	; 0x88
 8025a82:	9308      	str	r3, [sp, #32]
 8025a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a86:	3302      	adds	r3, #2
 8025a88:	9309      	str	r3, [sp, #36]	; 0x24
 8025a8a:	e656      	b.n	802573a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025a8c:	d028      	beq.n	8025ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025a8e:	9b08      	ldr	r3, [sp, #32]
 8025a90:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025a92:	3b01      	subs	r3, #1
 8025a94:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8025a96:	fb00 5003 	mla	r0, r0, r3, r5
 8025a9a:	1400      	asrs	r0, r0, #16
 8025a9c:	f53f ae6a 	bmi.w	8025774 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025aa0:	3901      	subs	r1, #1
 8025aa2:	4288      	cmp	r0, r1
 8025aa4:	f6bf ae66 	bge.w	8025774 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025aa8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025aaa:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025aac:	fb01 0303 	mla	r3, r1, r3, r0
 8025ab0:	141b      	asrs	r3, r3, #16
 8025ab2:	f53f ae5f 	bmi.w	8025774 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025ab6:	3a01      	subs	r2, #1
 8025ab8:	4293      	cmp	r3, r2
 8025aba:	f6bf ae5b 	bge.w	8025774 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025abe:	9b08      	ldr	r3, [sp, #32]
 8025ac0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025ac4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025ac8:	9313      	str	r3, [sp, #76]	; 0x4c
 8025aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025acc:	2b00      	cmp	r3, #0
 8025ace:	f300 8082 	bgt.w	8025bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8025ad2:	9b08      	ldr	r3, [sp, #32]
 8025ad4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ada:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025ade:	9309      	str	r3, [sp, #36]	; 0x24
 8025ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	f340 81ef 	ble.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8025ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025aec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025aee:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025af2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025af6:	eef0 6a62 	vmov.f32	s13, s5
 8025afa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025afe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025b02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b06:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8025b0a:	eef0 6a43 	vmov.f32	s13, s6
 8025b0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b12:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8025b16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025b1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025b1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025b22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025b26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025b2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025b2e:	ee12 2a90 	vmov	r2, s5
 8025b32:	eef0 2a47 	vmov.f32	s5, s14
 8025b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b3a:	ee13 2a10 	vmov	r2, s6
 8025b3e:	9323      	str	r3, [sp, #140]	; 0x8c
 8025b40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b42:	eeb0 3a67 	vmov.f32	s6, s15
 8025b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b4a:	9324      	str	r3, [sp, #144]	; 0x90
 8025b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025b4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025b50:	3b01      	subs	r3, #1
 8025b52:	9311      	str	r3, [sp, #68]	; 0x44
 8025b54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b56:	bf08      	it	eq
 8025b58:	4613      	moveq	r3, r2
 8025b5a:	9308      	str	r3, [sp, #32]
 8025b5c:	e5df      	b.n	802571e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025b5e:	fb08 f505 	mul.w	r5, r8, r5
 8025b62:	fb09 5303 	mla	r3, r9, r3, r5
 8025b66:	e65f      	b.n	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025b68:	4681      	mov	r9, r0
 8025b6a:	e686      	b.n	802587a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025b6c:	f1c1 0210 	rsb	r2, r1, #16
 8025b70:	4341      	muls	r1, r0
 8025b72:	fb09 1902 	mla	r9, r9, r2, r1
 8025b76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025b7a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025b7e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025b82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b86:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025b8a:	ea42 0909 	orr.w	r9, r2, r9
 8025b8e:	fa1f f289 	uxth.w	r2, r9
 8025b92:	e71b      	b.n	80259cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8025b94:	803a      	strh	r2, [r7, #0]
 8025b96:	e75d      	b.n	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025b98:	f115 0e01 	adds.w	lr, r5, #1
 8025b9c:	f53f af5a 	bmi.w	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025ba0:	4572      	cmp	r2, lr
 8025ba2:	f6ff af57 	blt.w	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025ba6:	f110 0e01 	adds.w	lr, r0, #1
 8025baa:	f53f af53 	bmi.w	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025bae:	4573      	cmp	r3, lr
 8025bb0:	f6ff af50 	blt.w	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025bb4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025bb6:	b21b      	sxth	r3, r3
 8025bb8:	b212      	sxth	r2, r2
 8025bba:	9502      	str	r5, [sp, #8]
 8025bbc:	9301      	str	r3, [sp, #4]
 8025bbe:	9200      	str	r2, [sp, #0]
 8025bc0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025bc4:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025bc8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025bcc:	4639      	mov	r1, r7
 8025bce:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025bd0:	f7ff fc02 	bl	80253d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025bd4:	e73e      	b.n	8025a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025bd8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025bde:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025be2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025be4:	fa1f fc82 	uxth.w	ip, r2
 8025be8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025bee:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025bf2:	141f      	asrs	r7, r3, #16
 8025bf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025bf6:	141b      	asrs	r3, r3, #16
 8025bf8:	fb01 3707 	mla	r7, r1, r7, r3
 8025bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bfe:	eb03 0a07 	add.w	sl, r3, r7
 8025c02:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025c06:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025c0a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025c0e:	b29b      	uxth	r3, r3
 8025c10:	2d00      	cmp	r5, #0
 8025c12:	f000 813d 	beq.w	8025e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8025c16:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025c1a:	eb0a 0b01 	add.w	fp, sl, r1
 8025c1e:	fa1f fa85 	uxth.w	sl, r5
 8025c22:	940f      	str	r4, [sp, #60]	; 0x3c
 8025c24:	fb0a fc0c 	mul.w	ip, sl, ip
 8025c28:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025c2c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025c30:	eba0 000c 	sub.w	r0, r0, ip
 8025c34:	9410      	str	r4, [sp, #64]	; 0x40
 8025c36:	fa1f fa8a 	uxth.w	sl, sl
 8025c3a:	b280      	uxth	r0, r0
 8025c3c:	eba3 030a 	sub.w	r3, r3, sl
 8025c40:	fb08 f000 	mul.w	r0, r8, r0
 8025c44:	b29b      	uxth	r3, r3
 8025c46:	fb09 0303 	mla	r3, r9, r3, r0
 8025c4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025c4c:	fb0a 3300 	mla	r3, sl, r0, r3
 8025c50:	fb0c 3304 	mla	r3, ip, r4, r3
 8025c54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	f000 810b 	beq.w	8025e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025c5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025c60:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025c64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025c66:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025c6a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025c6e:	f000 8114 	beq.w	8025e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8025c72:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025c76:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025c7a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025c7e:	fb0a fc0c 	mul.w	ip, sl, ip
 8025c82:	fb09 f707 	mul.w	r7, r9, r7
 8025c86:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025c8a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025c8e:	f107 0b20 	add.w	fp, r7, #32
 8025c92:	44cc      	add	ip, r9
 8025c94:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025c98:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025c9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ca0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025ca4:	ea4c 0909 	orr.w	r9, ip, r9
 8025ca8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025cac:	8847      	ldrh	r7, [r0, #2]
 8025cae:	d019      	beq.n	8025ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8025cb0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025cb4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025cb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025cbc:	fb0a fc0c 	mul.w	ip, sl, ip
 8025cc0:	fb08 f807 	mul.w	r8, r8, r7
 8025cc4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025cc8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025ccc:	f108 0b20 	add.w	fp, r8, #32
 8025cd0:	44bc      	add	ip, r7
 8025cd2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025cd6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025cda:	0a3f      	lsrs	r7, r7, #8
 8025cdc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025ce0:	ea4c 0707 	orr.w	r7, ip, r7
 8025ce4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025ce8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025cec:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025cf0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025cf4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025cf8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025cfc:	ea4c 0909 	orr.w	r9, ip, r9
 8025d00:	ea4a 0707 	orr.w	r7, sl, r7
 8025d04:	2d00      	cmp	r5, #0
 8025d06:	f000 80ca 	beq.w	8025e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8025d0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025d0e:	3901      	subs	r1, #1
 8025d10:	0049      	lsls	r1, r1, #1
 8025d12:	3102      	adds	r1, #2
 8025d14:	eb00 0c01 	add.w	ip, r0, r1
 8025d18:	5a41      	ldrh	r1, [r0, r1]
 8025d1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025d1c:	28ff      	cmp	r0, #255	; 0xff
 8025d1e:	d019      	beq.n	8025d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8025d20:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025d24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025d26:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025d2a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d2e:	fb04 fa01 	mul.w	sl, r4, r1
 8025d32:	fb08 f800 	mul.w	r8, r8, r0
 8025d36:	f10a 0020 	add.w	r0, sl, #32
 8025d3a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025d3e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025d42:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025d46:	4441      	add	r1, r8
 8025d48:	0a00      	lsrs	r0, r0, #8
 8025d4a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025d4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025d52:	4301      	orrs	r1, r0
 8025d54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025d56:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025d5a:	2cff      	cmp	r4, #255	; 0xff
 8025d5c:	d01a      	beq.n	8025d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8025d5e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025d62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025d66:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d6a:	fb04 fa00 	mul.w	sl, r4, r0
 8025d6e:	fb08 f80c 	mul.w	r8, r8, ip
 8025d72:	f10a 0c20 	add.w	ip, sl, #32
 8025d76:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025d7a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025d7e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025d82:	4440      	add	r0, r8
 8025d84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d88:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025d8c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025d90:	ea40 000c 	orr.w	r0, r0, ip
 8025d94:	fb15 fc02 	smulbb	ip, r5, r2
 8025d98:	f1c5 0810 	rsb	r8, r5, #16
 8025d9c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025da0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025da4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025da8:	eba8 0802 	sub.w	r8, r8, r2
 8025dac:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025db0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025db4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025db8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025dbc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025dc0:	ea4a 0101 	orr.w	r1, sl, r1
 8025dc4:	437a      	muls	r2, r7
 8025dc6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025dca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025dce:	fb09 2208 	mla	r2, r9, r8, r2
 8025dd2:	ea4b 0000 	orr.w	r0, fp, r0
 8025dd6:	fb05 2201 	mla	r2, r5, r1, r2
 8025dda:	fb0c 2200 	mla	r2, ip, r0, r2
 8025dde:	0d57      	lsrs	r7, r2, #21
 8025de0:	0952      	lsrs	r2, r2, #5
 8025de2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025de6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025dea:	433a      	orrs	r2, r7
 8025dec:	2bff      	cmp	r3, #255	; 0xff
 8025dee:	b292      	uxth	r2, r2
 8025df0:	d102      	bne.n	8025df8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8025df2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025df4:	29ff      	cmp	r1, #255	; 0xff
 8025df6:	d063      	beq.n	8025ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8025df8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025dfa:	1215      	asrs	r5, r2, #8
 8025dfc:	f8be 1000 	ldrh.w	r1, [lr]
 8025e00:	4343      	muls	r3, r0
 8025e02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e04:	10cf      	asrs	r7, r1, #3
 8025e06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025e0a:	1c58      	adds	r0, r3, #1
 8025e0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025e10:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8025e14:	1208      	asrs	r0, r1, #8
 8025e16:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025e1a:	00c9      	lsls	r1, r1, #3
 8025e1c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025e20:	b2db      	uxtb	r3, r3
 8025e22:	b2c9      	uxtb	r1, r1
 8025e24:	fb10 f003 	smulbb	r0, r0, r3
 8025e28:	fb11 f103 	smulbb	r1, r1, r3
 8025e2c:	fb05 0504 	mla	r5, r5, r4, r0
 8025e30:	10d0      	asrs	r0, r2, #3
 8025e32:	fb17 f703 	smulbb	r7, r7, r3
 8025e36:	00d2      	lsls	r2, r2, #3
 8025e38:	b2ad      	uxth	r5, r5
 8025e3a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025e3e:	b2d2      	uxtb	r2, r2
 8025e40:	fb00 7004 	mla	r0, r0, r4, r7
 8025e44:	1c6b      	adds	r3, r5, #1
 8025e46:	fb02 1204 	mla	r2, r2, r4, r1
 8025e4a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025e4e:	b292      	uxth	r2, r2
 8025e50:	b280      	uxth	r0, r0
 8025e52:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025e56:	1c57      	adds	r7, r2, #1
 8025e58:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025e5c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025e60:	433d      	orrs	r5, r7
 8025e62:	1c47      	adds	r7, r0, #1
 8025e64:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025e68:	097f      	lsrs	r7, r7, #5
 8025e6a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e6e:	433d      	orrs	r5, r7
 8025e70:	f8ae 5000 	strh.w	r5, [lr]
 8025e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025e76:	f10e 0e02 	add.w	lr, lr, #2
 8025e7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025e7c:	4413      	add	r3, r2
 8025e7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025e80:	9321      	str	r3, [sp, #132]	; 0x84
 8025e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e84:	441a      	add	r2, r3
 8025e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025e88:	3b01      	subs	r3, #1
 8025e8a:	9222      	str	r2, [sp, #136]	; 0x88
 8025e8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8025e8e:	e61c      	b.n	8025aca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025e90:	fb08 f000 	mul.w	r0, r8, r0
 8025e94:	fb09 0303 	mla	r3, r9, r3, r0
 8025e98:	e6dc      	b.n	8025c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8025e9a:	46b9      	mov	r9, r7
 8025e9c:	e704      	b.n	8025ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8025e9e:	f1c2 0110 	rsb	r1, r2, #16
 8025ea2:	437a      	muls	r2, r7
 8025ea4:	fb09 2901 	mla	r9, r9, r1, r2
 8025ea8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025eac:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025eb0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025eb4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025eb8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025ebc:	4302      	orrs	r2, r0
 8025ebe:	e795      	b.n	8025dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8025ec0:	f8ae 2000 	strh.w	r2, [lr]
 8025ec4:	e7d6      	b.n	8025e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025ec6:	b017      	add	sp, #92	; 0x5c
 8025ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ecc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ed0:	b085      	sub	sp, #20
 8025ed2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8025ed6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025eda:	2800      	cmp	r0, #0
 8025edc:	9103      	str	r1, [sp, #12]
 8025ede:	fb00 7406 	mla	r4, r0, r6, r7
 8025ee2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8025ee6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8025eea:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8025eee:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8025ef2:	eb02 0904 	add.w	r9, r2, r4
 8025ef6:	9501      	str	r5, [sp, #4]
 8025ef8:	f2c0 8141 	blt.w	802617e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025efc:	4583      	cmp	fp, r0
 8025efe:	f340 813e 	ble.w	802617e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025f02:	2f00      	cmp	r7, #0
 8025f04:	f2c0 8137 	blt.w	8026176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025f08:	42be      	cmp	r6, r7
 8025f0a:	f340 8134 	ble.w	8026176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025f0e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8025f12:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8025f16:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025f1a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025f1e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8025f22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025f26:	4355      	muls	r5, r2
 8025f28:	fb0c f203 	mul.w	r2, ip, r3
 8025f2c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8025f30:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8025f34:	441d      	add	r5, r3
 8025f36:	f102 0320 	add.w	r3, r2, #32
 8025f3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025f3e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8025f42:	0a1b      	lsrs	r3, r3, #8
 8025f44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025f48:	431c      	orrs	r4, r3
 8025f4a:	1c7b      	adds	r3, r7, #1
 8025f4c:	f100 811c 	bmi.w	8026188 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8025f50:	429e      	cmp	r6, r3
 8025f52:	f340 8119 	ble.w	8026188 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8025f56:	2900      	cmp	r1, #0
 8025f58:	f000 8119 	beq.w	802618e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8025f5c:	9a01      	ldr	r2, [sp, #4]
 8025f5e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8025f62:	8855      	ldrh	r5, [r2, #2]
 8025f64:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025f68:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8025f6c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025f70:	fb08 f802 	mul.w	r8, r8, r2
 8025f74:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025f78:	435d      	muls	r5, r3
 8025f7a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8025f7e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f82:	44d0      	add	r8, sl
 8025f84:	f105 0a20 	add.w	sl, r5, #32
 8025f88:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025f8c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025f90:	0a2d      	lsrs	r5, r5, #8
 8025f92:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025f96:	432a      	orrs	r2, r5
 8025f98:	3001      	adds	r0, #1
 8025f9a:	f100 80fe 	bmi.w	802619a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025f9e:	4583      	cmp	fp, r0
 8025fa0:	f340 80fb 	ble.w	802619a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025fa4:	f1be 0f00 	cmp.w	lr, #0
 8025fa8:	f000 80fc 	beq.w	80261a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8025fac:	2f00      	cmp	r7, #0
 8025fae:	f2c0 80f1 	blt.w	8026194 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025fb2:	42be      	cmp	r6, r7
 8025fb4:	f340 80ee 	ble.w	8026194 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025fb8:	9801      	ldr	r0, [sp, #4]
 8025fba:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025fbe:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025fc2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8025fc6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025fca:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8025fce:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8025fd2:	fb0a fa00 	mul.w	sl, sl, r0
 8025fd6:	fb05 f808 	mul.w	r8, r5, r8
 8025fda:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8025fde:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8025fe2:	4482      	add	sl, r0
 8025fe4:	f108 0020 	add.w	r0, r8, #32
 8025fe8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025fec:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8025ff0:	0a00      	lsrs	r0, r0, #8
 8025ff2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ff6:	ea4b 0b00 	orr.w	fp, fp, r0
 8025ffa:	3701      	adds	r7, #1
 8025ffc:	f100 80d7 	bmi.w	80261ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8026000:	42be      	cmp	r6, r7
 8026002:	f340 80d4 	ble.w	80261ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8026006:	2900      	cmp	r1, #0
 8026008:	f000 80d4 	beq.w	80261b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 802600c:	3601      	adds	r6, #1
 802600e:	9801      	ldr	r0, [sp, #4]
 8026010:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026014:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026018:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802601c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8026020:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026024:	fb09 f906 	mul.w	r9, r9, r6
 8026028:	fb07 f800 	mul.w	r8, r7, r0
 802602c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8026030:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026034:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8026038:	44d1      	add	r9, sl
 802603a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802603e:	f108 0020 	add.w	r0, r8, #32
 8026042:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026046:	0a00      	lsrs	r0, r0, #8
 8026048:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802604c:	4330      	orrs	r0, r6
 802604e:	b28e      	uxth	r6, r1
 8026050:	fa1f f98e 	uxth.w	r9, lr
 8026054:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026058:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802605c:	fb06 f809 	mul.w	r8, r6, r9
 8026060:	0136      	lsls	r6, r6, #4
 8026062:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026066:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802606a:	9601      	str	r6, [sp, #4]
 802606c:	ea4a 0404 	orr.w	r4, sl, r4
 8026070:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026074:	fa1f f689 	uxth.w	r6, r9
 8026078:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802607c:	fb11 f90e 	smulbb	r9, r1, lr
 8026080:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026084:	9602      	str	r6, [sp, #8]
 8026086:	4626      	mov	r6, r4
 8026088:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802608c:	f1ce 0410 	rsb	r4, lr, #16
 8026090:	ea4a 0202 	orr.w	r2, sl, r2
 8026094:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026098:	1a64      	subs	r4, r4, r1
 802609a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802609e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80260a2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80260a6:	434a      	muls	r2, r1
 80260a8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80260ac:	ea4a 0000 	orr.w	r0, sl, r0
 80260b0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80260b4:	fb04 2406 	mla	r4, r4, r6, r2
 80260b8:	9903      	ldr	r1, [sp, #12]
 80260ba:	fb09 4200 	mla	r2, r9, r0, r4
 80260be:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80260c2:	9801      	ldr	r0, [sp, #4]
 80260c4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80260c8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80260cc:	8809      	ldrh	r1, [r1, #0]
 80260ce:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80260d2:	ea44 0b0b 	orr.w	fp, r4, fp
 80260d6:	9c02      	ldr	r4, [sp, #8]
 80260d8:	1b00      	subs	r0, r0, r4
 80260da:	9c01      	ldr	r4, [sp, #4]
 80260dc:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80260e0:	eba4 0608 	sub.w	r6, r4, r8
 80260e4:	b280      	uxth	r0, r0
 80260e6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80260ea:	b2b6      	uxth	r6, r6
 80260ec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80260f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80260f4:	4373      	muls	r3, r6
 80260f6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80260fa:	fb0c 3300 	mla	r3, ip, r0, r3
 80260fe:	9802      	ldr	r0, [sp, #8]
 8026100:	ea42 0e0e 	orr.w	lr, r2, lr
 8026104:	fb00 3505 	mla	r5, r0, r5, r3
 8026108:	120b      	asrs	r3, r1, #8
 802610a:	10c8      	asrs	r0, r1, #3
 802610c:	fb08 5707 	mla	r7, r8, r7, r5
 8026110:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026114:	00c9      	lsls	r1, r1, #3
 8026116:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802611a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802611e:	fa1f f28e 	uxth.w	r2, lr
 8026122:	b2c9      	uxtb	r1, r1
 8026124:	b2ff      	uxtb	r7, r7
 8026126:	437b      	muls	r3, r7
 8026128:	4378      	muls	r0, r7
 802612a:	434f      	muls	r7, r1
 802612c:	1c59      	adds	r1, r3, #1
 802612e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026132:	1213      	asrs	r3, r2, #8
 8026134:	f023 0307 	bic.w	r3, r3, #7
 8026138:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802613c:	1c41      	adds	r1, r0, #1
 802613e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026142:	10d1      	asrs	r1, r2, #3
 8026144:	021b      	lsls	r3, r3, #8
 8026146:	f021 0103 	bic.w	r1, r1, #3
 802614a:	00d2      	lsls	r2, r2, #3
 802614c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026150:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026154:	00c9      	lsls	r1, r1, #3
 8026156:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802615a:	430b      	orrs	r3, r1
 802615c:	1c79      	adds	r1, r7, #1
 802615e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026162:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8026166:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802616a:	431a      	orrs	r2, r3
 802616c:	9b03      	ldr	r3, [sp, #12]
 802616e:	801a      	strh	r2, [r3, #0]
 8026170:	b005      	add	sp, #20
 8026172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026176:	f04f 0c00 	mov.w	ip, #0
 802617a:	4664      	mov	r4, ip
 802617c:	e6e5      	b.n	8025f4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802617e:	2300      	movs	r3, #0
 8026180:	469c      	mov	ip, r3
 8026182:	461a      	mov	r2, r3
 8026184:	461c      	mov	r4, r3
 8026186:	e707      	b.n	8025f98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8026188:	2300      	movs	r3, #0
 802618a:	461a      	mov	r2, r3
 802618c:	e704      	b.n	8025f98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802618e:	460b      	mov	r3, r1
 8026190:	460a      	mov	r2, r1
 8026192:	e701      	b.n	8025f98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8026194:	2500      	movs	r5, #0
 8026196:	46ab      	mov	fp, r5
 8026198:	e72f      	b.n	8025ffa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802619a:	2700      	movs	r7, #0
 802619c:	463d      	mov	r5, r7
 802619e:	4638      	mov	r0, r7
 80261a0:	46bb      	mov	fp, r7
 80261a2:	e754      	b.n	802604e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80261a4:	4677      	mov	r7, lr
 80261a6:	4675      	mov	r5, lr
 80261a8:	4670      	mov	r0, lr
 80261aa:	46f3      	mov	fp, lr
 80261ac:	e74f      	b.n	802604e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80261ae:	2700      	movs	r7, #0
 80261b0:	4638      	mov	r0, r7
 80261b2:	e74c      	b.n	802604e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80261b4:	460f      	mov	r7, r1
 80261b6:	4608      	mov	r0, r1
 80261b8:	e749      	b.n	802604e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080261bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261c0:	b093      	sub	sp, #76	; 0x4c
 80261c2:	9210      	str	r2, [sp, #64]	; 0x40
 80261c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80261c6:	9011      	str	r0, [sp, #68]	; 0x44
 80261c8:	910e      	str	r1, [sp, #56]	; 0x38
 80261ca:	6850      	ldr	r0, [r2, #4]
 80261cc:	9306      	str	r3, [sp, #24]
 80261ce:	6812      	ldr	r2, [r2, #0]
 80261d0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80261d4:	fb00 1303 	mla	r3, r0, r3, r1
 80261d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80261dc:	9307      	str	r3, [sp, #28]
 80261de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261e0:	681b      	ldr	r3, [r3, #0]
 80261e2:	9308      	str	r3, [sp, #32]
 80261e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261e6:	685b      	ldr	r3, [r3, #4]
 80261e8:	9309      	str	r3, [sp, #36]	; 0x24
 80261ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80261ec:	2b00      	cmp	r3, #0
 80261ee:	dc03      	bgt.n	80261f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80261f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	f340 83b6 	ble.w	8026964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80261f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80261fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026202:	1e48      	subs	r0, r1, #1
 8026204:	1e55      	subs	r5, r2, #1
 8026206:	9b06      	ldr	r3, [sp, #24]
 8026208:	2b00      	cmp	r3, #0
 802620a:	f340 8165 	ble.w	80264d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802620e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8026210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026212:	1436      	asrs	r6, r6, #16
 8026214:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026218:	d406      	bmi.n	8026228 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802621a:	4286      	cmp	r6, r0
 802621c:	da04      	bge.n	8026228 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802621e:	2b00      	cmp	r3, #0
 8026220:	db02      	blt.n	8026228 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026222:	42ab      	cmp	r3, r5
 8026224:	f2c0 8159 	blt.w	80264da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026228:	3601      	adds	r6, #1
 802622a:	f100 8146 	bmi.w	80264ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802622e:	42b1      	cmp	r1, r6
 8026230:	f2c0 8143 	blt.w	80264ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026234:	3301      	adds	r3, #1
 8026236:	f100 8140 	bmi.w	80264ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802623a:	429a      	cmp	r2, r3
 802623c:	f2c0 813d 	blt.w	80264ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026240:	9b06      	ldr	r3, [sp, #24]
 8026242:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026246:	9f07      	ldr	r7, [sp, #28]
 8026248:	930f      	str	r3, [sp, #60]	; 0x3c
 802624a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802624c:	2b00      	cmp	r3, #0
 802624e:	f340 8166 	ble.w	802651e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026252:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026254:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8026256:	1418      	asrs	r0, r3, #16
 8026258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802625a:	142d      	asrs	r5, r5, #16
 802625c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026260:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026262:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026268:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802626c:	f100 81f0 	bmi.w	8026650 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026270:	f102 3eff 	add.w	lr, r2, #4294967295
 8026274:	4575      	cmp	r5, lr
 8026276:	f280 81eb 	bge.w	8026650 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802627a:	2800      	cmp	r0, #0
 802627c:	f2c0 81e8 	blt.w	8026650 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026280:	f103 3eff 	add.w	lr, r3, #4294967295
 8026284:	4570      	cmp	r0, lr
 8026286:	f280 81e3 	bge.w	8026650 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802628a:	b212      	sxth	r2, r2
 802628c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802628e:	fa1f fe81 	uxth.w	lr, r1
 8026292:	fb00 5002 	mla	r0, r0, r2, r5
 8026296:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802629a:	eb03 0a00 	add.w	sl, r3, r0
 802629e:	f813 9000 	ldrb.w	r9, [r3, r0]
 80262a2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80262a6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80262aa:	b29b      	uxth	r3, r3
 80262ac:	f1bc 0f00 	cmp.w	ip, #0
 80262b0:	f000 817b 	beq.w	80265aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80262b4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80262b8:	eb0a 0b02 	add.w	fp, sl, r2
 80262bc:	fa1f fa8c 	uxth.w	sl, ip
 80262c0:	940a      	str	r4, [sp, #40]	; 0x28
 80262c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80262c6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80262ca:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80262ce:	eba5 050e 	sub.w	r5, r5, lr
 80262d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80262d4:	fa1f fa8a 	uxth.w	sl, sl
 80262d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80262da:	b2ad      	uxth	r5, r5
 80262dc:	eba3 030a 	sub.w	r3, r3, sl
 80262e0:	fb08 f505 	mul.w	r5, r8, r5
 80262e4:	b29b      	uxth	r3, r3
 80262e6:	fb09 5303 	mla	r3, r9, r3, r5
 80262ea:	fb0a 3304 	mla	r3, sl, r4, r3
 80262ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80262f0:	fb0e 3304 	mla	r3, lr, r4, r3
 80262f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80262f8:	2b00      	cmp	r3, #0
 80262fa:	f000 80d1 	beq.w	80264a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80262fe:	9c08      	ldr	r4, [sp, #32]
 8026300:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026304:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026308:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802630c:	f000 8152 	beq.w	80265b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026310:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026314:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026318:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802631c:	fb0a fe0e 	mul.w	lr, sl, lr
 8026320:	fb09 f000 	mul.w	r0, r9, r0
 8026324:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026328:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802632c:	f100 0b20 	add.w	fp, r0, #32
 8026330:	44ce      	add	lr, r9
 8026332:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026336:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802633a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802633e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026342:	ea4e 0909 	orr.w	r9, lr, r9
 8026346:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802634a:	8868      	ldrh	r0, [r5, #2]
 802634c:	d019      	beq.n	8026382 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802634e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026352:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026356:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802635a:	fb0a fe0e 	mul.w	lr, sl, lr
 802635e:	fb08 f800 	mul.w	r8, r8, r0
 8026362:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026366:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802636a:	f108 0b20 	add.w	fp, r8, #32
 802636e:	4486      	add	lr, r0
 8026370:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026374:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026378:	0a00      	lsrs	r0, r0, #8
 802637a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802637e:	ea4e 0000 	orr.w	r0, lr, r0
 8026382:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026386:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802638a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802638e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026392:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026396:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802639a:	ea4e 0909 	orr.w	r9, lr, r9
 802639e:	ea4a 0000 	orr.w	r0, sl, r0
 80263a2:	f1bc 0f00 	cmp.w	ip, #0
 80263a6:	f000 8107 	beq.w	80265b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80263aa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80263ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80263b0:	3a01      	subs	r2, #1
 80263b2:	2cff      	cmp	r4, #255	; 0xff
 80263b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80263b8:	f102 0202 	add.w	r2, r2, #2
 80263bc:	eb05 0e02 	add.w	lr, r5, r2
 80263c0:	5aaa      	ldrh	r2, [r5, r2]
 80263c2:	d018      	beq.n	80263f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80263c4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80263c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80263cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80263d0:	fb04 fa02 	mul.w	sl, r4, r2
 80263d4:	fb08 f805 	mul.w	r8, r8, r5
 80263d8:	f10a 0520 	add.w	r5, sl, #32
 80263dc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80263e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80263e4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80263e8:	4442      	add	r2, r8
 80263ea:	0a2d      	lsrs	r5, r5, #8
 80263ec:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80263f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80263f4:	432a      	orrs	r2, r5
 80263f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80263f8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80263fc:	2cff      	cmp	r4, #255	; 0xff
 80263fe:	d01a      	beq.n	8026436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026400:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026404:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026408:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802640c:	fb04 fa05 	mul.w	sl, r4, r5
 8026410:	fb08 f80e 	mul.w	r8, r8, lr
 8026414:	f10a 0e20 	add.w	lr, sl, #32
 8026418:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802641c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026420:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026424:	4445      	add	r5, r8
 8026426:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802642a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802642e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026432:	ea45 050e 	orr.w	r5, r5, lr
 8026436:	fb1c fe01 	smulbb	lr, ip, r1
 802643a:	f1cc 0810 	rsb	r8, ip, #16
 802643e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026442:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026446:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802644a:	eba8 0801 	sub.w	r8, r8, r1
 802644e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026452:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026456:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802645a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802645e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026462:	ea4a 0202 	orr.w	r2, sl, r2
 8026466:	4341      	muls	r1, r0
 8026468:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802646c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026470:	fb09 1108 	mla	r1, r9, r8, r1
 8026474:	ea4b 0505 	orr.w	r5, fp, r5
 8026478:	fb0c 1102 	mla	r1, ip, r2, r1
 802647c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026480:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026484:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026488:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802648c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026490:	ea42 0e0e 	orr.w	lr, r2, lr
 8026494:	fa1f f28e 	uxth.w	r2, lr
 8026498:	2bff      	cmp	r3, #255	; 0xff
 802649a:	f040 80a1 	bne.w	80265e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802649e:	803a      	strh	r2, [r7, #0]
 80264a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80264a2:	3702      	adds	r7, #2
 80264a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80264a6:	4413      	add	r3, r2
 80264a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80264aa:	931d      	str	r3, [sp, #116]	; 0x74
 80264ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80264ae:	441a      	add	r2, r3
 80264b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80264b2:	3b01      	subs	r3, #1
 80264b4:	921e      	str	r2, [sp, #120]	; 0x78
 80264b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80264b8:	e6c7      	b.n	802624a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80264ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80264bc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80264be:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80264c0:	4433      	add	r3, r6
 80264c2:	931d      	str	r3, [sp, #116]	; 0x74
 80264c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80264c6:	441c      	add	r4, r3
 80264c8:	9b06      	ldr	r3, [sp, #24]
 80264ca:	3b01      	subs	r3, #1
 80264cc:	941e      	str	r4, [sp, #120]	; 0x78
 80264ce:	9306      	str	r3, [sp, #24]
 80264d0:	9b07      	ldr	r3, [sp, #28]
 80264d2:	3302      	adds	r3, #2
 80264d4:	9307      	str	r3, [sp, #28]
 80264d6:	e696      	b.n	8026206 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80264d8:	d028      	beq.n	802652c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80264da:	9b06      	ldr	r3, [sp, #24]
 80264dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80264de:	3b01      	subs	r3, #1
 80264e0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80264e2:	fb00 5003 	mla	r0, r0, r3, r5
 80264e6:	1400      	asrs	r0, r0, #16
 80264e8:	f53f aeaa 	bmi.w	8026240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80264ec:	3901      	subs	r1, #1
 80264ee:	4288      	cmp	r0, r1
 80264f0:	f6bf aea6 	bge.w	8026240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80264f4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80264f6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80264f8:	fb01 0303 	mla	r3, r1, r3, r0
 80264fc:	141b      	asrs	r3, r3, #16
 80264fe:	f53f ae9f 	bmi.w	8026240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026502:	3a01      	subs	r2, #1
 8026504:	4293      	cmp	r3, r2
 8026506:	f6bf ae9b 	bge.w	8026240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802650a:	9b06      	ldr	r3, [sp, #24]
 802650c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026510:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026514:	930f      	str	r3, [sp, #60]	; 0x3c
 8026516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026518:	2b00      	cmp	r3, #0
 802651a:	f300 80b6 	bgt.w	802668a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802651e:	9b06      	ldr	r3, [sp, #24]
 8026520:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026524:	9b07      	ldr	r3, [sp, #28]
 8026526:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802652a:	9307      	str	r3, [sp, #28]
 802652c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802652e:	2b00      	cmp	r3, #0
 8026530:	f340 8218 	ble.w	8026964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8026534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026538:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802653a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802653e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026542:	eef0 6a62 	vmov.f32	s13, s5
 8026546:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802654a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802654e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026552:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8026556:	eef0 6a43 	vmov.f32	s13, s6
 802655a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802655e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8026562:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026566:	ee61 7a27 	vmul.f32	s15, s2, s15
 802656a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802656e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026572:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026576:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802657a:	ee12 2a90 	vmov	r2, s5
 802657e:	eef0 2a47 	vmov.f32	s5, s14
 8026582:	fb92 f3f3 	sdiv	r3, r2, r3
 8026586:	ee13 2a10 	vmov	r2, s6
 802658a:	931f      	str	r3, [sp, #124]	; 0x7c
 802658c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802658e:	eeb0 3a67 	vmov.f32	s6, s15
 8026592:	fb92 f3f3 	sdiv	r3, r2, r3
 8026596:	9320      	str	r3, [sp, #128]	; 0x80
 8026598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802659a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802659c:	3b01      	subs	r3, #1
 802659e:	930e      	str	r3, [sp, #56]	; 0x38
 80265a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80265a2:	bf08      	it	eq
 80265a4:	4613      	moveq	r3, r2
 80265a6:	9306      	str	r3, [sp, #24]
 80265a8:	e61f      	b.n	80261ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80265aa:	fb08 f505 	mul.w	r5, r8, r5
 80265ae:	fb09 5303 	mla	r3, r9, r3, r5
 80265b2:	e69f      	b.n	80262f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80265b4:	4681      	mov	r9, r0
 80265b6:	e6c6      	b.n	8026346 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80265b8:	f1c1 0210 	rsb	r2, r1, #16
 80265bc:	4341      	muls	r1, r0
 80265be:	fb09 1902 	mla	r9, r9, r2, r1
 80265c2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80265c6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80265ca:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80265ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80265d2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80265d6:	ea42 0909 	orr.w	r9, r2, r9
 80265da:	fa1f f289 	uxth.w	r2, r9
 80265de:	e75b      	b.n	8026498 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80265e0:	f8b7 c000 	ldrh.w	ip, [r7]
 80265e4:	43db      	mvns	r3, r3
 80265e6:	ea4f 202c 	mov.w	r0, ip, asr #8
 80265ea:	fa5f fe83 	uxtb.w	lr, r3
 80265ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80265f2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80265f6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80265fa:	fb00 f00e 	mul.w	r0, r0, lr
 80265fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026602:	b2db      	uxtb	r3, r3
 8026604:	1c41      	adds	r1, r0, #1
 8026606:	fb05 f50e 	mul.w	r5, r5, lr
 802660a:	fb03 f30e 	mul.w	r3, r3, lr
 802660e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026612:	1211      	asrs	r1, r2, #8
 8026614:	f021 0107 	bic.w	r1, r1, #7
 8026618:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802661c:	48d3      	ldr	r0, [pc, #844]	; (802696c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802661e:	b2c9      	uxtb	r1, r1
 8026620:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026624:	1c69      	adds	r1, r5, #1
 8026626:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802662a:	10d1      	asrs	r1, r2, #3
 802662c:	00d2      	lsls	r2, r2, #3
 802662e:	f021 0103 	bic.w	r1, r1, #3
 8026632:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026636:	00c9      	lsls	r1, r1, #3
 8026638:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802663c:	4301      	orrs	r1, r0
 802663e:	1c58      	adds	r0, r3, #1
 8026640:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026644:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026648:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802664c:	430a      	orrs	r2, r1
 802664e:	e726      	b.n	802649e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8026650:	f115 0e01 	adds.w	lr, r5, #1
 8026654:	f53f af24 	bmi.w	80264a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026658:	4572      	cmp	r2, lr
 802665a:	f6ff af21 	blt.w	80264a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802665e:	f110 0e01 	adds.w	lr, r0, #1
 8026662:	f53f af1d 	bmi.w	80264a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026666:	4573      	cmp	r3, lr
 8026668:	f6ff af1a 	blt.w	80264a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802666c:	b21b      	sxth	r3, r3
 802666e:	b212      	sxth	r2, r2
 8026670:	9301      	str	r3, [sp, #4]
 8026672:	9200      	str	r2, [sp, #0]
 8026674:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026678:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802667c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026680:	4639      	mov	r1, r7
 8026682:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026684:	f7ff fc22 	bl	8025ecc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026688:	e70a      	b.n	80264a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802668a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802668c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026690:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026692:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026696:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026698:	fa1f fc82 	uxth.w	ip, r2
 802669c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80266a2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80266a6:	141f      	asrs	r7, r3, #16
 80266a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80266aa:	141b      	asrs	r3, r3, #16
 80266ac:	fb01 3707 	mla	r7, r1, r7, r3
 80266b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266b2:	eb03 0a07 	add.w	sl, r3, r7
 80266b6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80266ba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80266be:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80266c2:	b29b      	uxth	r3, r3
 80266c4:	2d00      	cmp	r5, #0
 80266c6:	f000 80fe 	beq.w	80268c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80266ca:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80266ce:	eb0a 0b01 	add.w	fp, sl, r1
 80266d2:	fa1f fa85 	uxth.w	sl, r5
 80266d6:	940c      	str	r4, [sp, #48]	; 0x30
 80266d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80266dc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80266e0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80266e4:	eba0 000c 	sub.w	r0, r0, ip
 80266e8:	940d      	str	r4, [sp, #52]	; 0x34
 80266ea:	fa1f fa8a 	uxth.w	sl, sl
 80266ee:	b280      	uxth	r0, r0
 80266f0:	eba3 030a 	sub.w	r3, r3, sl
 80266f4:	fb08 f000 	mul.w	r0, r8, r0
 80266f8:	b29b      	uxth	r3, r3
 80266fa:	fb09 0303 	mla	r3, r9, r3, r0
 80266fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026700:	fb0a 3300 	mla	r3, sl, r0, r3
 8026704:	fb0c 3304 	mla	r3, ip, r4, r3
 8026708:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802670c:	2b00      	cmp	r3, #0
 802670e:	f000 80cc 	beq.w	80268aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026712:	9808      	ldr	r0, [sp, #32]
 8026714:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026718:	9c08      	ldr	r4, [sp, #32]
 802671a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802671e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026722:	f000 80d5 	beq.w	80268d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8026726:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802672a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802672e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026732:	fb0a fc0c 	mul.w	ip, sl, ip
 8026736:	fb09 f707 	mul.w	r7, r9, r7
 802673a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802673e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026742:	f107 0b20 	add.w	fp, r7, #32
 8026746:	44cc      	add	ip, r9
 8026748:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802674c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026750:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026754:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026758:	ea4c 0909 	orr.w	r9, ip, r9
 802675c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026760:	8847      	ldrh	r7, [r0, #2]
 8026762:	d019      	beq.n	8026798 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8026764:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026768:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802676c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026770:	fb0a fc0c 	mul.w	ip, sl, ip
 8026774:	fb08 f807 	mul.w	r8, r8, r7
 8026778:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802677c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026780:	f108 0b20 	add.w	fp, r8, #32
 8026784:	44bc      	add	ip, r7
 8026786:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802678a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802678e:	0a3f      	lsrs	r7, r7, #8
 8026790:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026794:	ea4c 0707 	orr.w	r7, ip, r7
 8026798:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802679c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80267a0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80267a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80267a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80267ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80267b0:	ea4c 0909 	orr.w	r9, ip, r9
 80267b4:	ea4a 0707 	orr.w	r7, sl, r7
 80267b8:	2d00      	cmp	r5, #0
 80267ba:	f000 808b 	beq.w	80268d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80267be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80267c2:	3901      	subs	r1, #1
 80267c4:	0049      	lsls	r1, r1, #1
 80267c6:	3102      	adds	r1, #2
 80267c8:	eb00 0c01 	add.w	ip, r0, r1
 80267cc:	5a41      	ldrh	r1, [r0, r1]
 80267ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80267d0:	28ff      	cmp	r0, #255	; 0xff
 80267d2:	d019      	beq.n	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80267d4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80267d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80267da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80267de:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80267e2:	fb04 fa01 	mul.w	sl, r4, r1
 80267e6:	fb08 f800 	mul.w	r8, r8, r0
 80267ea:	f10a 0020 	add.w	r0, sl, #32
 80267ee:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80267f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80267f6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80267fa:	4441      	add	r1, r8
 80267fc:	0a00      	lsrs	r0, r0, #8
 80267fe:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026802:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026806:	4301      	orrs	r1, r0
 8026808:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802680a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802680e:	2cff      	cmp	r4, #255	; 0xff
 8026810:	d01a      	beq.n	8026848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8026812:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026816:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802681a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802681e:	fb04 fa00 	mul.w	sl, r4, r0
 8026822:	fb08 f80c 	mul.w	r8, r8, ip
 8026826:	f10a 0c20 	add.w	ip, sl, #32
 802682a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802682e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026832:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026836:	4440      	add	r0, r8
 8026838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802683c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026840:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026844:	ea40 000c 	orr.w	r0, r0, ip
 8026848:	fb15 fc02 	smulbb	ip, r5, r2
 802684c:	f1c5 0810 	rsb	r8, r5, #16
 8026850:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026854:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026858:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802685c:	eba8 0802 	sub.w	r8, r8, r2
 8026860:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026864:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026868:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802686c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026870:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026874:	ea4a 0101 	orr.w	r1, sl, r1
 8026878:	437a      	muls	r2, r7
 802687a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802687e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026882:	fb09 2208 	mla	r2, r9, r8, r2
 8026886:	ea4b 0000 	orr.w	r0, fp, r0
 802688a:	fb05 2201 	mla	r2, r5, r1, r2
 802688e:	fb0c 2200 	mla	r2, ip, r0, r2
 8026892:	0d57      	lsrs	r7, r2, #21
 8026894:	0952      	lsrs	r2, r2, #5
 8026896:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802689a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802689e:	433a      	orrs	r2, r7
 80268a0:	2bff      	cmp	r3, #255	; 0xff
 80268a2:	b292      	uxth	r2, r2
 80268a4:	d127      	bne.n	80268f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80268a6:	f8ae 2000 	strh.w	r2, [lr]
 80268aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80268ac:	f10e 0e02 	add.w	lr, lr, #2
 80268b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80268b2:	4413      	add	r3, r2
 80268b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80268b6:	931d      	str	r3, [sp, #116]	; 0x74
 80268b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80268ba:	441a      	add	r2, r3
 80268bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80268be:	3b01      	subs	r3, #1
 80268c0:	921e      	str	r2, [sp, #120]	; 0x78
 80268c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80268c4:	e627      	b.n	8026516 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80268c6:	fb08 f000 	mul.w	r0, r8, r0
 80268ca:	fb09 0303 	mla	r3, r9, r3, r0
 80268ce:	e71b      	b.n	8026708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 80268d0:	46b9      	mov	r9, r7
 80268d2:	e743      	b.n	802675c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 80268d4:	f1c2 0110 	rsb	r1, r2, #16
 80268d8:	437a      	muls	r2, r7
 80268da:	fb09 2901 	mla	r9, r9, r1, r2
 80268de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80268e2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80268e6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80268ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80268ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80268f2:	4302      	orrs	r2, r0
 80268f4:	e7d4      	b.n	80268a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 80268f6:	f8be 7000 	ldrh.w	r7, [lr]
 80268fa:	43db      	mvns	r3, r3
 80268fc:	4c1b      	ldr	r4, [pc, #108]	; (802696c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80268fe:	1238      	asrs	r0, r7, #8
 8026900:	fa5f fc83 	uxtb.w	ip, r3
 8026904:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026908:	10fd      	asrs	r5, r7, #3
 802690a:	00fb      	lsls	r3, r7, #3
 802690c:	fb00 f00c 	mul.w	r0, r0, ip
 8026910:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026914:	b2db      	uxtb	r3, r3
 8026916:	fb05 f10c 	mul.w	r1, r5, ip
 802691a:	1c45      	adds	r5, r0, #1
 802691c:	fb03 f30c 	mul.w	r3, r3, ip
 8026920:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026924:	1215      	asrs	r5, r2, #8
 8026926:	f025 0507 	bic.w	r5, r5, #7
 802692a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802692e:	1c4d      	adds	r5, r1, #1
 8026930:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026934:	10d1      	asrs	r1, r2, #3
 8026936:	b2c0      	uxtb	r0, r0
 8026938:	f021 0103 	bic.w	r1, r1, #3
 802693c:	00d2      	lsls	r2, r2, #3
 802693e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026942:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026946:	00c9      	lsls	r1, r1, #3
 8026948:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802694c:	4308      	orrs	r0, r1
 802694e:	1c59      	adds	r1, r3, #1
 8026950:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026954:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026958:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802695c:	4318      	orrs	r0, r3
 802695e:	f8ae 0000 	strh.w	r0, [lr]
 8026962:	e7a2      	b.n	80268aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026964:	b013      	add	sp, #76	; 0x4c
 8026966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802696a:	bf00      	nop
 802696c:	fffff800 	.word	0xfffff800

08026970 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026974:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8026978:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802697c:	fb05 4c03 	mla	ip, r5, r3, r4
 8026980:	2d00      	cmp	r5, #0
 8026982:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8026986:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802698a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802698e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8026992:	8808      	ldrh	r0, [r1, #0]
 8026994:	f2c0 80a7 	blt.w	8026ae6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026998:	45aa      	cmp	sl, r5
 802699a:	f340 80a4 	ble.w	8026ae6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802699e:	2c00      	cmp	r4, #0
 80269a0:	f2c0 809f 	blt.w	8026ae2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80269a4:	42a3      	cmp	r3, r4
 80269a6:	f340 809c 	ble.w	8026ae2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80269aa:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80269ae:	1c62      	adds	r2, r4, #1
 80269b0:	f100 809c 	bmi.w	8026aec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80269b4:	4293      	cmp	r3, r2
 80269b6:	f340 8099 	ble.w	8026aec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80269ba:	f1b9 0f00 	cmp.w	r9, #0
 80269be:	f000 8095 	beq.w	8026aec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80269c2:	f8be c002 	ldrh.w	ip, [lr, #2]
 80269c6:	3501      	adds	r5, #1
 80269c8:	f100 8094 	bmi.w	8026af4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80269cc:	45aa      	cmp	sl, r5
 80269ce:	f340 8091 	ble.w	8026af4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80269d2:	2f00      	cmp	r7, #0
 80269d4:	f000 808e 	beq.w	8026af4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80269d8:	2c00      	cmp	r4, #0
 80269da:	f2c0 8089 	blt.w	8026af0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80269de:	42a3      	cmp	r3, r4
 80269e0:	f340 8086 	ble.w	8026af0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80269e4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80269e8:	3401      	adds	r4, #1
 80269ea:	f100 8086 	bmi.w	8026afa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80269ee:	42a3      	cmp	r3, r4
 80269f0:	f340 8083 	ble.w	8026afa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80269f4:	f1b9 0f00 	cmp.w	r9, #0
 80269f8:	d07f      	beq.n	8026afa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80269fa:	3301      	adds	r3, #1
 80269fc:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8026a00:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026a04:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8026a08:	fb19 fe07 	smulbb	lr, r9, r7
 8026a0c:	f1c7 0210 	rsb	r2, r7, #16
 8026a10:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026a14:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8026a18:	eba2 0209 	sub.w	r2, r2, r9
 8026a1c:	ea44 0808 	orr.w	r8, r4, r8
 8026a20:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8026a24:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026a28:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8026a2c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026a30:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8026a34:	ea44 0c0c 	orr.w	ip, r4, ip
 8026a38:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026a3c:	fb04 f40c 	mul.w	r4, r4, ip
 8026a40:	fb02 4808 	mla	r8, r2, r8, r4
 8026a44:	041a      	lsls	r2, r3, #16
 8026a46:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026a4a:	b2b4      	uxth	r4, r6
 8026a4c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026a50:	43f6      	mvns	r6, r6
 8026a52:	4313      	orrs	r3, r2
 8026a54:	042a      	lsls	r2, r5, #16
 8026a56:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026a5a:	b2f6      	uxtb	r6, r6
 8026a5c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026a60:	fb0e 8303 	mla	r3, lr, r3, r8
 8026a64:	432a      	orrs	r2, r5
 8026a66:	fb07 3202 	mla	r2, r7, r2, r3
 8026a6a:	10c7      	asrs	r7, r0, #3
 8026a6c:	0d53      	lsrs	r3, r2, #21
 8026a6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026a72:	0952      	lsrs	r2, r2, #5
 8026a74:	fb17 f706 	smulbb	r7, r7, r6
 8026a78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a7c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026a80:	431a      	orrs	r2, r3
 8026a82:	b293      	uxth	r3, r2
 8026a84:	1202      	asrs	r2, r0, #8
 8026a86:	121d      	asrs	r5, r3, #8
 8026a88:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026a8c:	00c0      	lsls	r0, r0, #3
 8026a8e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026a92:	fb12 f206 	smulbb	r2, r2, r6
 8026a96:	b2c0      	uxtb	r0, r0
 8026a98:	fb05 2504 	mla	r5, r5, r4, r2
 8026a9c:	10da      	asrs	r2, r3, #3
 8026a9e:	fb10 f006 	smulbb	r0, r0, r6
 8026aa2:	00db      	lsls	r3, r3, #3
 8026aa4:	b2ad      	uxth	r5, r5
 8026aa6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026aaa:	b2db      	uxtb	r3, r3
 8026aac:	fb02 7204 	mla	r2, r2, r4, r7
 8026ab0:	fb03 0004 	mla	r0, r3, r4, r0
 8026ab4:	1c6b      	adds	r3, r5, #1
 8026ab6:	b292      	uxth	r2, r2
 8026ab8:	b280      	uxth	r0, r0
 8026aba:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026abe:	1c43      	adds	r3, r0, #1
 8026ac0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026ac4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026ac8:	1c50      	adds	r0, r2, #1
 8026aca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026ace:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026ad2:	0952      	lsrs	r2, r2, #5
 8026ad4:	432b      	orrs	r3, r5
 8026ad6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026ada:	4313      	orrs	r3, r2
 8026adc:	800b      	strh	r3, [r1, #0]
 8026ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ae2:	4680      	mov	r8, r0
 8026ae4:	e763      	b.n	80269ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8026ae6:	4684      	mov	ip, r0
 8026ae8:	4680      	mov	r8, r0
 8026aea:	e76c      	b.n	80269c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026aec:	4684      	mov	ip, r0
 8026aee:	e76a      	b.n	80269c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026af0:	4605      	mov	r5, r0
 8026af2:	e779      	b.n	80269e8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026af4:	4603      	mov	r3, r0
 8026af6:	4605      	mov	r5, r0
 8026af8:	e782      	b.n	8026a00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8026afa:	4603      	mov	r3, r0
 8026afc:	e780      	b.n	8026a00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08026afe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b02:	b093      	sub	sp, #76	; 0x4c
 8026b04:	461d      	mov	r5, r3
 8026b06:	9210      	str	r2, [sp, #64]	; 0x40
 8026b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026b0a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8026b0e:	910a      	str	r1, [sp, #40]	; 0x28
 8026b10:	920b      	str	r2, [sp, #44]	; 0x2c
 8026b12:	6859      	ldr	r1, [r3, #4]
 8026b14:	681b      	ldr	r3, [r3, #0]
 8026b16:	9011      	str	r0, [sp, #68]	; 0x44
 8026b18:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8026b1c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026b20:	fb01 2707 	mla	r7, r1, r7, r2
 8026b24:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026b28:	9307      	str	r3, [sp, #28]
 8026b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b2c:	681b      	ldr	r3, [r3, #0]
 8026b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8026b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b32:	43db      	mvns	r3, r3
 8026b34:	b2db      	uxtb	r3, r3
 8026b36:	9308      	str	r3, [sp, #32]
 8026b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026b3a:	2b00      	cmp	r3, #0
 8026b3c:	dc03      	bgt.n	8026b46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026b3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026b40:	2b00      	cmp	r3, #0
 8026b42:	f340 8205 	ble.w	8026f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026b50:	1e48      	subs	r0, r1, #1
 8026b52:	f102 3cff 	add.w	ip, r2, #4294967295
 8026b56:	2d00      	cmp	r5, #0
 8026b58:	f340 80da 	ble.w	8026d10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026b5c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026b60:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026b64:	d406      	bmi.n	8026b74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b66:	4586      	cmp	lr, r0
 8026b68:	da04      	bge.n	8026b74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b6a:	2b00      	cmp	r3, #0
 8026b6c:	db02      	blt.n	8026b74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b6e:	4563      	cmp	r3, ip
 8026b70:	f2c0 80cf 	blt.w	8026d12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026b74:	f11e 0e01 	adds.w	lr, lr, #1
 8026b78:	f100 80c1 	bmi.w	8026cfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026b7c:	4571      	cmp	r1, lr
 8026b7e:	f2c0 80be 	blt.w	8026cfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026b82:	3301      	adds	r3, #1
 8026b84:	f100 80bb 	bmi.w	8026cfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026b88:	429a      	cmp	r2, r3
 8026b8a:	f2c0 80b8 	blt.w	8026cfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026b8e:	46a9      	mov	r9, r5
 8026b90:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026b94:	f1b9 0f00 	cmp.w	r9, #0
 8026b98:	f340 80d8 	ble.w	8026d4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026b9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b9e:	1421      	asrs	r1, r4, #16
 8026ba0:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026ba4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026ba8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026bac:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026bb0:	f100 8112 	bmi.w	8026dd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026bb4:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026bb8:	4551      	cmp	r1, sl
 8026bba:	f280 810d 	bge.w	8026dd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026bbe:	2800      	cmp	r0, #0
 8026bc0:	f2c0 810a 	blt.w	8026dd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026bc4:	f103 3aff 	add.w	sl, r3, #4294967295
 8026bc8:	4550      	cmp	r0, sl
 8026bca:	f280 8105 	bge.w	8026dd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026bce:	fa0f f38e 	sxth.w	r3, lr
 8026bd2:	fb00 1103 	mla	r1, r0, r3, r1
 8026bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026bd8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026bdc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026be0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026be4:	f1bc 0f00 	cmp.w	ip, #0
 8026be8:	d007      	beq.n	8026bfa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026bea:	005b      	lsls	r3, r3, #1
 8026bec:	eb0a 0003 	add.w	r0, sl, r3
 8026bf0:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026bf4:	930c      	str	r3, [sp, #48]	; 0x30
 8026bf6:	8843      	ldrh	r3, [r0, #2]
 8026bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8026bfa:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026bfe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026c02:	fb12 f30c 	smulbb	r3, r2, ip
 8026c06:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026c0a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026c0e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026c12:	10db      	asrs	r3, r3, #3
 8026c14:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c18:	ea40 000e 	orr.w	r0, r0, lr
 8026c1c:	f1cc 0e10 	rsb	lr, ip, #16
 8026c20:	ea4a 0101 	orr.w	r1, sl, r1
 8026c24:	9f08      	ldr	r7, [sp, #32]
 8026c26:	ebae 0e02 	sub.w	lr, lr, r2
 8026c2a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026c2e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026c32:	4351      	muls	r1, r2
 8026c34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026c36:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026c3c:	0410      	lsls	r0, r2, #16
 8026c3e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026c42:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026c46:	4310      	orrs	r0, r2
 8026c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c4a:	0412      	lsls	r2, r2, #16
 8026c4c:	fb03 e000 	mla	r0, r3, r0, lr
 8026c50:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026c54:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026c58:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026c5c:	ea42 020e 	orr.w	r2, r2, lr
 8026c60:	fb03 0302 	mla	r3, r3, r2, r0
 8026c64:	f8b8 0000 	ldrh.w	r0, [r8]
 8026c68:	0d5a      	lsrs	r2, r3, #21
 8026c6a:	095b      	lsrs	r3, r3, #5
 8026c6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c70:	1201      	asrs	r1, r0, #8
 8026c72:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026c76:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026c7a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026c7e:	00c0      	lsls	r0, r0, #3
 8026c80:	4313      	orrs	r3, r2
 8026c82:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026c86:	fb11 f107 	smulbb	r1, r1, r7
 8026c8a:	b2c0      	uxtb	r0, r0
 8026c8c:	b29b      	uxth	r3, r3
 8026c8e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026c92:	fb10 f007 	smulbb	r0, r0, r7
 8026c96:	fb1e fe07 	smulbb	lr, lr, r7
 8026c9a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026c9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026ca2:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026ca6:	10d9      	asrs	r1, r3, #3
 8026ca8:	00db      	lsls	r3, r3, #3
 8026caa:	fa1f fc8c 	uxth.w	ip, ip
 8026cae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026cb2:	b2db      	uxtb	r3, r3
 8026cb4:	fb01 e102 	mla	r1, r1, r2, lr
 8026cb8:	fb03 0302 	mla	r3, r3, r2, r0
 8026cbc:	b289      	uxth	r1, r1
 8026cbe:	b29a      	uxth	r2, r3
 8026cc0:	f10c 0301 	add.w	r3, ip, #1
 8026cc4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026cc8:	1c53      	adds	r3, r2, #1
 8026cca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026cce:	1c4a      	adds	r2, r1, #1
 8026cd0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026cd4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026cd8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026cdc:	0949      	lsrs	r1, r1, #5
 8026cde:	ea43 030c 	orr.w	r3, r3, ip
 8026ce2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026ce6:	430b      	orrs	r3, r1
 8026ce8:	f8a8 3000 	strh.w	r3, [r8]
 8026cec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026cee:	f108 0802 	add.w	r8, r8, #2
 8026cf2:	f109 39ff 	add.w	r9, r9, #4294967295
 8026cf6:	441c      	add	r4, r3
 8026cf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026cfa:	441e      	add	r6, r3
 8026cfc:	e74a      	b.n	8026b94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026cfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026d00:	3d01      	subs	r5, #1
 8026d02:	441c      	add	r4, r3
 8026d04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d06:	441e      	add	r6, r3
 8026d08:	9b07      	ldr	r3, [sp, #28]
 8026d0a:	3302      	adds	r3, #2
 8026d0c:	9307      	str	r3, [sp, #28]
 8026d0e:	e722      	b.n	8026b56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026d10:	d022      	beq.n	8026d58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026d12:	1e6b      	subs	r3, r5, #1
 8026d14:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026d16:	fb00 4003 	mla	r0, r0, r3, r4
 8026d1a:	1400      	asrs	r0, r0, #16
 8026d1c:	f53f af37 	bmi.w	8026b8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d20:	3901      	subs	r1, #1
 8026d22:	4288      	cmp	r0, r1
 8026d24:	f6bf af33 	bge.w	8026b8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026d2a:	fb01 6303 	mla	r3, r1, r3, r6
 8026d2e:	141b      	asrs	r3, r3, #16
 8026d30:	f53f af2d 	bmi.w	8026b8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d34:	3a01      	subs	r2, #1
 8026d36:	4293      	cmp	r3, r2
 8026d38:	f6bf af29 	bge.w	8026b8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d3c:	46a8      	mov	r8, r5
 8026d3e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026d42:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8026d46:	f1b8 0f00 	cmp.w	r8, #0
 8026d4a:	dc60      	bgt.n	8026e0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8026d4c:	9b07      	ldr	r3, [sp, #28]
 8026d4e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026d52:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026d56:	9307      	str	r3, [sp, #28]
 8026d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d5a:	2b00      	cmp	r3, #0
 8026d5c:	f340 80f8 	ble.w	8026f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026d64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026d66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026d6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026d6e:	eef0 6a62 	vmov.f32	s13, s5
 8026d72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026d7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d7e:	ee16 4a90 	vmov	r4, s13
 8026d82:	eef0 6a43 	vmov.f32	s13, s6
 8026d86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d8a:	ee16 6a90 	vmov	r6, s13
 8026d8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026d9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026d9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026da2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026da6:	ee12 2a90 	vmov	r2, s5
 8026daa:	eef0 2a47 	vmov.f32	s5, s14
 8026dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8026db2:	ee13 2a10 	vmov	r2, s6
 8026db6:	931f      	str	r3, [sp, #124]	; 0x7c
 8026db8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026dba:	eeb0 3a67 	vmov.f32	s6, s15
 8026dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dc2:	9320      	str	r3, [sp, #128]	; 0x80
 8026dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026dc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026dc8:	3b01      	subs	r3, #1
 8026dca:	930a      	str	r3, [sp, #40]	; 0x28
 8026dcc:	bf08      	it	eq
 8026dce:	4615      	moveq	r5, r2
 8026dd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026dd2:	bf18      	it	ne
 8026dd4:	461d      	movne	r5, r3
 8026dd6:	e6af      	b.n	8026b38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026dd8:	f111 0a01 	adds.w	sl, r1, #1
 8026ddc:	d486      	bmi.n	8026cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026dde:	45d6      	cmp	lr, sl
 8026de0:	db84      	blt.n	8026cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026de2:	f110 0a01 	adds.w	sl, r0, #1
 8026de6:	d481      	bmi.n	8026cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026de8:	4553      	cmp	r3, sl
 8026dea:	f6ff af7f 	blt.w	8026cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026dee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026df0:	b21b      	sxth	r3, r3
 8026df2:	9101      	str	r1, [sp, #4]
 8026df4:	4641      	mov	r1, r8
 8026df6:	9300      	str	r3, [sp, #0]
 8026df8:	fa0f f38e 	sxth.w	r3, lr
 8026dfc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026e00:	e9cd c704 	strd	ip, r7, [sp, #16]
 8026e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026e08:	f7ff fdb2 	bl	8026970 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8026e0c:	e76e      	b.n	8026cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026e0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e10:	1430      	asrs	r0, r6, #16
 8026e12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026e14:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026e18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e1c:	1423      	asrs	r3, r4, #16
 8026e1e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026e22:	fb01 3000 	mla	r0, r1, r0, r3
 8026e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e28:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026e2c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026e30:	8858      	ldrh	r0, [r3, #2]
 8026e32:	f1be 0f00 	cmp.w	lr, #0
 8026e36:	d00b      	beq.n	8026e50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8026e38:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026e3c:	3901      	subs	r1, #1
 8026e3e:	0049      	lsls	r1, r1, #1
 8026e40:	3102      	adds	r1, #2
 8026e42:	eb03 0b01 	add.w	fp, r3, r1
 8026e46:	5a5b      	ldrh	r3, [r3, r1]
 8026e48:	930e      	str	r3, [sp, #56]	; 0x38
 8026e4a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e50:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8026e54:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026e58:	fb12 f30e 	smulbb	r3, r2, lr
 8026e5c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026e60:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8026e64:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026e68:	10db      	asrs	r3, r3, #3
 8026e6a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026e6e:	ea41 010c 	orr.w	r1, r1, ip
 8026e72:	f1ce 0c10 	rsb	ip, lr, #16
 8026e76:	ea4b 0000 	orr.w	r0, fp, r0
 8026e7a:	9f08      	ldr	r7, [sp, #32]
 8026e7c:	ebac 0c02 	sub.w	ip, ip, r2
 8026e80:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026e84:	f108 38ff 	add.w	r8, r8, #4294967295
 8026e88:	4350      	muls	r0, r2
 8026e8a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026e90:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026e94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026e96:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026e9a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8026e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026ea0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026ea4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026ea8:	0412      	lsls	r2, r2, #16
 8026eaa:	ea4b 0101 	orr.w	r1, fp, r1
 8026eae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026eb2:	fb03 c101 	mla	r1, r3, r1, ip
 8026eb6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026eba:	4302      	orrs	r2, r0
 8026ebc:	fb03 1202 	mla	r2, r3, r2, r1
 8026ec0:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8026ec4:	0952      	lsrs	r2, r2, #5
 8026ec6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026eca:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8026ece:	f8b9 2000 	ldrh.w	r2, [r9]
 8026ed2:	ea4b 0303 	orr.w	r3, fp, r3
 8026ed6:	1211      	asrs	r1, r2, #8
 8026ed8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026edc:	b29b      	uxth	r3, r3
 8026ede:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026ee2:	00d2      	lsls	r2, r2, #3
 8026ee4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8026ee8:	fb11 f107 	smulbb	r1, r1, r7
 8026eec:	1218      	asrs	r0, r3, #8
 8026eee:	fb1c fc07 	smulbb	ip, ip, r7
 8026ef2:	b2d2      	uxtb	r2, r2
 8026ef4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026ef8:	fb12 f207 	smulbb	r2, r2, r7
 8026efc:	fb00 100a 	mla	r0, r0, sl, r1
 8026f00:	10d9      	asrs	r1, r3, #3
 8026f02:	00db      	lsls	r3, r3, #3
 8026f04:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026f08:	b280      	uxth	r0, r0
 8026f0a:	b2db      	uxtb	r3, r3
 8026f0c:	fb01 c10a 	mla	r1, r1, sl, ip
 8026f10:	fb03 230a 	mla	r3, r3, sl, r2
 8026f14:	1c42      	adds	r2, r0, #1
 8026f16:	b289      	uxth	r1, r1
 8026f18:	b29b      	uxth	r3, r3
 8026f1a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026f1e:	f101 0c01 	add.w	ip, r1, #1
 8026f22:	1c5a      	adds	r2, r3, #1
 8026f24:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026f28:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026f2c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026f32:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026f36:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026f3a:	441c      	add	r4, r3
 8026f3c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026f40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026f42:	4310      	orrs	r0, r2
 8026f44:	441e      	add	r6, r3
 8026f46:	ea40 000c 	orr.w	r0, r0, ip
 8026f4a:	f829 0b02 	strh.w	r0, [r9], #2
 8026f4e:	e6fa      	b.n	8026d46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026f50:	b013      	add	sp, #76	; 0x4c
 8026f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026f56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8026f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026f5a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8026f5e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8026f62:	fb0e 4703 	mla	r7, lr, r3, r4
 8026f66:	f1be 0f00 	cmp.w	lr, #0
 8026f6a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8026f6e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8026f72:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8026f76:	8808      	ldrh	r0, [r1, #0]
 8026f78:	db60      	blt.n	802703c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026f7a:	45f1      	cmp	r9, lr
 8026f7c:	dd5e      	ble.n	802703c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026f7e:	2c00      	cmp	r4, #0
 8026f80:	db5a      	blt.n	8027038 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8026f82:	42a3      	cmp	r3, r4
 8026f84:	dd58      	ble.n	8027038 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8026f86:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8026f8a:	1c62      	adds	r2, r4, #1
 8026f8c:	d459      	bmi.n	8027042 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026f8e:	4293      	cmp	r3, r2
 8026f90:	dd57      	ble.n	8027042 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026f92:	2d00      	cmp	r5, #0
 8026f94:	d055      	beq.n	8027042 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026f96:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8026f9a:	f11e 0e01 	adds.w	lr, lr, #1
 8026f9e:	d454      	bmi.n	802704a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026fa0:	45f1      	cmp	r9, lr
 8026fa2:	dd52      	ble.n	802704a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026fa4:	2e00      	cmp	r6, #0
 8026fa6:	d050      	beq.n	802704a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026fa8:	2c00      	cmp	r4, #0
 8026faa:	db4c      	blt.n	8027046 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026fac:	42a3      	cmp	r3, r4
 8026fae:	dd4a      	ble.n	8027046 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026fb0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8026fb4:	3401      	adds	r4, #1
 8026fb6:	d405      	bmi.n	8026fc4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026fb8:	42a3      	cmp	r3, r4
 8026fba:	dd03      	ble.n	8026fc4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026fbc:	b115      	cbz	r5, 8026fc4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026fbe:	3301      	adds	r3, #1
 8026fc0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8026fc4:	fb15 f406 	smulbb	r4, r5, r6
 8026fc8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8026fcc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8026fd0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026fd4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026fd8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8026fdc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026fe0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026fe4:	ea43 0c0c 	orr.w	ip, r3, ip
 8026fe8:	f1c6 0310 	rsb	r3, r6, #16
 8026fec:	ea4e 0707 	orr.w	r7, lr, r7
 8026ff0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8026ff4:	1b5b      	subs	r3, r3, r5
 8026ff6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026ffa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026ffe:	437d      	muls	r5, r7
 8027000:	fb03 5c0c 	mla	ip, r3, ip, r5
 8027004:	0403      	lsls	r3, r0, #16
 8027006:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802700a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802700e:	4318      	orrs	r0, r3
 8027010:	0413      	lsls	r3, r2, #16
 8027012:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027016:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802701a:	fb04 c000 	mla	r0, r4, r0, ip
 802701e:	4313      	orrs	r3, r2
 8027020:	fb06 0003 	mla	r0, r6, r3, r0
 8027024:	0d43      	lsrs	r3, r0, #21
 8027026:	0940      	lsrs	r0, r0, #5
 8027028:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802702c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027030:	4318      	orrs	r0, r3
 8027032:	8008      	strh	r0, [r1, #0]
 8027034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027038:	4684      	mov	ip, r0
 802703a:	e7a6      	b.n	8026f8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 802703c:	4607      	mov	r7, r0
 802703e:	4684      	mov	ip, r0
 8027040:	e7ab      	b.n	8026f9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027042:	4607      	mov	r7, r0
 8027044:	e7a9      	b.n	8026f9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027046:	4602      	mov	r2, r0
 8027048:	e7b4      	b.n	8026fb4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802704a:	4602      	mov	r2, r0
 802704c:	e7ba      	b.n	8026fc4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802704e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802704e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027052:	b08f      	sub	sp, #60	; 0x3c
 8027054:	461d      	mov	r5, r3
 8027056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027058:	9107      	str	r1, [sp, #28]
 802705a:	920c      	str	r2, [sp, #48]	; 0x30
 802705c:	6859      	ldr	r1, [r3, #4]
 802705e:	681b      	ldr	r3, [r3, #0]
 8027060:	900d      	str	r0, [sp, #52]	; 0x34
 8027062:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8027066:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802706a:	fb01 2707 	mla	r7, r1, r7, r2
 802706e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8027072:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027074:	f8d3 8000 	ldr.w	r8, [r3]
 8027078:	9b07      	ldr	r3, [sp, #28]
 802707a:	2b00      	cmp	r3, #0
 802707c:	dc03      	bgt.n	8027086 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802707e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027080:	2b00      	cmp	r3, #0
 8027082:	f340 8182 	ble.w	802738a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8027086:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027088:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802708c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027090:	1e48      	subs	r0, r1, #1
 8027092:	f102 3cff 	add.w	ip, r2, #4294967295
 8027096:	2d00      	cmp	r5, #0
 8027098:	f340 809b 	ble.w	80271d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802709c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80270a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80270a4:	d406      	bmi.n	80270b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80270a6:	4586      	cmp	lr, r0
 80270a8:	da04      	bge.n	80270b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80270aa:	2b00      	cmp	r3, #0
 80270ac:	db02      	blt.n	80270b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80270ae:	4563      	cmp	r3, ip
 80270b0:	f2c0 8090 	blt.w	80271d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80270b4:	f11e 0e01 	adds.w	lr, lr, #1
 80270b8:	f100 8084 	bmi.w	80271c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80270bc:	4571      	cmp	r1, lr
 80270be:	f2c0 8081 	blt.w	80271c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80270c2:	3301      	adds	r3, #1
 80270c4:	d47e      	bmi.n	80271c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80270c6:	429a      	cmp	r2, r3
 80270c8:	db7c      	blt.n	80271c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80270ca:	46aa      	mov	sl, r5
 80270cc:	46b9      	mov	r9, r7
 80270ce:	f1ba 0f00 	cmp.w	sl, #0
 80270d2:	f340 8099 	ble.w	8027208 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80270d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80270d8:	1421      	asrs	r1, r4, #16
 80270da:	ea4f 4026 	mov.w	r0, r6, asr #16
 80270de:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80270e2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80270e6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80270ea:	f100 80d1 	bmi.w	8027290 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80270ee:	f10e 3bff 	add.w	fp, lr, #4294967295
 80270f2:	4559      	cmp	r1, fp
 80270f4:	f280 80cc 	bge.w	8027290 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80270f8:	2800      	cmp	r0, #0
 80270fa:	f2c0 80c9 	blt.w	8027290 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80270fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8027102:	4558      	cmp	r0, fp
 8027104:	f280 80c4 	bge.w	8027290 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027108:	fa0f fe8e 	sxth.w	lr, lr
 802710c:	fb00 110e 	mla	r1, r0, lr, r1
 8027110:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027114:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8027118:	8841      	ldrh	r1, [r0, #2]
 802711a:	f1bc 0f00 	cmp.w	ip, #0
 802711e:	d00b      	beq.n	8027138 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8027120:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8027124:	3b01      	subs	r3, #1
 8027126:	005b      	lsls	r3, r3, #1
 8027128:	3302      	adds	r3, #2
 802712a:	eb00 0e03 	add.w	lr, r0, r3
 802712e:	5ac3      	ldrh	r3, [r0, r3]
 8027130:	9308      	str	r3, [sp, #32]
 8027132:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8027136:	9309      	str	r3, [sp, #36]	; 0x24
 8027138:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802713c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027140:	fb12 f30c 	smulbb	r3, r2, ip
 8027144:	f1cc 0e10 	rsb	lr, ip, #16
 8027148:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802714c:	10db      	asrs	r3, r3, #3
 802714e:	ebae 0e02 	sub.w	lr, lr, r2
 8027152:	ea40 000b 	orr.w	r0, r0, fp
 8027156:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802715a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802715e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027162:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027166:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802716a:	ea4b 0101 	orr.w	r1, fp, r1
 802716e:	4351      	muls	r1, r2
 8027170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027172:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027176:	0410      	lsls	r0, r2, #16
 8027178:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802717c:	9908      	ldr	r1, [sp, #32]
 802717e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027182:	4310      	orrs	r0, r2
 8027184:	9a08      	ldr	r2, [sp, #32]
 8027186:	0412      	lsls	r2, r2, #16
 8027188:	fb03 e000 	mla	r0, r3, r0, lr
 802718c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027190:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027194:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027198:	ea42 020e 	orr.w	r2, r2, lr
 802719c:	fb03 0302 	mla	r3, r3, r2, r0
 80271a0:	0d5a      	lsrs	r2, r3, #21
 80271a2:	095b      	lsrs	r3, r3, #5
 80271a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80271a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80271ac:	4313      	orrs	r3, r2
 80271ae:	f8a9 3000 	strh.w	r3, [r9]
 80271b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80271b4:	f109 0902 	add.w	r9, r9, #2
 80271b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80271bc:	441c      	add	r4, r3
 80271be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80271c0:	441e      	add	r6, r3
 80271c2:	e784      	b.n	80270ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80271c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80271c6:	3d01      	subs	r5, #1
 80271c8:	3702      	adds	r7, #2
 80271ca:	441c      	add	r4, r3
 80271cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80271ce:	441e      	add	r6, r3
 80271d0:	e761      	b.n	8027096 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80271d2:	d01d      	beq.n	8027210 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80271d4:	1e6b      	subs	r3, r5, #1
 80271d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80271d8:	fb00 4003 	mla	r0, r0, r3, r4
 80271dc:	1400      	asrs	r0, r0, #16
 80271de:	f53f af74 	bmi.w	80270ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80271e2:	3901      	subs	r1, #1
 80271e4:	4288      	cmp	r0, r1
 80271e6:	f6bf af70 	bge.w	80270ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80271ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80271ec:	fb01 6303 	mla	r3, r1, r3, r6
 80271f0:	141b      	asrs	r3, r3, #16
 80271f2:	f53f af6a 	bmi.w	80270ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80271f6:	3a01      	subs	r2, #1
 80271f8:	4293      	cmp	r3, r2
 80271fa:	f6bf af66 	bge.w	80270ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80271fe:	46a9      	mov	r9, r5
 8027200:	46ba      	mov	sl, r7
 8027202:	f1b9 0f00 	cmp.w	r9, #0
 8027206:	dc5b      	bgt.n	80272c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027208:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802720c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027210:	9b07      	ldr	r3, [sp, #28]
 8027212:	2b00      	cmp	r3, #0
 8027214:	f340 80b9 	ble.w	802738a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8027218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802721c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802721e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027222:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027226:	eef0 6a62 	vmov.f32	s13, s5
 802722a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802722e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027236:	ee16 4a90 	vmov	r4, s13
 802723a:	eef0 6a43 	vmov.f32	s13, s6
 802723e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027242:	ee16 6a90 	vmov	r6, s13
 8027246:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802724a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802724e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027252:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027256:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802725a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802725e:	ee12 2a90 	vmov	r2, s5
 8027262:	eef0 2a47 	vmov.f32	s5, s14
 8027266:	fb92 f3f3 	sdiv	r3, r2, r3
 802726a:	ee13 2a10 	vmov	r2, s6
 802726e:	931b      	str	r3, [sp, #108]	; 0x6c
 8027270:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027272:	eeb0 3a67 	vmov.f32	s6, s15
 8027276:	fb92 f3f3 	sdiv	r3, r2, r3
 802727a:	931c      	str	r3, [sp, #112]	; 0x70
 802727c:	9b07      	ldr	r3, [sp, #28]
 802727e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027280:	3b01      	subs	r3, #1
 8027282:	9307      	str	r3, [sp, #28]
 8027284:	bf08      	it	eq
 8027286:	4615      	moveq	r5, r2
 8027288:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802728a:	bf18      	it	ne
 802728c:	461d      	movne	r5, r3
 802728e:	e6f3      	b.n	8027078 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8027290:	f111 0b01 	adds.w	fp, r1, #1
 8027294:	d48d      	bmi.n	80271b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027296:	45de      	cmp	lr, fp
 8027298:	db8b      	blt.n	80271b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802729a:	f110 0b01 	adds.w	fp, r0, #1
 802729e:	d488      	bmi.n	80271b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80272a0:	455b      	cmp	r3, fp
 80272a2:	db86      	blt.n	80271b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80272a4:	b21b      	sxth	r3, r3
 80272a6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80272aa:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80272ae:	9300      	str	r3, [sp, #0]
 80272b0:	4642      	mov	r2, r8
 80272b2:	fa0f f38e 	sxth.w	r3, lr
 80272b6:	4649      	mov	r1, r9
 80272b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80272ba:	f7ff fe4c 	bl	8026f56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80272be:	e778      	b.n	80271b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80272c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80272c2:	1420      	asrs	r0, r4, #16
 80272c4:	1431      	asrs	r1, r6, #16
 80272c6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80272ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80272ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80272d2:	fb03 0101 	mla	r1, r3, r1, r0
 80272d6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80272da:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80272de:	8841      	ldrh	r1, [r0, #2]
 80272e0:	f1be 0f00 	cmp.w	lr, #0
 80272e4:	d00b      	beq.n	80272fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80272e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80272ea:	3b01      	subs	r3, #1
 80272ec:	005b      	lsls	r3, r3, #1
 80272ee:	3302      	adds	r3, #2
 80272f0:	eb00 0b03 	add.w	fp, r0, r3
 80272f4:	5ac3      	ldrh	r3, [r0, r3]
 80272f6:	930a      	str	r3, [sp, #40]	; 0x28
 80272f8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80272fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80272fe:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027302:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027306:	fb12 f30e 	smulbb	r3, r2, lr
 802730a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802730e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027312:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027316:	10db      	asrs	r3, r3, #3
 8027318:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802731c:	ea40 000c 	orr.w	r0, r0, ip
 8027320:	f1ce 0c10 	rsb	ip, lr, #16
 8027324:	ea4b 0101 	orr.w	r1, fp, r1
 8027328:	f109 39ff 	add.w	r9, r9, #4294967295
 802732c:	ebac 0c02 	sub.w	ip, ip, r2
 8027330:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027334:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027338:	4351      	muls	r1, r2
 802733a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802733c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027340:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027342:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027346:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802734a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802734c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027350:	0412      	lsls	r2, r2, #16
 8027352:	ea4b 0000 	orr.w	r0, fp, r0
 8027356:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802735a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802735e:	fb03 c000 	mla	r0, r3, r0, ip
 8027362:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027366:	ea42 0b0b 	orr.w	fp, r2, fp
 802736a:	fb03 000b 	mla	r0, r3, fp, r0
 802736e:	0d43      	lsrs	r3, r0, #21
 8027370:	0940      	lsrs	r0, r0, #5
 8027372:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027376:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802737a:	4318      	orrs	r0, r3
 802737c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802737e:	441c      	add	r4, r3
 8027380:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027382:	f82a 0b02 	strh.w	r0, [sl], #2
 8027386:	441e      	add	r6, r3
 8027388:	e73b      	b.n	8027202 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802738a:	b00f      	add	sp, #60	; 0x3c
 802738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027390 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8027390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027394:	b085      	sub	sp, #20
 8027396:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802739a:	9102      	str	r1, [sp, #8]
 802739c:	2c00      	cmp	r4, #0
 802739e:	fb04 7103 	mla	r1, r4, r3, r7
 80273a2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80273a6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80273aa:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80273ae:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80273b2:	f2c0 811b 	blt.w	80275ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80273b6:	45a6      	cmp	lr, r4
 80273b8:	f340 8118 	ble.w	80275ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80273bc:	2f00      	cmp	r7, #0
 80273be:	f2c0 8113 	blt.w	80275e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80273c2:	42bb      	cmp	r3, r7
 80273c4:	f340 8110 	ble.w	80275e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80273c8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80273cc:	1c7a      	adds	r2, r7, #1
 80273ce:	f100 8110 	bmi.w	80275f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80273d2:	4293      	cmp	r3, r2
 80273d4:	f340 810d 	ble.w	80275f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80273d8:	2e00      	cmp	r6, #0
 80273da:	f000 810c 	beq.w	80275f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80273de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80273e2:	3401      	adds	r4, #1
 80273e4:	f100 810b 	bmi.w	80275fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80273e8:	45a6      	cmp	lr, r4
 80273ea:	f340 8108 	ble.w	80275fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80273ee:	2800      	cmp	r0, #0
 80273f0:	f000 8108 	beq.w	8027604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80273f4:	2f00      	cmp	r7, #0
 80273f6:	f2c0 8100 	blt.w	80275fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80273fa:	42bb      	cmp	r3, r7
 80273fc:	f340 80fd 	ble.w	80275fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8027400:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027404:	3701      	adds	r7, #1
 8027406:	f100 8100 	bmi.w	802760a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802740a:	42bb      	cmp	r3, r7
 802740c:	f340 80fd 	ble.w	802760a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8027410:	2e00      	cmp	r6, #0
 8027412:	f000 80fc 	beq.w	802760e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8027416:	3301      	adds	r3, #1
 8027418:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802741c:	b2b6      	uxth	r6, r6
 802741e:	b280      	uxth	r0, r0
 8027420:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027424:	fb00 fe06 	mul.w	lr, r0, r6
 8027428:	0136      	lsls	r6, r6, #4
 802742a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802742e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027432:	eba6 070e 	sub.w	r7, r6, lr
 8027436:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802743a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802743e:	b280      	uxth	r0, r0
 8027440:	b2bf      	uxth	r7, r7
 8027442:	1a1b      	subs	r3, r3, r0
 8027444:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027448:	fb0a f607 	mul.w	r6, sl, r7
 802744c:	b29b      	uxth	r3, r3
 802744e:	fb0b 6603 	mla	r6, fp, r3, r6
 8027452:	fb00 6609 	mla	r6, r0, r9, r6
 8027456:	fb0e 6608 	mla	r6, lr, r8, r6
 802745a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802745e:	9600      	str	r6, [sp, #0]
 8027460:	2e00      	cmp	r6, #0
 8027462:	f000 80be 	beq.w	80275e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8027466:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802746a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802746e:	9e02      	ldr	r6, [sp, #8]
 8027470:	fb0b fc0c 	mul.w	ip, fp, ip
 8027474:	fb0b f505 	mul.w	r5, fp, r5
 8027478:	8836      	ldrh	r6, [r6, #0]
 802747a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802747e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027482:	9501      	str	r5, [sp, #4]
 8027484:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027488:	44dc      	add	ip, fp
 802748a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802748e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027492:	9503      	str	r5, [sp, #12]
 8027494:	9d01      	ldr	r5, [sp, #4]
 8027496:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802749a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802749e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80274a2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80274a6:	fb0a fc0c 	mul.w	ip, sl, ip
 80274aa:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80274ae:	fb0a fa01 	mul.w	sl, sl, r1
 80274b2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80274b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80274ba:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80274be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80274c2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80274c6:	4465      	add	r5, ip
 80274c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80274cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80274d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80274d4:	fb09 fc0c 	mul.w	ip, r9, ip
 80274d8:	0a2d      	lsrs	r5, r5, #8
 80274da:	fb09 f904 	mul.w	r9, r9, r4
 80274de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80274e2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80274e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80274ea:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80274ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80274f2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80274f6:	437d      	muls	r5, r7
 80274f8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80274fc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027500:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027504:	4461      	add	r1, ip
 8027506:	fb08 f404 	mul.w	r4, r8, r4
 802750a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802750e:	fb08 f802 	mul.w	r8, r8, r2
 8027512:	0a09      	lsrs	r1, r1, #8
 8027514:	0a22      	lsrs	r2, r4, #8
 8027516:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802751a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802751e:	fb07 f70a 	mul.w	r7, r7, sl
 8027522:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027526:	4414      	add	r4, r2
 8027528:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802752c:	0a24      	lsrs	r4, r4, #8
 802752e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027532:	9a03      	ldr	r2, [sp, #12]
 8027534:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027538:	fb02 5503 	mla	r5, r2, r3, r5
 802753c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027540:	9a00      	ldr	r2, [sp, #0]
 8027542:	fb04 540e 	mla	r4, r4, lr, r5
 8027546:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802754a:	1235      	asrs	r5, r6, #8
 802754c:	fb01 4100 	mla	r1, r1, r0, r4
 8027550:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027554:	0a09      	lsrs	r1, r1, #8
 8027556:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802755a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802755e:	fb03 7101 	mla	r1, r3, r1, r7
 8027562:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027566:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802756a:	fb00 e101 	mla	r1, r0, r1, lr
 802756e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8027572:	b287      	uxth	r7, r0
 8027574:	0a09      	lsrs	r1, r1, #8
 8027576:	437a      	muls	r2, r7
 8027578:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802757c:	1c53      	adds	r3, r2, #1
 802757e:	4321      	orrs	r1, r4
 8027580:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027584:	0c0a      	lsrs	r2, r1, #16
 8027586:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802758a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802758e:	b2c8      	uxtb	r0, r1
 8027590:	fb12 f207 	smulbb	r2, r2, r7
 8027594:	fb14 f407 	smulbb	r4, r4, r7
 8027598:	b2db      	uxtb	r3, r3
 802759a:	fb10 f007 	smulbb	r0, r0, r7
 802759e:	fb05 2503 	mla	r5, r5, r3, r2
 80275a2:	10f2      	asrs	r2, r6, #3
 80275a4:	00f6      	lsls	r6, r6, #3
 80275a6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80275aa:	b2ad      	uxth	r5, r5
 80275ac:	b2f6      	uxtb	r6, r6
 80275ae:	fb02 4203 	mla	r2, r2, r3, r4
 80275b2:	fb06 0303 	mla	r3, r6, r3, r0
 80275b6:	b294      	uxth	r4, r2
 80275b8:	b299      	uxth	r1, r3
 80275ba:	1c6b      	adds	r3, r5, #1
 80275bc:	1c62      	adds	r2, r4, #1
 80275be:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80275c2:	1c4b      	adds	r3, r1, #1
 80275c4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80275c8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80275cc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80275d0:	0952      	lsrs	r2, r2, #5
 80275d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80275d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80275da:	432b      	orrs	r3, r5
 80275dc:	4313      	orrs	r3, r2
 80275de:	9a02      	ldr	r2, [sp, #8]
 80275e0:	8013      	strh	r3, [r2, #0]
 80275e2:	b005      	add	sp, #20
 80275e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275e8:	2500      	movs	r5, #0
 80275ea:	e6ef      	b.n	80273cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80275ec:	2100      	movs	r1, #0
 80275ee:	460d      	mov	r5, r1
 80275f0:	e6f7      	b.n	80273e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80275f2:	2100      	movs	r1, #0
 80275f4:	e6f5      	b.n	80273e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80275f6:	4631      	mov	r1, r6
 80275f8:	e6f3      	b.n	80273e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80275fa:	2400      	movs	r4, #0
 80275fc:	e702      	b.n	8027404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80275fe:	2200      	movs	r2, #0
 8027600:	4614      	mov	r4, r2
 8027602:	e70b      	b.n	802741c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8027604:	4602      	mov	r2, r0
 8027606:	4604      	mov	r4, r0
 8027608:	e708      	b.n	802741c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802760a:	2200      	movs	r2, #0
 802760c:	e706      	b.n	802741c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802760e:	4632      	mov	r2, r6
 8027610:	e704      	b.n	802741c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08027612 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027616:	b09d      	sub	sp, #116	; 0x74
 8027618:	9219      	str	r2, [sp, #100]	; 0x64
 802761a:	9307      	str	r3, [sp, #28]
 802761c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802761e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8027622:	901b      	str	r0, [sp, #108]	; 0x6c
 8027624:	931a      	str	r3, [sp, #104]	; 0x68
 8027626:	6850      	ldr	r0, [r2, #4]
 8027628:	9117      	str	r1, [sp, #92]	; 0x5c
 802762a:	6812      	ldr	r2, [r2, #0]
 802762c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8027630:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8027634:	fb00 1303 	mla	r3, r0, r3, r1
 8027638:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802763c:	930a      	str	r3, [sp, #40]	; 0x28
 802763e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027640:	681b      	ldr	r3, [r3, #0]
 8027642:	9310      	str	r3, [sp, #64]	; 0x40
 8027644:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027648:	930b      	str	r3, [sp, #44]	; 0x2c
 802764a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802764c:	2b00      	cmp	r3, #0
 802764e:	dc03      	bgt.n	8027658 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8027650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027652:	2b00      	cmp	r3, #0
 8027654:	f340 8375 	ble.w	8027d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027658:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802765a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802765e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027662:	1e48      	subs	r0, r1, #1
 8027664:	1e57      	subs	r7, r2, #1
 8027666:	9b07      	ldr	r3, [sp, #28]
 8027668:	2b00      	cmp	r3, #0
 802766a:	f340 818e 	ble.w	802798a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802766e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027672:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027676:	d406      	bmi.n	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027678:	4584      	cmp	ip, r0
 802767a:	da04      	bge.n	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802767c:	2b00      	cmp	r3, #0
 802767e:	db02      	blt.n	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027680:	42bb      	cmp	r3, r7
 8027682:	f2c0 8183 	blt.w	802798c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027686:	f11c 0c01 	adds.w	ip, ip, #1
 802768a:	f100 8173 	bmi.w	8027974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802768e:	4561      	cmp	r1, ip
 8027690:	f2c0 8170 	blt.w	8027974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027694:	3301      	adds	r3, #1
 8027696:	f100 816d 	bmi.w	8027974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802769a:	429a      	cmp	r2, r3
 802769c:	f2c0 816a 	blt.w	8027974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80276a0:	9b07      	ldr	r3, [sp, #28]
 80276a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80276a4:	9318      	str	r3, [sp, #96]	; 0x60
 80276a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80276a8:	2b00      	cmp	r3, #0
 80276aa:	f340 818c 	ble.w	80279c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80276ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80276b0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80276b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80276b6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80276ba:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80276be:	1422      	asrs	r2, r4, #16
 80276c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80276c4:	689b      	ldr	r3, [r3, #8]
 80276c6:	f100 81cd 	bmi.w	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80276ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80276ce:	4542      	cmp	r2, r8
 80276d0:	f280 81c8 	bge.w	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80276d4:	f1bc 0f00 	cmp.w	ip, #0
 80276d8:	f2c0 81c4 	blt.w	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80276dc:	f10e 38ff 	add.w	r8, lr, #4294967295
 80276e0:	45c4      	cmp	ip, r8
 80276e2:	f280 81bf 	bge.w	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80276e6:	b21b      	sxth	r3, r3
 80276e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80276ea:	fb0c 2203 	mla	r2, ip, r3, r2
 80276ee:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80276f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80276f6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80276fa:	2800      	cmp	r0, #0
 80276fc:	f000 81a9 	beq.w	8027a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8027700:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027704:	950c      	str	r5, [sp, #48]	; 0x30
 8027706:	0e2d      	lsrs	r5, r5, #24
 8027708:	9513      	str	r5, [sp, #76]	; 0x4c
 802770a:	b181      	cbz	r1, 802772e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802770c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027710:	3b01      	subs	r3, #1
 8027712:	009b      	lsls	r3, r3, #2
 8027714:	3304      	adds	r3, #4
 8027716:	eb08 0c03 	add.w	ip, r8, r3
 802771a:	f858 3003 	ldr.w	r3, [r8, r3]
 802771e:	9308      	str	r3, [sp, #32]
 8027720:	0e1b      	lsrs	r3, r3, #24
 8027722:	9311      	str	r3, [sp, #68]	; 0x44
 8027724:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027728:	930d      	str	r3, [sp, #52]	; 0x34
 802772a:	0e1b      	lsrs	r3, r3, #24
 802772c:	9314      	str	r3, [sp, #80]	; 0x50
 802772e:	b280      	uxth	r0, r0
 8027730:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027732:	b289      	uxth	r1, r1
 8027734:	fb00 f901 	mul.w	r9, r0, r1
 8027738:	0100      	lsls	r0, r0, #4
 802773a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802773e:	eba0 0809 	sub.w	r8, r0, r9
 8027742:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027746:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027748:	b289      	uxth	r1, r1
 802774a:	fa1f f888 	uxth.w	r8, r8
 802774e:	1a5b      	subs	r3, r3, r1
 8027750:	fb08 f000 	mul.w	r0, r8, r0
 8027754:	b29b      	uxth	r3, r3
 8027756:	fb03 000e 	mla	r0, r3, lr, r0
 802775a:	fb01 0005 	mla	r0, r1, r5, r0
 802775e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027760:	fb09 0005 	mla	r0, r9, r5, r0
 8027764:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027768:	2800      	cmp	r0, #0
 802776a:	f000 80fa 	beq.w	8027962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802776e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027772:	d01b      	beq.n	80277ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027774:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027778:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802777c:	fb0e fa0a 	mul.w	sl, lr, sl
 8027780:	fb0e fe02 	mul.w	lr, lr, r2
 8027784:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027788:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802778c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027790:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027794:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027798:	4452      	add	r2, sl
 802779a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802779e:	0a12      	lsrs	r2, r2, #8
 80277a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80277a4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80277a8:	ea42 020c 	orr.w	r2, r2, ip
 80277ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80277ae:	2dff      	cmp	r5, #255	; 0xff
 80277b0:	d021      	beq.n	80277f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80277b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80277b4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80277b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80277ba:	fb05 fb0b 	mul.w	fp, r5, fp
 80277be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80277c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80277c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80277c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80277ca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80277ce:	fb05 fa0a 	mul.w	sl, r5, sl
 80277d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80277d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80277da:	44de      	add	lr, fp
 80277dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80277e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80277e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80277e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80277ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80277f0:	ea4e 050a 	orr.w	r5, lr, sl
 80277f4:	950c      	str	r5, [sp, #48]	; 0x30
 80277f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80277f8:	2dff      	cmp	r5, #255	; 0xff
 80277fa:	d021      	beq.n	8027840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80277fc:	9d08      	ldr	r5, [sp, #32]
 80277fe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027802:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027804:	fb05 fb0b 	mul.w	fp, r5, fp
 8027808:	9d08      	ldr	r5, [sp, #32]
 802780a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802780e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027810:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027814:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027818:	fb05 fa0a 	mul.w	sl, r5, sl
 802781c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027820:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027824:	44de      	add	lr, fp
 8027826:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802782a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802782e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027832:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027836:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802783a:	ea4e 050a 	orr.w	r5, lr, sl
 802783e:	9508      	str	r5, [sp, #32]
 8027840:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027842:	2dff      	cmp	r5, #255	; 0xff
 8027844:	d021      	beq.n	802788a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8027846:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027848:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802784c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802784e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027852:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027854:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027858:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802785a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802785e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027862:	fb05 fa0a 	mul.w	sl, r5, sl
 8027866:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802786a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802786e:	44de      	add	lr, fp
 8027870:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027874:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027878:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802787c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027880:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027884:	ea4e 050a 	orr.w	r5, lr, sl
 8027888:	950d      	str	r5, [sp, #52]	; 0x34
 802788a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802788c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027890:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027894:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027898:	9d08      	ldr	r5, [sp, #32]
 802789a:	fb08 fc0c 	mul.w	ip, r8, ip
 802789e:	fb03 cc0e 	mla	ip, r3, lr, ip
 80278a2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80278a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80278a8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80278ac:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80278b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80278b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80278b6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80278ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80278bc:	fb08 f80e 	mul.w	r8, r8, lr
 80278c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80278c4:	fb03 8202 	mla	r2, r3, r2, r8
 80278c8:	9b08      	ldr	r3, [sp, #32]
 80278ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80278ce:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80278d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80278d4:	fb01 220a 	mla	r2, r1, sl, r2
 80278d8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80278dc:	883b      	ldrh	r3, [r7, #0]
 80278de:	fb09 2901 	mla	r9, r9, r1, r2
 80278e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80278e4:	1219      	asrs	r1, r3, #8
 80278e6:	4342      	muls	r2, r0
 80278e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80278ec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80278f0:	1c50      	adds	r0, r2, #1
 80278f2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80278f6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80278fa:	ea4c 0c09 	orr.w	ip, ip, r9
 80278fe:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027902:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8027906:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802790a:	fa5f fc8c 	uxtb.w	ip, ip
 802790e:	fb12 f205 	smulbb	r2, r2, r5
 8027912:	b2c0      	uxtb	r0, r0
 8027914:	fb1c fc05 	smulbb	ip, ip, r5
 8027918:	fb01 2100 	mla	r1, r1, r0, r2
 802791c:	10da      	asrs	r2, r3, #3
 802791e:	fb1e fe05 	smulbb	lr, lr, r5
 8027922:	00db      	lsls	r3, r3, #3
 8027924:	b289      	uxth	r1, r1
 8027926:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802792a:	b2db      	uxtb	r3, r3
 802792c:	fb02 e200 	mla	r2, r2, r0, lr
 8027930:	fb03 c300 	mla	r3, r3, r0, ip
 8027934:	b292      	uxth	r2, r2
 8027936:	fa1f fc83 	uxth.w	ip, r3
 802793a:	1c4b      	adds	r3, r1, #1
 802793c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027940:	f10c 0301 	add.w	r3, ip, #1
 8027944:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027948:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802794c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027950:	430b      	orrs	r3, r1
 8027952:	1c51      	adds	r1, r2, #1
 8027954:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027958:	0952      	lsrs	r2, r2, #5
 802795a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802795e:	4313      	orrs	r3, r2
 8027960:	803b      	strh	r3, [r7, #0]
 8027962:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027964:	3702      	adds	r7, #2
 8027966:	441c      	add	r4, r3
 8027968:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802796a:	441e      	add	r6, r3
 802796c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802796e:	3b01      	subs	r3, #1
 8027970:	9318      	str	r3, [sp, #96]	; 0x60
 8027972:	e698      	b.n	80276a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027974:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027976:	441c      	add	r4, r3
 8027978:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802797a:	441e      	add	r6, r3
 802797c:	9b07      	ldr	r3, [sp, #28]
 802797e:	3b01      	subs	r3, #1
 8027980:	9307      	str	r3, [sp, #28]
 8027982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027984:	3302      	adds	r3, #2
 8027986:	930a      	str	r3, [sp, #40]	; 0x28
 8027988:	e66d      	b.n	8027666 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802798a:	d023      	beq.n	80279d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802798c:	9b07      	ldr	r3, [sp, #28]
 802798e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8027990:	3b01      	subs	r3, #1
 8027992:	fb00 4003 	mla	r0, r0, r3, r4
 8027996:	1400      	asrs	r0, r0, #16
 8027998:	f53f ae82 	bmi.w	80276a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802799c:	3901      	subs	r1, #1
 802799e:	4288      	cmp	r0, r1
 80279a0:	f6bf ae7e 	bge.w	80276a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80279a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80279a6:	fb01 6303 	mla	r3, r1, r3, r6
 80279aa:	141b      	asrs	r3, r3, #16
 80279ac:	f53f ae78 	bmi.w	80276a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80279b0:	3a01      	subs	r2, #1
 80279b2:	4293      	cmp	r3, r2
 80279b4:	f6bf ae74 	bge.w	80276a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80279b8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80279bc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80279c0:	f1bb 0f00 	cmp.w	fp, #0
 80279c4:	dc6c      	bgt.n	8027aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80279c6:	9b07      	ldr	r3, [sp, #28]
 80279c8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80279cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80279ce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80279d2:	930a      	str	r3, [sp, #40]	; 0x28
 80279d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80279d6:	2b00      	cmp	r3, #0
 80279d8:	f340 81b3 	ble.w	8027d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80279dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80279e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80279e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80279e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80279ea:	eef0 6a62 	vmov.f32	s13, s5
 80279ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80279f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80279f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279fa:	ee16 4a90 	vmov	r4, s13
 80279fe:	eef0 6a43 	vmov.f32	s13, s6
 8027a02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a06:	ee16 6a90 	vmov	r6, s13
 8027a0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027a0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027a12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027a16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027a1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027a1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027a22:	ee12 2a90 	vmov	r2, s5
 8027a26:	eef0 2a47 	vmov.f32	s5, s14
 8027a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a2e:	ee13 2a10 	vmov	r2, s6
 8027a32:	9329      	str	r3, [sp, #164]	; 0xa4
 8027a34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027a36:	eeb0 3a67 	vmov.f32	s6, s15
 8027a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a3e:	932a      	str	r3, [sp, #168]	; 0xa8
 8027a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027a42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027a44:	3b01      	subs	r3, #1
 8027a46:	9317      	str	r3, [sp, #92]	; 0x5c
 8027a48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027a4a:	bf08      	it	eq
 8027a4c:	4613      	moveq	r3, r2
 8027a4e:	9307      	str	r3, [sp, #28]
 8027a50:	e5fb      	b.n	802764a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027a52:	2900      	cmp	r1, #0
 8027a54:	f43f ae6b 	beq.w	802772e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027a58:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027a5c:	9308      	str	r3, [sp, #32]
 8027a5e:	0e1b      	lsrs	r3, r3, #24
 8027a60:	9311      	str	r3, [sp, #68]	; 0x44
 8027a62:	e664      	b.n	802772e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027a64:	f112 0801 	adds.w	r8, r2, #1
 8027a68:	f53f af7b 	bmi.w	8027962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027a6c:	4543      	cmp	r3, r8
 8027a6e:	f6ff af78 	blt.w	8027962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027a72:	f11c 0801 	adds.w	r8, ip, #1
 8027a76:	f53f af74 	bmi.w	8027962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027a7a:	45c6      	cmp	lr, r8
 8027a7c:	f6ff af71 	blt.w	8027962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027a80:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027a82:	b21b      	sxth	r3, r3
 8027a84:	9201      	str	r2, [sp, #4]
 8027a86:	fa0f f28e 	sxth.w	r2, lr
 8027a8a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027a8e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027a92:	9200      	str	r2, [sp, #0]
 8027a94:	4639      	mov	r1, r7
 8027a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027a98:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027a9a:	f7ff fc79 	bl	8027390 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027a9e:	e760      	b.n	8027962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027aa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027aa2:	1427      	asrs	r7, r4, #16
 8027aa4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027aa6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027aaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027aae:	1433      	asrs	r3, r6, #16
 8027ab0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027ab4:	fb01 7303 	mla	r3, r1, r3, r7
 8027ab8:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027abc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027ac0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027ac4:	2a00      	cmp	r2, #0
 8027ac6:	f000 8133 	beq.w	8027d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027aca:	687d      	ldr	r5, [r7, #4]
 8027acc:	950e      	str	r5, [sp, #56]	; 0x38
 8027ace:	0e2d      	lsrs	r5, r5, #24
 8027ad0:	9515      	str	r5, [sp, #84]	; 0x54
 8027ad2:	b178      	cbz	r0, 8027af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027ad4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027ad8:	3901      	subs	r1, #1
 8027ada:	0089      	lsls	r1, r1, #2
 8027adc:	3104      	adds	r1, #4
 8027ade:	eb07 0e01 	add.w	lr, r7, r1
 8027ae2:	5879      	ldr	r1, [r7, r1]
 8027ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8027ae6:	0e09      	lsrs	r1, r1, #24
 8027ae8:	9112      	str	r1, [sp, #72]	; 0x48
 8027aea:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027aee:	910f      	str	r1, [sp, #60]	; 0x3c
 8027af0:	0e09      	lsrs	r1, r1, #24
 8027af2:	9116      	str	r1, [sp, #88]	; 0x58
 8027af4:	b292      	uxth	r2, r2
 8027af6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027af8:	b280      	uxth	r0, r0
 8027afa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027afc:	fb02 f800 	mul.w	r8, r2, r0
 8027b00:	0112      	lsls	r2, r2, #4
 8027b02:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027b06:	eba2 0e08 	sub.w	lr, r2, r8
 8027b0a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027b0e:	b280      	uxth	r0, r0
 8027b10:	fa1f fe8e 	uxth.w	lr, lr
 8027b14:	1a12      	subs	r2, r2, r0
 8027b16:	fb0e f101 	mul.w	r1, lr, r1
 8027b1a:	b292      	uxth	r2, r2
 8027b1c:	fb02 110c 	mla	r1, r2, ip, r1
 8027b20:	fb00 1105 	mla	r1, r0, r5, r1
 8027b24:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027b26:	fb08 1105 	mla	r1, r8, r5, r1
 8027b2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027b2e:	2900      	cmp	r1, #0
 8027b30:	f000 80f5 	beq.w	8027d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8027b34:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027b38:	d019      	beq.n	8027b6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8027b3a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027b3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b42:	fb0c fa0a 	mul.w	sl, ip, sl
 8027b46:	fb0c fc03 	mul.w	ip, ip, r3
 8027b4a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027b4e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027b52:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027b56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027b5a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027b5e:	4453      	add	r3, sl
 8027b60:	0a3f      	lsrs	r7, r7, #8
 8027b62:	0a1b      	lsrs	r3, r3, #8
 8027b64:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027b68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027b6c:	433b      	orrs	r3, r7
 8027b6e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027b70:	2dff      	cmp	r5, #255	; 0xff
 8027b72:	d020      	beq.n	8027bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8027b74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027b76:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027b7a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027b7c:	436f      	muls	r7, r5
 8027b7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027b80:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027b84:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027b88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027b8a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027b8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b92:	fb05 fa0a 	mul.w	sl, r5, sl
 8027b96:	44bc      	add	ip, r7
 8027b98:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027b9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ba0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027ba4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ba8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027bb0:	ea4c 050a 	orr.w	r5, ip, sl
 8027bb4:	950e      	str	r5, [sp, #56]	; 0x38
 8027bb6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027bb8:	2dff      	cmp	r5, #255	; 0xff
 8027bba:	d020      	beq.n	8027bfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027bbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027bbe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027bc2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027bc4:	436f      	muls	r7, r5
 8027bc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027bc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027bcc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027bd0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027bd2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027bd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027bda:	fb05 fa0a 	mul.w	sl, r5, sl
 8027bde:	44bc      	add	ip, r7
 8027be0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027be4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027be8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027bec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027bf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027bf8:	ea4c 050a 	orr.w	r5, ip, sl
 8027bfc:	9509      	str	r5, [sp, #36]	; 0x24
 8027bfe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027c00:	2dff      	cmp	r5, #255	; 0xff
 8027c02:	d020      	beq.n	8027c46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8027c04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027c06:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027c0a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027c0c:	436f      	muls	r7, r5
 8027c0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027c10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c14:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c18:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027c1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027c1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c22:	fb05 fa0a 	mul.w	sl, r5, sl
 8027c26:	44bc      	add	ip, r7
 8027c28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027c2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027c34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c40:	ea4c 050a 	orr.w	r5, ip, sl
 8027c44:	950f      	str	r5, [sp, #60]	; 0x3c
 8027c46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027c48:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027c4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c50:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027c54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027c56:	fb0e f707 	mul.w	r7, lr, r7
 8027c5a:	fb02 770c 	mla	r7, r2, ip, r7
 8027c5e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027c62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027c64:	fb00 770c 	mla	r7, r0, ip, r7
 8027c68:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027c6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027c6e:	fb08 770c 	mla	r7, r8, ip, r7
 8027c72:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027c76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c78:	fb0e fe0c 	mul.w	lr, lr, ip
 8027c7c:	0a3f      	lsrs	r7, r7, #8
 8027c7e:	fb02 e303 	mla	r3, r2, r3, lr
 8027c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027c84:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027c88:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027c8e:	fb00 330a 	mla	r3, r0, sl, r3
 8027c92:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027c96:	f8b9 0000 	ldrh.w	r0, [r9]
 8027c9a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027ca0:	1202      	asrs	r2, r0, #8
 8027ca2:	4359      	muls	r1, r3
 8027ca4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ca8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027cac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027cb0:	1c4b      	adds	r3, r1, #1
 8027cb2:	ea47 070c 	orr.w	r7, r7, ip
 8027cb6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027cba:	0c3b      	lsrs	r3, r7, #16
 8027cbc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027cc0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027cc4:	b2ff      	uxtb	r7, r7
 8027cc6:	fb13 f305 	smulbb	r3, r3, r5
 8027cca:	b2c9      	uxtb	r1, r1
 8027ccc:	fb17 f705 	smulbb	r7, r7, r5
 8027cd0:	fb02 3201 	mla	r2, r2, r1, r3
 8027cd4:	10c3      	asrs	r3, r0, #3
 8027cd6:	fb1c fc05 	smulbb	ip, ip, r5
 8027cda:	00c0      	lsls	r0, r0, #3
 8027cdc:	b292      	uxth	r2, r2
 8027cde:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027ce2:	b2c0      	uxtb	r0, r0
 8027ce4:	fb03 c301 	mla	r3, r3, r1, ip
 8027ce8:	fb00 7001 	mla	r0, r0, r1, r7
 8027cec:	1c51      	adds	r1, r2, #1
 8027cee:	b29b      	uxth	r3, r3
 8027cf0:	b280      	uxth	r0, r0
 8027cf2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027cf6:	f100 0c01 	add.w	ip, r0, #1
 8027cfa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027cfe:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8027d02:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027d06:	ea4c 0202 	orr.w	r2, ip, r2
 8027d0a:	f103 0c01 	add.w	ip, r3, #1
 8027d0e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027d12:	095b      	lsrs	r3, r3, #5
 8027d14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027d18:	431a      	orrs	r2, r3
 8027d1a:	f8a9 2000 	strh.w	r2, [r9]
 8027d1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027d20:	f109 0902 	add.w	r9, r9, #2
 8027d24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027d28:	441c      	add	r4, r3
 8027d2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027d2c:	441e      	add	r6, r3
 8027d2e:	e647      	b.n	80279c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027d30:	2800      	cmp	r0, #0
 8027d32:	f43f aedf 	beq.w	8027af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027d36:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027d3a:	9109      	str	r1, [sp, #36]	; 0x24
 8027d3c:	0e09      	lsrs	r1, r1, #24
 8027d3e:	9112      	str	r1, [sp, #72]	; 0x48
 8027d40:	e6d8      	b.n	8027af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027d42:	b01d      	add	sp, #116	; 0x74
 8027d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027d48 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d4c:	b085      	sub	sp, #20
 8027d4e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8027d52:	9102      	str	r1, [sp, #8]
 8027d54:	2c00      	cmp	r4, #0
 8027d56:	fb04 7103 	mla	r1, r4, r3, r7
 8027d5a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027d5e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027d62:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027d66:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027d6a:	f2c0 810c 	blt.w	8027f86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027d6e:	45a6      	cmp	lr, r4
 8027d70:	f340 8109 	ble.w	8027f86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027d74:	2f00      	cmp	r7, #0
 8027d76:	f2c0 8104 	blt.w	8027f82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027d7a:	42bb      	cmp	r3, r7
 8027d7c:	f340 8101 	ble.w	8027f82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027d80:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027d84:	1c7a      	adds	r2, r7, #1
 8027d86:	f100 8101 	bmi.w	8027f8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027d8a:	4293      	cmp	r3, r2
 8027d8c:	f340 80fe 	ble.w	8027f8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027d90:	2e00      	cmp	r6, #0
 8027d92:	f000 80fd 	beq.w	8027f90 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8027d96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027d9a:	3401      	adds	r4, #1
 8027d9c:	f100 80fc 	bmi.w	8027f98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027da0:	45a6      	cmp	lr, r4
 8027da2:	f340 80f9 	ble.w	8027f98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027da6:	2800      	cmp	r0, #0
 8027da8:	f000 80f9 	beq.w	8027f9e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027dac:	2f00      	cmp	r7, #0
 8027dae:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8027db2:	f2c0 80ef 	blt.w	8027f94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027db6:	42bb      	cmp	r3, r7
 8027db8:	f340 80ec 	ble.w	8027f94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027dbc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027dc0:	3701      	adds	r7, #1
 8027dc2:	f100 80ef 	bmi.w	8027fa4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027dc6:	42bb      	cmp	r3, r7
 8027dc8:	f340 80ec 	ble.w	8027fa4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027dcc:	2e00      	cmp	r6, #0
 8027dce:	f000 80eb 	beq.w	8027fa8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8027dd2:	6852      	ldr	r2, [r2, #4]
 8027dd4:	b2b6      	uxth	r6, r6
 8027dd6:	b280      	uxth	r0, r0
 8027dd8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027ddc:	fb00 fe06 	mul.w	lr, r0, r6
 8027de0:	0136      	lsls	r6, r6, #4
 8027de2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027de6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027dea:	eba6 070e 	sub.w	r7, r6, lr
 8027dee:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8027df2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027df6:	b280      	uxth	r0, r0
 8027df8:	b2bf      	uxth	r7, r7
 8027dfa:	1a1b      	subs	r3, r3, r0
 8027dfc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027e00:	fb07 f60a 	mul.w	r6, r7, sl
 8027e04:	b29b      	uxth	r3, r3
 8027e06:	fb0b 6603 	mla	r6, fp, r3, r6
 8027e0a:	fb00 6609 	mla	r6, r0, r9, r6
 8027e0e:	fb0e 6608 	mla	r6, lr, r8, r6
 8027e12:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027e16:	9600      	str	r6, [sp, #0]
 8027e18:	2e00      	cmp	r6, #0
 8027e1a:	f000 80af 	beq.w	8027f7c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8027e1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027e22:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027e26:	9e02      	ldr	r6, [sp, #8]
 8027e28:	fb0b fc0c 	mul.w	ip, fp, ip
 8027e2c:	fb0b f505 	mul.w	r5, fp, r5
 8027e30:	8836      	ldrh	r6, [r6, #0]
 8027e32:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027e36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027e3a:	9501      	str	r5, [sp, #4]
 8027e3c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027e40:	44dc      	add	ip, fp
 8027e42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e46:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027e4a:	9503      	str	r5, [sp, #12]
 8027e4c:	9d01      	ldr	r5, [sp, #4]
 8027e4e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027e52:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027e56:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027e5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027e5e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027e62:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027e66:	fb0a fa01 	mul.w	sl, sl, r1
 8027e6a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027e6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027e72:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8027e76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027e7a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027e7e:	4465      	add	r5, ip
 8027e80:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027e84:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027e88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e8c:	fb09 fc0c 	mul.w	ip, r9, ip
 8027e90:	0a2d      	lsrs	r5, r5, #8
 8027e92:	fb09 f904 	mul.w	r9, r9, r4
 8027e96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e9a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027e9e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027ea2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8027ea6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027eaa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027eae:	437d      	muls	r5, r7
 8027eb0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8027eb4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027eb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027ebc:	4461      	add	r1, ip
 8027ebe:	fb08 f404 	mul.w	r4, r8, r4
 8027ec2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027ec6:	fb08 f802 	mul.w	r8, r8, r2
 8027eca:	0a09      	lsrs	r1, r1, #8
 8027ecc:	0a22      	lsrs	r2, r4, #8
 8027ece:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8027ed2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027ed6:	fb07 f70a 	mul.w	r7, r7, sl
 8027eda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027ede:	4414      	add	r4, r2
 8027ee0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8027ee4:	0a24      	lsrs	r4, r4, #8
 8027ee6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027eea:	9a03      	ldr	r2, [sp, #12]
 8027eec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027ef0:	fb02 5503 	mla	r5, r2, r3, r5
 8027ef4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027ef8:	fb04 540e 	mla	r4, r4, lr, r5
 8027efc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027f00:	fb01 4100 	mla	r1, r1, r0, r4
 8027f04:	0a09      	lsrs	r1, r1, #8
 8027f06:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8027f0a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8027f0e:	fb03 7101 	mla	r1, r3, r1, r7
 8027f12:	9b00      	ldr	r3, [sp, #0]
 8027f14:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027f18:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8027f1c:	43da      	mvns	r2, r3
 8027f1e:	1233      	asrs	r3, r6, #8
 8027f20:	fb00 e101 	mla	r1, r0, r1, lr
 8027f24:	10f0      	asrs	r0, r6, #3
 8027f26:	b2d2      	uxtb	r2, r2
 8027f28:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027f2c:	0a09      	lsrs	r1, r1, #8
 8027f2e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027f32:	00f6      	lsls	r6, r6, #3
 8027f34:	4353      	muls	r3, r2
 8027f36:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027f3a:	4350      	muls	r0, r2
 8027f3c:	b2f6      	uxtb	r6, r6
 8027f3e:	4321      	orrs	r1, r4
 8027f40:	4356      	muls	r6, r2
 8027f42:	1c5a      	adds	r2, r3, #1
 8027f44:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027f48:	0c0b      	lsrs	r3, r1, #16
 8027f4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027f4e:	1c42      	adds	r2, r0, #1
 8027f50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027f54:	0a0a      	lsrs	r2, r1, #8
 8027f56:	021b      	lsls	r3, r3, #8
 8027f58:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027f5c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027f60:	00d2      	lsls	r2, r2, #3
 8027f62:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027f66:	4313      	orrs	r3, r2
 8027f68:	1c72      	adds	r2, r6, #1
 8027f6a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8027f6e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8027f72:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8027f76:	4319      	orrs	r1, r3
 8027f78:	9b02      	ldr	r3, [sp, #8]
 8027f7a:	8019      	strh	r1, [r3, #0]
 8027f7c:	b005      	add	sp, #20
 8027f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f82:	2500      	movs	r5, #0
 8027f84:	e6fe      	b.n	8027d84 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8027f86:	2100      	movs	r1, #0
 8027f88:	460d      	mov	r5, r1
 8027f8a:	e706      	b.n	8027d9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027f8c:	2100      	movs	r1, #0
 8027f8e:	e704      	b.n	8027d9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027f90:	4631      	mov	r1, r6
 8027f92:	e702      	b.n	8027d9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027f94:	2400      	movs	r4, #0
 8027f96:	e713      	b.n	8027dc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8027f98:	2200      	movs	r2, #0
 8027f9a:	4614      	mov	r4, r2
 8027f9c:	e71a      	b.n	8027dd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027f9e:	4602      	mov	r2, r0
 8027fa0:	4604      	mov	r4, r0
 8027fa2:	e717      	b.n	8027dd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027fa4:	2200      	movs	r2, #0
 8027fa6:	e715      	b.n	8027dd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027fa8:	4632      	mov	r2, r6
 8027faa:	e713      	b.n	8027dd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08027fac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fb0:	b09b      	sub	sp, #108	; 0x6c
 8027fb2:	9218      	str	r2, [sp, #96]	; 0x60
 8027fb4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027fb6:	9019      	str	r0, [sp, #100]	; 0x64
 8027fb8:	9116      	str	r1, [sp, #88]	; 0x58
 8027fba:	6850      	ldr	r0, [r2, #4]
 8027fbc:	9307      	str	r3, [sp, #28]
 8027fbe:	6812      	ldr	r2, [r2, #0]
 8027fc0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027fc4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027fc8:	fb00 1303 	mla	r3, r0, r3, r1
 8027fcc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8027fd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8027fd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027fda:	2b00      	cmp	r3, #0
 8027fdc:	dc03      	bgt.n	8027fe6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027fde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	f340 8387 	ble.w	80286f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027fe6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027fe8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027fec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027ff0:	1e48      	subs	r0, r1, #1
 8027ff2:	1e57      	subs	r7, r2, #1
 8027ff4:	9b07      	ldr	r3, [sp, #28]
 8027ff6:	2b00      	cmp	r3, #0
 8027ff8:	f340 8166 	ble.w	80282c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027ffc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028000:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028004:	d406      	bmi.n	8028014 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8028006:	4584      	cmp	ip, r0
 8028008:	da04      	bge.n	8028014 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802800a:	2b00      	cmp	r3, #0
 802800c:	db02      	blt.n	8028014 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802800e:	42bb      	cmp	r3, r7
 8028010:	f2c0 815b 	blt.w	80282ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028014:	f11c 0c01 	adds.w	ip, ip, #1
 8028018:	f100 814b 	bmi.w	80282b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802801c:	4561      	cmp	r1, ip
 802801e:	f2c0 8148 	blt.w	80282b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028022:	3301      	adds	r3, #1
 8028024:	f100 8145 	bmi.w	80282b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028028:	429a      	cmp	r2, r3
 802802a:	f2c0 8142 	blt.w	80282b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802802e:	9b07      	ldr	r3, [sp, #28]
 8028030:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028032:	9317      	str	r3, [sp, #92]	; 0x5c
 8028034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028036:	2b00      	cmp	r3, #0
 8028038:	f340 8165 	ble.w	8028306 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802803c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802803e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028042:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028044:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028048:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802804c:	1422      	asrs	r2, r4, #16
 802804e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028052:	689b      	ldr	r3, [r3, #8]
 8028054:	f100 81d5 	bmi.w	8028402 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028058:	f103 38ff 	add.w	r8, r3, #4294967295
 802805c:	4542      	cmp	r2, r8
 802805e:	f280 81d0 	bge.w	8028402 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028062:	f1bc 0f00 	cmp.w	ip, #0
 8028066:	f2c0 81cc 	blt.w	8028402 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802806a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802806e:	45c4      	cmp	ip, r8
 8028070:	f280 81c7 	bge.w	8028402 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028074:	b21b      	sxth	r3, r3
 8028076:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028078:	fb0c 2203 	mla	r2, ip, r3, r2
 802807c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028080:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028084:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028088:	2900      	cmp	r1, #0
 802808a:	f000 8182 	beq.w	8028392 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802808e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028092:	950b      	str	r5, [sp, #44]	; 0x2c
 8028094:	0e2d      	lsrs	r5, r5, #24
 8028096:	9512      	str	r5, [sp, #72]	; 0x48
 8028098:	b180      	cbz	r0, 80280bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802809a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802809e:	3b01      	subs	r3, #1
 80280a0:	009b      	lsls	r3, r3, #2
 80280a2:	3304      	adds	r3, #4
 80280a4:	eb08 0c03 	add.w	ip, r8, r3
 80280a8:	f858 3003 	ldr.w	r3, [r8, r3]
 80280ac:	9308      	str	r3, [sp, #32]
 80280ae:	0e1b      	lsrs	r3, r3, #24
 80280b0:	9310      	str	r3, [sp, #64]	; 0x40
 80280b2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80280b6:	930c      	str	r3, [sp, #48]	; 0x30
 80280b8:	0e1b      	lsrs	r3, r3, #24
 80280ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80280bc:	b289      	uxth	r1, r1
 80280be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80280c0:	b280      	uxth	r0, r0
 80280c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280c4:	fb01 f900 	mul.w	r9, r1, r0
 80280c8:	0109      	lsls	r1, r1, #4
 80280ca:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80280ce:	eba1 0809 	sub.w	r8, r1, r9
 80280d2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80280d6:	b280      	uxth	r0, r0
 80280d8:	fa1f f888 	uxth.w	r8, r8
 80280dc:	1a09      	subs	r1, r1, r0
 80280de:	fb08 f303 	mul.w	r3, r8, r3
 80280e2:	b289      	uxth	r1, r1
 80280e4:	fb01 330e 	mla	r3, r1, lr, r3
 80280e8:	fb00 3305 	mla	r3, r0, r5, r3
 80280ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80280ee:	fb09 3305 	mla	r3, r9, r5, r3
 80280f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80280f6:	2b00      	cmp	r3, #0
 80280f8:	f000 80d2 	beq.w	80282a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80280fc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028100:	d01b      	beq.n	802813a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8028102:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028106:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802810a:	fb0e fa0a 	mul.w	sl, lr, sl
 802810e:	fb0e fe02 	mul.w	lr, lr, r2
 8028112:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028116:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802811a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802811e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028122:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028126:	4452      	add	r2, sl
 8028128:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802812c:	0a12      	lsrs	r2, r2, #8
 802812e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028132:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028136:	ea42 020c 	orr.w	r2, r2, ip
 802813a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802813c:	2dff      	cmp	r5, #255	; 0xff
 802813e:	d021      	beq.n	8028184 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028140:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028142:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028146:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028148:	fb05 fb0b 	mul.w	fp, r5, fp
 802814c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802814e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028152:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028154:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028158:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802815c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028160:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028164:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028168:	44de      	add	lr, fp
 802816a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802816e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028172:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028176:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802817a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802817e:	ea4e 050a 	orr.w	r5, lr, sl
 8028182:	950b      	str	r5, [sp, #44]	; 0x2c
 8028184:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028186:	2dff      	cmp	r5, #255	; 0xff
 8028188:	d021      	beq.n	80281ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802818a:	9d08      	ldr	r5, [sp, #32]
 802818c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028190:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028192:	fb05 fb0b 	mul.w	fp, r5, fp
 8028196:	9d08      	ldr	r5, [sp, #32]
 8028198:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802819c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802819e:	fb05 fa0e 	mul.w	sl, r5, lr
 80281a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80281a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80281aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80281ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80281b2:	44de      	add	lr, fp
 80281b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80281b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80281bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80281c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80281c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80281c8:	ea4e 050a 	orr.w	r5, lr, sl
 80281cc:	9508      	str	r5, [sp, #32]
 80281ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80281d0:	2dff      	cmp	r5, #255	; 0xff
 80281d2:	d021      	beq.n	8028218 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80281d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80281d6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80281da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80281dc:	fb05 fb0b 	mul.w	fp, r5, fp
 80281e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80281e2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80281e6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80281e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80281ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80281f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80281f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80281f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80281fc:	44de      	add	lr, fp
 80281fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028202:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028206:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802820a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802820e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028212:	ea4e 050a 	orr.w	r5, lr, sl
 8028216:	950c      	str	r5, [sp, #48]	; 0x30
 8028218:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802821a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802821e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028222:	2bff      	cmp	r3, #255	; 0xff
 8028224:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028228:	9d08      	ldr	r5, [sp, #32]
 802822a:	fb08 fc0c 	mul.w	ip, r8, ip
 802822e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028232:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028238:	fb00 cc0e 	mla	ip, r0, lr, ip
 802823c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028240:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028242:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028246:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802824a:	fb08 f80e 	mul.w	r8, r8, lr
 802824e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028252:	fb01 8202 	mla	r2, r1, r2, r8
 8028256:	9908      	ldr	r1, [sp, #32]
 8028258:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802825c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028260:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028262:	fb00 220a 	mla	r2, r0, sl, r2
 8028266:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802826a:	fb09 2900 	mla	r9, r9, r0, r2
 802826e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028272:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028276:	ea4c 0c09 	orr.w	ip, ip, r9
 802827a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802827e:	f040 8091 	bne.w	80283a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028282:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8028286:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802828a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802828e:	f022 0207 	bic.w	r2, r2, #7
 8028292:	431a      	orrs	r2, r3
 8028294:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028298:	ea4c 0c02 	orr.w	ip, ip, r2
 802829c:	f8a7 c000 	strh.w	ip, [r7]
 80282a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80282a2:	3702      	adds	r7, #2
 80282a4:	441c      	add	r4, r3
 80282a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80282a8:	441e      	add	r6, r3
 80282aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80282ac:	3b01      	subs	r3, #1
 80282ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80282b0:	e6c0      	b.n	8028034 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80282b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80282b4:	441c      	add	r4, r3
 80282b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80282b8:	441e      	add	r6, r3
 80282ba:	9b07      	ldr	r3, [sp, #28]
 80282bc:	3b01      	subs	r3, #1
 80282be:	9307      	str	r3, [sp, #28]
 80282c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282c2:	3302      	adds	r3, #2
 80282c4:	930a      	str	r3, [sp, #40]	; 0x28
 80282c6:	e695      	b.n	8027ff4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80282c8:	d024      	beq.n	8028314 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80282ca:	9b07      	ldr	r3, [sp, #28]
 80282cc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80282ce:	3b01      	subs	r3, #1
 80282d0:	fb00 4003 	mla	r0, r0, r3, r4
 80282d4:	1400      	asrs	r0, r0, #16
 80282d6:	f53f aeaa 	bmi.w	802802e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80282da:	3901      	subs	r1, #1
 80282dc:	4288      	cmp	r0, r1
 80282de:	f6bf aea6 	bge.w	802802e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80282e2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80282e4:	fb01 6303 	mla	r3, r1, r3, r6
 80282e8:	141b      	asrs	r3, r3, #16
 80282ea:	f53f aea0 	bmi.w	802802e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80282ee:	3a01      	subs	r2, #1
 80282f0:	4293      	cmp	r3, r2
 80282f2:	f6bf ae9c 	bge.w	802802e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80282f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80282fa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80282fe:	f1bb 0f00 	cmp.w	fp, #0
 8028302:	f300 809a 	bgt.w	802843a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028306:	9b07      	ldr	r3, [sp, #28]
 8028308:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802830e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028312:	930a      	str	r3, [sp, #40]	; 0x28
 8028314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028316:	2b00      	cmp	r3, #0
 8028318:	f340 81ec 	ble.w	80286f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802831c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028320:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028322:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028326:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802832a:	eef0 6a62 	vmov.f32	s13, s5
 802832e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028332:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028336:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802833a:	ee16 4a90 	vmov	r4, s13
 802833e:	eef0 6a43 	vmov.f32	s13, s6
 8028342:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028346:	ee16 6a90 	vmov	r6, s13
 802834a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802834e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028352:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028356:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802835a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802835e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028362:	ee12 2a90 	vmov	r2, s5
 8028366:	eef0 2a47 	vmov.f32	s5, s14
 802836a:	fb92 f3f3 	sdiv	r3, r2, r3
 802836e:	ee13 2a10 	vmov	r2, s6
 8028372:	9327      	str	r3, [sp, #156]	; 0x9c
 8028374:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028376:	eeb0 3a67 	vmov.f32	s6, s15
 802837a:	fb92 f3f3 	sdiv	r3, r2, r3
 802837e:	9328      	str	r3, [sp, #160]	; 0xa0
 8028380:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028382:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028384:	3b01      	subs	r3, #1
 8028386:	9316      	str	r3, [sp, #88]	; 0x58
 8028388:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802838a:	bf08      	it	eq
 802838c:	4613      	moveq	r3, r2
 802838e:	9307      	str	r3, [sp, #28]
 8028390:	e622      	b.n	8027fd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8028392:	2800      	cmp	r0, #0
 8028394:	f43f ae92 	beq.w	80280bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8028398:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802839c:	9308      	str	r3, [sp, #32]
 802839e:	0e1b      	lsrs	r3, r3, #24
 80283a0:	9310      	str	r3, [sp, #64]	; 0x40
 80283a2:	e68b      	b.n	80280bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80283a4:	8839      	ldrh	r1, [r7, #0]
 80283a6:	43db      	mvns	r3, r3
 80283a8:	4dd4      	ldr	r5, [pc, #848]	; (80286fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80283aa:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80283ae:	fa5f f883 	uxtb.w	r8, r3
 80283b2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80283b6:	10c8      	asrs	r0, r1, #3
 80283b8:	00cb      	lsls	r3, r1, #3
 80283ba:	fb0e fe08 	mul.w	lr, lr, r8
 80283be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80283c2:	b2db      	uxtb	r3, r3
 80283c4:	f10e 0101 	add.w	r1, lr, #1
 80283c8:	fb00 f008 	mul.w	r0, r0, r8
 80283cc:	fb03 f308 	mul.w	r3, r3, r8
 80283d0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80283d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80283d8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80283dc:	f100 0e01 	add.w	lr, r0, #1
 80283e0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80283e4:	b2c9      	uxtb	r1, r1
 80283e6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80283ea:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80283ee:	00d2      	lsls	r2, r2, #3
 80283f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80283f4:	430a      	orrs	r2, r1
 80283f6:	1c59      	adds	r1, r3, #1
 80283f8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80283fc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028400:	e748      	b.n	8028294 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8028402:	f112 0801 	adds.w	r8, r2, #1
 8028406:	f53f af4b 	bmi.w	80282a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802840a:	4543      	cmp	r3, r8
 802840c:	f6ff af48 	blt.w	80282a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028410:	f11c 0801 	adds.w	r8, ip, #1
 8028414:	f53f af44 	bmi.w	80282a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028418:	45c6      	cmp	lr, r8
 802841a:	f6ff af41 	blt.w	80282a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802841e:	b21b      	sxth	r3, r3
 8028420:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028424:	fa0f f28e 	sxth.w	r2, lr
 8028428:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802842c:	9200      	str	r2, [sp, #0]
 802842e:	4639      	mov	r1, r7
 8028430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028432:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028434:	f7ff fc88 	bl	8027d48 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028438:	e732      	b.n	80282a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802843a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802843c:	1421      	asrs	r1, r4, #16
 802843e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028440:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028444:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028448:	1433      	asrs	r3, r6, #16
 802844a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802844e:	fb07 1303 	mla	r3, r7, r3, r1
 8028452:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028454:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028458:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802845c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028460:	2a00      	cmp	r2, #0
 8028462:	f000 8108 	beq.w	8028676 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8028466:	684d      	ldr	r5, [r1, #4]
 8028468:	950d      	str	r5, [sp, #52]	; 0x34
 802846a:	0e2d      	lsrs	r5, r5, #24
 802846c:	9514      	str	r5, [sp, #80]	; 0x50
 802846e:	b178      	cbz	r0, 8028490 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028470:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028474:	3f01      	subs	r7, #1
 8028476:	00bf      	lsls	r7, r7, #2
 8028478:	3704      	adds	r7, #4
 802847a:	eb01 0e07 	add.w	lr, r1, r7
 802847e:	59c9      	ldr	r1, [r1, r7]
 8028480:	9109      	str	r1, [sp, #36]	; 0x24
 8028482:	0e09      	lsrs	r1, r1, #24
 8028484:	9111      	str	r1, [sp, #68]	; 0x44
 8028486:	f8de 1004 	ldr.w	r1, [lr, #4]
 802848a:	910e      	str	r1, [sp, #56]	; 0x38
 802848c:	0e09      	lsrs	r1, r1, #24
 802848e:	9115      	str	r1, [sp, #84]	; 0x54
 8028490:	b292      	uxth	r2, r2
 8028492:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028494:	b280      	uxth	r0, r0
 8028496:	fb02 f900 	mul.w	r9, r2, r0
 802849a:	0112      	lsls	r2, r2, #4
 802849c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80284a0:	eba2 0e09 	sub.w	lr, r2, r9
 80284a4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80284a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80284aa:	b280      	uxth	r0, r0
 80284ac:	fa1f fe8e 	uxth.w	lr, lr
 80284b0:	1a09      	subs	r1, r1, r0
 80284b2:	fb0e f202 	mul.w	r2, lr, r2
 80284b6:	b289      	uxth	r1, r1
 80284b8:	fb01 220c 	mla	r2, r1, ip, r2
 80284bc:	fb00 2205 	mla	r2, r0, r5, r2
 80284c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80284c2:	fb09 2205 	mla	r2, r9, r5, r2
 80284c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80284ca:	2a00      	cmp	r2, #0
 80284cc:	f000 80ca 	beq.w	8028664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80284d0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80284d4:	d019      	beq.n	802850a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80284d6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80284da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80284de:	fb0c fa0a 	mul.w	sl, ip, sl
 80284e2:	fb0c fc03 	mul.w	ip, ip, r3
 80284e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80284ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80284ee:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80284f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80284f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80284fa:	4453      	add	r3, sl
 80284fc:	0a3f      	lsrs	r7, r7, #8
 80284fe:	0a1b      	lsrs	r3, r3, #8
 8028500:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028504:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028508:	433b      	orrs	r3, r7
 802850a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802850c:	2dff      	cmp	r5, #255	; 0xff
 802850e:	d020      	beq.n	8028552 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8028510:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028512:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028516:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028518:	436f      	muls	r7, r5
 802851a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802851c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028520:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028524:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028526:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802852a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802852e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028532:	44bc      	add	ip, r7
 8028534:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028538:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802853c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028540:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028544:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028548:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802854c:	ea4c 050a 	orr.w	r5, ip, sl
 8028550:	950d      	str	r5, [sp, #52]	; 0x34
 8028552:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028554:	2dff      	cmp	r5, #255	; 0xff
 8028556:	d020      	beq.n	802859a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8028558:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802855a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802855e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028560:	436f      	muls	r7, r5
 8028562:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028564:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028568:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802856a:	fb05 fa0c 	mul.w	sl, r5, ip
 802856e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028572:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028576:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802857a:	44bc      	add	ip, r7
 802857c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028580:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028584:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028588:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802858c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028590:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028594:	ea4c 050a 	orr.w	r5, ip, sl
 8028598:	9509      	str	r5, [sp, #36]	; 0x24
 802859a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802859c:	2dff      	cmp	r5, #255	; 0xff
 802859e:	d020      	beq.n	80285e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80285a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80285a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80285a6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80285a8:	436f      	muls	r7, r5
 80285aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80285ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80285b0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80285b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80285b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80285ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80285be:	fb05 fa0a 	mul.w	sl, r5, sl
 80285c2:	44bc      	add	ip, r7
 80285c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80285c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80285cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80285d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80285d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80285d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80285dc:	ea4c 050a 	orr.w	r5, ip, sl
 80285e0:	950e      	str	r5, [sp, #56]	; 0x38
 80285e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80285e4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80285e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80285ec:	2aff      	cmp	r2, #255	; 0xff
 80285ee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80285f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80285f4:	fb0e f707 	mul.w	r7, lr, r7
 80285f8:	fb01 770c 	mla	r7, r1, ip, r7
 80285fc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028600:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028602:	fb00 770c 	mla	r7, r0, ip, r7
 8028606:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802860a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802860c:	fb09 770c 	mla	r7, r9, ip, r7
 8028610:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028614:	fb0e fe0c 	mul.w	lr, lr, ip
 8028618:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802861c:	fb01 e303 	mla	r3, r1, r3, lr
 8028620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028622:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028626:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802862a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802862c:	fb00 330a 	mla	r3, r0, sl, r3
 8028630:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028634:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028638:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802863c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028640:	ea47 070c 	orr.w	r7, r7, ip
 8028644:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8028648:	d11e      	bne.n	8028688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802864a:	097a      	lsrs	r2, r7, #5
 802864c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8028650:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028654:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028658:	f023 0307 	bic.w	r3, r3, #7
 802865c:	4313      	orrs	r3, r2
 802865e:	431f      	orrs	r7, r3
 8028660:	f8a8 7000 	strh.w	r7, [r8]
 8028664:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028666:	f108 0802 	add.w	r8, r8, #2
 802866a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802866e:	441c      	add	r4, r3
 8028670:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028672:	441e      	add	r6, r3
 8028674:	e643      	b.n	80282fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8028676:	2800      	cmp	r0, #0
 8028678:	f43f af0a 	beq.w	8028490 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802867c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028680:	9109      	str	r1, [sp, #36]	; 0x24
 8028682:	0e09      	lsrs	r1, r1, #24
 8028684:	9111      	str	r1, [sp, #68]	; 0x44
 8028686:	e703      	b.n	8028490 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028688:	f8b8 1000 	ldrh.w	r1, [r8]
 802868c:	43d2      	mvns	r2, r2
 802868e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028692:	fa5f fe82 	uxtb.w	lr, r2
 8028696:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802869a:	10c8      	asrs	r0, r1, #3
 802869c:	00ca      	lsls	r2, r1, #3
 802869e:	fb0c fc0e 	mul.w	ip, ip, lr
 80286a2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80286a6:	b2d2      	uxtb	r2, r2
 80286a8:	f10c 0101 	add.w	r1, ip, #1
 80286ac:	fb00 f00e 	mul.w	r0, r0, lr
 80286b0:	fb02 f20e 	mul.w	r2, r2, lr
 80286b4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80286b8:	0c39      	lsrs	r1, r7, #16
 80286ba:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80286be:	490f      	ldr	r1, [pc, #60]	; (80286fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80286c0:	fa5f fc8c 	uxtb.w	ip, ip
 80286c4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80286c8:	1c41      	adds	r1, r0, #1
 80286ca:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80286ce:	1c51      	adds	r1, r2, #1
 80286d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80286d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80286d8:	00c0      	lsls	r0, r0, #3
 80286da:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80286de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80286e2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80286e6:	ea4c 0c00 	orr.w	ip, ip, r0
 80286ea:	ea47 0c0c 	orr.w	ip, r7, ip
 80286ee:	f8a8 c000 	strh.w	ip, [r8]
 80286f2:	e7b7      	b.n	8028664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80286f4:	b01b      	add	sp, #108	; 0x6c
 80286f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80286fa:	bf00      	nop
 80286fc:	fffff800 	.word	0xfffff800

08028700 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028704:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8028708:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802870c:	2d00      	cmp	r5, #0
 802870e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028712:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8028716:	fb05 0e03 	mla	lr, r5, r3, r0
 802871a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802871e:	f2c0 808c 	blt.w	802883a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8028722:	45a9      	cmp	r9, r5
 8028724:	f340 8089 	ble.w	802883a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8028728:	2800      	cmp	r0, #0
 802872a:	f2c0 8084 	blt.w	8028836 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802872e:	4580      	cmp	r8, r0
 8028730:	f340 8081 	ble.w	8028836 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8028734:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028738:	f01e 0f01 	tst.w	lr, #1
 802873c:	5d16      	ldrb	r6, [r2, r4]
 802873e:	bf0c      	ite	eq
 8028740:	f006 060f 	andeq.w	r6, r6, #15
 8028744:	1136      	asrne	r6, r6, #4
 8028746:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802874a:	b2f6      	uxtb	r6, r6
 802874c:	1c44      	adds	r4, r0, #1
 802874e:	d477      	bmi.n	8028840 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028750:	45a0      	cmp	r8, r4
 8028752:	dd75      	ble.n	8028840 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028754:	2f00      	cmp	r7, #0
 8028756:	d075      	beq.n	8028844 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8028758:	f10e 0a01 	add.w	sl, lr, #1
 802875c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8028760:	f01a 0f01 	tst.w	sl, #1
 8028764:	5d14      	ldrb	r4, [r2, r4]
 8028766:	bf0c      	ite	eq
 8028768:	f004 040f 	andeq.w	r4, r4, #15
 802876c:	1124      	asrne	r4, r4, #4
 802876e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028772:	b2e4      	uxtb	r4, r4
 8028774:	3501      	adds	r5, #1
 8028776:	d469      	bmi.n	802884c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8028778:	45a9      	cmp	r9, r5
 802877a:	dd67      	ble.n	802884c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802877c:	f1bc 0f00 	cmp.w	ip, #0
 8028780:	d067      	beq.n	8028852 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8028782:	2800      	cmp	r0, #0
 8028784:	db60      	blt.n	8028848 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8028786:	4580      	cmp	r8, r0
 8028788:	dd5e      	ble.n	8028848 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802878a:	eb03 090e 	add.w	r9, r3, lr
 802878e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028792:	f019 0f01 	tst.w	r9, #1
 8028796:	5d55      	ldrb	r5, [r2, r5]
 8028798:	bf0c      	ite	eq
 802879a:	f005 050f 	andeq.w	r5, r5, #15
 802879e:	112d      	asrne	r5, r5, #4
 80287a0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80287a4:	b2ed      	uxtb	r5, r5
 80287a6:	3001      	adds	r0, #1
 80287a8:	d456      	bmi.n	8028858 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80287aa:	4580      	cmp	r8, r0
 80287ac:	dd54      	ble.n	8028858 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80287ae:	2f00      	cmp	r7, #0
 80287b0:	d054      	beq.n	802885c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80287b2:	3301      	adds	r3, #1
 80287b4:	449e      	add	lr, r3
 80287b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80287ba:	f01e 0f01 	tst.w	lr, #1
 80287be:	5cd0      	ldrb	r0, [r2, r3]
 80287c0:	bf0c      	ite	eq
 80287c2:	f000 000f 	andeq.w	r0, r0, #15
 80287c6:	1100      	asrne	r0, r0, #4
 80287c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80287cc:	b2c3      	uxtb	r3, r0
 80287ce:	b2ba      	uxth	r2, r7
 80287d0:	fa1f fc8c 	uxth.w	ip, ip
 80287d4:	fb02 f00c 	mul.w	r0, r2, ip
 80287d8:	0112      	lsls	r2, r2, #4
 80287da:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80287de:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80287e2:	1a12      	subs	r2, r2, r0
 80287e4:	fa1f fc8c 	uxth.w	ip, ip
 80287e8:	b292      	uxth	r2, r2
 80287ea:	eba7 070c 	sub.w	r7, r7, ip
 80287ee:	4362      	muls	r2, r4
 80287f0:	b2bf      	uxth	r7, r7
 80287f2:	fb06 2207 	mla	r2, r6, r7, r2
 80287f6:	fb0c 2505 	mla	r5, ip, r5, r2
 80287fa:	fb00 5303 	mla	r3, r0, r3, r5
 80287fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028802:	b1b3      	cbz	r3, 8028832 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028804:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8028808:	435a      	muls	r2, r3
 802880a:	1c53      	adds	r3, r2, #1
 802880c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028810:	4a2d      	ldr	r2, [pc, #180]	; (80288c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8028812:	121b      	asrs	r3, r3, #8
 8028814:	6812      	ldr	r2, [r2, #0]
 8028816:	2bff      	cmp	r3, #255	; 0xff
 8028818:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802881c:	d120      	bne.n	8028860 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802881e:	0950      	lsrs	r0, r2, #5
 8028820:	4b2a      	ldr	r3, [pc, #168]	; (80288cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8028822:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028826:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802882a:	4033      	ands	r3, r6
 802882c:	4318      	orrs	r0, r3
 802882e:	4302      	orrs	r2, r0
 8028830:	800a      	strh	r2, [r1, #0]
 8028832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028836:	2600      	movs	r6, #0
 8028838:	e788      	b.n	802874c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802883a:	2400      	movs	r4, #0
 802883c:	4626      	mov	r6, r4
 802883e:	e799      	b.n	8028774 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028840:	2400      	movs	r4, #0
 8028842:	e797      	b.n	8028774 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028844:	463c      	mov	r4, r7
 8028846:	e795      	b.n	8028774 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028848:	2500      	movs	r5, #0
 802884a:	e7ac      	b.n	80287a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802884c:	2300      	movs	r3, #0
 802884e:	461d      	mov	r5, r3
 8028850:	e7bd      	b.n	80287ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028852:	4663      	mov	r3, ip
 8028854:	4665      	mov	r5, ip
 8028856:	e7ba      	b.n	80287ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028858:	2300      	movs	r3, #0
 802885a:	e7b8      	b.n	80287ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802885c:	463b      	mov	r3, r7
 802885e:	e7b6      	b.n	80287ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028860:	880d      	ldrh	r5, [r1, #0]
 8028862:	b29f      	uxth	r7, r3
 8028864:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028868:	43db      	mvns	r3, r3
 802886a:	122c      	asrs	r4, r5, #8
 802886c:	fb10 f007 	smulbb	r0, r0, r7
 8028870:	b2db      	uxtb	r3, r3
 8028872:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028876:	b2f6      	uxtb	r6, r6
 8028878:	b2d2      	uxtb	r2, r2
 802887a:	fb04 0403 	mla	r4, r4, r3, r0
 802887e:	10e8      	asrs	r0, r5, #3
 8028880:	fb12 f207 	smulbb	r2, r2, r7
 8028884:	00ed      	lsls	r5, r5, #3
 8028886:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802888a:	b2a4      	uxth	r4, r4
 802888c:	fb16 f607 	smulbb	r6, r6, r7
 8028890:	b2ed      	uxtb	r5, r5
 8028892:	fb00 6603 	mla	r6, r0, r3, r6
 8028896:	fb05 2303 	mla	r3, r5, r3, r2
 802889a:	b2b0      	uxth	r0, r6
 802889c:	b29a      	uxth	r2, r3
 802889e:	1c63      	adds	r3, r4, #1
 80288a0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80288a4:	1c53      	adds	r3, r2, #1
 80288a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80288aa:	1c42      	adds	r2, r0, #1
 80288ac:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80288b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80288b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80288b8:	0940      	lsrs	r0, r0, #5
 80288ba:	4323      	orrs	r3, r4
 80288bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80288c0:	4303      	orrs	r3, r0
 80288c2:	800b      	strh	r3, [r1, #0]
 80288c4:	e7b5      	b.n	8028832 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80288c6:	bf00      	nop
 80288c8:	20015218 	.word	0x20015218
 80288cc:	00fff800 	.word	0x00fff800

080288d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80288d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288d4:	b097      	sub	sp, #92	; 0x5c
 80288d6:	9214      	str	r2, [sp, #80]	; 0x50
 80288d8:	9309      	str	r3, [sp, #36]	; 0x24
 80288da:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80288dc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80288e0:	9015      	str	r0, [sp, #84]	; 0x54
 80288e2:	910d      	str	r1, [sp, #52]	; 0x34
 80288e4:	6850      	ldr	r0, [r2, #4]
 80288e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80288e8:	6812      	ldr	r2, [r2, #0]
 80288ea:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80288ee:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80288f2:	fb00 1303 	mla	r3, r0, r3, r1
 80288f6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80288fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288fc:	689b      	ldr	r3, [r3, #8]
 80288fe:	3301      	adds	r3, #1
 8028900:	f023 0301 	bic.w	r3, r3, #1
 8028904:	930a      	str	r3, [sp, #40]	; 0x28
 8028906:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028908:	681f      	ldr	r7, [r3, #0]
 802890a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802890c:	2b00      	cmp	r3, #0
 802890e:	dc03      	bgt.n	8028918 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028910:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028912:	2b00      	cmp	r3, #0
 8028914:	f340 8289 	ble.w	8028e2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8028918:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802891a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802891e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028922:	1e48      	subs	r0, r1, #1
 8028924:	f102 3cff 	add.w	ip, r2, #4294967295
 8028928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802892a:	2b00      	cmp	r3, #0
 802892c:	f340 80c5 	ble.w	8028aba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028930:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028934:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028938:	d406      	bmi.n	8028948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802893a:	4586      	cmp	lr, r0
 802893c:	da04      	bge.n	8028948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802893e:	2b00      	cmp	r3, #0
 8028940:	db02      	blt.n	8028948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028942:	4563      	cmp	r3, ip
 8028944:	f2c0 80ba 	blt.w	8028abc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8028948:	f11e 0e01 	adds.w	lr, lr, #1
 802894c:	f100 80ab 	bmi.w	8028aa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028950:	4571      	cmp	r1, lr
 8028952:	f2c0 80a8 	blt.w	8028aa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028956:	3301      	adds	r3, #1
 8028958:	f100 80a5 	bmi.w	8028aa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802895c:	429a      	cmp	r2, r3
 802895e:	f2c0 80a2 	blt.w	8028aa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028964:	46c8      	mov	r8, r9
 8028966:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802896a:	930e      	str	r3, [sp, #56]	; 0x38
 802896c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802896e:	2b00      	cmp	r3, #0
 8028970:	f340 80c4 	ble.w	8028afc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8028974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028976:	1430      	asrs	r0, r6, #16
 8028978:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802897c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028980:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028984:	1423      	asrs	r3, r4, #16
 8028986:	f100 814f 	bmi.w	8028c28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802898a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802898e:	455b      	cmp	r3, fp
 8028990:	f280 814a 	bge.w	8028c28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028994:	2800      	cmp	r0, #0
 8028996:	f2c0 8147 	blt.w	8028c28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802899a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802899e:	4558      	cmp	r0, fp
 80289a0:	f280 8142 	bge.w	8028c28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80289a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80289a6:	fb00 3305 	mla	r3, r0, r5, r3
 80289aa:	0858      	lsrs	r0, r3, #1
 80289ac:	07dd      	lsls	r5, r3, #31
 80289ae:	f817 c000 	ldrb.w	ip, [r7, r0]
 80289b2:	bf54      	ite	pl
 80289b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80289b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80289bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80289c0:	fa5f fc8c 	uxtb.w	ip, ip
 80289c4:	2a00      	cmp	r2, #0
 80289c6:	f000 80dd 	beq.w	8028b84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80289ca:	1c58      	adds	r0, r3, #1
 80289cc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80289d0:	07c0      	lsls	r0, r0, #31
 80289d2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80289d6:	bf54      	ite	pl
 80289d8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80289dc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80289e0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80289e4:	fa5f f08e 	uxtb.w	r0, lr
 80289e8:	9010      	str	r0, [sp, #64]	; 0x40
 80289ea:	b1d9      	cbz	r1, 8028a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80289ec:	4453      	add	r3, sl
 80289ee:	0858      	lsrs	r0, r3, #1
 80289f0:	07dd      	lsls	r5, r3, #31
 80289f2:	f103 0301 	add.w	r3, r3, #1
 80289f6:	5c38      	ldrb	r0, [r7, r0]
 80289f8:	bf54      	ite	pl
 80289fa:	f000 000f 	andpl.w	r0, r0, #15
 80289fe:	1100      	asrmi	r0, r0, #4
 8028a00:	07dd      	lsls	r5, r3, #31
 8028a02:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028a06:	b2c0      	uxtb	r0, r0
 8028a08:	900b      	str	r0, [sp, #44]	; 0x2c
 8028a0a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028a0e:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028a12:	bf54      	ite	pl
 8028a14:	f00e 030f 	andpl.w	r3, lr, #15
 8028a18:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028a1c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028a20:	b2db      	uxtb	r3, r3
 8028a22:	9311      	str	r3, [sp, #68]	; 0x44
 8028a24:	b292      	uxth	r2, r2
 8028a26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028a28:	b289      	uxth	r1, r1
 8028a2a:	fb02 f301 	mul.w	r3, r2, r1
 8028a2e:	0112      	lsls	r2, r2, #4
 8028a30:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028a34:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028a38:	1ad2      	subs	r2, r2, r3
 8028a3a:	b289      	uxth	r1, r1
 8028a3c:	b292      	uxth	r2, r2
 8028a3e:	1a40      	subs	r0, r0, r1
 8028a40:	436a      	muls	r2, r5
 8028a42:	b280      	uxth	r0, r0
 8028a44:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028a4a:	fb01 c102 	mla	r1, r1, r2, ip
 8028a4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028a50:	fb03 1302 	mla	r3, r3, r2, r1
 8028a54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a58:	b1db      	cbz	r3, 8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028a5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028a5c:	4353      	muls	r3, r2
 8028a5e:	1c5a      	adds	r2, r3, #1
 8028a60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028a64:	4ac6      	ldr	r2, [pc, #792]	; (8028d80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028a66:	121b      	asrs	r3, r3, #8
 8028a68:	6812      	ldr	r2, [r2, #0]
 8028a6a:	2bff      	cmp	r3, #255	; 0xff
 8028a6c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028a70:	f040 8099 	bne.w	8028ba6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8028a74:	0953      	lsrs	r3, r2, #5
 8028a76:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028a7a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028a7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028a82:	f02c 0c07 	bic.w	ip, ip, #7
 8028a86:	ea43 0c0c 	orr.w	ip, r3, ip
 8028a8a:	ea4c 0202 	orr.w	r2, ip, r2
 8028a8e:	f8a8 2000 	strh.w	r2, [r8]
 8028a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028a94:	f108 0802 	add.w	r8, r8, #2
 8028a98:	441c      	add	r4, r3
 8028a9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028a9c:	441e      	add	r6, r3
 8028a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028aa0:	3b01      	subs	r3, #1
 8028aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8028aa4:	e762      	b.n	802896c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028aa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028aa8:	f109 0902 	add.w	r9, r9, #2
 8028aac:	441c      	add	r4, r3
 8028aae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028ab0:	441e      	add	r6, r3
 8028ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ab4:	3b01      	subs	r3, #1
 8028ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8028ab8:	e736      	b.n	8028928 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028aba:	d024      	beq.n	8028b06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028abe:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028ac0:	3b01      	subs	r3, #1
 8028ac2:	fb00 4003 	mla	r0, r0, r3, r4
 8028ac6:	1400      	asrs	r0, r0, #16
 8028ac8:	f53f af4b 	bmi.w	8028962 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028acc:	3901      	subs	r1, #1
 8028ace:	4288      	cmp	r0, r1
 8028ad0:	f6bf af47 	bge.w	8028962 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028ad4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028ad6:	fb01 6303 	mla	r3, r1, r3, r6
 8028ada:	141b      	asrs	r3, r3, #16
 8028adc:	f53f af41 	bmi.w	8028962 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028ae0:	3a01      	subs	r2, #1
 8028ae2:	4293      	cmp	r3, r2
 8028ae4:	f6bf af3d 	bge.w	8028962 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028ae8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028aec:	46c8      	mov	r8, r9
 8028aee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8028af2:	930e      	str	r3, [sp, #56]	; 0x38
 8028af4:	f1bb 0f00 	cmp.w	fp, #0
 8028af8:	f300 80b7 	bgt.w	8028c6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8028afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028afe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028b02:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028b08:	2b00      	cmp	r3, #0
 8028b0a:	f340 818e 	ble.w	8028e2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8028b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028b12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028b14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028b18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028b1c:	eef0 6a62 	vmov.f32	s13, s5
 8028b20:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028b24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028b28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b2c:	ee16 4a90 	vmov	r4, s13
 8028b30:	eef0 6a43 	vmov.f32	s13, s6
 8028b34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b38:	ee16 6a90 	vmov	r6, s13
 8028b3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028b40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028b44:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028b48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028b4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028b50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028b54:	ee12 2a90 	vmov	r2, s5
 8028b58:	eef0 2a47 	vmov.f32	s5, s14
 8028b5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b60:	ee13 2a10 	vmov	r2, s6
 8028b64:	9323      	str	r3, [sp, #140]	; 0x8c
 8028b66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028b68:	eeb0 3a67 	vmov.f32	s6, s15
 8028b6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b70:	9324      	str	r3, [sp, #144]	; 0x90
 8028b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028b74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028b76:	3b01      	subs	r3, #1
 8028b78:	930d      	str	r3, [sp, #52]	; 0x34
 8028b7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028b7c:	bf08      	it	eq
 8028b7e:	4613      	moveq	r3, r2
 8028b80:	9309      	str	r3, [sp, #36]	; 0x24
 8028b82:	e6c2      	b.n	802890a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028b84:	2900      	cmp	r1, #0
 8028b86:	f43f af4d 	beq.w	8028a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028b8a:	eb0a 0003 	add.w	r0, sl, r3
 8028b8e:	0843      	lsrs	r3, r0, #1
 8028b90:	07c0      	lsls	r0, r0, #31
 8028b92:	5cfb      	ldrb	r3, [r7, r3]
 8028b94:	bf54      	ite	pl
 8028b96:	f003 030f 	andpl.w	r3, r3, #15
 8028b9a:	111b      	asrmi	r3, r3, #4
 8028b9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028ba0:	b2db      	uxtb	r3, r3
 8028ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8028ba4:	e73e      	b.n	8028a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028ba6:	f8b8 e000 	ldrh.w	lr, [r8]
 8028baa:	fa1f fb83 	uxth.w	fp, r3
 8028bae:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028bb2:	43db      	mvns	r3, r3
 8028bb4:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028bb8:	fb11 f10b 	smulbb	r1, r1, fp
 8028bbc:	b2db      	uxtb	r3, r3
 8028bbe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028bc2:	fa5f fc8c 	uxtb.w	ip, ip
 8028bc6:	b2d2      	uxtb	r2, r2
 8028bc8:	fb00 1003 	mla	r0, r0, r3, r1
 8028bcc:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028bd0:	fb1c fc0b 	smulbb	ip, ip, fp
 8028bd4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028bd8:	b280      	uxth	r0, r0
 8028bda:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028bde:	fb12 fb0b 	smulbb	fp, r2, fp
 8028be2:	fa5f fe8e 	uxtb.w	lr, lr
 8028be6:	fb01 cc03 	mla	ip, r1, r3, ip
 8028bea:	fb0e bb03 	mla	fp, lr, r3, fp
 8028bee:	1c43      	adds	r3, r0, #1
 8028bf0:	fa1f fc8c 	uxth.w	ip, ip
 8028bf4:	fa1f fb8b 	uxth.w	fp, fp
 8028bf8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028bfc:	f10c 0101 	add.w	r1, ip, #1
 8028c00:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8028c04:	f10b 0001 	add.w	r0, fp, #1
 8028c08:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028c0c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028c10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028c14:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028c18:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028c1c:	4318      	orrs	r0, r3
 8028c1e:	ea40 000c 	orr.w	r0, r0, ip
 8028c22:	f8a8 0000 	strh.w	r0, [r8]
 8028c26:	e734      	b.n	8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c28:	f113 0b01 	adds.w	fp, r3, #1
 8028c2c:	f53f af31 	bmi.w	8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c30:	45dc      	cmp	ip, fp
 8028c32:	f6ff af2e 	blt.w	8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c36:	f110 0b01 	adds.w	fp, r0, #1
 8028c3a:	f53f af2a 	bmi.w	8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c3e:	45de      	cmp	lr, fp
 8028c40:	f6ff af27 	blt.w	8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c44:	9302      	str	r3, [sp, #8]
 8028c46:	fa0f f38e 	sxth.w	r3, lr
 8028c4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c4c:	9301      	str	r3, [sp, #4]
 8028c4e:	fa0f f38c 	sxth.w	r3, ip
 8028c52:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028c56:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028c5a:	9300      	str	r3, [sp, #0]
 8028c5c:	463a      	mov	r2, r7
 8028c5e:	4653      	mov	r3, sl
 8028c60:	4641      	mov	r1, r8
 8028c62:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028c64:	f7ff fd4c 	bl	8028700 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028c68:	e713      	b.n	8028a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c6a:	1422      	asrs	r2, r4, #16
 8028c6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028c6e:	1433      	asrs	r3, r6, #16
 8028c70:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028c74:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028c78:	fb05 2303 	mla	r3, r5, r3, r2
 8028c7c:	085a      	lsrs	r2, r3, #1
 8028c7e:	07dd      	lsls	r5, r3, #31
 8028c80:	5cba      	ldrb	r2, [r7, r2]
 8028c82:	bf54      	ite	pl
 8028c84:	f002 020f 	andpl.w	r2, r2, #15
 8028c88:	1112      	asrmi	r2, r2, #4
 8028c8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028c8e:	b2d2      	uxtb	r2, r2
 8028c90:	2900      	cmp	r1, #0
 8028c92:	d077      	beq.n	8028d84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028c94:	f103 0e01 	add.w	lr, r3, #1
 8028c98:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028c9c:	f01e 0f01 	tst.w	lr, #1
 8028ca0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028ca4:	bf0c      	ite	eq
 8028ca6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028caa:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028cae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028cb2:	fa5f f58c 	uxtb.w	r5, ip
 8028cb6:	9512      	str	r5, [sp, #72]	; 0x48
 8028cb8:	b308      	cbz	r0, 8028cfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028cba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028cbc:	442b      	add	r3, r5
 8028cbe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028cc2:	07dd      	lsls	r5, r3, #31
 8028cc4:	f103 0301 	add.w	r3, r3, #1
 8028cc8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028ccc:	bf54      	ite	pl
 8028cce:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028cd2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028cd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028cda:	fa5f f58c 	uxtb.w	r5, ip
 8028cde:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028ce2:	950c      	str	r5, [sp, #48]	; 0x30
 8028ce4:	07dd      	lsls	r5, r3, #31
 8028ce6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028cea:	bf54      	ite	pl
 8028cec:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028cf0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028cf4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028cf8:	fa5f f38c 	uxtb.w	r3, ip
 8028cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8028cfe:	b289      	uxth	r1, r1
 8028d00:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028d02:	b280      	uxth	r0, r0
 8028d04:	fb01 f300 	mul.w	r3, r1, r0
 8028d08:	0109      	lsls	r1, r1, #4
 8028d0a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028d0e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028d12:	1ac9      	subs	r1, r1, r3
 8028d14:	b280      	uxth	r0, r0
 8028d16:	b289      	uxth	r1, r1
 8028d18:	ebac 0c00 	sub.w	ip, ip, r0
 8028d1c:	4369      	muls	r1, r5
 8028d1e:	fa1f fc8c 	uxth.w	ip, ip
 8028d22:	fb02 120c 	mla	r2, r2, ip, r1
 8028d26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028d28:	fb00 2001 	mla	r0, r0, r1, r2
 8028d2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028d2e:	fb03 0302 	mla	r3, r3, r2, r0
 8028d32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028d36:	b1d3      	cbz	r3, 8028d6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028d38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028d3a:	4353      	muls	r3, r2
 8028d3c:	1c5a      	adds	r2, r3, #1
 8028d3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028d42:	4a0f      	ldr	r2, [pc, #60]	; (8028d80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028d44:	121b      	asrs	r3, r3, #8
 8028d46:	6812      	ldr	r2, [r2, #0]
 8028d48:	2bff      	cmp	r3, #255	; 0xff
 8028d4a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028d4e:	d12d      	bne.n	8028dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8028d50:	0953      	lsrs	r3, r2, #5
 8028d52:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028d56:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028d5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028d5e:	f02c 0c07 	bic.w	ip, ip, #7
 8028d62:	ea43 0c0c 	orr.w	ip, r3, ip
 8028d66:	ea4c 0202 	orr.w	r2, ip, r2
 8028d6a:	f8a8 2000 	strh.w	r2, [r8]
 8028d6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028d70:	f108 0802 	add.w	r8, r8, #2
 8028d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028d78:	441c      	add	r4, r3
 8028d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d7c:	441e      	add	r6, r3
 8028d7e:	e6b9      	b.n	8028af4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028d80:	20015218 	.word	0x20015218
 8028d84:	2800      	cmp	r0, #0
 8028d86:	d0ba      	beq.n	8028cfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028d88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028d8a:	442b      	add	r3, r5
 8028d8c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028d90:	07db      	lsls	r3, r3, #31
 8028d92:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028d96:	bf54      	ite	pl
 8028d98:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028d9c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028da0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028da4:	fa5f f38c 	uxtb.w	r3, ip
 8028da8:	930c      	str	r3, [sp, #48]	; 0x30
 8028daa:	e7a8      	b.n	8028cfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028dac:	f8b8 e000 	ldrh.w	lr, [r8]
 8028db0:	fa1f fa83 	uxth.w	sl, r3
 8028db4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028db8:	43db      	mvns	r3, r3
 8028dba:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028dbe:	fb11 f10a 	smulbb	r1, r1, sl
 8028dc2:	b2db      	uxtb	r3, r3
 8028dc4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028dc8:	b2d2      	uxtb	r2, r2
 8028dca:	fa5f fc8c 	uxtb.w	ip, ip
 8028dce:	fb00 1003 	mla	r0, r0, r3, r1
 8028dd2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028dd6:	fb12 f20a 	smulbb	r2, r2, sl
 8028dda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028dde:	b280      	uxth	r0, r0
 8028de0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028de4:	fb1c fc0a 	smulbb	ip, ip, sl
 8028de8:	fa5f fe8e 	uxtb.w	lr, lr
 8028dec:	fb0e 2203 	mla	r2, lr, r3, r2
 8028df0:	fb01 cc03 	mla	ip, r1, r3, ip
 8028df4:	1c43      	adds	r3, r0, #1
 8028df6:	b292      	uxth	r2, r2
 8028df8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028dfc:	1c51      	adds	r1, r2, #1
 8028dfe:	fa1f fc8c 	uxth.w	ip, ip
 8028e02:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028e06:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8028e0a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028e0e:	4308      	orrs	r0, r1
 8028e10:	f10c 0101 	add.w	r1, ip, #1
 8028e14:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028e18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028e1c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028e20:	ea40 000c 	orr.w	r0, r0, ip
 8028e24:	f8a8 0000 	strh.w	r0, [r8]
 8028e28:	e7a1      	b.n	8028d6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028e2a:	b017      	add	sp, #92	; 0x5c
 8028e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028e30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e34:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8028e38:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028e3c:	2d00      	cmp	r5, #0
 8028e3e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028e42:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8028e46:	fb05 0e03 	mla	lr, r5, r3, r0
 8028e4a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8028e4e:	f2c0 80b0 	blt.w	8028fb2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8028e52:	45a9      	cmp	r9, r5
 8028e54:	f340 80ad 	ble.w	8028fb2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8028e58:	2800      	cmp	r0, #0
 8028e5a:	f2c0 80a8 	blt.w	8028fae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028e5e:	4580      	cmp	r8, r0
 8028e60:	f340 80a5 	ble.w	8028fae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028e64:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028e68:	f01e 0f01 	tst.w	lr, #1
 8028e6c:	5d16      	ldrb	r6, [r2, r4]
 8028e6e:	bf0c      	ite	eq
 8028e70:	f006 060f 	andeq.w	r6, r6, #15
 8028e74:	1136      	asrne	r6, r6, #4
 8028e76:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028e7a:	b2f6      	uxtb	r6, r6
 8028e7c:	1c44      	adds	r4, r0, #1
 8028e7e:	f100 809b 	bmi.w	8028fb8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8028e82:	45a0      	cmp	r8, r4
 8028e84:	f340 8098 	ble.w	8028fb8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8028e88:	2f00      	cmp	r7, #0
 8028e8a:	f000 8097 	beq.w	8028fbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8028e8e:	f10e 0a01 	add.w	sl, lr, #1
 8028e92:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8028e96:	f01a 0f01 	tst.w	sl, #1
 8028e9a:	5d14      	ldrb	r4, [r2, r4]
 8028e9c:	bf0c      	ite	eq
 8028e9e:	f004 040f 	andeq.w	r4, r4, #15
 8028ea2:	1124      	asrne	r4, r4, #4
 8028ea4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028ea8:	b2e4      	uxtb	r4, r4
 8028eaa:	3501      	adds	r5, #1
 8028eac:	f100 808a 	bmi.w	8028fc4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028eb0:	45a9      	cmp	r9, r5
 8028eb2:	f340 8087 	ble.w	8028fc4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028eb6:	f1bc 0f00 	cmp.w	ip, #0
 8028eba:	f000 8086 	beq.w	8028fca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8028ebe:	2800      	cmp	r0, #0
 8028ec0:	db7e      	blt.n	8028fc0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028ec2:	4580      	cmp	r8, r0
 8028ec4:	dd7c      	ble.n	8028fc0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028ec6:	eb03 090e 	add.w	r9, r3, lr
 8028eca:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028ece:	f019 0f01 	tst.w	r9, #1
 8028ed2:	5d55      	ldrb	r5, [r2, r5]
 8028ed4:	bf0c      	ite	eq
 8028ed6:	f005 050f 	andeq.w	r5, r5, #15
 8028eda:	112d      	asrne	r5, r5, #4
 8028edc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028ee0:	b2ed      	uxtb	r5, r5
 8028ee2:	3001      	adds	r0, #1
 8028ee4:	d474      	bmi.n	8028fd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028ee6:	4580      	cmp	r8, r0
 8028ee8:	dd72      	ble.n	8028fd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028eea:	2f00      	cmp	r7, #0
 8028eec:	d072      	beq.n	8028fd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8028eee:	3301      	adds	r3, #1
 8028ef0:	449e      	add	lr, r3
 8028ef2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028ef6:	f01e 0f01 	tst.w	lr, #1
 8028efa:	5cd0      	ldrb	r0, [r2, r3]
 8028efc:	bf0c      	ite	eq
 8028efe:	f000 000f 	andeq.w	r0, r0, #15
 8028f02:	1100      	asrne	r0, r0, #4
 8028f04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028f08:	b2c3      	uxtb	r3, r0
 8028f0a:	b2ba      	uxth	r2, r7
 8028f0c:	fa1f fc8c 	uxth.w	ip, ip
 8028f10:	fb02 f00c 	mul.w	r0, r2, ip
 8028f14:	0112      	lsls	r2, r2, #4
 8028f16:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028f1a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8028f1e:	1a12      	subs	r2, r2, r0
 8028f20:	fa1f fc8c 	uxth.w	ip, ip
 8028f24:	b292      	uxth	r2, r2
 8028f26:	eba7 070c 	sub.w	r7, r7, ip
 8028f2a:	4362      	muls	r2, r4
 8028f2c:	b2bf      	uxth	r7, r7
 8028f2e:	fb06 2207 	mla	r2, r6, r7, r2
 8028f32:	fb0c 2505 	mla	r5, ip, r5, r2
 8028f36:	fb00 5303 	mla	r3, r0, r3, r5
 8028f3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028f3e:	b3a3      	cbz	r3, 8028faa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8028f40:	4a25      	ldr	r2, [pc, #148]	; (8028fd8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8028f42:	880e      	ldrh	r6, [r1, #0]
 8028f44:	6815      	ldr	r5, [r2, #0]
 8028f46:	b29a      	uxth	r2, r3
 8028f48:	1234      	asrs	r4, r6, #8
 8028f4a:	43db      	mvns	r3, r3
 8028f4c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8028f50:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8028f54:	b2db      	uxtb	r3, r3
 8028f56:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028f5a:	fb10 f002 	smulbb	r0, r0, r2
 8028f5e:	b2ed      	uxtb	r5, r5
 8028f60:	fb17 f702 	smulbb	r7, r7, r2
 8028f64:	fb04 0403 	mla	r4, r4, r3, r0
 8028f68:	10f0      	asrs	r0, r6, #3
 8028f6a:	fb15 f202 	smulbb	r2, r5, r2
 8028f6e:	00f6      	lsls	r6, r6, #3
 8028f70:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028f74:	b2a4      	uxth	r4, r4
 8028f76:	b2f6      	uxtb	r6, r6
 8028f78:	fb00 7003 	mla	r0, r0, r3, r7
 8028f7c:	fb06 2303 	mla	r3, r6, r3, r2
 8028f80:	b280      	uxth	r0, r0
 8028f82:	b29a      	uxth	r2, r3
 8028f84:	1c63      	adds	r3, r4, #1
 8028f86:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028f8a:	1c53      	adds	r3, r2, #1
 8028f8c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028f90:	1c42      	adds	r2, r0, #1
 8028f92:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028f96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028f9a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028f9e:	0940      	lsrs	r0, r0, #5
 8028fa0:	4323      	orrs	r3, r4
 8028fa2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028fa6:	4303      	orrs	r3, r0
 8028fa8:	800b      	strh	r3, [r1, #0]
 8028faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028fae:	2600      	movs	r6, #0
 8028fb0:	e764      	b.n	8028e7c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8028fb2:	2400      	movs	r4, #0
 8028fb4:	4626      	mov	r6, r4
 8028fb6:	e778      	b.n	8028eaa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028fb8:	2400      	movs	r4, #0
 8028fba:	e776      	b.n	8028eaa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028fbc:	463c      	mov	r4, r7
 8028fbe:	e774      	b.n	8028eaa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028fc0:	2500      	movs	r5, #0
 8028fc2:	e78e      	b.n	8028ee2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8028fc4:	2300      	movs	r3, #0
 8028fc6:	461d      	mov	r5, r3
 8028fc8:	e79f      	b.n	8028f0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028fca:	4663      	mov	r3, ip
 8028fcc:	4665      	mov	r5, ip
 8028fce:	e79c      	b.n	8028f0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028fd0:	2300      	movs	r3, #0
 8028fd2:	e79a      	b.n	8028f0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028fd4:	463b      	mov	r3, r7
 8028fd6:	e798      	b.n	8028f0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028fd8:	20015218 	.word	0x20015218

08028fdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fe0:	b093      	sub	sp, #76	; 0x4c
 8028fe2:	461d      	mov	r5, r3
 8028fe4:	920c      	str	r2, [sp, #48]	; 0x30
 8028fe6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028fe8:	9011      	str	r0, [sp, #68]	; 0x44
 8028fea:	9107      	str	r1, [sp, #28]
 8028fec:	6850      	ldr	r0, [r2, #4]
 8028fee:	6812      	ldr	r2, [r2, #0]
 8028ff0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8028ff4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8028ff8:	fb00 1303 	mla	r3, r0, r3, r1
 8028ffc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029000:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029002:	689b      	ldr	r3, [r3, #8]
 8029004:	3301      	adds	r3, #1
 8029006:	f023 0301 	bic.w	r3, r3, #1
 802900a:	9306      	str	r3, [sp, #24]
 802900c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802900e:	681f      	ldr	r7, [r3, #0]
 8029010:	9b07      	ldr	r3, [sp, #28]
 8029012:	2b00      	cmp	r3, #0
 8029014:	dc03      	bgt.n	802901e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8029016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029018:	2b00      	cmp	r3, #0
 802901a:	f340 8267 	ble.w	80294ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802901e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029020:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029024:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029028:	1e48      	subs	r0, r1, #1
 802902a:	f102 3cff 	add.w	ip, r2, #4294967295
 802902e:	2d00      	cmp	r5, #0
 8029030:	f340 80b7 	ble.w	80291a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029034:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029038:	ea4f 4326 	mov.w	r3, r6, asr #16
 802903c:	d406      	bmi.n	802904c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802903e:	4586      	cmp	lr, r0
 8029040:	da04      	bge.n	802904c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8029042:	2b00      	cmp	r3, #0
 8029044:	db02      	blt.n	802904c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8029046:	4563      	cmp	r3, ip
 8029048:	f2c0 80ac 	blt.w	80291a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802904c:	f11e 0e01 	adds.w	lr, lr, #1
 8029050:	f100 809f 	bmi.w	8029192 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029054:	4571      	cmp	r1, lr
 8029056:	f2c0 809c 	blt.w	8029192 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802905a:	3301      	adds	r3, #1
 802905c:	f100 8099 	bmi.w	8029192 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029060:	429a      	cmp	r2, r3
 8029062:	f2c0 8096 	blt.w	8029192 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029066:	46c8      	mov	r8, r9
 8029068:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802906c:	9509      	str	r5, [sp, #36]	; 0x24
 802906e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029070:	2b00      	cmp	r3, #0
 8029072:	f340 80b5 	ble.w	80291e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8029076:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802907a:	1430      	asrs	r0, r6, #16
 802907c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029080:	9308      	str	r3, [sp, #32]
 8029082:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029084:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029088:	1423      	asrs	r3, r4, #16
 802908a:	f100 813f 	bmi.w	802930c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802908e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029092:	455b      	cmp	r3, fp
 8029094:	f280 813a 	bge.w	802930c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029098:	2800      	cmp	r0, #0
 802909a:	f2c0 8137 	blt.w	802930c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802909e:	f10e 3bff 	add.w	fp, lr, #4294967295
 80290a2:	4558      	cmp	r0, fp
 80290a4:	f280 8132 	bge.w	802930c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80290a8:	9a06      	ldr	r2, [sp, #24]
 80290aa:	fb00 3302 	mla	r3, r0, r2, r3
 80290ae:	0858      	lsrs	r0, r3, #1
 80290b0:	07da      	lsls	r2, r3, #31
 80290b2:	9a08      	ldr	r2, [sp, #32]
 80290b4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80290b8:	bf54      	ite	pl
 80290ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80290be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80290c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80290c6:	fa5f fc8c 	uxtb.w	ip, ip
 80290ca:	2a00      	cmp	r2, #0
 80290cc:	f000 80cc 	beq.w	8029268 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80290d0:	1c58      	adds	r0, r3, #1
 80290d2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80290d6:	07c0      	lsls	r0, r0, #31
 80290d8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80290dc:	bf54      	ite	pl
 80290de:	f00e 0e0f 	andpl.w	lr, lr, #15
 80290e2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80290e6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80290ea:	fa5f fe8e 	uxtb.w	lr, lr
 80290ee:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80290f2:	b1b9      	cbz	r1, 8029124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80290f4:	4453      	add	r3, sl
 80290f6:	0858      	lsrs	r0, r3, #1
 80290f8:	07da      	lsls	r2, r3, #31
 80290fa:	5c38      	ldrb	r0, [r7, r0]
 80290fc:	bf54      	ite	pl
 80290fe:	f000 000f 	andpl.w	r0, r0, #15
 8029102:	1100      	asrmi	r0, r0, #4
 8029104:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029108:	b2c0      	uxtb	r0, r0
 802910a:	900a      	str	r0, [sp, #40]	; 0x28
 802910c:	1c58      	adds	r0, r3, #1
 802910e:	0843      	lsrs	r3, r0, #1
 8029110:	07c2      	lsls	r2, r0, #31
 8029112:	5cfb      	ldrb	r3, [r7, r3]
 8029114:	bf54      	ite	pl
 8029116:	f003 030f 	andpl.w	r3, r3, #15
 802911a:	111b      	asrmi	r3, r3, #4
 802911c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029120:	b2db      	uxtb	r3, r3
 8029122:	930e      	str	r3, [sp, #56]	; 0x38
 8029124:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029128:	b289      	uxth	r1, r1
 802912a:	fb02 f301 	mul.w	r3, r2, r1
 802912e:	0112      	lsls	r2, r2, #4
 8029130:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029134:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029138:	1ad2      	subs	r2, r2, r3
 802913a:	b289      	uxth	r1, r1
 802913c:	b292      	uxth	r2, r2
 802913e:	1a40      	subs	r0, r0, r1
 8029140:	fa1f fe80 	uxth.w	lr, r0
 8029144:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029146:	4342      	muls	r2, r0
 8029148:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802914c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802914e:	fb01 c102 	mla	r1, r1, r2, ip
 8029152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029154:	fb03 1302 	mla	r3, r3, r2, r1
 8029158:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802915c:	2bff      	cmp	r3, #255	; 0xff
 802915e:	f040 8094 	bne.w	802928a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8029162:	4bbf      	ldr	r3, [pc, #764]	; (8029460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029164:	681a      	ldr	r2, [r3, #0]
 8029166:	4bbf      	ldr	r3, [pc, #764]	; (8029464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8029168:	0951      	lsrs	r1, r2, #5
 802916a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802916e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029172:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029176:	430b      	orrs	r3, r1
 8029178:	4313      	orrs	r3, r2
 802917a:	f8a8 3000 	strh.w	r3, [r8]
 802917e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029180:	f108 0802 	add.w	r8, r8, #2
 8029184:	441c      	add	r4, r3
 8029186:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029188:	441e      	add	r6, r3
 802918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802918c:	3b01      	subs	r3, #1
 802918e:	9309      	str	r3, [sp, #36]	; 0x24
 8029190:	e76d      	b.n	802906e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029192:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029194:	3d01      	subs	r5, #1
 8029196:	f109 0902 	add.w	r9, r9, #2
 802919a:	441c      	add	r4, r3
 802919c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802919e:	441e      	add	r6, r3
 80291a0:	e745      	b.n	802902e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80291a2:	d021      	beq.n	80291e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80291a4:	1e6b      	subs	r3, r5, #1
 80291a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80291a8:	fb00 4003 	mla	r0, r0, r3, r4
 80291ac:	1400      	asrs	r0, r0, #16
 80291ae:	f53f af5a 	bmi.w	8029066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80291b2:	3901      	subs	r1, #1
 80291b4:	4288      	cmp	r0, r1
 80291b6:	f6bf af56 	bge.w	8029066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80291ba:	9920      	ldr	r1, [sp, #128]	; 0x80
 80291bc:	fb01 6303 	mla	r3, r1, r3, r6
 80291c0:	141b      	asrs	r3, r3, #16
 80291c2:	f53f af50 	bmi.w	8029066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80291c6:	3a01      	subs	r2, #1
 80291c8:	4293      	cmp	r3, r2
 80291ca:	f6bf af4c 	bge.w	8029066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80291ce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80291d2:	46a8      	mov	r8, r5
 80291d4:	46ce      	mov	lr, r9
 80291d6:	9308      	str	r3, [sp, #32]
 80291d8:	f1b8 0f00 	cmp.w	r8, #0
 80291dc:	f300 80b6 	bgt.w	802934c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80291e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80291e4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80291e8:	9b07      	ldr	r3, [sp, #28]
 80291ea:	2b00      	cmp	r3, #0
 80291ec:	f340 817e 	ble.w	80294ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80291f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80291f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80291f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80291fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80291fe:	eef0 6a62 	vmov.f32	s13, s5
 8029202:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029206:	ee31 1a05 	vadd.f32	s2, s2, s10
 802920a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802920e:	ee16 4a90 	vmov	r4, s13
 8029212:	eef0 6a43 	vmov.f32	s13, s6
 8029216:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802921a:	ee16 6a90 	vmov	r6, s13
 802921e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029222:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029226:	ee77 2a62 	vsub.f32	s5, s14, s5
 802922a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802922e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029232:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029236:	ee12 2a90 	vmov	r2, s5
 802923a:	eef0 2a47 	vmov.f32	s5, s14
 802923e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029242:	ee13 2a10 	vmov	r2, s6
 8029246:	931f      	str	r3, [sp, #124]	; 0x7c
 8029248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802924a:	eeb0 3a67 	vmov.f32	s6, s15
 802924e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029252:	9320      	str	r3, [sp, #128]	; 0x80
 8029254:	9b07      	ldr	r3, [sp, #28]
 8029256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029258:	3b01      	subs	r3, #1
 802925a:	9307      	str	r3, [sp, #28]
 802925c:	bf08      	it	eq
 802925e:	4615      	moveq	r5, r2
 8029260:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029262:	bf18      	it	ne
 8029264:	461d      	movne	r5, r3
 8029266:	e6d3      	b.n	8029010 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8029268:	2900      	cmp	r1, #0
 802926a:	f43f af5b 	beq.w	8029124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802926e:	eb0a 0003 	add.w	r0, sl, r3
 8029272:	0843      	lsrs	r3, r0, #1
 8029274:	07c0      	lsls	r0, r0, #31
 8029276:	5cfb      	ldrb	r3, [r7, r3]
 8029278:	bf54      	ite	pl
 802927a:	f003 030f 	andpl.w	r3, r3, #15
 802927e:	111b      	asrmi	r3, r3, #4
 8029280:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029284:	b2db      	uxtb	r3, r3
 8029286:	930a      	str	r3, [sp, #40]	; 0x28
 8029288:	e74c      	b.n	8029124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802928a:	2b00      	cmp	r3, #0
 802928c:	f43f af77 	beq.w	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029290:	4a73      	ldr	r2, [pc, #460]	; (8029460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029292:	fa1f fe83 	uxth.w	lr, r3
 8029296:	f8b8 c000 	ldrh.w	ip, [r8]
 802929a:	43db      	mvns	r3, r3
 802929c:	6810      	ldr	r0, [r2, #0]
 802929e:	ea4f 212c 	mov.w	r1, ip, asr #8
 80292a2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80292a6:	b2db      	uxtb	r3, r3
 80292a8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80292ac:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80292b0:	fb12 f20e 	smulbb	r2, r2, lr
 80292b4:	b2c0      	uxtb	r0, r0
 80292b6:	fb1b fb0e 	smulbb	fp, fp, lr
 80292ba:	fb01 2103 	mla	r1, r1, r3, r2
 80292be:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80292c2:	fb10 fe0e 	smulbb	lr, r0, lr
 80292c6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80292ca:	b289      	uxth	r1, r1
 80292cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80292d0:	fa5f fc8c 	uxtb.w	ip, ip
 80292d4:	fb02 b203 	mla	r2, r2, r3, fp
 80292d8:	1c48      	adds	r0, r1, #1
 80292da:	fb0c e303 	mla	r3, ip, r3, lr
 80292de:	b292      	uxth	r2, r2
 80292e0:	b29b      	uxth	r3, r3
 80292e2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80292e6:	f102 0b01 	add.w	fp, r2, #1
 80292ea:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80292ee:	1c59      	adds	r1, r3, #1
 80292f0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80292f4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80292f8:	0952      	lsrs	r2, r2, #5
 80292fa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80292fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029302:	4301      	orrs	r1, r0
 8029304:	4311      	orrs	r1, r2
 8029306:	f8a8 1000 	strh.w	r1, [r8]
 802930a:	e738      	b.n	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802930c:	f113 0b01 	adds.w	fp, r3, #1
 8029310:	f53f af35 	bmi.w	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029314:	45dc      	cmp	ip, fp
 8029316:	f6ff af32 	blt.w	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802931a:	f110 0b01 	adds.w	fp, r0, #1
 802931e:	f53f af2e 	bmi.w	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029322:	45de      	cmp	lr, fp
 8029324:	f6ff af2b 	blt.w	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029328:	9302      	str	r3, [sp, #8]
 802932a:	fa0f f38e 	sxth.w	r3, lr
 802932e:	9a08      	ldr	r2, [sp, #32]
 8029330:	9301      	str	r3, [sp, #4]
 8029332:	fa0f f38c 	sxth.w	r3, ip
 8029336:	9105      	str	r1, [sp, #20]
 8029338:	4641      	mov	r1, r8
 802933a:	9300      	str	r3, [sp, #0]
 802933c:	4653      	mov	r3, sl
 802933e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029342:	463a      	mov	r2, r7
 8029344:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029346:	f7ff fd73 	bl	8028e30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802934a:	e718      	b.n	802917e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802934c:	1422      	asrs	r2, r4, #16
 802934e:	9906      	ldr	r1, [sp, #24]
 8029350:	1433      	asrs	r3, r6, #16
 8029352:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029356:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802935a:	fb01 2303 	mla	r3, r1, r3, r2
 802935e:	085a      	lsrs	r2, r3, #1
 8029360:	07d9      	lsls	r1, r3, #31
 8029362:	5cba      	ldrb	r2, [r7, r2]
 8029364:	bf54      	ite	pl
 8029366:	f002 020f 	andpl.w	r2, r2, #15
 802936a:	1112      	asrmi	r2, r2, #4
 802936c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029370:	b2d2      	uxtb	r2, r2
 8029372:	2800      	cmp	r0, #0
 8029374:	d063      	beq.n	802943e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8029376:	f103 0a01 	add.w	sl, r3, #1
 802937a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802937e:	f01a 0f01 	tst.w	sl, #1
 8029382:	5c79      	ldrb	r1, [r7, r1]
 8029384:	bf0c      	ite	eq
 8029386:	f001 010f 	andeq.w	r1, r1, #15
 802938a:	1109      	asrne	r1, r1, #4
 802938c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029390:	b2c9      	uxtb	r1, r1
 8029392:	910f      	str	r1, [sp, #60]	; 0x3c
 8029394:	f1bc 0f00 	cmp.w	ip, #0
 8029398:	d01a      	beq.n	80293d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802939a:	9908      	ldr	r1, [sp, #32]
 802939c:	440b      	add	r3, r1
 802939e:	0859      	lsrs	r1, r3, #1
 80293a0:	f013 0f01 	tst.w	r3, #1
 80293a4:	f103 0301 	add.w	r3, r3, #1
 80293a8:	5c79      	ldrb	r1, [r7, r1]
 80293aa:	bf0c      	ite	eq
 80293ac:	f001 010f 	andeq.w	r1, r1, #15
 80293b0:	1109      	asrne	r1, r1, #4
 80293b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80293b6:	b2c9      	uxtb	r1, r1
 80293b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80293ba:	0859      	lsrs	r1, r3, #1
 80293bc:	07db      	lsls	r3, r3, #31
 80293be:	5c79      	ldrb	r1, [r7, r1]
 80293c0:	bf54      	ite	pl
 80293c2:	f001 010f 	andpl.w	r1, r1, #15
 80293c6:	1109      	asrmi	r1, r1, #4
 80293c8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80293cc:	b2c9      	uxtb	r1, r1
 80293ce:	9110      	str	r1, [sp, #64]	; 0x40
 80293d0:	b280      	uxth	r0, r0
 80293d2:	fa1f fc8c 	uxth.w	ip, ip
 80293d6:	fb00 f30c 	mul.w	r3, r0, ip
 80293da:	0100      	lsls	r0, r0, #4
 80293dc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80293e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80293e4:	1ac0      	subs	r0, r0, r3
 80293e6:	fa1f fc8c 	uxth.w	ip, ip
 80293ea:	b280      	uxth	r0, r0
 80293ec:	eba1 010c 	sub.w	r1, r1, ip
 80293f0:	fa1f fa81 	uxth.w	sl, r1
 80293f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80293f6:	4348      	muls	r0, r1
 80293f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80293fa:	fb02 020a 	mla	r2, r2, sl, r0
 80293fe:	fb0c 2c01 	mla	ip, ip, r1, r2
 8029402:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029404:	fb03 c302 	mla	r3, r3, r2, ip
 8029408:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802940c:	2bff      	cmp	r3, #255	; 0xff
 802940e:	d12b      	bne.n	8029468 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8029410:	4b13      	ldr	r3, [pc, #76]	; (8029460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029412:	681a      	ldr	r2, [r3, #0]
 8029414:	4b13      	ldr	r3, [pc, #76]	; (8029464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8029416:	0951      	lsrs	r1, r2, #5
 8029418:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802941c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029420:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029424:	430b      	orrs	r3, r1
 8029426:	4313      	orrs	r3, r2
 8029428:	f8ae 3000 	strh.w	r3, [lr]
 802942c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802942e:	f10e 0e02 	add.w	lr, lr, #2
 8029432:	f108 38ff 	add.w	r8, r8, #4294967295
 8029436:	441c      	add	r4, r3
 8029438:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802943a:	441e      	add	r6, r3
 802943c:	e6cc      	b.n	80291d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802943e:	f1bc 0f00 	cmp.w	ip, #0
 8029442:	d0c5      	beq.n	80293d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8029444:	9908      	ldr	r1, [sp, #32]
 8029446:	440b      	add	r3, r1
 8029448:	0859      	lsrs	r1, r3, #1
 802944a:	07db      	lsls	r3, r3, #31
 802944c:	5c79      	ldrb	r1, [r7, r1]
 802944e:	bf54      	ite	pl
 8029450:	f001 010f 	andpl.w	r1, r1, #15
 8029454:	1109      	asrmi	r1, r1, #4
 8029456:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802945a:	b2c9      	uxtb	r1, r1
 802945c:	910b      	str	r1, [sp, #44]	; 0x2c
 802945e:	e7b7      	b.n	80293d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8029460:	20015218 	.word	0x20015218
 8029464:	fffff800 	.word	0xfffff800
 8029468:	2b00      	cmp	r3, #0
 802946a:	d0df      	beq.n	802942c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802946c:	4a21      	ldr	r2, [pc, #132]	; (80294f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802946e:	fa1f fa83 	uxth.w	sl, r3
 8029472:	f8be c000 	ldrh.w	ip, [lr]
 8029476:	43db      	mvns	r3, r3
 8029478:	6810      	ldr	r0, [r2, #0]
 802947a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802947e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029482:	b2db      	uxtb	r3, r3
 8029484:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029488:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802948c:	fb12 f20a 	smulbb	r2, r2, sl
 8029490:	b2c0      	uxtb	r0, r0
 8029492:	fb1b fb0a 	smulbb	fp, fp, sl
 8029496:	fb01 2103 	mla	r1, r1, r3, r2
 802949a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802949e:	fb10 f00a 	smulbb	r0, r0, sl
 80294a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80294a6:	b289      	uxth	r1, r1
 80294a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80294ac:	fa5f fc8c 	uxtb.w	ip, ip
 80294b0:	fb02 b203 	mla	r2, r2, r3, fp
 80294b4:	fb0c 0003 	mla	r0, ip, r3, r0
 80294b8:	1c4b      	adds	r3, r1, #1
 80294ba:	b292      	uxth	r2, r2
 80294bc:	b280      	uxth	r0, r0
 80294be:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80294c2:	f100 0b01 	add.w	fp, r0, #1
 80294c6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80294ca:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80294ce:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80294d2:	ea4b 0101 	orr.w	r1, fp, r1
 80294d6:	f102 0b01 	add.w	fp, r2, #1
 80294da:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80294de:	0952      	lsrs	r2, r2, #5
 80294e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80294e4:	4311      	orrs	r1, r2
 80294e6:	f8ae 1000 	strh.w	r1, [lr]
 80294ea:	e79f      	b.n	802942c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80294ec:	b013      	add	sp, #76	; 0x4c
 80294ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294f2:	bf00      	nop
 80294f4:	20015218 	.word	0x20015218

080294f8 <CRC_Lock>:
 80294f8:	4a20      	ldr	r2, [pc, #128]	; (802957c <CRC_Lock+0x84>)
 80294fa:	b530      	push	{r4, r5, lr}
 80294fc:	6813      	ldr	r3, [r2, #0]
 80294fe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029502:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029506:	f023 0301 	bic.w	r3, r3, #1
 802950a:	6013      	str	r3, [r2, #0]
 802950c:	4b1c      	ldr	r3, [pc, #112]	; (8029580 <CRC_Lock+0x88>)
 802950e:	681a      	ldr	r2, [r3, #0]
 8029510:	4022      	ands	r2, r4
 8029512:	42aa      	cmp	r2, r5
 8029514:	d005      	beq.n	8029522 <CRC_Lock+0x2a>
 8029516:	681b      	ldr	r3, [r3, #0]
 8029518:	f24c 2270 	movw	r2, #49776	; 0xc270
 802951c:	4023      	ands	r3, r4
 802951e:	4293      	cmp	r3, r2
 8029520:	d124      	bne.n	802956c <CRC_Lock+0x74>
 8029522:	4b18      	ldr	r3, [pc, #96]	; (8029584 <CRC_Lock+0x8c>)
 8029524:	681b      	ldr	r3, [r3, #0]
 8029526:	bb0b      	cbnz	r3, 802956c <CRC_Lock+0x74>
 8029528:	4b17      	ldr	r3, [pc, #92]	; (8029588 <CRC_Lock+0x90>)
 802952a:	681a      	ldr	r2, [r3, #0]
 802952c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029530:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029534:	d00d      	beq.n	8029552 <CRC_Lock+0x5a>
 8029536:	681a      	ldr	r2, [r3, #0]
 8029538:	f240 4483 	movw	r4, #1155	; 0x483
 802953c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029540:	42a2      	cmp	r2, r4
 8029542:	d006      	beq.n	8029552 <CRC_Lock+0x5a>
 8029544:	681b      	ldr	r3, [r3, #0]
 8029546:	f240 4285 	movw	r2, #1157	; 0x485
 802954a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802954e:	4293      	cmp	r3, r2
 8029550:	d10c      	bne.n	802956c <CRC_Lock+0x74>
 8029552:	4b0e      	ldr	r3, [pc, #56]	; (802958c <CRC_Lock+0x94>)
 8029554:	2201      	movs	r2, #1
 8029556:	601a      	str	r2, [r3, #0]
 8029558:	681a      	ldr	r2, [r3, #0]
 802955a:	2a00      	cmp	r2, #0
 802955c:	d1fc      	bne.n	8029558 <CRC_Lock+0x60>
 802955e:	4b0c      	ldr	r3, [pc, #48]	; (8029590 <CRC_Lock+0x98>)
 8029560:	6018      	str	r0, [r3, #0]
 8029562:	6818      	ldr	r0, [r3, #0]
 8029564:	1a43      	subs	r3, r0, r1
 8029566:	4258      	negs	r0, r3
 8029568:	4158      	adcs	r0, r3
 802956a:	bd30      	pop	{r4, r5, pc}
 802956c:	4b09      	ldr	r3, [pc, #36]	; (8029594 <CRC_Lock+0x9c>)
 802956e:	2201      	movs	r2, #1
 8029570:	601a      	str	r2, [r3, #0]
 8029572:	681a      	ldr	r2, [r3, #0]
 8029574:	2a00      	cmp	r2, #0
 8029576:	d1fc      	bne.n	8029572 <CRC_Lock+0x7a>
 8029578:	4b07      	ldr	r3, [pc, #28]	; (8029598 <CRC_Lock+0xa0>)
 802957a:	e7f1      	b.n	8029560 <CRC_Lock+0x68>
 802957c:	e0002000 	.word	0xe0002000
 8029580:	e000ed00 	.word	0xe000ed00
 8029584:	e0042000 	.word	0xe0042000
 8029588:	5c001000 	.word	0x5c001000
 802958c:	58024c08 	.word	0x58024c08
 8029590:	58024c00 	.word	0x58024c00
 8029594:	40023008 	.word	0x40023008
 8029598:	40023000 	.word	0x40023000

0802959c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802959c:	6101      	str	r1, [r0, #16]
 802959e:	4770      	bx	lr

080295a0 <_ZN8touchgfx8Gestures4tickEv>:
 80295a0:	7b83      	ldrb	r3, [r0, #14]
 80295a2:	b14b      	cbz	r3, 80295b8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80295a4:	8903      	ldrh	r3, [r0, #8]
 80295a6:	3301      	adds	r3, #1
 80295a8:	b29b      	uxth	r3, r3
 80295aa:	2b07      	cmp	r3, #7
 80295ac:	8103      	strh	r3, [r0, #8]
 80295ae:	bf81      	itttt	hi
 80295b0:	2300      	movhi	r3, #0
 80295b2:	8143      	strhhi	r3, [r0, #10]
 80295b4:	8183      	strhhi	r3, [r0, #12]
 80295b6:	7383      	strbhi	r3, [r0, #14]
 80295b8:	4770      	bx	lr
	...

080295bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80295bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80295c0:	4698      	mov	r8, r3
 80295c2:	8883      	ldrh	r3, [r0, #4]
 80295c4:	4604      	mov	r4, r0
 80295c6:	4617      	mov	r7, r2
 80295c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80295cc:	eba8 0303 	sub.w	r3, r8, r3
 80295d0:	4a19      	ldr	r2, [pc, #100]	; (8029638 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80295d2:	460e      	mov	r6, r1
 80295d4:	b21b      	sxth	r3, r3
 80295d6:	88c1      	ldrh	r1, [r0, #6]
 80295d8:	9200      	str	r2, [sp, #0]
 80295da:	2000      	movs	r0, #0
 80295dc:	2b00      	cmp	r3, #0
 80295de:	8aa2      	ldrh	r2, [r4, #20]
 80295e0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80295e4:	bfb8      	it	lt
 80295e6:	425b      	neglt	r3, r3
 80295e8:	f88d 0004 	strb.w	r0, [sp, #4]
 80295ec:	f8ad 1008 	strh.w	r1, [sp, #8]
 80295f0:	b21b      	sxth	r3, r3
 80295f2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80295f6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80295fa:	4293      	cmp	r3, r2
 80295fc:	dc07      	bgt.n	802960e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80295fe:	1a69      	subs	r1, r5, r1
 8029600:	b209      	sxth	r1, r1
 8029602:	2900      	cmp	r1, #0
 8029604:	bfb8      	it	lt
 8029606:	4249      	neglt	r1, r1
 8029608:	b209      	sxth	r1, r1
 802960a:	428a      	cmp	r2, r1
 802960c:	da10      	bge.n	8029630 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802960e:	6920      	ldr	r0, [r4, #16]
 8029610:	4669      	mov	r1, sp
 8029612:	eba8 0606 	sub.w	r6, r8, r6
 8029616:	1bef      	subs	r7, r5, r7
 8029618:	6803      	ldr	r3, [r0, #0]
 802961a:	685b      	ldr	r3, [r3, #4]
 802961c:	4798      	blx	r3
 802961e:	2300      	movs	r3, #0
 8029620:	2001      	movs	r0, #1
 8029622:	8166      	strh	r6, [r4, #10]
 8029624:	8123      	strh	r3, [r4, #8]
 8029626:	81a7      	strh	r7, [r4, #12]
 8029628:	f8a4 8004 	strh.w	r8, [r4, #4]
 802962c:	80e5      	strh	r5, [r4, #6]
 802962e:	73a0      	strb	r0, [r4, #14]
 8029630:	b004      	add	sp, #16
 8029632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029636:	bf00      	nop
 8029638:	0802f12c 	.word	0x0802f12c

0802963c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802963c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802963e:	461e      	mov	r6, r3
 8029640:	1e4b      	subs	r3, r1, #1
 8029642:	b085      	sub	sp, #20
 8029644:	4604      	mov	r4, r0
 8029646:	2b01      	cmp	r3, #1
 8029648:	460d      	mov	r5, r1
 802964a:	4617      	mov	r7, r2
 802964c:	d84b      	bhi.n	80296e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802964e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029652:	1cd3      	adds	r3, r2, #3
 8029654:	b29b      	uxth	r3, r3
 8029656:	2b06      	cmp	r3, #6
 8029658:	d916      	bls.n	8029688 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802965a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80296fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802965e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029662:	f8cd c004 	str.w	ip, [sp, #4]
 8029666:	f04f 0c00 	mov.w	ip, #0
 802966a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802966e:	6900      	ldr	r0, [r0, #16]
 8029670:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029674:	a901      	add	r1, sp, #4
 8029676:	f88d c008 	strb.w	ip, [sp, #8]
 802967a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802967e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029682:	6803      	ldr	r3, [r0, #0]
 8029684:	689b      	ldr	r3, [r3, #8]
 8029686:	4798      	blx	r3
 8029688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802968c:	1cd3      	adds	r3, r2, #3
 802968e:	b29b      	uxth	r3, r3
 8029690:	2b06      	cmp	r3, #6
 8029692:	d916      	bls.n	80296c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029694:	f8df c064 	ldr.w	ip, [pc, #100]	; 80296fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029698:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802969c:	f8cd c004 	str.w	ip, [sp, #4]
 80296a0:	f04f 0c01 	mov.w	ip, #1
 80296a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80296a8:	6920      	ldr	r0, [r4, #16]
 80296aa:	f8ad 100c 	strh.w	r1, [sp, #12]
 80296ae:	a901      	add	r1, sp, #4
 80296b0:	f88d c008 	strb.w	ip, [sp, #8]
 80296b4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80296b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80296bc:	6803      	ldr	r3, [r0, #0]
 80296be:	689b      	ldr	r3, [r3, #8]
 80296c0:	4798      	blx	r3
 80296c2:	4b0d      	ldr	r3, [pc, #52]	; (80296f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80296c4:	a901      	add	r1, sp, #4
 80296c6:	6920      	ldr	r0, [r4, #16]
 80296c8:	9301      	str	r3, [sp, #4]
 80296ca:	2300      	movs	r3, #0
 80296cc:	f88d 5008 	strb.w	r5, [sp, #8]
 80296d0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80296d4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80296d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80296dc:	6803      	ldr	r3, [r0, #0]
 80296de:	681b      	ldr	r3, [r3, #0]
 80296e0:	4798      	blx	r3
 80296e2:	b005      	add	sp, #20
 80296e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80296e6:	2900      	cmp	r1, #0
 80296e8:	d1eb      	bne.n	80296c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80296ea:	80a2      	strh	r2, [r4, #4]
 80296ec:	80c6      	strh	r6, [r0, #6]
 80296ee:	60a1      	str	r1, [r4, #8]
 80296f0:	81a1      	strh	r1, [r4, #12]
 80296f2:	73a1      	strb	r1, [r4, #14]
 80296f4:	e7e5      	b.n	80296c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80296f6:	bf00      	nop
 80296f8:	0802f118 	.word	0x0802f118
 80296fc:	0802f490 	.word	0x0802f490

08029700 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8029700:	790b      	ldrb	r3, [r1, #4]
 8029702:	2b00      	cmp	r3, #0
 8029704:	bf0c      	ite	eq
 8029706:	2301      	moveq	r3, #1
 8029708:	2300      	movne	r3, #0
 802970a:	b570      	push	{r4, r5, r6, lr}
 802970c:	4604      	mov	r4, r0
 802970e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8029712:	460e      	mov	r6, r1
 8029714:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8029718:	d109      	bne.n	802972e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802971a:	b14d      	cbz	r5, 8029730 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802971c:	7933      	ldrb	r3, [r6, #4]
 802971e:	2b01      	cmp	r3, #1
 8029720:	d10c      	bne.n	802973c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029722:	6823      	ldr	r3, [r4, #0]
 8029724:	4620      	mov	r0, r4
 8029726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8029728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802972c:	4718      	bx	r3
 802972e:	b12d      	cbz	r5, 802973c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029730:	6823      	ldr	r3, [r4, #0]
 8029732:	4620      	mov	r0, r4
 8029734:	695b      	ldr	r3, [r3, #20]
 8029736:	4798      	blx	r3
 8029738:	2d00      	cmp	r5, #0
 802973a:	d1ef      	bne.n	802971c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802973c:	bd70      	pop	{r4, r5, r6, pc}

0802973e <__aeabi_atexit>:
 802973e:	460b      	mov	r3, r1
 8029740:	4601      	mov	r1, r0
 8029742:	4618      	mov	r0, r3
 8029744:	f000 b852 	b.w	80297ec <__cxa_atexit>

08029748 <_ZdlPvj>:
 8029748:	f000 b812 	b.w	8029770 <_ZdlPv>

0802974c <__cxa_guard_acquire>:
 802974c:	6803      	ldr	r3, [r0, #0]
 802974e:	07db      	lsls	r3, r3, #31
 8029750:	d406      	bmi.n	8029760 <__cxa_guard_acquire+0x14>
 8029752:	7843      	ldrb	r3, [r0, #1]
 8029754:	b103      	cbz	r3, 8029758 <__cxa_guard_acquire+0xc>
 8029756:	deff      	udf	#255	; 0xff
 8029758:	2301      	movs	r3, #1
 802975a:	7043      	strb	r3, [r0, #1]
 802975c:	4618      	mov	r0, r3
 802975e:	4770      	bx	lr
 8029760:	2000      	movs	r0, #0
 8029762:	4770      	bx	lr

08029764 <__cxa_guard_release>:
 8029764:	2301      	movs	r3, #1
 8029766:	6003      	str	r3, [r0, #0]
 8029768:	4770      	bx	lr

0802976a <__cxa_pure_virtual>:
 802976a:	b508      	push	{r3, lr}
 802976c:	f000 f80e 	bl	802978c <_ZSt9terminatev>

08029770 <_ZdlPv>:
 8029770:	f000 b892 	b.w	8029898 <free>

08029774 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029774:	b508      	push	{r3, lr}
 8029776:	4780      	blx	r0
 8029778:	f000 f80d 	bl	8029796 <abort>

0802977c <_ZSt13get_terminatev>:
 802977c:	4b02      	ldr	r3, [pc, #8]	; (8029788 <_ZSt13get_terminatev+0xc>)
 802977e:	6818      	ldr	r0, [r3, #0]
 8029780:	f3bf 8f5b 	dmb	ish
 8029784:	4770      	bx	lr
 8029786:	bf00      	nop
 8029788:	200000b8 	.word	0x200000b8

0802978c <_ZSt9terminatev>:
 802978c:	b508      	push	{r3, lr}
 802978e:	f7ff fff5 	bl	802977c <_ZSt13get_terminatev>
 8029792:	f7ff ffef 	bl	8029774 <_ZN10__cxxabiv111__terminateEPFvvE>

08029796 <abort>:
 8029796:	b508      	push	{r3, lr}
 8029798:	2006      	movs	r0, #6
 802979a:	f000 fca1 	bl	802a0e0 <raise>
 802979e:	2001      	movs	r0, #1
 80297a0:	f7d8 f8bc 	bl	800191c <_exit>

080297a4 <__assert_func>:
 80297a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80297a6:	4614      	mov	r4, r2
 80297a8:	461a      	mov	r2, r3
 80297aa:	4b09      	ldr	r3, [pc, #36]	; (80297d0 <__assert_func+0x2c>)
 80297ac:	681b      	ldr	r3, [r3, #0]
 80297ae:	4605      	mov	r5, r0
 80297b0:	68d8      	ldr	r0, [r3, #12]
 80297b2:	b14c      	cbz	r4, 80297c8 <__assert_func+0x24>
 80297b4:	4b07      	ldr	r3, [pc, #28]	; (80297d4 <__assert_func+0x30>)
 80297b6:	9100      	str	r1, [sp, #0]
 80297b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80297bc:	4906      	ldr	r1, [pc, #24]	; (80297d8 <__assert_func+0x34>)
 80297be:	462b      	mov	r3, r5
 80297c0:	f000 f828 	bl	8029814 <fiprintf>
 80297c4:	f7ff ffe7 	bl	8029796 <abort>
 80297c8:	4b04      	ldr	r3, [pc, #16]	; (80297dc <__assert_func+0x38>)
 80297ca:	461c      	mov	r4, r3
 80297cc:	e7f3      	b.n	80297b6 <__assert_func+0x12>
 80297ce:	bf00      	nop
 80297d0:	200000bc 	.word	0x200000bc
 80297d4:	0802f758 	.word	0x0802f758
 80297d8:	0802f765 	.word	0x0802f765
 80297dc:	0802f793 	.word	0x0802f793

080297e0 <atexit>:
 80297e0:	2300      	movs	r3, #0
 80297e2:	4601      	mov	r1, r0
 80297e4:	461a      	mov	r2, r3
 80297e6:	4618      	mov	r0, r3
 80297e8:	f000 bd8a 	b.w	802a300 <__register_exitproc>

080297ec <__cxa_atexit>:
 80297ec:	b510      	push	{r4, lr}
 80297ee:	4c05      	ldr	r4, [pc, #20]	; (8029804 <__cxa_atexit+0x18>)
 80297f0:	4613      	mov	r3, r2
 80297f2:	b12c      	cbz	r4, 8029800 <__cxa_atexit+0x14>
 80297f4:	460a      	mov	r2, r1
 80297f6:	4601      	mov	r1, r0
 80297f8:	2002      	movs	r0, #2
 80297fa:	f000 fd81 	bl	802a300 <__register_exitproc>
 80297fe:	bd10      	pop	{r4, pc}
 8029800:	4620      	mov	r0, r4
 8029802:	e7fc      	b.n	80297fe <__cxa_atexit+0x12>
 8029804:	0802a301 	.word	0x0802a301

08029808 <__errno>:
 8029808:	4b01      	ldr	r3, [pc, #4]	; (8029810 <__errno+0x8>)
 802980a:	6818      	ldr	r0, [r3, #0]
 802980c:	4770      	bx	lr
 802980e:	bf00      	nop
 8029810:	200000bc 	.word	0x200000bc

08029814 <fiprintf>:
 8029814:	b40e      	push	{r1, r2, r3}
 8029816:	b503      	push	{r0, r1, lr}
 8029818:	4601      	mov	r1, r0
 802981a:	ab03      	add	r3, sp, #12
 802981c:	4805      	ldr	r0, [pc, #20]	; (8029834 <fiprintf+0x20>)
 802981e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029822:	6800      	ldr	r0, [r0, #0]
 8029824:	9301      	str	r3, [sp, #4]
 8029826:	f000 f95f 	bl	8029ae8 <_vfiprintf_r>
 802982a:	b002      	add	sp, #8
 802982c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029830:	b003      	add	sp, #12
 8029832:	4770      	bx	lr
 8029834:	200000bc 	.word	0x200000bc

08029838 <__libc_init_array>:
 8029838:	b570      	push	{r4, r5, r6, lr}
 802983a:	4d0d      	ldr	r5, [pc, #52]	; (8029870 <__libc_init_array+0x38>)
 802983c:	4c0d      	ldr	r4, [pc, #52]	; (8029874 <__libc_init_array+0x3c>)
 802983e:	1b64      	subs	r4, r4, r5
 8029840:	10a4      	asrs	r4, r4, #2
 8029842:	2600      	movs	r6, #0
 8029844:	42a6      	cmp	r6, r4
 8029846:	d109      	bne.n	802985c <__libc_init_array+0x24>
 8029848:	4d0b      	ldr	r5, [pc, #44]	; (8029878 <__libc_init_array+0x40>)
 802984a:	4c0c      	ldr	r4, [pc, #48]	; (802987c <__libc_init_array+0x44>)
 802984c:	f001 fa3a 	bl	802acc4 <_init>
 8029850:	1b64      	subs	r4, r4, r5
 8029852:	10a4      	asrs	r4, r4, #2
 8029854:	2600      	movs	r6, #0
 8029856:	42a6      	cmp	r6, r4
 8029858:	d105      	bne.n	8029866 <__libc_init_array+0x2e>
 802985a:	bd70      	pop	{r4, r5, r6, pc}
 802985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8029860:	4798      	blx	r3
 8029862:	3601      	adds	r6, #1
 8029864:	e7ee      	b.n	8029844 <__libc_init_array+0xc>
 8029866:	f855 3b04 	ldr.w	r3, [r5], #4
 802986a:	4798      	blx	r3
 802986c:	3601      	adds	r6, #1
 802986e:	e7f2      	b.n	8029856 <__libc_init_array+0x1e>
 8029870:	0802f894 	.word	0x0802f894
 8029874:	0802f894 	.word	0x0802f894
 8029878:	0802f894 	.word	0x0802f894
 802987c:	0802f8b0 	.word	0x0802f8b0

08029880 <__retarget_lock_init_recursive>:
 8029880:	4770      	bx	lr

08029882 <__retarget_lock_acquire_recursive>:
 8029882:	4770      	bx	lr

08029884 <__retarget_lock_release>:
 8029884:	4770      	bx	lr

08029886 <__retarget_lock_release_recursive>:
 8029886:	4770      	bx	lr

08029888 <malloc>:
 8029888:	4b02      	ldr	r3, [pc, #8]	; (8029894 <malloc+0xc>)
 802988a:	4601      	mov	r1, r0
 802988c:	6818      	ldr	r0, [r3, #0]
 802988e:	f000 b88d 	b.w	80299ac <_malloc_r>
 8029892:	bf00      	nop
 8029894:	200000bc 	.word	0x200000bc

08029898 <free>:
 8029898:	4b02      	ldr	r3, [pc, #8]	; (80298a4 <free+0xc>)
 802989a:	4601      	mov	r1, r0
 802989c:	6818      	ldr	r0, [r3, #0]
 802989e:	f000 b819 	b.w	80298d4 <_free_r>
 80298a2:	bf00      	nop
 80298a4:	200000bc 	.word	0x200000bc

080298a8 <memcpy>:
 80298a8:	440a      	add	r2, r1
 80298aa:	4291      	cmp	r1, r2
 80298ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80298b0:	d100      	bne.n	80298b4 <memcpy+0xc>
 80298b2:	4770      	bx	lr
 80298b4:	b510      	push	{r4, lr}
 80298b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80298ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80298be:	4291      	cmp	r1, r2
 80298c0:	d1f9      	bne.n	80298b6 <memcpy+0xe>
 80298c2:	bd10      	pop	{r4, pc}

080298c4 <memset>:
 80298c4:	4402      	add	r2, r0
 80298c6:	4603      	mov	r3, r0
 80298c8:	4293      	cmp	r3, r2
 80298ca:	d100      	bne.n	80298ce <memset+0xa>
 80298cc:	4770      	bx	lr
 80298ce:	f803 1b01 	strb.w	r1, [r3], #1
 80298d2:	e7f9      	b.n	80298c8 <memset+0x4>

080298d4 <_free_r>:
 80298d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80298d6:	2900      	cmp	r1, #0
 80298d8:	d044      	beq.n	8029964 <_free_r+0x90>
 80298da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80298de:	9001      	str	r0, [sp, #4]
 80298e0:	2b00      	cmp	r3, #0
 80298e2:	f1a1 0404 	sub.w	r4, r1, #4
 80298e6:	bfb8      	it	lt
 80298e8:	18e4      	addlt	r4, r4, r3
 80298ea:	f000 ffa1 	bl	802a830 <__malloc_lock>
 80298ee:	4a1e      	ldr	r2, [pc, #120]	; (8029968 <_free_r+0x94>)
 80298f0:	9801      	ldr	r0, [sp, #4]
 80298f2:	6813      	ldr	r3, [r2, #0]
 80298f4:	b933      	cbnz	r3, 8029904 <_free_r+0x30>
 80298f6:	6063      	str	r3, [r4, #4]
 80298f8:	6014      	str	r4, [r2, #0]
 80298fa:	b003      	add	sp, #12
 80298fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029900:	f000 bf9c 	b.w	802a83c <__malloc_unlock>
 8029904:	42a3      	cmp	r3, r4
 8029906:	d908      	bls.n	802991a <_free_r+0x46>
 8029908:	6825      	ldr	r5, [r4, #0]
 802990a:	1961      	adds	r1, r4, r5
 802990c:	428b      	cmp	r3, r1
 802990e:	bf01      	itttt	eq
 8029910:	6819      	ldreq	r1, [r3, #0]
 8029912:	685b      	ldreq	r3, [r3, #4]
 8029914:	1949      	addeq	r1, r1, r5
 8029916:	6021      	streq	r1, [r4, #0]
 8029918:	e7ed      	b.n	80298f6 <_free_r+0x22>
 802991a:	461a      	mov	r2, r3
 802991c:	685b      	ldr	r3, [r3, #4]
 802991e:	b10b      	cbz	r3, 8029924 <_free_r+0x50>
 8029920:	42a3      	cmp	r3, r4
 8029922:	d9fa      	bls.n	802991a <_free_r+0x46>
 8029924:	6811      	ldr	r1, [r2, #0]
 8029926:	1855      	adds	r5, r2, r1
 8029928:	42a5      	cmp	r5, r4
 802992a:	d10b      	bne.n	8029944 <_free_r+0x70>
 802992c:	6824      	ldr	r4, [r4, #0]
 802992e:	4421      	add	r1, r4
 8029930:	1854      	adds	r4, r2, r1
 8029932:	42a3      	cmp	r3, r4
 8029934:	6011      	str	r1, [r2, #0]
 8029936:	d1e0      	bne.n	80298fa <_free_r+0x26>
 8029938:	681c      	ldr	r4, [r3, #0]
 802993a:	685b      	ldr	r3, [r3, #4]
 802993c:	6053      	str	r3, [r2, #4]
 802993e:	4421      	add	r1, r4
 8029940:	6011      	str	r1, [r2, #0]
 8029942:	e7da      	b.n	80298fa <_free_r+0x26>
 8029944:	d902      	bls.n	802994c <_free_r+0x78>
 8029946:	230c      	movs	r3, #12
 8029948:	6003      	str	r3, [r0, #0]
 802994a:	e7d6      	b.n	80298fa <_free_r+0x26>
 802994c:	6825      	ldr	r5, [r4, #0]
 802994e:	1961      	adds	r1, r4, r5
 8029950:	428b      	cmp	r3, r1
 8029952:	bf04      	itt	eq
 8029954:	6819      	ldreq	r1, [r3, #0]
 8029956:	685b      	ldreq	r3, [r3, #4]
 8029958:	6063      	str	r3, [r4, #4]
 802995a:	bf04      	itt	eq
 802995c:	1949      	addeq	r1, r1, r5
 802995e:	6021      	streq	r1, [r4, #0]
 8029960:	6054      	str	r4, [r2, #4]
 8029962:	e7ca      	b.n	80298fa <_free_r+0x26>
 8029964:	b003      	add	sp, #12
 8029966:	bd30      	pop	{r4, r5, pc}
 8029968:	20015310 	.word	0x20015310

0802996c <sbrk_aligned>:
 802996c:	b570      	push	{r4, r5, r6, lr}
 802996e:	4e0e      	ldr	r6, [pc, #56]	; (80299a8 <sbrk_aligned+0x3c>)
 8029970:	460c      	mov	r4, r1
 8029972:	6831      	ldr	r1, [r6, #0]
 8029974:	4605      	mov	r5, r0
 8029976:	b911      	cbnz	r1, 802997e <sbrk_aligned+0x12>
 8029978:	f000 fb7a 	bl	802a070 <_sbrk_r>
 802997c:	6030      	str	r0, [r6, #0]
 802997e:	4621      	mov	r1, r4
 8029980:	4628      	mov	r0, r5
 8029982:	f000 fb75 	bl	802a070 <_sbrk_r>
 8029986:	1c43      	adds	r3, r0, #1
 8029988:	d00a      	beq.n	80299a0 <sbrk_aligned+0x34>
 802998a:	1cc4      	adds	r4, r0, #3
 802998c:	f024 0403 	bic.w	r4, r4, #3
 8029990:	42a0      	cmp	r0, r4
 8029992:	d007      	beq.n	80299a4 <sbrk_aligned+0x38>
 8029994:	1a21      	subs	r1, r4, r0
 8029996:	4628      	mov	r0, r5
 8029998:	f000 fb6a 	bl	802a070 <_sbrk_r>
 802999c:	3001      	adds	r0, #1
 802999e:	d101      	bne.n	80299a4 <sbrk_aligned+0x38>
 80299a0:	f04f 34ff 	mov.w	r4, #4294967295
 80299a4:	4620      	mov	r0, r4
 80299a6:	bd70      	pop	{r4, r5, r6, pc}
 80299a8:	20015314 	.word	0x20015314

080299ac <_malloc_r>:
 80299ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80299b0:	1ccd      	adds	r5, r1, #3
 80299b2:	f025 0503 	bic.w	r5, r5, #3
 80299b6:	3508      	adds	r5, #8
 80299b8:	2d0c      	cmp	r5, #12
 80299ba:	bf38      	it	cc
 80299bc:	250c      	movcc	r5, #12
 80299be:	2d00      	cmp	r5, #0
 80299c0:	4607      	mov	r7, r0
 80299c2:	db01      	blt.n	80299c8 <_malloc_r+0x1c>
 80299c4:	42a9      	cmp	r1, r5
 80299c6:	d905      	bls.n	80299d4 <_malloc_r+0x28>
 80299c8:	230c      	movs	r3, #12
 80299ca:	603b      	str	r3, [r7, #0]
 80299cc:	2600      	movs	r6, #0
 80299ce:	4630      	mov	r0, r6
 80299d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80299d4:	4e2e      	ldr	r6, [pc, #184]	; (8029a90 <_malloc_r+0xe4>)
 80299d6:	f000 ff2b 	bl	802a830 <__malloc_lock>
 80299da:	6833      	ldr	r3, [r6, #0]
 80299dc:	461c      	mov	r4, r3
 80299de:	bb34      	cbnz	r4, 8029a2e <_malloc_r+0x82>
 80299e0:	4629      	mov	r1, r5
 80299e2:	4638      	mov	r0, r7
 80299e4:	f7ff ffc2 	bl	802996c <sbrk_aligned>
 80299e8:	1c43      	adds	r3, r0, #1
 80299ea:	4604      	mov	r4, r0
 80299ec:	d14d      	bne.n	8029a8a <_malloc_r+0xde>
 80299ee:	6834      	ldr	r4, [r6, #0]
 80299f0:	4626      	mov	r6, r4
 80299f2:	2e00      	cmp	r6, #0
 80299f4:	d140      	bne.n	8029a78 <_malloc_r+0xcc>
 80299f6:	6823      	ldr	r3, [r4, #0]
 80299f8:	4631      	mov	r1, r6
 80299fa:	4638      	mov	r0, r7
 80299fc:	eb04 0803 	add.w	r8, r4, r3
 8029a00:	f000 fb36 	bl	802a070 <_sbrk_r>
 8029a04:	4580      	cmp	r8, r0
 8029a06:	d13a      	bne.n	8029a7e <_malloc_r+0xd2>
 8029a08:	6821      	ldr	r1, [r4, #0]
 8029a0a:	3503      	adds	r5, #3
 8029a0c:	1a6d      	subs	r5, r5, r1
 8029a0e:	f025 0503 	bic.w	r5, r5, #3
 8029a12:	3508      	adds	r5, #8
 8029a14:	2d0c      	cmp	r5, #12
 8029a16:	bf38      	it	cc
 8029a18:	250c      	movcc	r5, #12
 8029a1a:	4629      	mov	r1, r5
 8029a1c:	4638      	mov	r0, r7
 8029a1e:	f7ff ffa5 	bl	802996c <sbrk_aligned>
 8029a22:	3001      	adds	r0, #1
 8029a24:	d02b      	beq.n	8029a7e <_malloc_r+0xd2>
 8029a26:	6823      	ldr	r3, [r4, #0]
 8029a28:	442b      	add	r3, r5
 8029a2a:	6023      	str	r3, [r4, #0]
 8029a2c:	e00e      	b.n	8029a4c <_malloc_r+0xa0>
 8029a2e:	6822      	ldr	r2, [r4, #0]
 8029a30:	1b52      	subs	r2, r2, r5
 8029a32:	d41e      	bmi.n	8029a72 <_malloc_r+0xc6>
 8029a34:	2a0b      	cmp	r2, #11
 8029a36:	d916      	bls.n	8029a66 <_malloc_r+0xba>
 8029a38:	1961      	adds	r1, r4, r5
 8029a3a:	42a3      	cmp	r3, r4
 8029a3c:	6025      	str	r5, [r4, #0]
 8029a3e:	bf18      	it	ne
 8029a40:	6059      	strne	r1, [r3, #4]
 8029a42:	6863      	ldr	r3, [r4, #4]
 8029a44:	bf08      	it	eq
 8029a46:	6031      	streq	r1, [r6, #0]
 8029a48:	5162      	str	r2, [r4, r5]
 8029a4a:	604b      	str	r3, [r1, #4]
 8029a4c:	4638      	mov	r0, r7
 8029a4e:	f104 060b 	add.w	r6, r4, #11
 8029a52:	f000 fef3 	bl	802a83c <__malloc_unlock>
 8029a56:	f026 0607 	bic.w	r6, r6, #7
 8029a5a:	1d23      	adds	r3, r4, #4
 8029a5c:	1af2      	subs	r2, r6, r3
 8029a5e:	d0b6      	beq.n	80299ce <_malloc_r+0x22>
 8029a60:	1b9b      	subs	r3, r3, r6
 8029a62:	50a3      	str	r3, [r4, r2]
 8029a64:	e7b3      	b.n	80299ce <_malloc_r+0x22>
 8029a66:	6862      	ldr	r2, [r4, #4]
 8029a68:	42a3      	cmp	r3, r4
 8029a6a:	bf0c      	ite	eq
 8029a6c:	6032      	streq	r2, [r6, #0]
 8029a6e:	605a      	strne	r2, [r3, #4]
 8029a70:	e7ec      	b.n	8029a4c <_malloc_r+0xa0>
 8029a72:	4623      	mov	r3, r4
 8029a74:	6864      	ldr	r4, [r4, #4]
 8029a76:	e7b2      	b.n	80299de <_malloc_r+0x32>
 8029a78:	4634      	mov	r4, r6
 8029a7a:	6876      	ldr	r6, [r6, #4]
 8029a7c:	e7b9      	b.n	80299f2 <_malloc_r+0x46>
 8029a7e:	230c      	movs	r3, #12
 8029a80:	603b      	str	r3, [r7, #0]
 8029a82:	4638      	mov	r0, r7
 8029a84:	f000 feda 	bl	802a83c <__malloc_unlock>
 8029a88:	e7a1      	b.n	80299ce <_malloc_r+0x22>
 8029a8a:	6025      	str	r5, [r4, #0]
 8029a8c:	e7de      	b.n	8029a4c <_malloc_r+0xa0>
 8029a8e:	bf00      	nop
 8029a90:	20015310 	.word	0x20015310

08029a94 <__sfputc_r>:
 8029a94:	6893      	ldr	r3, [r2, #8]
 8029a96:	3b01      	subs	r3, #1
 8029a98:	2b00      	cmp	r3, #0
 8029a9a:	b410      	push	{r4}
 8029a9c:	6093      	str	r3, [r2, #8]
 8029a9e:	da08      	bge.n	8029ab2 <__sfputc_r+0x1e>
 8029aa0:	6994      	ldr	r4, [r2, #24]
 8029aa2:	42a3      	cmp	r3, r4
 8029aa4:	db01      	blt.n	8029aaa <__sfputc_r+0x16>
 8029aa6:	290a      	cmp	r1, #10
 8029aa8:	d103      	bne.n	8029ab2 <__sfputc_r+0x1e>
 8029aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029aae:	f000 bb67 	b.w	802a180 <__swbuf_r>
 8029ab2:	6813      	ldr	r3, [r2, #0]
 8029ab4:	1c58      	adds	r0, r3, #1
 8029ab6:	6010      	str	r0, [r2, #0]
 8029ab8:	7019      	strb	r1, [r3, #0]
 8029aba:	4608      	mov	r0, r1
 8029abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ac0:	4770      	bx	lr

08029ac2 <__sfputs_r>:
 8029ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ac4:	4606      	mov	r6, r0
 8029ac6:	460f      	mov	r7, r1
 8029ac8:	4614      	mov	r4, r2
 8029aca:	18d5      	adds	r5, r2, r3
 8029acc:	42ac      	cmp	r4, r5
 8029ace:	d101      	bne.n	8029ad4 <__sfputs_r+0x12>
 8029ad0:	2000      	movs	r0, #0
 8029ad2:	e007      	b.n	8029ae4 <__sfputs_r+0x22>
 8029ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029ad8:	463a      	mov	r2, r7
 8029ada:	4630      	mov	r0, r6
 8029adc:	f7ff ffda 	bl	8029a94 <__sfputc_r>
 8029ae0:	1c43      	adds	r3, r0, #1
 8029ae2:	d1f3      	bne.n	8029acc <__sfputs_r+0xa>
 8029ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029ae8 <_vfiprintf_r>:
 8029ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029aec:	460d      	mov	r5, r1
 8029aee:	b09d      	sub	sp, #116	; 0x74
 8029af0:	4614      	mov	r4, r2
 8029af2:	4698      	mov	r8, r3
 8029af4:	4606      	mov	r6, r0
 8029af6:	b118      	cbz	r0, 8029b00 <_vfiprintf_r+0x18>
 8029af8:	6983      	ldr	r3, [r0, #24]
 8029afa:	b90b      	cbnz	r3, 8029b00 <_vfiprintf_r+0x18>
 8029afc:	f000 fd7c 	bl	802a5f8 <__sinit>
 8029b00:	4b89      	ldr	r3, [pc, #548]	; (8029d28 <_vfiprintf_r+0x240>)
 8029b02:	429d      	cmp	r5, r3
 8029b04:	d11b      	bne.n	8029b3e <_vfiprintf_r+0x56>
 8029b06:	6875      	ldr	r5, [r6, #4]
 8029b08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029b0a:	07d9      	lsls	r1, r3, #31
 8029b0c:	d405      	bmi.n	8029b1a <_vfiprintf_r+0x32>
 8029b0e:	89ab      	ldrh	r3, [r5, #12]
 8029b10:	059a      	lsls	r2, r3, #22
 8029b12:	d402      	bmi.n	8029b1a <_vfiprintf_r+0x32>
 8029b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029b16:	f7ff feb4 	bl	8029882 <__retarget_lock_acquire_recursive>
 8029b1a:	89ab      	ldrh	r3, [r5, #12]
 8029b1c:	071b      	lsls	r3, r3, #28
 8029b1e:	d501      	bpl.n	8029b24 <_vfiprintf_r+0x3c>
 8029b20:	692b      	ldr	r3, [r5, #16]
 8029b22:	b9eb      	cbnz	r3, 8029b60 <_vfiprintf_r+0x78>
 8029b24:	4629      	mov	r1, r5
 8029b26:	4630      	mov	r0, r6
 8029b28:	f000 fb7c 	bl	802a224 <__swsetup_r>
 8029b2c:	b1c0      	cbz	r0, 8029b60 <_vfiprintf_r+0x78>
 8029b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029b30:	07dc      	lsls	r4, r3, #31
 8029b32:	d50e      	bpl.n	8029b52 <_vfiprintf_r+0x6a>
 8029b34:	f04f 30ff 	mov.w	r0, #4294967295
 8029b38:	b01d      	add	sp, #116	; 0x74
 8029b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b3e:	4b7b      	ldr	r3, [pc, #492]	; (8029d2c <_vfiprintf_r+0x244>)
 8029b40:	429d      	cmp	r5, r3
 8029b42:	d101      	bne.n	8029b48 <_vfiprintf_r+0x60>
 8029b44:	68b5      	ldr	r5, [r6, #8]
 8029b46:	e7df      	b.n	8029b08 <_vfiprintf_r+0x20>
 8029b48:	4b79      	ldr	r3, [pc, #484]	; (8029d30 <_vfiprintf_r+0x248>)
 8029b4a:	429d      	cmp	r5, r3
 8029b4c:	bf08      	it	eq
 8029b4e:	68f5      	ldreq	r5, [r6, #12]
 8029b50:	e7da      	b.n	8029b08 <_vfiprintf_r+0x20>
 8029b52:	89ab      	ldrh	r3, [r5, #12]
 8029b54:	0598      	lsls	r0, r3, #22
 8029b56:	d4ed      	bmi.n	8029b34 <_vfiprintf_r+0x4c>
 8029b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029b5a:	f7ff fe94 	bl	8029886 <__retarget_lock_release_recursive>
 8029b5e:	e7e9      	b.n	8029b34 <_vfiprintf_r+0x4c>
 8029b60:	2300      	movs	r3, #0
 8029b62:	9309      	str	r3, [sp, #36]	; 0x24
 8029b64:	2320      	movs	r3, #32
 8029b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8029b6e:	2330      	movs	r3, #48	; 0x30
 8029b70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029d34 <_vfiprintf_r+0x24c>
 8029b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029b78:	f04f 0901 	mov.w	r9, #1
 8029b7c:	4623      	mov	r3, r4
 8029b7e:	469a      	mov	sl, r3
 8029b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b84:	b10a      	cbz	r2, 8029b8a <_vfiprintf_r+0xa2>
 8029b86:	2a25      	cmp	r2, #37	; 0x25
 8029b88:	d1f9      	bne.n	8029b7e <_vfiprintf_r+0x96>
 8029b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8029b8e:	d00b      	beq.n	8029ba8 <_vfiprintf_r+0xc0>
 8029b90:	465b      	mov	r3, fp
 8029b92:	4622      	mov	r2, r4
 8029b94:	4629      	mov	r1, r5
 8029b96:	4630      	mov	r0, r6
 8029b98:	f7ff ff93 	bl	8029ac2 <__sfputs_r>
 8029b9c:	3001      	adds	r0, #1
 8029b9e:	f000 80aa 	beq.w	8029cf6 <_vfiprintf_r+0x20e>
 8029ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029ba4:	445a      	add	r2, fp
 8029ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8029ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	f000 80a2 	beq.w	8029cf6 <_vfiprintf_r+0x20e>
 8029bb2:	2300      	movs	r3, #0
 8029bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8029bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029bbc:	f10a 0a01 	add.w	sl, sl, #1
 8029bc0:	9304      	str	r3, [sp, #16]
 8029bc2:	9307      	str	r3, [sp, #28]
 8029bc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8029bca:	4654      	mov	r4, sl
 8029bcc:	2205      	movs	r2, #5
 8029bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029bd2:	4858      	ldr	r0, [pc, #352]	; (8029d34 <_vfiprintf_r+0x24c>)
 8029bd4:	f7d6 fb1c 	bl	8000210 <memchr>
 8029bd8:	9a04      	ldr	r2, [sp, #16]
 8029bda:	b9d8      	cbnz	r0, 8029c14 <_vfiprintf_r+0x12c>
 8029bdc:	06d1      	lsls	r1, r2, #27
 8029bde:	bf44      	itt	mi
 8029be0:	2320      	movmi	r3, #32
 8029be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029be6:	0713      	lsls	r3, r2, #28
 8029be8:	bf44      	itt	mi
 8029bea:	232b      	movmi	r3, #43	; 0x2b
 8029bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8029bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8029bf6:	d015      	beq.n	8029c24 <_vfiprintf_r+0x13c>
 8029bf8:	9a07      	ldr	r2, [sp, #28]
 8029bfa:	4654      	mov	r4, sl
 8029bfc:	2000      	movs	r0, #0
 8029bfe:	f04f 0c0a 	mov.w	ip, #10
 8029c02:	4621      	mov	r1, r4
 8029c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029c08:	3b30      	subs	r3, #48	; 0x30
 8029c0a:	2b09      	cmp	r3, #9
 8029c0c:	d94e      	bls.n	8029cac <_vfiprintf_r+0x1c4>
 8029c0e:	b1b0      	cbz	r0, 8029c3e <_vfiprintf_r+0x156>
 8029c10:	9207      	str	r2, [sp, #28]
 8029c12:	e014      	b.n	8029c3e <_vfiprintf_r+0x156>
 8029c14:	eba0 0308 	sub.w	r3, r0, r8
 8029c18:	fa09 f303 	lsl.w	r3, r9, r3
 8029c1c:	4313      	orrs	r3, r2
 8029c1e:	9304      	str	r3, [sp, #16]
 8029c20:	46a2      	mov	sl, r4
 8029c22:	e7d2      	b.n	8029bca <_vfiprintf_r+0xe2>
 8029c24:	9b03      	ldr	r3, [sp, #12]
 8029c26:	1d19      	adds	r1, r3, #4
 8029c28:	681b      	ldr	r3, [r3, #0]
 8029c2a:	9103      	str	r1, [sp, #12]
 8029c2c:	2b00      	cmp	r3, #0
 8029c2e:	bfbb      	ittet	lt
 8029c30:	425b      	neglt	r3, r3
 8029c32:	f042 0202 	orrlt.w	r2, r2, #2
 8029c36:	9307      	strge	r3, [sp, #28]
 8029c38:	9307      	strlt	r3, [sp, #28]
 8029c3a:	bfb8      	it	lt
 8029c3c:	9204      	strlt	r2, [sp, #16]
 8029c3e:	7823      	ldrb	r3, [r4, #0]
 8029c40:	2b2e      	cmp	r3, #46	; 0x2e
 8029c42:	d10c      	bne.n	8029c5e <_vfiprintf_r+0x176>
 8029c44:	7863      	ldrb	r3, [r4, #1]
 8029c46:	2b2a      	cmp	r3, #42	; 0x2a
 8029c48:	d135      	bne.n	8029cb6 <_vfiprintf_r+0x1ce>
 8029c4a:	9b03      	ldr	r3, [sp, #12]
 8029c4c:	1d1a      	adds	r2, r3, #4
 8029c4e:	681b      	ldr	r3, [r3, #0]
 8029c50:	9203      	str	r2, [sp, #12]
 8029c52:	2b00      	cmp	r3, #0
 8029c54:	bfb8      	it	lt
 8029c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8029c5a:	3402      	adds	r4, #2
 8029c5c:	9305      	str	r3, [sp, #20]
 8029c5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029d44 <_vfiprintf_r+0x25c>
 8029c62:	7821      	ldrb	r1, [r4, #0]
 8029c64:	2203      	movs	r2, #3
 8029c66:	4650      	mov	r0, sl
 8029c68:	f7d6 fad2 	bl	8000210 <memchr>
 8029c6c:	b140      	cbz	r0, 8029c80 <_vfiprintf_r+0x198>
 8029c6e:	2340      	movs	r3, #64	; 0x40
 8029c70:	eba0 000a 	sub.w	r0, r0, sl
 8029c74:	fa03 f000 	lsl.w	r0, r3, r0
 8029c78:	9b04      	ldr	r3, [sp, #16]
 8029c7a:	4303      	orrs	r3, r0
 8029c7c:	3401      	adds	r4, #1
 8029c7e:	9304      	str	r3, [sp, #16]
 8029c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029c84:	482c      	ldr	r0, [pc, #176]	; (8029d38 <_vfiprintf_r+0x250>)
 8029c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029c8a:	2206      	movs	r2, #6
 8029c8c:	f7d6 fac0 	bl	8000210 <memchr>
 8029c90:	2800      	cmp	r0, #0
 8029c92:	d03f      	beq.n	8029d14 <_vfiprintf_r+0x22c>
 8029c94:	4b29      	ldr	r3, [pc, #164]	; (8029d3c <_vfiprintf_r+0x254>)
 8029c96:	bb1b      	cbnz	r3, 8029ce0 <_vfiprintf_r+0x1f8>
 8029c98:	9b03      	ldr	r3, [sp, #12]
 8029c9a:	3307      	adds	r3, #7
 8029c9c:	f023 0307 	bic.w	r3, r3, #7
 8029ca0:	3308      	adds	r3, #8
 8029ca2:	9303      	str	r3, [sp, #12]
 8029ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ca6:	443b      	add	r3, r7
 8029ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8029caa:	e767      	b.n	8029b7c <_vfiprintf_r+0x94>
 8029cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8029cb0:	460c      	mov	r4, r1
 8029cb2:	2001      	movs	r0, #1
 8029cb4:	e7a5      	b.n	8029c02 <_vfiprintf_r+0x11a>
 8029cb6:	2300      	movs	r3, #0
 8029cb8:	3401      	adds	r4, #1
 8029cba:	9305      	str	r3, [sp, #20]
 8029cbc:	4619      	mov	r1, r3
 8029cbe:	f04f 0c0a 	mov.w	ip, #10
 8029cc2:	4620      	mov	r0, r4
 8029cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029cc8:	3a30      	subs	r2, #48	; 0x30
 8029cca:	2a09      	cmp	r2, #9
 8029ccc:	d903      	bls.n	8029cd6 <_vfiprintf_r+0x1ee>
 8029cce:	2b00      	cmp	r3, #0
 8029cd0:	d0c5      	beq.n	8029c5e <_vfiprintf_r+0x176>
 8029cd2:	9105      	str	r1, [sp, #20]
 8029cd4:	e7c3      	b.n	8029c5e <_vfiprintf_r+0x176>
 8029cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8029cda:	4604      	mov	r4, r0
 8029cdc:	2301      	movs	r3, #1
 8029cde:	e7f0      	b.n	8029cc2 <_vfiprintf_r+0x1da>
 8029ce0:	ab03      	add	r3, sp, #12
 8029ce2:	9300      	str	r3, [sp, #0]
 8029ce4:	462a      	mov	r2, r5
 8029ce6:	4b16      	ldr	r3, [pc, #88]	; (8029d40 <_vfiprintf_r+0x258>)
 8029ce8:	a904      	add	r1, sp, #16
 8029cea:	4630      	mov	r0, r6
 8029cec:	f3af 8000 	nop.w
 8029cf0:	4607      	mov	r7, r0
 8029cf2:	1c78      	adds	r0, r7, #1
 8029cf4:	d1d6      	bne.n	8029ca4 <_vfiprintf_r+0x1bc>
 8029cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029cf8:	07d9      	lsls	r1, r3, #31
 8029cfa:	d405      	bmi.n	8029d08 <_vfiprintf_r+0x220>
 8029cfc:	89ab      	ldrh	r3, [r5, #12]
 8029cfe:	059a      	lsls	r2, r3, #22
 8029d00:	d402      	bmi.n	8029d08 <_vfiprintf_r+0x220>
 8029d02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029d04:	f7ff fdbf 	bl	8029886 <__retarget_lock_release_recursive>
 8029d08:	89ab      	ldrh	r3, [r5, #12]
 8029d0a:	065b      	lsls	r3, r3, #25
 8029d0c:	f53f af12 	bmi.w	8029b34 <_vfiprintf_r+0x4c>
 8029d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029d12:	e711      	b.n	8029b38 <_vfiprintf_r+0x50>
 8029d14:	ab03      	add	r3, sp, #12
 8029d16:	9300      	str	r3, [sp, #0]
 8029d18:	462a      	mov	r2, r5
 8029d1a:	4b09      	ldr	r3, [pc, #36]	; (8029d40 <_vfiprintf_r+0x258>)
 8029d1c:	a904      	add	r1, sp, #16
 8029d1e:	4630      	mov	r0, r6
 8029d20:	f000 f880 	bl	8029e24 <_printf_i>
 8029d24:	e7e4      	b.n	8029cf0 <_vfiprintf_r+0x208>
 8029d26:	bf00      	nop
 8029d28:	0802f7f0 	.word	0x0802f7f0
 8029d2c:	0802f810 	.word	0x0802f810
 8029d30:	0802f7d0 	.word	0x0802f7d0
 8029d34:	0802f798 	.word	0x0802f798
 8029d38:	0802f7a2 	.word	0x0802f7a2
 8029d3c:	00000000 	.word	0x00000000
 8029d40:	08029ac3 	.word	0x08029ac3
 8029d44:	0802f79e 	.word	0x0802f79e

08029d48 <_printf_common>:
 8029d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d4c:	4616      	mov	r6, r2
 8029d4e:	4699      	mov	r9, r3
 8029d50:	688a      	ldr	r2, [r1, #8]
 8029d52:	690b      	ldr	r3, [r1, #16]
 8029d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029d58:	4293      	cmp	r3, r2
 8029d5a:	bfb8      	it	lt
 8029d5c:	4613      	movlt	r3, r2
 8029d5e:	6033      	str	r3, [r6, #0]
 8029d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029d64:	4607      	mov	r7, r0
 8029d66:	460c      	mov	r4, r1
 8029d68:	b10a      	cbz	r2, 8029d6e <_printf_common+0x26>
 8029d6a:	3301      	adds	r3, #1
 8029d6c:	6033      	str	r3, [r6, #0]
 8029d6e:	6823      	ldr	r3, [r4, #0]
 8029d70:	0699      	lsls	r1, r3, #26
 8029d72:	bf42      	ittt	mi
 8029d74:	6833      	ldrmi	r3, [r6, #0]
 8029d76:	3302      	addmi	r3, #2
 8029d78:	6033      	strmi	r3, [r6, #0]
 8029d7a:	6825      	ldr	r5, [r4, #0]
 8029d7c:	f015 0506 	ands.w	r5, r5, #6
 8029d80:	d106      	bne.n	8029d90 <_printf_common+0x48>
 8029d82:	f104 0a19 	add.w	sl, r4, #25
 8029d86:	68e3      	ldr	r3, [r4, #12]
 8029d88:	6832      	ldr	r2, [r6, #0]
 8029d8a:	1a9b      	subs	r3, r3, r2
 8029d8c:	42ab      	cmp	r3, r5
 8029d8e:	dc26      	bgt.n	8029dde <_printf_common+0x96>
 8029d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029d94:	1e13      	subs	r3, r2, #0
 8029d96:	6822      	ldr	r2, [r4, #0]
 8029d98:	bf18      	it	ne
 8029d9a:	2301      	movne	r3, #1
 8029d9c:	0692      	lsls	r2, r2, #26
 8029d9e:	d42b      	bmi.n	8029df8 <_printf_common+0xb0>
 8029da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029da4:	4649      	mov	r1, r9
 8029da6:	4638      	mov	r0, r7
 8029da8:	47c0      	blx	r8
 8029daa:	3001      	adds	r0, #1
 8029dac:	d01e      	beq.n	8029dec <_printf_common+0xa4>
 8029dae:	6823      	ldr	r3, [r4, #0]
 8029db0:	68e5      	ldr	r5, [r4, #12]
 8029db2:	6832      	ldr	r2, [r6, #0]
 8029db4:	f003 0306 	and.w	r3, r3, #6
 8029db8:	2b04      	cmp	r3, #4
 8029dba:	bf08      	it	eq
 8029dbc:	1aad      	subeq	r5, r5, r2
 8029dbe:	68a3      	ldr	r3, [r4, #8]
 8029dc0:	6922      	ldr	r2, [r4, #16]
 8029dc2:	bf0c      	ite	eq
 8029dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029dc8:	2500      	movne	r5, #0
 8029dca:	4293      	cmp	r3, r2
 8029dcc:	bfc4      	itt	gt
 8029dce:	1a9b      	subgt	r3, r3, r2
 8029dd0:	18ed      	addgt	r5, r5, r3
 8029dd2:	2600      	movs	r6, #0
 8029dd4:	341a      	adds	r4, #26
 8029dd6:	42b5      	cmp	r5, r6
 8029dd8:	d11a      	bne.n	8029e10 <_printf_common+0xc8>
 8029dda:	2000      	movs	r0, #0
 8029ddc:	e008      	b.n	8029df0 <_printf_common+0xa8>
 8029dde:	2301      	movs	r3, #1
 8029de0:	4652      	mov	r2, sl
 8029de2:	4649      	mov	r1, r9
 8029de4:	4638      	mov	r0, r7
 8029de6:	47c0      	blx	r8
 8029de8:	3001      	adds	r0, #1
 8029dea:	d103      	bne.n	8029df4 <_printf_common+0xac>
 8029dec:	f04f 30ff 	mov.w	r0, #4294967295
 8029df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029df4:	3501      	adds	r5, #1
 8029df6:	e7c6      	b.n	8029d86 <_printf_common+0x3e>
 8029df8:	18e1      	adds	r1, r4, r3
 8029dfa:	1c5a      	adds	r2, r3, #1
 8029dfc:	2030      	movs	r0, #48	; 0x30
 8029dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029e02:	4422      	add	r2, r4
 8029e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029e0c:	3302      	adds	r3, #2
 8029e0e:	e7c7      	b.n	8029da0 <_printf_common+0x58>
 8029e10:	2301      	movs	r3, #1
 8029e12:	4622      	mov	r2, r4
 8029e14:	4649      	mov	r1, r9
 8029e16:	4638      	mov	r0, r7
 8029e18:	47c0      	blx	r8
 8029e1a:	3001      	adds	r0, #1
 8029e1c:	d0e6      	beq.n	8029dec <_printf_common+0xa4>
 8029e1e:	3601      	adds	r6, #1
 8029e20:	e7d9      	b.n	8029dd6 <_printf_common+0x8e>
	...

08029e24 <_printf_i>:
 8029e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029e28:	7e0f      	ldrb	r7, [r1, #24]
 8029e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029e2c:	2f78      	cmp	r7, #120	; 0x78
 8029e2e:	4691      	mov	r9, r2
 8029e30:	4680      	mov	r8, r0
 8029e32:	460c      	mov	r4, r1
 8029e34:	469a      	mov	sl, r3
 8029e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8029e3a:	d807      	bhi.n	8029e4c <_printf_i+0x28>
 8029e3c:	2f62      	cmp	r7, #98	; 0x62
 8029e3e:	d80a      	bhi.n	8029e56 <_printf_i+0x32>
 8029e40:	2f00      	cmp	r7, #0
 8029e42:	f000 80d8 	beq.w	8029ff6 <_printf_i+0x1d2>
 8029e46:	2f58      	cmp	r7, #88	; 0x58
 8029e48:	f000 80a3 	beq.w	8029f92 <_printf_i+0x16e>
 8029e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8029e54:	e03a      	b.n	8029ecc <_printf_i+0xa8>
 8029e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029e5a:	2b15      	cmp	r3, #21
 8029e5c:	d8f6      	bhi.n	8029e4c <_printf_i+0x28>
 8029e5e:	a101      	add	r1, pc, #4	; (adr r1, 8029e64 <_printf_i+0x40>)
 8029e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029e64:	08029ebd 	.word	0x08029ebd
 8029e68:	08029ed1 	.word	0x08029ed1
 8029e6c:	08029e4d 	.word	0x08029e4d
 8029e70:	08029e4d 	.word	0x08029e4d
 8029e74:	08029e4d 	.word	0x08029e4d
 8029e78:	08029e4d 	.word	0x08029e4d
 8029e7c:	08029ed1 	.word	0x08029ed1
 8029e80:	08029e4d 	.word	0x08029e4d
 8029e84:	08029e4d 	.word	0x08029e4d
 8029e88:	08029e4d 	.word	0x08029e4d
 8029e8c:	08029e4d 	.word	0x08029e4d
 8029e90:	08029fdd 	.word	0x08029fdd
 8029e94:	08029f01 	.word	0x08029f01
 8029e98:	08029fbf 	.word	0x08029fbf
 8029e9c:	08029e4d 	.word	0x08029e4d
 8029ea0:	08029e4d 	.word	0x08029e4d
 8029ea4:	08029fff 	.word	0x08029fff
 8029ea8:	08029e4d 	.word	0x08029e4d
 8029eac:	08029f01 	.word	0x08029f01
 8029eb0:	08029e4d 	.word	0x08029e4d
 8029eb4:	08029e4d 	.word	0x08029e4d
 8029eb8:	08029fc7 	.word	0x08029fc7
 8029ebc:	682b      	ldr	r3, [r5, #0]
 8029ebe:	1d1a      	adds	r2, r3, #4
 8029ec0:	681b      	ldr	r3, [r3, #0]
 8029ec2:	602a      	str	r2, [r5, #0]
 8029ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029ecc:	2301      	movs	r3, #1
 8029ece:	e0a3      	b.n	802a018 <_printf_i+0x1f4>
 8029ed0:	6820      	ldr	r0, [r4, #0]
 8029ed2:	6829      	ldr	r1, [r5, #0]
 8029ed4:	0606      	lsls	r6, r0, #24
 8029ed6:	f101 0304 	add.w	r3, r1, #4
 8029eda:	d50a      	bpl.n	8029ef2 <_printf_i+0xce>
 8029edc:	680e      	ldr	r6, [r1, #0]
 8029ede:	602b      	str	r3, [r5, #0]
 8029ee0:	2e00      	cmp	r6, #0
 8029ee2:	da03      	bge.n	8029eec <_printf_i+0xc8>
 8029ee4:	232d      	movs	r3, #45	; 0x2d
 8029ee6:	4276      	negs	r6, r6
 8029ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029eec:	485e      	ldr	r0, [pc, #376]	; (802a068 <_printf_i+0x244>)
 8029eee:	230a      	movs	r3, #10
 8029ef0:	e019      	b.n	8029f26 <_printf_i+0x102>
 8029ef2:	680e      	ldr	r6, [r1, #0]
 8029ef4:	602b      	str	r3, [r5, #0]
 8029ef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8029efa:	bf18      	it	ne
 8029efc:	b236      	sxthne	r6, r6
 8029efe:	e7ef      	b.n	8029ee0 <_printf_i+0xbc>
 8029f00:	682b      	ldr	r3, [r5, #0]
 8029f02:	6820      	ldr	r0, [r4, #0]
 8029f04:	1d19      	adds	r1, r3, #4
 8029f06:	6029      	str	r1, [r5, #0]
 8029f08:	0601      	lsls	r1, r0, #24
 8029f0a:	d501      	bpl.n	8029f10 <_printf_i+0xec>
 8029f0c:	681e      	ldr	r6, [r3, #0]
 8029f0e:	e002      	b.n	8029f16 <_printf_i+0xf2>
 8029f10:	0646      	lsls	r6, r0, #25
 8029f12:	d5fb      	bpl.n	8029f0c <_printf_i+0xe8>
 8029f14:	881e      	ldrh	r6, [r3, #0]
 8029f16:	4854      	ldr	r0, [pc, #336]	; (802a068 <_printf_i+0x244>)
 8029f18:	2f6f      	cmp	r7, #111	; 0x6f
 8029f1a:	bf0c      	ite	eq
 8029f1c:	2308      	moveq	r3, #8
 8029f1e:	230a      	movne	r3, #10
 8029f20:	2100      	movs	r1, #0
 8029f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029f26:	6865      	ldr	r5, [r4, #4]
 8029f28:	60a5      	str	r5, [r4, #8]
 8029f2a:	2d00      	cmp	r5, #0
 8029f2c:	bfa2      	ittt	ge
 8029f2e:	6821      	ldrge	r1, [r4, #0]
 8029f30:	f021 0104 	bicge.w	r1, r1, #4
 8029f34:	6021      	strge	r1, [r4, #0]
 8029f36:	b90e      	cbnz	r6, 8029f3c <_printf_i+0x118>
 8029f38:	2d00      	cmp	r5, #0
 8029f3a:	d04d      	beq.n	8029fd8 <_printf_i+0x1b4>
 8029f3c:	4615      	mov	r5, r2
 8029f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8029f42:	fb03 6711 	mls	r7, r3, r1, r6
 8029f46:	5dc7      	ldrb	r7, [r0, r7]
 8029f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8029f4c:	4637      	mov	r7, r6
 8029f4e:	42bb      	cmp	r3, r7
 8029f50:	460e      	mov	r6, r1
 8029f52:	d9f4      	bls.n	8029f3e <_printf_i+0x11a>
 8029f54:	2b08      	cmp	r3, #8
 8029f56:	d10b      	bne.n	8029f70 <_printf_i+0x14c>
 8029f58:	6823      	ldr	r3, [r4, #0]
 8029f5a:	07de      	lsls	r6, r3, #31
 8029f5c:	d508      	bpl.n	8029f70 <_printf_i+0x14c>
 8029f5e:	6923      	ldr	r3, [r4, #16]
 8029f60:	6861      	ldr	r1, [r4, #4]
 8029f62:	4299      	cmp	r1, r3
 8029f64:	bfde      	ittt	le
 8029f66:	2330      	movle	r3, #48	; 0x30
 8029f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029f70:	1b52      	subs	r2, r2, r5
 8029f72:	6122      	str	r2, [r4, #16]
 8029f74:	f8cd a000 	str.w	sl, [sp]
 8029f78:	464b      	mov	r3, r9
 8029f7a:	aa03      	add	r2, sp, #12
 8029f7c:	4621      	mov	r1, r4
 8029f7e:	4640      	mov	r0, r8
 8029f80:	f7ff fee2 	bl	8029d48 <_printf_common>
 8029f84:	3001      	adds	r0, #1
 8029f86:	d14c      	bne.n	802a022 <_printf_i+0x1fe>
 8029f88:	f04f 30ff 	mov.w	r0, #4294967295
 8029f8c:	b004      	add	sp, #16
 8029f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f92:	4835      	ldr	r0, [pc, #212]	; (802a068 <_printf_i+0x244>)
 8029f94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029f98:	6829      	ldr	r1, [r5, #0]
 8029f9a:	6823      	ldr	r3, [r4, #0]
 8029f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8029fa0:	6029      	str	r1, [r5, #0]
 8029fa2:	061d      	lsls	r5, r3, #24
 8029fa4:	d514      	bpl.n	8029fd0 <_printf_i+0x1ac>
 8029fa6:	07df      	lsls	r7, r3, #31
 8029fa8:	bf44      	itt	mi
 8029faa:	f043 0320 	orrmi.w	r3, r3, #32
 8029fae:	6023      	strmi	r3, [r4, #0]
 8029fb0:	b91e      	cbnz	r6, 8029fba <_printf_i+0x196>
 8029fb2:	6823      	ldr	r3, [r4, #0]
 8029fb4:	f023 0320 	bic.w	r3, r3, #32
 8029fb8:	6023      	str	r3, [r4, #0]
 8029fba:	2310      	movs	r3, #16
 8029fbc:	e7b0      	b.n	8029f20 <_printf_i+0xfc>
 8029fbe:	6823      	ldr	r3, [r4, #0]
 8029fc0:	f043 0320 	orr.w	r3, r3, #32
 8029fc4:	6023      	str	r3, [r4, #0]
 8029fc6:	2378      	movs	r3, #120	; 0x78
 8029fc8:	4828      	ldr	r0, [pc, #160]	; (802a06c <_printf_i+0x248>)
 8029fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8029fce:	e7e3      	b.n	8029f98 <_printf_i+0x174>
 8029fd0:	0659      	lsls	r1, r3, #25
 8029fd2:	bf48      	it	mi
 8029fd4:	b2b6      	uxthmi	r6, r6
 8029fd6:	e7e6      	b.n	8029fa6 <_printf_i+0x182>
 8029fd8:	4615      	mov	r5, r2
 8029fda:	e7bb      	b.n	8029f54 <_printf_i+0x130>
 8029fdc:	682b      	ldr	r3, [r5, #0]
 8029fde:	6826      	ldr	r6, [r4, #0]
 8029fe0:	6961      	ldr	r1, [r4, #20]
 8029fe2:	1d18      	adds	r0, r3, #4
 8029fe4:	6028      	str	r0, [r5, #0]
 8029fe6:	0635      	lsls	r5, r6, #24
 8029fe8:	681b      	ldr	r3, [r3, #0]
 8029fea:	d501      	bpl.n	8029ff0 <_printf_i+0x1cc>
 8029fec:	6019      	str	r1, [r3, #0]
 8029fee:	e002      	b.n	8029ff6 <_printf_i+0x1d2>
 8029ff0:	0670      	lsls	r0, r6, #25
 8029ff2:	d5fb      	bpl.n	8029fec <_printf_i+0x1c8>
 8029ff4:	8019      	strh	r1, [r3, #0]
 8029ff6:	2300      	movs	r3, #0
 8029ff8:	6123      	str	r3, [r4, #16]
 8029ffa:	4615      	mov	r5, r2
 8029ffc:	e7ba      	b.n	8029f74 <_printf_i+0x150>
 8029ffe:	682b      	ldr	r3, [r5, #0]
 802a000:	1d1a      	adds	r2, r3, #4
 802a002:	602a      	str	r2, [r5, #0]
 802a004:	681d      	ldr	r5, [r3, #0]
 802a006:	6862      	ldr	r2, [r4, #4]
 802a008:	2100      	movs	r1, #0
 802a00a:	4628      	mov	r0, r5
 802a00c:	f7d6 f900 	bl	8000210 <memchr>
 802a010:	b108      	cbz	r0, 802a016 <_printf_i+0x1f2>
 802a012:	1b40      	subs	r0, r0, r5
 802a014:	6060      	str	r0, [r4, #4]
 802a016:	6863      	ldr	r3, [r4, #4]
 802a018:	6123      	str	r3, [r4, #16]
 802a01a:	2300      	movs	r3, #0
 802a01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a020:	e7a8      	b.n	8029f74 <_printf_i+0x150>
 802a022:	6923      	ldr	r3, [r4, #16]
 802a024:	462a      	mov	r2, r5
 802a026:	4649      	mov	r1, r9
 802a028:	4640      	mov	r0, r8
 802a02a:	47d0      	blx	sl
 802a02c:	3001      	adds	r0, #1
 802a02e:	d0ab      	beq.n	8029f88 <_printf_i+0x164>
 802a030:	6823      	ldr	r3, [r4, #0]
 802a032:	079b      	lsls	r3, r3, #30
 802a034:	d413      	bmi.n	802a05e <_printf_i+0x23a>
 802a036:	68e0      	ldr	r0, [r4, #12]
 802a038:	9b03      	ldr	r3, [sp, #12]
 802a03a:	4298      	cmp	r0, r3
 802a03c:	bfb8      	it	lt
 802a03e:	4618      	movlt	r0, r3
 802a040:	e7a4      	b.n	8029f8c <_printf_i+0x168>
 802a042:	2301      	movs	r3, #1
 802a044:	4632      	mov	r2, r6
 802a046:	4649      	mov	r1, r9
 802a048:	4640      	mov	r0, r8
 802a04a:	47d0      	blx	sl
 802a04c:	3001      	adds	r0, #1
 802a04e:	d09b      	beq.n	8029f88 <_printf_i+0x164>
 802a050:	3501      	adds	r5, #1
 802a052:	68e3      	ldr	r3, [r4, #12]
 802a054:	9903      	ldr	r1, [sp, #12]
 802a056:	1a5b      	subs	r3, r3, r1
 802a058:	42ab      	cmp	r3, r5
 802a05a:	dcf2      	bgt.n	802a042 <_printf_i+0x21e>
 802a05c:	e7eb      	b.n	802a036 <_printf_i+0x212>
 802a05e:	2500      	movs	r5, #0
 802a060:	f104 0619 	add.w	r6, r4, #25
 802a064:	e7f5      	b.n	802a052 <_printf_i+0x22e>
 802a066:	bf00      	nop
 802a068:	0802f7a9 	.word	0x0802f7a9
 802a06c:	0802f7ba 	.word	0x0802f7ba

0802a070 <_sbrk_r>:
 802a070:	b538      	push	{r3, r4, r5, lr}
 802a072:	4d06      	ldr	r5, [pc, #24]	; (802a08c <_sbrk_r+0x1c>)
 802a074:	2300      	movs	r3, #0
 802a076:	4604      	mov	r4, r0
 802a078:	4608      	mov	r0, r1
 802a07a:	602b      	str	r3, [r5, #0]
 802a07c:	f7d7 fc7c 	bl	8001978 <_sbrk>
 802a080:	1c43      	adds	r3, r0, #1
 802a082:	d102      	bne.n	802a08a <_sbrk_r+0x1a>
 802a084:	682b      	ldr	r3, [r5, #0]
 802a086:	b103      	cbz	r3, 802a08a <_sbrk_r+0x1a>
 802a088:	6023      	str	r3, [r4, #0]
 802a08a:	bd38      	pop	{r3, r4, r5, pc}
 802a08c:	200154b0 	.word	0x200154b0

0802a090 <_raise_r>:
 802a090:	291f      	cmp	r1, #31
 802a092:	b538      	push	{r3, r4, r5, lr}
 802a094:	4604      	mov	r4, r0
 802a096:	460d      	mov	r5, r1
 802a098:	d904      	bls.n	802a0a4 <_raise_r+0x14>
 802a09a:	2316      	movs	r3, #22
 802a09c:	6003      	str	r3, [r0, #0]
 802a09e:	f04f 30ff 	mov.w	r0, #4294967295
 802a0a2:	bd38      	pop	{r3, r4, r5, pc}
 802a0a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a0a6:	b112      	cbz	r2, 802a0ae <_raise_r+0x1e>
 802a0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a0ac:	b94b      	cbnz	r3, 802a0c2 <_raise_r+0x32>
 802a0ae:	4620      	mov	r0, r4
 802a0b0:	f000 f830 	bl	802a114 <_getpid_r>
 802a0b4:	462a      	mov	r2, r5
 802a0b6:	4601      	mov	r1, r0
 802a0b8:	4620      	mov	r0, r4
 802a0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a0be:	f000 b817 	b.w	802a0f0 <_kill_r>
 802a0c2:	2b01      	cmp	r3, #1
 802a0c4:	d00a      	beq.n	802a0dc <_raise_r+0x4c>
 802a0c6:	1c59      	adds	r1, r3, #1
 802a0c8:	d103      	bne.n	802a0d2 <_raise_r+0x42>
 802a0ca:	2316      	movs	r3, #22
 802a0cc:	6003      	str	r3, [r0, #0]
 802a0ce:	2001      	movs	r0, #1
 802a0d0:	e7e7      	b.n	802a0a2 <_raise_r+0x12>
 802a0d2:	2400      	movs	r4, #0
 802a0d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a0d8:	4628      	mov	r0, r5
 802a0da:	4798      	blx	r3
 802a0dc:	2000      	movs	r0, #0
 802a0de:	e7e0      	b.n	802a0a2 <_raise_r+0x12>

0802a0e0 <raise>:
 802a0e0:	4b02      	ldr	r3, [pc, #8]	; (802a0ec <raise+0xc>)
 802a0e2:	4601      	mov	r1, r0
 802a0e4:	6818      	ldr	r0, [r3, #0]
 802a0e6:	f7ff bfd3 	b.w	802a090 <_raise_r>
 802a0ea:	bf00      	nop
 802a0ec:	200000bc 	.word	0x200000bc

0802a0f0 <_kill_r>:
 802a0f0:	b538      	push	{r3, r4, r5, lr}
 802a0f2:	4d07      	ldr	r5, [pc, #28]	; (802a110 <_kill_r+0x20>)
 802a0f4:	2300      	movs	r3, #0
 802a0f6:	4604      	mov	r4, r0
 802a0f8:	4608      	mov	r0, r1
 802a0fa:	4611      	mov	r1, r2
 802a0fc:	602b      	str	r3, [r5, #0]
 802a0fe:	f7d7 fc05 	bl	800190c <_kill>
 802a102:	1c43      	adds	r3, r0, #1
 802a104:	d102      	bne.n	802a10c <_kill_r+0x1c>
 802a106:	682b      	ldr	r3, [r5, #0]
 802a108:	b103      	cbz	r3, 802a10c <_kill_r+0x1c>
 802a10a:	6023      	str	r3, [r4, #0]
 802a10c:	bd38      	pop	{r3, r4, r5, pc}
 802a10e:	bf00      	nop
 802a110:	200154b0 	.word	0x200154b0

0802a114 <_getpid_r>:
 802a114:	f7d7 bbf8 	b.w	8001908 <_getpid>

0802a118 <siprintf>:
 802a118:	b40e      	push	{r1, r2, r3}
 802a11a:	b500      	push	{lr}
 802a11c:	b09c      	sub	sp, #112	; 0x70
 802a11e:	ab1d      	add	r3, sp, #116	; 0x74
 802a120:	9002      	str	r0, [sp, #8]
 802a122:	9006      	str	r0, [sp, #24]
 802a124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802a128:	4809      	ldr	r0, [pc, #36]	; (802a150 <siprintf+0x38>)
 802a12a:	9107      	str	r1, [sp, #28]
 802a12c:	9104      	str	r1, [sp, #16]
 802a12e:	4909      	ldr	r1, [pc, #36]	; (802a154 <siprintf+0x3c>)
 802a130:	f853 2b04 	ldr.w	r2, [r3], #4
 802a134:	9105      	str	r1, [sp, #20]
 802a136:	6800      	ldr	r0, [r0, #0]
 802a138:	9301      	str	r3, [sp, #4]
 802a13a:	a902      	add	r1, sp, #8
 802a13c:	f000 fc0e 	bl	802a95c <_svfiprintf_r>
 802a140:	9b02      	ldr	r3, [sp, #8]
 802a142:	2200      	movs	r2, #0
 802a144:	701a      	strb	r2, [r3, #0]
 802a146:	b01c      	add	sp, #112	; 0x70
 802a148:	f85d eb04 	ldr.w	lr, [sp], #4
 802a14c:	b003      	add	sp, #12
 802a14e:	4770      	bx	lr
 802a150:	200000bc 	.word	0x200000bc
 802a154:	ffff0208 	.word	0xffff0208

0802a158 <strncmp>:
 802a158:	b510      	push	{r4, lr}
 802a15a:	b17a      	cbz	r2, 802a17c <strncmp+0x24>
 802a15c:	4603      	mov	r3, r0
 802a15e:	3901      	subs	r1, #1
 802a160:	1884      	adds	r4, r0, r2
 802a162:	f813 0b01 	ldrb.w	r0, [r3], #1
 802a166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802a16a:	4290      	cmp	r0, r2
 802a16c:	d101      	bne.n	802a172 <strncmp+0x1a>
 802a16e:	42a3      	cmp	r3, r4
 802a170:	d101      	bne.n	802a176 <strncmp+0x1e>
 802a172:	1a80      	subs	r0, r0, r2
 802a174:	bd10      	pop	{r4, pc}
 802a176:	2800      	cmp	r0, #0
 802a178:	d1f3      	bne.n	802a162 <strncmp+0xa>
 802a17a:	e7fa      	b.n	802a172 <strncmp+0x1a>
 802a17c:	4610      	mov	r0, r2
 802a17e:	e7f9      	b.n	802a174 <strncmp+0x1c>

0802a180 <__swbuf_r>:
 802a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a182:	460e      	mov	r6, r1
 802a184:	4614      	mov	r4, r2
 802a186:	4605      	mov	r5, r0
 802a188:	b118      	cbz	r0, 802a192 <__swbuf_r+0x12>
 802a18a:	6983      	ldr	r3, [r0, #24]
 802a18c:	b90b      	cbnz	r3, 802a192 <__swbuf_r+0x12>
 802a18e:	f000 fa33 	bl	802a5f8 <__sinit>
 802a192:	4b21      	ldr	r3, [pc, #132]	; (802a218 <__swbuf_r+0x98>)
 802a194:	429c      	cmp	r4, r3
 802a196:	d12b      	bne.n	802a1f0 <__swbuf_r+0x70>
 802a198:	686c      	ldr	r4, [r5, #4]
 802a19a:	69a3      	ldr	r3, [r4, #24]
 802a19c:	60a3      	str	r3, [r4, #8]
 802a19e:	89a3      	ldrh	r3, [r4, #12]
 802a1a0:	071a      	lsls	r2, r3, #28
 802a1a2:	d52f      	bpl.n	802a204 <__swbuf_r+0x84>
 802a1a4:	6923      	ldr	r3, [r4, #16]
 802a1a6:	b36b      	cbz	r3, 802a204 <__swbuf_r+0x84>
 802a1a8:	6923      	ldr	r3, [r4, #16]
 802a1aa:	6820      	ldr	r0, [r4, #0]
 802a1ac:	1ac0      	subs	r0, r0, r3
 802a1ae:	6963      	ldr	r3, [r4, #20]
 802a1b0:	b2f6      	uxtb	r6, r6
 802a1b2:	4283      	cmp	r3, r0
 802a1b4:	4637      	mov	r7, r6
 802a1b6:	dc04      	bgt.n	802a1c2 <__swbuf_r+0x42>
 802a1b8:	4621      	mov	r1, r4
 802a1ba:	4628      	mov	r0, r5
 802a1bc:	f000 f988 	bl	802a4d0 <_fflush_r>
 802a1c0:	bb30      	cbnz	r0, 802a210 <__swbuf_r+0x90>
 802a1c2:	68a3      	ldr	r3, [r4, #8]
 802a1c4:	3b01      	subs	r3, #1
 802a1c6:	60a3      	str	r3, [r4, #8]
 802a1c8:	6823      	ldr	r3, [r4, #0]
 802a1ca:	1c5a      	adds	r2, r3, #1
 802a1cc:	6022      	str	r2, [r4, #0]
 802a1ce:	701e      	strb	r6, [r3, #0]
 802a1d0:	6963      	ldr	r3, [r4, #20]
 802a1d2:	3001      	adds	r0, #1
 802a1d4:	4283      	cmp	r3, r0
 802a1d6:	d004      	beq.n	802a1e2 <__swbuf_r+0x62>
 802a1d8:	89a3      	ldrh	r3, [r4, #12]
 802a1da:	07db      	lsls	r3, r3, #31
 802a1dc:	d506      	bpl.n	802a1ec <__swbuf_r+0x6c>
 802a1de:	2e0a      	cmp	r6, #10
 802a1e0:	d104      	bne.n	802a1ec <__swbuf_r+0x6c>
 802a1e2:	4621      	mov	r1, r4
 802a1e4:	4628      	mov	r0, r5
 802a1e6:	f000 f973 	bl	802a4d0 <_fflush_r>
 802a1ea:	b988      	cbnz	r0, 802a210 <__swbuf_r+0x90>
 802a1ec:	4638      	mov	r0, r7
 802a1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a1f0:	4b0a      	ldr	r3, [pc, #40]	; (802a21c <__swbuf_r+0x9c>)
 802a1f2:	429c      	cmp	r4, r3
 802a1f4:	d101      	bne.n	802a1fa <__swbuf_r+0x7a>
 802a1f6:	68ac      	ldr	r4, [r5, #8]
 802a1f8:	e7cf      	b.n	802a19a <__swbuf_r+0x1a>
 802a1fa:	4b09      	ldr	r3, [pc, #36]	; (802a220 <__swbuf_r+0xa0>)
 802a1fc:	429c      	cmp	r4, r3
 802a1fe:	bf08      	it	eq
 802a200:	68ec      	ldreq	r4, [r5, #12]
 802a202:	e7ca      	b.n	802a19a <__swbuf_r+0x1a>
 802a204:	4621      	mov	r1, r4
 802a206:	4628      	mov	r0, r5
 802a208:	f000 f80c 	bl	802a224 <__swsetup_r>
 802a20c:	2800      	cmp	r0, #0
 802a20e:	d0cb      	beq.n	802a1a8 <__swbuf_r+0x28>
 802a210:	f04f 37ff 	mov.w	r7, #4294967295
 802a214:	e7ea      	b.n	802a1ec <__swbuf_r+0x6c>
 802a216:	bf00      	nop
 802a218:	0802f7f0 	.word	0x0802f7f0
 802a21c:	0802f810 	.word	0x0802f810
 802a220:	0802f7d0 	.word	0x0802f7d0

0802a224 <__swsetup_r>:
 802a224:	4b32      	ldr	r3, [pc, #200]	; (802a2f0 <__swsetup_r+0xcc>)
 802a226:	b570      	push	{r4, r5, r6, lr}
 802a228:	681d      	ldr	r5, [r3, #0]
 802a22a:	4606      	mov	r6, r0
 802a22c:	460c      	mov	r4, r1
 802a22e:	b125      	cbz	r5, 802a23a <__swsetup_r+0x16>
 802a230:	69ab      	ldr	r3, [r5, #24]
 802a232:	b913      	cbnz	r3, 802a23a <__swsetup_r+0x16>
 802a234:	4628      	mov	r0, r5
 802a236:	f000 f9df 	bl	802a5f8 <__sinit>
 802a23a:	4b2e      	ldr	r3, [pc, #184]	; (802a2f4 <__swsetup_r+0xd0>)
 802a23c:	429c      	cmp	r4, r3
 802a23e:	d10f      	bne.n	802a260 <__swsetup_r+0x3c>
 802a240:	686c      	ldr	r4, [r5, #4]
 802a242:	89a3      	ldrh	r3, [r4, #12]
 802a244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a248:	0719      	lsls	r1, r3, #28
 802a24a:	d42c      	bmi.n	802a2a6 <__swsetup_r+0x82>
 802a24c:	06dd      	lsls	r5, r3, #27
 802a24e:	d411      	bmi.n	802a274 <__swsetup_r+0x50>
 802a250:	2309      	movs	r3, #9
 802a252:	6033      	str	r3, [r6, #0]
 802a254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a258:	81a3      	strh	r3, [r4, #12]
 802a25a:	f04f 30ff 	mov.w	r0, #4294967295
 802a25e:	e03e      	b.n	802a2de <__swsetup_r+0xba>
 802a260:	4b25      	ldr	r3, [pc, #148]	; (802a2f8 <__swsetup_r+0xd4>)
 802a262:	429c      	cmp	r4, r3
 802a264:	d101      	bne.n	802a26a <__swsetup_r+0x46>
 802a266:	68ac      	ldr	r4, [r5, #8]
 802a268:	e7eb      	b.n	802a242 <__swsetup_r+0x1e>
 802a26a:	4b24      	ldr	r3, [pc, #144]	; (802a2fc <__swsetup_r+0xd8>)
 802a26c:	429c      	cmp	r4, r3
 802a26e:	bf08      	it	eq
 802a270:	68ec      	ldreq	r4, [r5, #12]
 802a272:	e7e6      	b.n	802a242 <__swsetup_r+0x1e>
 802a274:	0758      	lsls	r0, r3, #29
 802a276:	d512      	bpl.n	802a29e <__swsetup_r+0x7a>
 802a278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a27a:	b141      	cbz	r1, 802a28e <__swsetup_r+0x6a>
 802a27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a280:	4299      	cmp	r1, r3
 802a282:	d002      	beq.n	802a28a <__swsetup_r+0x66>
 802a284:	4630      	mov	r0, r6
 802a286:	f7ff fb25 	bl	80298d4 <_free_r>
 802a28a:	2300      	movs	r3, #0
 802a28c:	6363      	str	r3, [r4, #52]	; 0x34
 802a28e:	89a3      	ldrh	r3, [r4, #12]
 802a290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a294:	81a3      	strh	r3, [r4, #12]
 802a296:	2300      	movs	r3, #0
 802a298:	6063      	str	r3, [r4, #4]
 802a29a:	6923      	ldr	r3, [r4, #16]
 802a29c:	6023      	str	r3, [r4, #0]
 802a29e:	89a3      	ldrh	r3, [r4, #12]
 802a2a0:	f043 0308 	orr.w	r3, r3, #8
 802a2a4:	81a3      	strh	r3, [r4, #12]
 802a2a6:	6923      	ldr	r3, [r4, #16]
 802a2a8:	b94b      	cbnz	r3, 802a2be <__swsetup_r+0x9a>
 802a2aa:	89a3      	ldrh	r3, [r4, #12]
 802a2ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a2b4:	d003      	beq.n	802a2be <__swsetup_r+0x9a>
 802a2b6:	4621      	mov	r1, r4
 802a2b8:	4630      	mov	r0, r6
 802a2ba:	f000 fa5f 	bl	802a77c <__smakebuf_r>
 802a2be:	89a0      	ldrh	r0, [r4, #12]
 802a2c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a2c4:	f010 0301 	ands.w	r3, r0, #1
 802a2c8:	d00a      	beq.n	802a2e0 <__swsetup_r+0xbc>
 802a2ca:	2300      	movs	r3, #0
 802a2cc:	60a3      	str	r3, [r4, #8]
 802a2ce:	6963      	ldr	r3, [r4, #20]
 802a2d0:	425b      	negs	r3, r3
 802a2d2:	61a3      	str	r3, [r4, #24]
 802a2d4:	6923      	ldr	r3, [r4, #16]
 802a2d6:	b943      	cbnz	r3, 802a2ea <__swsetup_r+0xc6>
 802a2d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a2dc:	d1ba      	bne.n	802a254 <__swsetup_r+0x30>
 802a2de:	bd70      	pop	{r4, r5, r6, pc}
 802a2e0:	0781      	lsls	r1, r0, #30
 802a2e2:	bf58      	it	pl
 802a2e4:	6963      	ldrpl	r3, [r4, #20]
 802a2e6:	60a3      	str	r3, [r4, #8]
 802a2e8:	e7f4      	b.n	802a2d4 <__swsetup_r+0xb0>
 802a2ea:	2000      	movs	r0, #0
 802a2ec:	e7f7      	b.n	802a2de <__swsetup_r+0xba>
 802a2ee:	bf00      	nop
 802a2f0:	200000bc 	.word	0x200000bc
 802a2f4:	0802f7f0 	.word	0x0802f7f0
 802a2f8:	0802f810 	.word	0x0802f810
 802a2fc:	0802f7d0 	.word	0x0802f7d0

0802a300 <__register_exitproc>:
 802a300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a304:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802a3c0 <__register_exitproc+0xc0>
 802a308:	4606      	mov	r6, r0
 802a30a:	f8d8 0000 	ldr.w	r0, [r8]
 802a30e:	461f      	mov	r7, r3
 802a310:	460d      	mov	r5, r1
 802a312:	4691      	mov	r9, r2
 802a314:	f7ff fab5 	bl	8029882 <__retarget_lock_acquire_recursive>
 802a318:	4b25      	ldr	r3, [pc, #148]	; (802a3b0 <__register_exitproc+0xb0>)
 802a31a:	681c      	ldr	r4, [r3, #0]
 802a31c:	b934      	cbnz	r4, 802a32c <__register_exitproc+0x2c>
 802a31e:	4c25      	ldr	r4, [pc, #148]	; (802a3b4 <__register_exitproc+0xb4>)
 802a320:	601c      	str	r4, [r3, #0]
 802a322:	4b25      	ldr	r3, [pc, #148]	; (802a3b8 <__register_exitproc+0xb8>)
 802a324:	b113      	cbz	r3, 802a32c <__register_exitproc+0x2c>
 802a326:	681b      	ldr	r3, [r3, #0]
 802a328:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a32c:	6863      	ldr	r3, [r4, #4]
 802a32e:	2b1f      	cmp	r3, #31
 802a330:	dd07      	ble.n	802a342 <__register_exitproc+0x42>
 802a332:	f8d8 0000 	ldr.w	r0, [r8]
 802a336:	f7ff faa6 	bl	8029886 <__retarget_lock_release_recursive>
 802a33a:	f04f 30ff 	mov.w	r0, #4294967295
 802a33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a342:	b34e      	cbz	r6, 802a398 <__register_exitproc+0x98>
 802a344:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a348:	b988      	cbnz	r0, 802a36e <__register_exitproc+0x6e>
 802a34a:	4b1c      	ldr	r3, [pc, #112]	; (802a3bc <__register_exitproc+0xbc>)
 802a34c:	b923      	cbnz	r3, 802a358 <__register_exitproc+0x58>
 802a34e:	f8d8 0000 	ldr.w	r0, [r8]
 802a352:	f7ff fa97 	bl	8029884 <__retarget_lock_release>
 802a356:	e7f0      	b.n	802a33a <__register_exitproc+0x3a>
 802a358:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a35c:	f7ff fa94 	bl	8029888 <malloc>
 802a360:	2800      	cmp	r0, #0
 802a362:	d0f4      	beq.n	802a34e <__register_exitproc+0x4e>
 802a364:	2300      	movs	r3, #0
 802a366:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a36a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a36e:	6863      	ldr	r3, [r4, #4]
 802a370:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a374:	2201      	movs	r2, #1
 802a376:	409a      	lsls	r2, r3
 802a378:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a37c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a380:	4313      	orrs	r3, r2
 802a382:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a386:	2e02      	cmp	r6, #2
 802a388:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a38c:	bf02      	ittt	eq
 802a38e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a392:	4313      	orreq	r3, r2
 802a394:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802a398:	6863      	ldr	r3, [r4, #4]
 802a39a:	f8d8 0000 	ldr.w	r0, [r8]
 802a39e:	1c5a      	adds	r2, r3, #1
 802a3a0:	3302      	adds	r3, #2
 802a3a2:	6062      	str	r2, [r4, #4]
 802a3a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a3a8:	f7ff fa6d 	bl	8029886 <__retarget_lock_release_recursive>
 802a3ac:	2000      	movs	r0, #0
 802a3ae:	e7c6      	b.n	802a33e <__register_exitproc+0x3e>
 802a3b0:	200154ac 	.word	0x200154ac
 802a3b4:	20015420 	.word	0x20015420
 802a3b8:	0802f7cc 	.word	0x0802f7cc
 802a3bc:	08029889 	.word	0x08029889
 802a3c0:	20000120 	.word	0x20000120

0802a3c4 <__sflush_r>:
 802a3c4:	898a      	ldrh	r2, [r1, #12]
 802a3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a3ca:	4605      	mov	r5, r0
 802a3cc:	0710      	lsls	r0, r2, #28
 802a3ce:	460c      	mov	r4, r1
 802a3d0:	d458      	bmi.n	802a484 <__sflush_r+0xc0>
 802a3d2:	684b      	ldr	r3, [r1, #4]
 802a3d4:	2b00      	cmp	r3, #0
 802a3d6:	dc05      	bgt.n	802a3e4 <__sflush_r+0x20>
 802a3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a3da:	2b00      	cmp	r3, #0
 802a3dc:	dc02      	bgt.n	802a3e4 <__sflush_r+0x20>
 802a3de:	2000      	movs	r0, #0
 802a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a3e6:	2e00      	cmp	r6, #0
 802a3e8:	d0f9      	beq.n	802a3de <__sflush_r+0x1a>
 802a3ea:	2300      	movs	r3, #0
 802a3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a3f0:	682f      	ldr	r7, [r5, #0]
 802a3f2:	602b      	str	r3, [r5, #0]
 802a3f4:	d032      	beq.n	802a45c <__sflush_r+0x98>
 802a3f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a3f8:	89a3      	ldrh	r3, [r4, #12]
 802a3fa:	075a      	lsls	r2, r3, #29
 802a3fc:	d505      	bpl.n	802a40a <__sflush_r+0x46>
 802a3fe:	6863      	ldr	r3, [r4, #4]
 802a400:	1ac0      	subs	r0, r0, r3
 802a402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a404:	b10b      	cbz	r3, 802a40a <__sflush_r+0x46>
 802a406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a408:	1ac0      	subs	r0, r0, r3
 802a40a:	2300      	movs	r3, #0
 802a40c:	4602      	mov	r2, r0
 802a40e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a410:	6a21      	ldr	r1, [r4, #32]
 802a412:	4628      	mov	r0, r5
 802a414:	47b0      	blx	r6
 802a416:	1c43      	adds	r3, r0, #1
 802a418:	89a3      	ldrh	r3, [r4, #12]
 802a41a:	d106      	bne.n	802a42a <__sflush_r+0x66>
 802a41c:	6829      	ldr	r1, [r5, #0]
 802a41e:	291d      	cmp	r1, #29
 802a420:	d82c      	bhi.n	802a47c <__sflush_r+0xb8>
 802a422:	4a2a      	ldr	r2, [pc, #168]	; (802a4cc <__sflush_r+0x108>)
 802a424:	40ca      	lsrs	r2, r1
 802a426:	07d6      	lsls	r6, r2, #31
 802a428:	d528      	bpl.n	802a47c <__sflush_r+0xb8>
 802a42a:	2200      	movs	r2, #0
 802a42c:	6062      	str	r2, [r4, #4]
 802a42e:	04d9      	lsls	r1, r3, #19
 802a430:	6922      	ldr	r2, [r4, #16]
 802a432:	6022      	str	r2, [r4, #0]
 802a434:	d504      	bpl.n	802a440 <__sflush_r+0x7c>
 802a436:	1c42      	adds	r2, r0, #1
 802a438:	d101      	bne.n	802a43e <__sflush_r+0x7a>
 802a43a:	682b      	ldr	r3, [r5, #0]
 802a43c:	b903      	cbnz	r3, 802a440 <__sflush_r+0x7c>
 802a43e:	6560      	str	r0, [r4, #84]	; 0x54
 802a440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a442:	602f      	str	r7, [r5, #0]
 802a444:	2900      	cmp	r1, #0
 802a446:	d0ca      	beq.n	802a3de <__sflush_r+0x1a>
 802a448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a44c:	4299      	cmp	r1, r3
 802a44e:	d002      	beq.n	802a456 <__sflush_r+0x92>
 802a450:	4628      	mov	r0, r5
 802a452:	f7ff fa3f 	bl	80298d4 <_free_r>
 802a456:	2000      	movs	r0, #0
 802a458:	6360      	str	r0, [r4, #52]	; 0x34
 802a45a:	e7c1      	b.n	802a3e0 <__sflush_r+0x1c>
 802a45c:	6a21      	ldr	r1, [r4, #32]
 802a45e:	2301      	movs	r3, #1
 802a460:	4628      	mov	r0, r5
 802a462:	47b0      	blx	r6
 802a464:	1c41      	adds	r1, r0, #1
 802a466:	d1c7      	bne.n	802a3f8 <__sflush_r+0x34>
 802a468:	682b      	ldr	r3, [r5, #0]
 802a46a:	2b00      	cmp	r3, #0
 802a46c:	d0c4      	beq.n	802a3f8 <__sflush_r+0x34>
 802a46e:	2b1d      	cmp	r3, #29
 802a470:	d001      	beq.n	802a476 <__sflush_r+0xb2>
 802a472:	2b16      	cmp	r3, #22
 802a474:	d101      	bne.n	802a47a <__sflush_r+0xb6>
 802a476:	602f      	str	r7, [r5, #0]
 802a478:	e7b1      	b.n	802a3de <__sflush_r+0x1a>
 802a47a:	89a3      	ldrh	r3, [r4, #12]
 802a47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a480:	81a3      	strh	r3, [r4, #12]
 802a482:	e7ad      	b.n	802a3e0 <__sflush_r+0x1c>
 802a484:	690f      	ldr	r7, [r1, #16]
 802a486:	2f00      	cmp	r7, #0
 802a488:	d0a9      	beq.n	802a3de <__sflush_r+0x1a>
 802a48a:	0793      	lsls	r3, r2, #30
 802a48c:	680e      	ldr	r6, [r1, #0]
 802a48e:	bf08      	it	eq
 802a490:	694b      	ldreq	r3, [r1, #20]
 802a492:	600f      	str	r7, [r1, #0]
 802a494:	bf18      	it	ne
 802a496:	2300      	movne	r3, #0
 802a498:	eba6 0807 	sub.w	r8, r6, r7
 802a49c:	608b      	str	r3, [r1, #8]
 802a49e:	f1b8 0f00 	cmp.w	r8, #0
 802a4a2:	dd9c      	ble.n	802a3de <__sflush_r+0x1a>
 802a4a4:	6a21      	ldr	r1, [r4, #32]
 802a4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a4a8:	4643      	mov	r3, r8
 802a4aa:	463a      	mov	r2, r7
 802a4ac:	4628      	mov	r0, r5
 802a4ae:	47b0      	blx	r6
 802a4b0:	2800      	cmp	r0, #0
 802a4b2:	dc06      	bgt.n	802a4c2 <__sflush_r+0xfe>
 802a4b4:	89a3      	ldrh	r3, [r4, #12]
 802a4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a4ba:	81a3      	strh	r3, [r4, #12]
 802a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 802a4c0:	e78e      	b.n	802a3e0 <__sflush_r+0x1c>
 802a4c2:	4407      	add	r7, r0
 802a4c4:	eba8 0800 	sub.w	r8, r8, r0
 802a4c8:	e7e9      	b.n	802a49e <__sflush_r+0xda>
 802a4ca:	bf00      	nop
 802a4cc:	20400001 	.word	0x20400001

0802a4d0 <_fflush_r>:
 802a4d0:	b538      	push	{r3, r4, r5, lr}
 802a4d2:	690b      	ldr	r3, [r1, #16]
 802a4d4:	4605      	mov	r5, r0
 802a4d6:	460c      	mov	r4, r1
 802a4d8:	b913      	cbnz	r3, 802a4e0 <_fflush_r+0x10>
 802a4da:	2500      	movs	r5, #0
 802a4dc:	4628      	mov	r0, r5
 802a4de:	bd38      	pop	{r3, r4, r5, pc}
 802a4e0:	b118      	cbz	r0, 802a4ea <_fflush_r+0x1a>
 802a4e2:	6983      	ldr	r3, [r0, #24]
 802a4e4:	b90b      	cbnz	r3, 802a4ea <_fflush_r+0x1a>
 802a4e6:	f000 f887 	bl	802a5f8 <__sinit>
 802a4ea:	4b14      	ldr	r3, [pc, #80]	; (802a53c <_fflush_r+0x6c>)
 802a4ec:	429c      	cmp	r4, r3
 802a4ee:	d11b      	bne.n	802a528 <_fflush_r+0x58>
 802a4f0:	686c      	ldr	r4, [r5, #4]
 802a4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a4f6:	2b00      	cmp	r3, #0
 802a4f8:	d0ef      	beq.n	802a4da <_fflush_r+0xa>
 802a4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a4fc:	07d0      	lsls	r0, r2, #31
 802a4fe:	d404      	bmi.n	802a50a <_fflush_r+0x3a>
 802a500:	0599      	lsls	r1, r3, #22
 802a502:	d402      	bmi.n	802a50a <_fflush_r+0x3a>
 802a504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a506:	f7ff f9bc 	bl	8029882 <__retarget_lock_acquire_recursive>
 802a50a:	4628      	mov	r0, r5
 802a50c:	4621      	mov	r1, r4
 802a50e:	f7ff ff59 	bl	802a3c4 <__sflush_r>
 802a512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a514:	07da      	lsls	r2, r3, #31
 802a516:	4605      	mov	r5, r0
 802a518:	d4e0      	bmi.n	802a4dc <_fflush_r+0xc>
 802a51a:	89a3      	ldrh	r3, [r4, #12]
 802a51c:	059b      	lsls	r3, r3, #22
 802a51e:	d4dd      	bmi.n	802a4dc <_fflush_r+0xc>
 802a520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a522:	f7ff f9b0 	bl	8029886 <__retarget_lock_release_recursive>
 802a526:	e7d9      	b.n	802a4dc <_fflush_r+0xc>
 802a528:	4b05      	ldr	r3, [pc, #20]	; (802a540 <_fflush_r+0x70>)
 802a52a:	429c      	cmp	r4, r3
 802a52c:	d101      	bne.n	802a532 <_fflush_r+0x62>
 802a52e:	68ac      	ldr	r4, [r5, #8]
 802a530:	e7df      	b.n	802a4f2 <_fflush_r+0x22>
 802a532:	4b04      	ldr	r3, [pc, #16]	; (802a544 <_fflush_r+0x74>)
 802a534:	429c      	cmp	r4, r3
 802a536:	bf08      	it	eq
 802a538:	68ec      	ldreq	r4, [r5, #12]
 802a53a:	e7da      	b.n	802a4f2 <_fflush_r+0x22>
 802a53c:	0802f7f0 	.word	0x0802f7f0
 802a540:	0802f810 	.word	0x0802f810
 802a544:	0802f7d0 	.word	0x0802f7d0

0802a548 <std>:
 802a548:	2300      	movs	r3, #0
 802a54a:	b510      	push	{r4, lr}
 802a54c:	4604      	mov	r4, r0
 802a54e:	e9c0 3300 	strd	r3, r3, [r0]
 802a552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a556:	6083      	str	r3, [r0, #8]
 802a558:	8181      	strh	r1, [r0, #12]
 802a55a:	6643      	str	r3, [r0, #100]	; 0x64
 802a55c:	81c2      	strh	r2, [r0, #14]
 802a55e:	6183      	str	r3, [r0, #24]
 802a560:	4619      	mov	r1, r3
 802a562:	2208      	movs	r2, #8
 802a564:	305c      	adds	r0, #92	; 0x5c
 802a566:	f7ff f9ad 	bl	80298c4 <memset>
 802a56a:	4b05      	ldr	r3, [pc, #20]	; (802a580 <std+0x38>)
 802a56c:	6263      	str	r3, [r4, #36]	; 0x24
 802a56e:	4b05      	ldr	r3, [pc, #20]	; (802a584 <std+0x3c>)
 802a570:	62a3      	str	r3, [r4, #40]	; 0x28
 802a572:	4b05      	ldr	r3, [pc, #20]	; (802a588 <std+0x40>)
 802a574:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a576:	4b05      	ldr	r3, [pc, #20]	; (802a58c <std+0x44>)
 802a578:	6224      	str	r4, [r4, #32]
 802a57a:	6323      	str	r3, [r4, #48]	; 0x30
 802a57c:	bd10      	pop	{r4, pc}
 802a57e:	bf00      	nop
 802a580:	0802ab5d 	.word	0x0802ab5d
 802a584:	0802ab7f 	.word	0x0802ab7f
 802a588:	0802abb7 	.word	0x0802abb7
 802a58c:	0802abdb 	.word	0x0802abdb

0802a590 <_cleanup_r>:
 802a590:	4901      	ldr	r1, [pc, #4]	; (802a598 <_cleanup_r+0x8>)
 802a592:	f000 b8af 	b.w	802a6f4 <_fwalk_reent>
 802a596:	bf00      	nop
 802a598:	0802a4d1 	.word	0x0802a4d1

0802a59c <__sfmoreglue>:
 802a59c:	b570      	push	{r4, r5, r6, lr}
 802a59e:	2268      	movs	r2, #104	; 0x68
 802a5a0:	1e4d      	subs	r5, r1, #1
 802a5a2:	4355      	muls	r5, r2
 802a5a4:	460e      	mov	r6, r1
 802a5a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a5aa:	f7ff f9ff 	bl	80299ac <_malloc_r>
 802a5ae:	4604      	mov	r4, r0
 802a5b0:	b140      	cbz	r0, 802a5c4 <__sfmoreglue+0x28>
 802a5b2:	2100      	movs	r1, #0
 802a5b4:	e9c0 1600 	strd	r1, r6, [r0]
 802a5b8:	300c      	adds	r0, #12
 802a5ba:	60a0      	str	r0, [r4, #8]
 802a5bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a5c0:	f7ff f980 	bl	80298c4 <memset>
 802a5c4:	4620      	mov	r0, r4
 802a5c6:	bd70      	pop	{r4, r5, r6, pc}

0802a5c8 <__sfp_lock_acquire>:
 802a5c8:	4801      	ldr	r0, [pc, #4]	; (802a5d0 <__sfp_lock_acquire+0x8>)
 802a5ca:	f7ff b95a 	b.w	8029882 <__retarget_lock_acquire_recursive>
 802a5ce:	bf00      	nop
 802a5d0:	2001530e 	.word	0x2001530e

0802a5d4 <__sfp_lock_release>:
 802a5d4:	4801      	ldr	r0, [pc, #4]	; (802a5dc <__sfp_lock_release+0x8>)
 802a5d6:	f7ff b956 	b.w	8029886 <__retarget_lock_release_recursive>
 802a5da:	bf00      	nop
 802a5dc:	2001530e 	.word	0x2001530e

0802a5e0 <__sinit_lock_acquire>:
 802a5e0:	4801      	ldr	r0, [pc, #4]	; (802a5e8 <__sinit_lock_acquire+0x8>)
 802a5e2:	f7ff b94e 	b.w	8029882 <__retarget_lock_acquire_recursive>
 802a5e6:	bf00      	nop
 802a5e8:	2001530f 	.word	0x2001530f

0802a5ec <__sinit_lock_release>:
 802a5ec:	4801      	ldr	r0, [pc, #4]	; (802a5f4 <__sinit_lock_release+0x8>)
 802a5ee:	f7ff b94a 	b.w	8029886 <__retarget_lock_release_recursive>
 802a5f2:	bf00      	nop
 802a5f4:	2001530f 	.word	0x2001530f

0802a5f8 <__sinit>:
 802a5f8:	b510      	push	{r4, lr}
 802a5fa:	4604      	mov	r4, r0
 802a5fc:	f7ff fff0 	bl	802a5e0 <__sinit_lock_acquire>
 802a600:	69a3      	ldr	r3, [r4, #24]
 802a602:	b11b      	cbz	r3, 802a60c <__sinit+0x14>
 802a604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a608:	f7ff bff0 	b.w	802a5ec <__sinit_lock_release>
 802a60c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a610:	6523      	str	r3, [r4, #80]	; 0x50
 802a612:	4b13      	ldr	r3, [pc, #76]	; (802a660 <__sinit+0x68>)
 802a614:	4a13      	ldr	r2, [pc, #76]	; (802a664 <__sinit+0x6c>)
 802a616:	681b      	ldr	r3, [r3, #0]
 802a618:	62a2      	str	r2, [r4, #40]	; 0x28
 802a61a:	42a3      	cmp	r3, r4
 802a61c:	bf04      	itt	eq
 802a61e:	2301      	moveq	r3, #1
 802a620:	61a3      	streq	r3, [r4, #24]
 802a622:	4620      	mov	r0, r4
 802a624:	f000 f820 	bl	802a668 <__sfp>
 802a628:	6060      	str	r0, [r4, #4]
 802a62a:	4620      	mov	r0, r4
 802a62c:	f000 f81c 	bl	802a668 <__sfp>
 802a630:	60a0      	str	r0, [r4, #8]
 802a632:	4620      	mov	r0, r4
 802a634:	f000 f818 	bl	802a668 <__sfp>
 802a638:	2200      	movs	r2, #0
 802a63a:	60e0      	str	r0, [r4, #12]
 802a63c:	2104      	movs	r1, #4
 802a63e:	6860      	ldr	r0, [r4, #4]
 802a640:	f7ff ff82 	bl	802a548 <std>
 802a644:	68a0      	ldr	r0, [r4, #8]
 802a646:	2201      	movs	r2, #1
 802a648:	2109      	movs	r1, #9
 802a64a:	f7ff ff7d 	bl	802a548 <std>
 802a64e:	68e0      	ldr	r0, [r4, #12]
 802a650:	2202      	movs	r2, #2
 802a652:	2112      	movs	r1, #18
 802a654:	f7ff ff78 	bl	802a548 <std>
 802a658:	2301      	movs	r3, #1
 802a65a:	61a3      	str	r3, [r4, #24]
 802a65c:	e7d2      	b.n	802a604 <__sinit+0xc>
 802a65e:	bf00      	nop
 802a660:	0802f794 	.word	0x0802f794
 802a664:	0802a591 	.word	0x0802a591

0802a668 <__sfp>:
 802a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a66a:	4607      	mov	r7, r0
 802a66c:	f7ff ffac 	bl	802a5c8 <__sfp_lock_acquire>
 802a670:	4b1e      	ldr	r3, [pc, #120]	; (802a6ec <__sfp+0x84>)
 802a672:	681e      	ldr	r6, [r3, #0]
 802a674:	69b3      	ldr	r3, [r6, #24]
 802a676:	b913      	cbnz	r3, 802a67e <__sfp+0x16>
 802a678:	4630      	mov	r0, r6
 802a67a:	f7ff ffbd 	bl	802a5f8 <__sinit>
 802a67e:	3648      	adds	r6, #72	; 0x48
 802a680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a684:	3b01      	subs	r3, #1
 802a686:	d503      	bpl.n	802a690 <__sfp+0x28>
 802a688:	6833      	ldr	r3, [r6, #0]
 802a68a:	b30b      	cbz	r3, 802a6d0 <__sfp+0x68>
 802a68c:	6836      	ldr	r6, [r6, #0]
 802a68e:	e7f7      	b.n	802a680 <__sfp+0x18>
 802a690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a694:	b9d5      	cbnz	r5, 802a6cc <__sfp+0x64>
 802a696:	4b16      	ldr	r3, [pc, #88]	; (802a6f0 <__sfp+0x88>)
 802a698:	60e3      	str	r3, [r4, #12]
 802a69a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a69e:	6665      	str	r5, [r4, #100]	; 0x64
 802a6a0:	f7ff f8ee 	bl	8029880 <__retarget_lock_init_recursive>
 802a6a4:	f7ff ff96 	bl	802a5d4 <__sfp_lock_release>
 802a6a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a6ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a6b0:	6025      	str	r5, [r4, #0]
 802a6b2:	61a5      	str	r5, [r4, #24]
 802a6b4:	2208      	movs	r2, #8
 802a6b6:	4629      	mov	r1, r5
 802a6b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a6bc:	f7ff f902 	bl	80298c4 <memset>
 802a6c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a6c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a6c8:	4620      	mov	r0, r4
 802a6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a6cc:	3468      	adds	r4, #104	; 0x68
 802a6ce:	e7d9      	b.n	802a684 <__sfp+0x1c>
 802a6d0:	2104      	movs	r1, #4
 802a6d2:	4638      	mov	r0, r7
 802a6d4:	f7ff ff62 	bl	802a59c <__sfmoreglue>
 802a6d8:	4604      	mov	r4, r0
 802a6da:	6030      	str	r0, [r6, #0]
 802a6dc:	2800      	cmp	r0, #0
 802a6de:	d1d5      	bne.n	802a68c <__sfp+0x24>
 802a6e0:	f7ff ff78 	bl	802a5d4 <__sfp_lock_release>
 802a6e4:	230c      	movs	r3, #12
 802a6e6:	603b      	str	r3, [r7, #0]
 802a6e8:	e7ee      	b.n	802a6c8 <__sfp+0x60>
 802a6ea:	bf00      	nop
 802a6ec:	0802f794 	.word	0x0802f794
 802a6f0:	ffff0001 	.word	0xffff0001

0802a6f4 <_fwalk_reent>:
 802a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a6f8:	4606      	mov	r6, r0
 802a6fa:	4688      	mov	r8, r1
 802a6fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a700:	2700      	movs	r7, #0
 802a702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a706:	f1b9 0901 	subs.w	r9, r9, #1
 802a70a:	d505      	bpl.n	802a718 <_fwalk_reent+0x24>
 802a70c:	6824      	ldr	r4, [r4, #0]
 802a70e:	2c00      	cmp	r4, #0
 802a710:	d1f7      	bne.n	802a702 <_fwalk_reent+0xe>
 802a712:	4638      	mov	r0, r7
 802a714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a718:	89ab      	ldrh	r3, [r5, #12]
 802a71a:	2b01      	cmp	r3, #1
 802a71c:	d907      	bls.n	802a72e <_fwalk_reent+0x3a>
 802a71e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a722:	3301      	adds	r3, #1
 802a724:	d003      	beq.n	802a72e <_fwalk_reent+0x3a>
 802a726:	4629      	mov	r1, r5
 802a728:	4630      	mov	r0, r6
 802a72a:	47c0      	blx	r8
 802a72c:	4307      	orrs	r7, r0
 802a72e:	3568      	adds	r5, #104	; 0x68
 802a730:	e7e9      	b.n	802a706 <_fwalk_reent+0x12>

0802a732 <__swhatbuf_r>:
 802a732:	b570      	push	{r4, r5, r6, lr}
 802a734:	460e      	mov	r6, r1
 802a736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a73a:	2900      	cmp	r1, #0
 802a73c:	b096      	sub	sp, #88	; 0x58
 802a73e:	4614      	mov	r4, r2
 802a740:	461d      	mov	r5, r3
 802a742:	da08      	bge.n	802a756 <__swhatbuf_r+0x24>
 802a744:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a748:	2200      	movs	r2, #0
 802a74a:	602a      	str	r2, [r5, #0]
 802a74c:	061a      	lsls	r2, r3, #24
 802a74e:	d410      	bmi.n	802a772 <__swhatbuf_r+0x40>
 802a750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a754:	e00e      	b.n	802a774 <__swhatbuf_r+0x42>
 802a756:	466a      	mov	r2, sp
 802a758:	f000 fa66 	bl	802ac28 <_fstat_r>
 802a75c:	2800      	cmp	r0, #0
 802a75e:	dbf1      	blt.n	802a744 <__swhatbuf_r+0x12>
 802a760:	9a01      	ldr	r2, [sp, #4]
 802a762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a76a:	425a      	negs	r2, r3
 802a76c:	415a      	adcs	r2, r3
 802a76e:	602a      	str	r2, [r5, #0]
 802a770:	e7ee      	b.n	802a750 <__swhatbuf_r+0x1e>
 802a772:	2340      	movs	r3, #64	; 0x40
 802a774:	2000      	movs	r0, #0
 802a776:	6023      	str	r3, [r4, #0]
 802a778:	b016      	add	sp, #88	; 0x58
 802a77a:	bd70      	pop	{r4, r5, r6, pc}

0802a77c <__smakebuf_r>:
 802a77c:	898b      	ldrh	r3, [r1, #12]
 802a77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a780:	079d      	lsls	r5, r3, #30
 802a782:	4606      	mov	r6, r0
 802a784:	460c      	mov	r4, r1
 802a786:	d507      	bpl.n	802a798 <__smakebuf_r+0x1c>
 802a788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a78c:	6023      	str	r3, [r4, #0]
 802a78e:	6123      	str	r3, [r4, #16]
 802a790:	2301      	movs	r3, #1
 802a792:	6163      	str	r3, [r4, #20]
 802a794:	b002      	add	sp, #8
 802a796:	bd70      	pop	{r4, r5, r6, pc}
 802a798:	ab01      	add	r3, sp, #4
 802a79a:	466a      	mov	r2, sp
 802a79c:	f7ff ffc9 	bl	802a732 <__swhatbuf_r>
 802a7a0:	9900      	ldr	r1, [sp, #0]
 802a7a2:	4605      	mov	r5, r0
 802a7a4:	4630      	mov	r0, r6
 802a7a6:	f7ff f901 	bl	80299ac <_malloc_r>
 802a7aa:	b948      	cbnz	r0, 802a7c0 <__smakebuf_r+0x44>
 802a7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a7b0:	059a      	lsls	r2, r3, #22
 802a7b2:	d4ef      	bmi.n	802a794 <__smakebuf_r+0x18>
 802a7b4:	f023 0303 	bic.w	r3, r3, #3
 802a7b8:	f043 0302 	orr.w	r3, r3, #2
 802a7bc:	81a3      	strh	r3, [r4, #12]
 802a7be:	e7e3      	b.n	802a788 <__smakebuf_r+0xc>
 802a7c0:	4b0d      	ldr	r3, [pc, #52]	; (802a7f8 <__smakebuf_r+0x7c>)
 802a7c2:	62b3      	str	r3, [r6, #40]	; 0x28
 802a7c4:	89a3      	ldrh	r3, [r4, #12]
 802a7c6:	6020      	str	r0, [r4, #0]
 802a7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a7cc:	81a3      	strh	r3, [r4, #12]
 802a7ce:	9b00      	ldr	r3, [sp, #0]
 802a7d0:	6163      	str	r3, [r4, #20]
 802a7d2:	9b01      	ldr	r3, [sp, #4]
 802a7d4:	6120      	str	r0, [r4, #16]
 802a7d6:	b15b      	cbz	r3, 802a7f0 <__smakebuf_r+0x74>
 802a7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a7dc:	4630      	mov	r0, r6
 802a7de:	f000 fa35 	bl	802ac4c <_isatty_r>
 802a7e2:	b128      	cbz	r0, 802a7f0 <__smakebuf_r+0x74>
 802a7e4:	89a3      	ldrh	r3, [r4, #12]
 802a7e6:	f023 0303 	bic.w	r3, r3, #3
 802a7ea:	f043 0301 	orr.w	r3, r3, #1
 802a7ee:	81a3      	strh	r3, [r4, #12]
 802a7f0:	89a0      	ldrh	r0, [r4, #12]
 802a7f2:	4305      	orrs	r5, r0
 802a7f4:	81a5      	strh	r5, [r4, #12]
 802a7f6:	e7cd      	b.n	802a794 <__smakebuf_r+0x18>
 802a7f8:	0802a591 	.word	0x0802a591

0802a7fc <memmove>:
 802a7fc:	4288      	cmp	r0, r1
 802a7fe:	b510      	push	{r4, lr}
 802a800:	eb01 0402 	add.w	r4, r1, r2
 802a804:	d902      	bls.n	802a80c <memmove+0x10>
 802a806:	4284      	cmp	r4, r0
 802a808:	4623      	mov	r3, r4
 802a80a:	d807      	bhi.n	802a81c <memmove+0x20>
 802a80c:	1e43      	subs	r3, r0, #1
 802a80e:	42a1      	cmp	r1, r4
 802a810:	d008      	beq.n	802a824 <memmove+0x28>
 802a812:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a816:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a81a:	e7f8      	b.n	802a80e <memmove+0x12>
 802a81c:	4402      	add	r2, r0
 802a81e:	4601      	mov	r1, r0
 802a820:	428a      	cmp	r2, r1
 802a822:	d100      	bne.n	802a826 <memmove+0x2a>
 802a824:	bd10      	pop	{r4, pc}
 802a826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a82e:	e7f7      	b.n	802a820 <memmove+0x24>

0802a830 <__malloc_lock>:
 802a830:	4801      	ldr	r0, [pc, #4]	; (802a838 <__malloc_lock+0x8>)
 802a832:	f7ff b826 	b.w	8029882 <__retarget_lock_acquire_recursive>
 802a836:	bf00      	nop
 802a838:	2001530d 	.word	0x2001530d

0802a83c <__malloc_unlock>:
 802a83c:	4801      	ldr	r0, [pc, #4]	; (802a844 <__malloc_unlock+0x8>)
 802a83e:	f7ff b822 	b.w	8029886 <__retarget_lock_release_recursive>
 802a842:	bf00      	nop
 802a844:	2001530d 	.word	0x2001530d

0802a848 <_realloc_r>:
 802a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a84c:	4680      	mov	r8, r0
 802a84e:	4614      	mov	r4, r2
 802a850:	460e      	mov	r6, r1
 802a852:	b921      	cbnz	r1, 802a85e <_realloc_r+0x16>
 802a854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a858:	4611      	mov	r1, r2
 802a85a:	f7ff b8a7 	b.w	80299ac <_malloc_r>
 802a85e:	b92a      	cbnz	r2, 802a86c <_realloc_r+0x24>
 802a860:	f7ff f838 	bl	80298d4 <_free_r>
 802a864:	4625      	mov	r5, r4
 802a866:	4628      	mov	r0, r5
 802a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a86c:	f000 fa10 	bl	802ac90 <_malloc_usable_size_r>
 802a870:	4284      	cmp	r4, r0
 802a872:	4607      	mov	r7, r0
 802a874:	d802      	bhi.n	802a87c <_realloc_r+0x34>
 802a876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a87a:	d812      	bhi.n	802a8a2 <_realloc_r+0x5a>
 802a87c:	4621      	mov	r1, r4
 802a87e:	4640      	mov	r0, r8
 802a880:	f7ff f894 	bl	80299ac <_malloc_r>
 802a884:	4605      	mov	r5, r0
 802a886:	2800      	cmp	r0, #0
 802a888:	d0ed      	beq.n	802a866 <_realloc_r+0x1e>
 802a88a:	42bc      	cmp	r4, r7
 802a88c:	4622      	mov	r2, r4
 802a88e:	4631      	mov	r1, r6
 802a890:	bf28      	it	cs
 802a892:	463a      	movcs	r2, r7
 802a894:	f7ff f808 	bl	80298a8 <memcpy>
 802a898:	4631      	mov	r1, r6
 802a89a:	4640      	mov	r0, r8
 802a89c:	f7ff f81a 	bl	80298d4 <_free_r>
 802a8a0:	e7e1      	b.n	802a866 <_realloc_r+0x1e>
 802a8a2:	4635      	mov	r5, r6
 802a8a4:	e7df      	b.n	802a866 <_realloc_r+0x1e>

0802a8a6 <__ssputs_r>:
 802a8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a8aa:	688e      	ldr	r6, [r1, #8]
 802a8ac:	429e      	cmp	r6, r3
 802a8ae:	4682      	mov	sl, r0
 802a8b0:	460c      	mov	r4, r1
 802a8b2:	4690      	mov	r8, r2
 802a8b4:	461f      	mov	r7, r3
 802a8b6:	d838      	bhi.n	802a92a <__ssputs_r+0x84>
 802a8b8:	898a      	ldrh	r2, [r1, #12]
 802a8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a8be:	d032      	beq.n	802a926 <__ssputs_r+0x80>
 802a8c0:	6825      	ldr	r5, [r4, #0]
 802a8c2:	6909      	ldr	r1, [r1, #16]
 802a8c4:	eba5 0901 	sub.w	r9, r5, r1
 802a8c8:	6965      	ldr	r5, [r4, #20]
 802a8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a8ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a8d2:	3301      	adds	r3, #1
 802a8d4:	444b      	add	r3, r9
 802a8d6:	106d      	asrs	r5, r5, #1
 802a8d8:	429d      	cmp	r5, r3
 802a8da:	bf38      	it	cc
 802a8dc:	461d      	movcc	r5, r3
 802a8de:	0553      	lsls	r3, r2, #21
 802a8e0:	d531      	bpl.n	802a946 <__ssputs_r+0xa0>
 802a8e2:	4629      	mov	r1, r5
 802a8e4:	f7ff f862 	bl	80299ac <_malloc_r>
 802a8e8:	4606      	mov	r6, r0
 802a8ea:	b950      	cbnz	r0, 802a902 <__ssputs_r+0x5c>
 802a8ec:	230c      	movs	r3, #12
 802a8ee:	f8ca 3000 	str.w	r3, [sl]
 802a8f2:	89a3      	ldrh	r3, [r4, #12]
 802a8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a8f8:	81a3      	strh	r3, [r4, #12]
 802a8fa:	f04f 30ff 	mov.w	r0, #4294967295
 802a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a902:	6921      	ldr	r1, [r4, #16]
 802a904:	464a      	mov	r2, r9
 802a906:	f7fe ffcf 	bl	80298a8 <memcpy>
 802a90a:	89a3      	ldrh	r3, [r4, #12]
 802a90c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a914:	81a3      	strh	r3, [r4, #12]
 802a916:	6126      	str	r6, [r4, #16]
 802a918:	6165      	str	r5, [r4, #20]
 802a91a:	444e      	add	r6, r9
 802a91c:	eba5 0509 	sub.w	r5, r5, r9
 802a920:	6026      	str	r6, [r4, #0]
 802a922:	60a5      	str	r5, [r4, #8]
 802a924:	463e      	mov	r6, r7
 802a926:	42be      	cmp	r6, r7
 802a928:	d900      	bls.n	802a92c <__ssputs_r+0x86>
 802a92a:	463e      	mov	r6, r7
 802a92c:	6820      	ldr	r0, [r4, #0]
 802a92e:	4632      	mov	r2, r6
 802a930:	4641      	mov	r1, r8
 802a932:	f7ff ff63 	bl	802a7fc <memmove>
 802a936:	68a3      	ldr	r3, [r4, #8]
 802a938:	1b9b      	subs	r3, r3, r6
 802a93a:	60a3      	str	r3, [r4, #8]
 802a93c:	6823      	ldr	r3, [r4, #0]
 802a93e:	4433      	add	r3, r6
 802a940:	6023      	str	r3, [r4, #0]
 802a942:	2000      	movs	r0, #0
 802a944:	e7db      	b.n	802a8fe <__ssputs_r+0x58>
 802a946:	462a      	mov	r2, r5
 802a948:	f7ff ff7e 	bl	802a848 <_realloc_r>
 802a94c:	4606      	mov	r6, r0
 802a94e:	2800      	cmp	r0, #0
 802a950:	d1e1      	bne.n	802a916 <__ssputs_r+0x70>
 802a952:	6921      	ldr	r1, [r4, #16]
 802a954:	4650      	mov	r0, sl
 802a956:	f7fe ffbd 	bl	80298d4 <_free_r>
 802a95a:	e7c7      	b.n	802a8ec <__ssputs_r+0x46>

0802a95c <_svfiprintf_r>:
 802a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a960:	4698      	mov	r8, r3
 802a962:	898b      	ldrh	r3, [r1, #12]
 802a964:	061b      	lsls	r3, r3, #24
 802a966:	b09d      	sub	sp, #116	; 0x74
 802a968:	4607      	mov	r7, r0
 802a96a:	460d      	mov	r5, r1
 802a96c:	4614      	mov	r4, r2
 802a96e:	d50e      	bpl.n	802a98e <_svfiprintf_r+0x32>
 802a970:	690b      	ldr	r3, [r1, #16]
 802a972:	b963      	cbnz	r3, 802a98e <_svfiprintf_r+0x32>
 802a974:	2140      	movs	r1, #64	; 0x40
 802a976:	f7ff f819 	bl	80299ac <_malloc_r>
 802a97a:	6028      	str	r0, [r5, #0]
 802a97c:	6128      	str	r0, [r5, #16]
 802a97e:	b920      	cbnz	r0, 802a98a <_svfiprintf_r+0x2e>
 802a980:	230c      	movs	r3, #12
 802a982:	603b      	str	r3, [r7, #0]
 802a984:	f04f 30ff 	mov.w	r0, #4294967295
 802a988:	e0d1      	b.n	802ab2e <_svfiprintf_r+0x1d2>
 802a98a:	2340      	movs	r3, #64	; 0x40
 802a98c:	616b      	str	r3, [r5, #20]
 802a98e:	2300      	movs	r3, #0
 802a990:	9309      	str	r3, [sp, #36]	; 0x24
 802a992:	2320      	movs	r3, #32
 802a994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a998:	f8cd 800c 	str.w	r8, [sp, #12]
 802a99c:	2330      	movs	r3, #48	; 0x30
 802a99e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802ab48 <_svfiprintf_r+0x1ec>
 802a9a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a9a6:	f04f 0901 	mov.w	r9, #1
 802a9aa:	4623      	mov	r3, r4
 802a9ac:	469a      	mov	sl, r3
 802a9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a9b2:	b10a      	cbz	r2, 802a9b8 <_svfiprintf_r+0x5c>
 802a9b4:	2a25      	cmp	r2, #37	; 0x25
 802a9b6:	d1f9      	bne.n	802a9ac <_svfiprintf_r+0x50>
 802a9b8:	ebba 0b04 	subs.w	fp, sl, r4
 802a9bc:	d00b      	beq.n	802a9d6 <_svfiprintf_r+0x7a>
 802a9be:	465b      	mov	r3, fp
 802a9c0:	4622      	mov	r2, r4
 802a9c2:	4629      	mov	r1, r5
 802a9c4:	4638      	mov	r0, r7
 802a9c6:	f7ff ff6e 	bl	802a8a6 <__ssputs_r>
 802a9ca:	3001      	adds	r0, #1
 802a9cc:	f000 80aa 	beq.w	802ab24 <_svfiprintf_r+0x1c8>
 802a9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a9d2:	445a      	add	r2, fp
 802a9d4:	9209      	str	r2, [sp, #36]	; 0x24
 802a9d6:	f89a 3000 	ldrb.w	r3, [sl]
 802a9da:	2b00      	cmp	r3, #0
 802a9dc:	f000 80a2 	beq.w	802ab24 <_svfiprintf_r+0x1c8>
 802a9e0:	2300      	movs	r3, #0
 802a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 802a9e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a9ea:	f10a 0a01 	add.w	sl, sl, #1
 802a9ee:	9304      	str	r3, [sp, #16]
 802a9f0:	9307      	str	r3, [sp, #28]
 802a9f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a9f6:	931a      	str	r3, [sp, #104]	; 0x68
 802a9f8:	4654      	mov	r4, sl
 802a9fa:	2205      	movs	r2, #5
 802a9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa00:	4851      	ldr	r0, [pc, #324]	; (802ab48 <_svfiprintf_r+0x1ec>)
 802aa02:	f7d5 fc05 	bl	8000210 <memchr>
 802aa06:	9a04      	ldr	r2, [sp, #16]
 802aa08:	b9d8      	cbnz	r0, 802aa42 <_svfiprintf_r+0xe6>
 802aa0a:	06d0      	lsls	r0, r2, #27
 802aa0c:	bf44      	itt	mi
 802aa0e:	2320      	movmi	r3, #32
 802aa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aa14:	0711      	lsls	r1, r2, #28
 802aa16:	bf44      	itt	mi
 802aa18:	232b      	movmi	r3, #43	; 0x2b
 802aa1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aa1e:	f89a 3000 	ldrb.w	r3, [sl]
 802aa22:	2b2a      	cmp	r3, #42	; 0x2a
 802aa24:	d015      	beq.n	802aa52 <_svfiprintf_r+0xf6>
 802aa26:	9a07      	ldr	r2, [sp, #28]
 802aa28:	4654      	mov	r4, sl
 802aa2a:	2000      	movs	r0, #0
 802aa2c:	f04f 0c0a 	mov.w	ip, #10
 802aa30:	4621      	mov	r1, r4
 802aa32:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aa36:	3b30      	subs	r3, #48	; 0x30
 802aa38:	2b09      	cmp	r3, #9
 802aa3a:	d94e      	bls.n	802aada <_svfiprintf_r+0x17e>
 802aa3c:	b1b0      	cbz	r0, 802aa6c <_svfiprintf_r+0x110>
 802aa3e:	9207      	str	r2, [sp, #28]
 802aa40:	e014      	b.n	802aa6c <_svfiprintf_r+0x110>
 802aa42:	eba0 0308 	sub.w	r3, r0, r8
 802aa46:	fa09 f303 	lsl.w	r3, r9, r3
 802aa4a:	4313      	orrs	r3, r2
 802aa4c:	9304      	str	r3, [sp, #16]
 802aa4e:	46a2      	mov	sl, r4
 802aa50:	e7d2      	b.n	802a9f8 <_svfiprintf_r+0x9c>
 802aa52:	9b03      	ldr	r3, [sp, #12]
 802aa54:	1d19      	adds	r1, r3, #4
 802aa56:	681b      	ldr	r3, [r3, #0]
 802aa58:	9103      	str	r1, [sp, #12]
 802aa5a:	2b00      	cmp	r3, #0
 802aa5c:	bfbb      	ittet	lt
 802aa5e:	425b      	neglt	r3, r3
 802aa60:	f042 0202 	orrlt.w	r2, r2, #2
 802aa64:	9307      	strge	r3, [sp, #28]
 802aa66:	9307      	strlt	r3, [sp, #28]
 802aa68:	bfb8      	it	lt
 802aa6a:	9204      	strlt	r2, [sp, #16]
 802aa6c:	7823      	ldrb	r3, [r4, #0]
 802aa6e:	2b2e      	cmp	r3, #46	; 0x2e
 802aa70:	d10c      	bne.n	802aa8c <_svfiprintf_r+0x130>
 802aa72:	7863      	ldrb	r3, [r4, #1]
 802aa74:	2b2a      	cmp	r3, #42	; 0x2a
 802aa76:	d135      	bne.n	802aae4 <_svfiprintf_r+0x188>
 802aa78:	9b03      	ldr	r3, [sp, #12]
 802aa7a:	1d1a      	adds	r2, r3, #4
 802aa7c:	681b      	ldr	r3, [r3, #0]
 802aa7e:	9203      	str	r2, [sp, #12]
 802aa80:	2b00      	cmp	r3, #0
 802aa82:	bfb8      	it	lt
 802aa84:	f04f 33ff 	movlt.w	r3, #4294967295
 802aa88:	3402      	adds	r4, #2
 802aa8a:	9305      	str	r3, [sp, #20]
 802aa8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ab58 <_svfiprintf_r+0x1fc>
 802aa90:	7821      	ldrb	r1, [r4, #0]
 802aa92:	2203      	movs	r2, #3
 802aa94:	4650      	mov	r0, sl
 802aa96:	f7d5 fbbb 	bl	8000210 <memchr>
 802aa9a:	b140      	cbz	r0, 802aaae <_svfiprintf_r+0x152>
 802aa9c:	2340      	movs	r3, #64	; 0x40
 802aa9e:	eba0 000a 	sub.w	r0, r0, sl
 802aaa2:	fa03 f000 	lsl.w	r0, r3, r0
 802aaa6:	9b04      	ldr	r3, [sp, #16]
 802aaa8:	4303      	orrs	r3, r0
 802aaaa:	3401      	adds	r4, #1
 802aaac:	9304      	str	r3, [sp, #16]
 802aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aab2:	4826      	ldr	r0, [pc, #152]	; (802ab4c <_svfiprintf_r+0x1f0>)
 802aab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802aab8:	2206      	movs	r2, #6
 802aaba:	f7d5 fba9 	bl	8000210 <memchr>
 802aabe:	2800      	cmp	r0, #0
 802aac0:	d038      	beq.n	802ab34 <_svfiprintf_r+0x1d8>
 802aac2:	4b23      	ldr	r3, [pc, #140]	; (802ab50 <_svfiprintf_r+0x1f4>)
 802aac4:	bb1b      	cbnz	r3, 802ab0e <_svfiprintf_r+0x1b2>
 802aac6:	9b03      	ldr	r3, [sp, #12]
 802aac8:	3307      	adds	r3, #7
 802aaca:	f023 0307 	bic.w	r3, r3, #7
 802aace:	3308      	adds	r3, #8
 802aad0:	9303      	str	r3, [sp, #12]
 802aad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aad4:	4433      	add	r3, r6
 802aad6:	9309      	str	r3, [sp, #36]	; 0x24
 802aad8:	e767      	b.n	802a9aa <_svfiprintf_r+0x4e>
 802aada:	fb0c 3202 	mla	r2, ip, r2, r3
 802aade:	460c      	mov	r4, r1
 802aae0:	2001      	movs	r0, #1
 802aae2:	e7a5      	b.n	802aa30 <_svfiprintf_r+0xd4>
 802aae4:	2300      	movs	r3, #0
 802aae6:	3401      	adds	r4, #1
 802aae8:	9305      	str	r3, [sp, #20]
 802aaea:	4619      	mov	r1, r3
 802aaec:	f04f 0c0a 	mov.w	ip, #10
 802aaf0:	4620      	mov	r0, r4
 802aaf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802aaf6:	3a30      	subs	r2, #48	; 0x30
 802aaf8:	2a09      	cmp	r2, #9
 802aafa:	d903      	bls.n	802ab04 <_svfiprintf_r+0x1a8>
 802aafc:	2b00      	cmp	r3, #0
 802aafe:	d0c5      	beq.n	802aa8c <_svfiprintf_r+0x130>
 802ab00:	9105      	str	r1, [sp, #20]
 802ab02:	e7c3      	b.n	802aa8c <_svfiprintf_r+0x130>
 802ab04:	fb0c 2101 	mla	r1, ip, r1, r2
 802ab08:	4604      	mov	r4, r0
 802ab0a:	2301      	movs	r3, #1
 802ab0c:	e7f0      	b.n	802aaf0 <_svfiprintf_r+0x194>
 802ab0e:	ab03      	add	r3, sp, #12
 802ab10:	9300      	str	r3, [sp, #0]
 802ab12:	462a      	mov	r2, r5
 802ab14:	4b0f      	ldr	r3, [pc, #60]	; (802ab54 <_svfiprintf_r+0x1f8>)
 802ab16:	a904      	add	r1, sp, #16
 802ab18:	4638      	mov	r0, r7
 802ab1a:	f3af 8000 	nop.w
 802ab1e:	1c42      	adds	r2, r0, #1
 802ab20:	4606      	mov	r6, r0
 802ab22:	d1d6      	bne.n	802aad2 <_svfiprintf_r+0x176>
 802ab24:	89ab      	ldrh	r3, [r5, #12]
 802ab26:	065b      	lsls	r3, r3, #25
 802ab28:	f53f af2c 	bmi.w	802a984 <_svfiprintf_r+0x28>
 802ab2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ab2e:	b01d      	add	sp, #116	; 0x74
 802ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab34:	ab03      	add	r3, sp, #12
 802ab36:	9300      	str	r3, [sp, #0]
 802ab38:	462a      	mov	r2, r5
 802ab3a:	4b06      	ldr	r3, [pc, #24]	; (802ab54 <_svfiprintf_r+0x1f8>)
 802ab3c:	a904      	add	r1, sp, #16
 802ab3e:	4638      	mov	r0, r7
 802ab40:	f7ff f970 	bl	8029e24 <_printf_i>
 802ab44:	e7eb      	b.n	802ab1e <_svfiprintf_r+0x1c2>
 802ab46:	bf00      	nop
 802ab48:	0802f798 	.word	0x0802f798
 802ab4c:	0802f7a2 	.word	0x0802f7a2
 802ab50:	00000000 	.word	0x00000000
 802ab54:	0802a8a7 	.word	0x0802a8a7
 802ab58:	0802f79e 	.word	0x0802f79e

0802ab5c <__sread>:
 802ab5c:	b510      	push	{r4, lr}
 802ab5e:	460c      	mov	r4, r1
 802ab60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ab64:	f000 f89c 	bl	802aca0 <_read_r>
 802ab68:	2800      	cmp	r0, #0
 802ab6a:	bfab      	itete	ge
 802ab6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ab6e:	89a3      	ldrhlt	r3, [r4, #12]
 802ab70:	181b      	addge	r3, r3, r0
 802ab72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ab76:	bfac      	ite	ge
 802ab78:	6563      	strge	r3, [r4, #84]	; 0x54
 802ab7a:	81a3      	strhlt	r3, [r4, #12]
 802ab7c:	bd10      	pop	{r4, pc}

0802ab7e <__swrite>:
 802ab7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ab82:	461f      	mov	r7, r3
 802ab84:	898b      	ldrh	r3, [r1, #12]
 802ab86:	05db      	lsls	r3, r3, #23
 802ab88:	4605      	mov	r5, r0
 802ab8a:	460c      	mov	r4, r1
 802ab8c:	4616      	mov	r6, r2
 802ab8e:	d505      	bpl.n	802ab9c <__swrite+0x1e>
 802ab90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ab94:	2302      	movs	r3, #2
 802ab96:	2200      	movs	r2, #0
 802ab98:	f000 f868 	bl	802ac6c <_lseek_r>
 802ab9c:	89a3      	ldrh	r3, [r4, #12]
 802ab9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802aba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802aba6:	81a3      	strh	r3, [r4, #12]
 802aba8:	4632      	mov	r2, r6
 802abaa:	463b      	mov	r3, r7
 802abac:	4628      	mov	r0, r5
 802abae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802abb2:	f000 b817 	b.w	802abe4 <_write_r>

0802abb6 <__sseek>:
 802abb6:	b510      	push	{r4, lr}
 802abb8:	460c      	mov	r4, r1
 802abba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802abbe:	f000 f855 	bl	802ac6c <_lseek_r>
 802abc2:	1c43      	adds	r3, r0, #1
 802abc4:	89a3      	ldrh	r3, [r4, #12]
 802abc6:	bf15      	itete	ne
 802abc8:	6560      	strne	r0, [r4, #84]	; 0x54
 802abca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802abce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802abd2:	81a3      	strheq	r3, [r4, #12]
 802abd4:	bf18      	it	ne
 802abd6:	81a3      	strhne	r3, [r4, #12]
 802abd8:	bd10      	pop	{r4, pc}

0802abda <__sclose>:
 802abda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802abde:	f000 b813 	b.w	802ac08 <_close_r>
	...

0802abe4 <_write_r>:
 802abe4:	b538      	push	{r3, r4, r5, lr}
 802abe6:	4d07      	ldr	r5, [pc, #28]	; (802ac04 <_write_r+0x20>)
 802abe8:	4604      	mov	r4, r0
 802abea:	4608      	mov	r0, r1
 802abec:	4611      	mov	r1, r2
 802abee:	2200      	movs	r2, #0
 802abf0:	602a      	str	r2, [r5, #0]
 802abf2:	461a      	mov	r2, r3
 802abf4:	f7d6 fea6 	bl	8001944 <_write>
 802abf8:	1c43      	adds	r3, r0, #1
 802abfa:	d102      	bne.n	802ac02 <_write_r+0x1e>
 802abfc:	682b      	ldr	r3, [r5, #0]
 802abfe:	b103      	cbz	r3, 802ac02 <_write_r+0x1e>
 802ac00:	6023      	str	r3, [r4, #0]
 802ac02:	bd38      	pop	{r3, r4, r5, pc}
 802ac04:	200154b0 	.word	0x200154b0

0802ac08 <_close_r>:
 802ac08:	b538      	push	{r3, r4, r5, lr}
 802ac0a:	4d06      	ldr	r5, [pc, #24]	; (802ac24 <_close_r+0x1c>)
 802ac0c:	2300      	movs	r3, #0
 802ac0e:	4604      	mov	r4, r0
 802ac10:	4608      	mov	r0, r1
 802ac12:	602b      	str	r3, [r5, #0]
 802ac14:	f7d6 fea4 	bl	8001960 <_close>
 802ac18:	1c43      	adds	r3, r0, #1
 802ac1a:	d102      	bne.n	802ac22 <_close_r+0x1a>
 802ac1c:	682b      	ldr	r3, [r5, #0]
 802ac1e:	b103      	cbz	r3, 802ac22 <_close_r+0x1a>
 802ac20:	6023      	str	r3, [r4, #0]
 802ac22:	bd38      	pop	{r3, r4, r5, pc}
 802ac24:	200154b0 	.word	0x200154b0

0802ac28 <_fstat_r>:
 802ac28:	b538      	push	{r3, r4, r5, lr}
 802ac2a:	4d07      	ldr	r5, [pc, #28]	; (802ac48 <_fstat_r+0x20>)
 802ac2c:	2300      	movs	r3, #0
 802ac2e:	4604      	mov	r4, r0
 802ac30:	4608      	mov	r0, r1
 802ac32:	4611      	mov	r1, r2
 802ac34:	602b      	str	r3, [r5, #0]
 802ac36:	f7d6 fe96 	bl	8001966 <_fstat>
 802ac3a:	1c43      	adds	r3, r0, #1
 802ac3c:	d102      	bne.n	802ac44 <_fstat_r+0x1c>
 802ac3e:	682b      	ldr	r3, [r5, #0]
 802ac40:	b103      	cbz	r3, 802ac44 <_fstat_r+0x1c>
 802ac42:	6023      	str	r3, [r4, #0]
 802ac44:	bd38      	pop	{r3, r4, r5, pc}
 802ac46:	bf00      	nop
 802ac48:	200154b0 	.word	0x200154b0

0802ac4c <_isatty_r>:
 802ac4c:	b538      	push	{r3, r4, r5, lr}
 802ac4e:	4d06      	ldr	r5, [pc, #24]	; (802ac68 <_isatty_r+0x1c>)
 802ac50:	2300      	movs	r3, #0
 802ac52:	4604      	mov	r4, r0
 802ac54:	4608      	mov	r0, r1
 802ac56:	602b      	str	r3, [r5, #0]
 802ac58:	f7d6 fe8a 	bl	8001970 <_isatty>
 802ac5c:	1c43      	adds	r3, r0, #1
 802ac5e:	d102      	bne.n	802ac66 <_isatty_r+0x1a>
 802ac60:	682b      	ldr	r3, [r5, #0]
 802ac62:	b103      	cbz	r3, 802ac66 <_isatty_r+0x1a>
 802ac64:	6023      	str	r3, [r4, #0]
 802ac66:	bd38      	pop	{r3, r4, r5, pc}
 802ac68:	200154b0 	.word	0x200154b0

0802ac6c <_lseek_r>:
 802ac6c:	b538      	push	{r3, r4, r5, lr}
 802ac6e:	4d07      	ldr	r5, [pc, #28]	; (802ac8c <_lseek_r+0x20>)
 802ac70:	4604      	mov	r4, r0
 802ac72:	4608      	mov	r0, r1
 802ac74:	4611      	mov	r1, r2
 802ac76:	2200      	movs	r2, #0
 802ac78:	602a      	str	r2, [r5, #0]
 802ac7a:	461a      	mov	r2, r3
 802ac7c:	f7d6 fe7a 	bl	8001974 <_lseek>
 802ac80:	1c43      	adds	r3, r0, #1
 802ac82:	d102      	bne.n	802ac8a <_lseek_r+0x1e>
 802ac84:	682b      	ldr	r3, [r5, #0]
 802ac86:	b103      	cbz	r3, 802ac8a <_lseek_r+0x1e>
 802ac88:	6023      	str	r3, [r4, #0]
 802ac8a:	bd38      	pop	{r3, r4, r5, pc}
 802ac8c:	200154b0 	.word	0x200154b0

0802ac90 <_malloc_usable_size_r>:
 802ac90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ac94:	1f18      	subs	r0, r3, #4
 802ac96:	2b00      	cmp	r3, #0
 802ac98:	bfbc      	itt	lt
 802ac9a:	580b      	ldrlt	r3, [r1, r0]
 802ac9c:	18c0      	addlt	r0, r0, r3
 802ac9e:	4770      	bx	lr

0802aca0 <_read_r>:
 802aca0:	b538      	push	{r3, r4, r5, lr}
 802aca2:	4d07      	ldr	r5, [pc, #28]	; (802acc0 <_read_r+0x20>)
 802aca4:	4604      	mov	r4, r0
 802aca6:	4608      	mov	r0, r1
 802aca8:	4611      	mov	r1, r2
 802acaa:	2200      	movs	r2, #0
 802acac:	602a      	str	r2, [r5, #0]
 802acae:	461a      	mov	r2, r3
 802acb0:	f7d6 fe3a 	bl	8001928 <_read>
 802acb4:	1c43      	adds	r3, r0, #1
 802acb6:	d102      	bne.n	802acbe <_read_r+0x1e>
 802acb8:	682b      	ldr	r3, [r5, #0]
 802acba:	b103      	cbz	r3, 802acbe <_read_r+0x1e>
 802acbc:	6023      	str	r3, [r4, #0]
 802acbe:	bd38      	pop	{r3, r4, r5, pc}
 802acc0:	200154b0 	.word	0x200154b0

0802acc4 <_init>:
 802acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802acc6:	bf00      	nop
 802acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802acca:	bc08      	pop	{r3}
 802accc:	469e      	mov	lr, r3
 802acce:	4770      	bx	lr

0802acd0 <_fini>:
 802acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802acd2:	bf00      	nop
 802acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802acd6:	bc08      	pop	{r3}
 802acd8:	469e      	mov	lr, r3
 802acda:	4770      	bx	lr
